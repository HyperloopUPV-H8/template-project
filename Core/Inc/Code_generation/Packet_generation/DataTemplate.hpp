#pragma once
#include "ST-LIB.hpp"

//Data packets for {{board}} -AUTOGENERATED CODE, DO NOT MODIFY-
class DataPackets{
    public:
    {% for enum in enums %}enum class {{enum.name}}:uint8_t
    {
    {% for value in enum["values"] %}{{value}}={{loop.index0}}{%if not loop.last%},{%endif%}
    {% endfor %}};

    {%endfor %}

    private:
        inline static uint32_t id{0};
    public:
        {%for packet in packets%}static inline HeapPacket* {{packet.name}}{};
        {% endfor %}

        {% for socket in sockets %}static inline {{socket.type}}* {{socket.name}} = nullptr;
        {% endfor %}
        
    DataPackets({%for value in data %}{{value.type}} &{{value.name}}{%if not loop.last%},{%endif%}{%endfor%})
{   
    {% for socket in ServerSockets%}{{socket.name}} = new ServerSocket("{{socket.board_ip}}",{{socket.port}});
    {% endfor %}
    {% for socket in DatagramSockets%}{{socket.name}} = new DatagramSocket("{{socket.board_ip}}",{{socket.port}},"{{socket.remote_ip}}",{{socket.port}});
    {% endfor %}
    {% for socket in Sockets%}{{socket.name}} = new Socket("{{socket.board_ip}}",{{socket.local_port}},"{{socket.remote_ip}}",{{socket.remote_port}});
    {% endfor %}
    {% for packet in packets %}{{packet.name}} = new HeapPacket(static_cast<uint16_t>({{packet.id}}){% if packet.data%},{{packet.data}}{% endif%});

    {% endfor %}
    {%for packet in sending_packets %}Time::register_low_precision_alarm({{packet.period}},+[](){
        {% if packet.name is string %} DataPackets::{{packet.socket}}->send_packet(*DataPackets::{{packet.name}});
        {%else%}
        {%for name in packet.name%}DataPackets::{{packet.socket}}->send_packet(*{{name}});
        {%endfor%}
        {% endif %}
    });
    {%endfor%}


}
};