#pragma once
#include "ST-LIB.hpp"
using namespace std::chrono_literals;

// AUTOGENERATED CODE, DO NOT EDIT MANUALLY

class Example{

    public:

    static bool from_1_to_2();
    static bool from_1_to_2();
    static bool from_1_to_nested_1();
    static void enter_action_1();
    static void enter_action_2();
    static void enter_action_3();
    static void enter_action_4();
    static void low_precision_action();
    static void low_precision_action();
    static void mid_precision_action_to_nested_state();
    static void mid_precision_action_to_nested_state();
    static void high_precision_action_with_description();
    static void high_precision_action_with_description();
    static void exit_action_1();
    static void exit_action_2();

    StateMachine Example_State_Machine;
    StateMachine Nested_State_Machine;

    enum ExampleStates {
        NAME_1,
        NAME_2,
    };

    enum Nested{
        NESTED_NAME_1,
        NESTED_NAME_2,
    };

    Example(){

        Example_State_Machine = StateMachine(ExampleStates::NAME_1);

        Nested_State_Machine = StateMachine(Nested::NESTED_NAME_1);
        Example_State_Machine.add_state_machine(Nested_State_Machine, ExampleStates::NAME_1);
        Nested_State_Machine.add_state(Nested::NESTED_NAME_2);

        Example_State_Machine.add_state(ExampleStates::NAME_2);

        Example_State_Machine.add_transition(ExampleStates::NAME_1, ExampleStates::NAME_2, from_1_to_2);
        // Transitioning from 1 to 2
        Example_State_Machine.add_transition(ExampleStates::NAME_1, ExampleStates::NAME_2, from_1_to_2);
        Example_State_Machine.add_transition(ExampleStates::NAME_1, Nested::NESTED_NAME_1, from_1_to_nested_1);

        Example_State_Machine.add_enter_action(enter_action_1, ExampleStates::NAME_1);
        Example_State_Machine.add_enter_action(enter_action_2, ExampleStates::NAME_1);
        // Description of enter_action_3
        Example_State_Machine.add_enter_action(enter_action_3, ExampleStates::NAME_2);
        Example_State_Machine.add_enter_action(enter_action_4, ExampleStates::NAME_2);
        Example_State_Machine.add_low_precision_cyclic_action(low_precision_action, 30ms, ExampleStates::NAME_1);
        Example_State_Machine.add_low_precision_cyclic_action(low_precision_action, 30ms, ExampleStates::NAME_2);
        Example_State_Machine.add_mid_precision_cyclic_action(mid_precision_action_to_nested_state, 60ms, ExampleStates::NAME_1);
        Example_State_Machine.add_mid_precision_cyclic_action(mid_precision_action_to_nested_state, 60ms, Nested::NESTED_NAME_1);
        // Cyclic action example with description
        Example_State_Machine.add_high_precision_cyclic_action(high_precision_action_with_description, 90ms, ExampleStates::NAME_1);
        // Cyclic action example with description
        Example_State_Machine.add_high_precision_cyclic_action(high_precision_action_with_description, 90ms, ExampleStates::NAME_2);
        Example_State_Machine.add_exit_action(exit_action_1, Nested::NESTED_NAME_2);
        Example_State_Machine.add_exit_action(exit_action_2, Nested::NESTED_NAME_2);

    }

};