#pragma once
#include "ST-LIB.hpp"

//Order packets for VCU -AUTOGENERATED CODE, DO NOT MODIFY-
class OrderPackets{
    enum class test_speed_control_direction:uint8_t{
    FORWARD=0,
    BACKWARD=1
    };
    

    bool propagate_fault_callback();
    bool start_charging_obccu_callback();
    bool stop_charging_obccu_callback();
    bool open_contactors_obccu_callback();
    bool close_contactors_obccu_callback();
    bool brake_callback();
    bool unbrake_callback();
    bool set_regulator_pressure_callback();
    bool disable_emergency_tape_callback();
    bool enable_emergency_tape_callback();
    bool reset_vcu_callback();
    bool test_pwm_callback();
    bool test_current_control_callback();
    bool set_reset_on_callback();
    bool set_reset_off_callback();
    bool start_levitation_control_callback();
    bool start_vertical_levitation_callback();
    bool stop_levitation_callback();
    bool stick_down_callback();
    bool landing_callback();
    bool start_horizontal_levitation_callback();
    bool enter_testing_mode_callback();
    bool exit_testing_mode_callback();
    bool manual_zeroing_callback();
    bool set_stable_levitation_on_callback();
    bool set_stable_levitation_off_callback();
    bool set_rgb_color_callback();
    bool turn_on_party_callback();
    bool turn_off_party_callback();
    bool turn_on_pump_callback();
    bool turn_off_pump_callback();
    bool discharge_dclink_callback();
    bool change_position_references_callback();
    bool start_vf_control_callback();
    bool CRUISING_DEMONSTRATION_callback();
    

    private:
        constexpr static size_t size=35;
        uint32_t id{0};
    public:
        std::array<StackOrder*,size> packets; 
        StackOrder* propagate_fault;
        StackOrder* start_charging_obccu;
        StackOrder* stop_charging_obccu;
        StackOrder* open_contactors_obccu;
        StackOrder* close_contactors_obccu;
        StackOrder* brake;
        StackOrder* unbrake;
        StackOrder* set_regulator_pressure;
        StackOrder* disable_emergency_tape;
        StackOrder* enable_emergency_tape;
        StackOrder* reset_vcu;
        StackOrder* test_pwm;
        StackOrder* test_current_control;
        StackOrder* set_reset_on;
        StackOrder* set_reset_off;
        StackOrder* start_levitation_control;
        StackOrder* start_vertical_levitation;
        StackOrder* stop_levitation;
        StackOrder* stick_down;
        StackOrder* landing;
        StackOrder* start_horizontal_levitation;
        StackOrder* enter_testing_mode;
        StackOrder* exit_testing_mode;
        StackOrder* manual_zeroing;
        StackOrder* set_stable_levitation_on;
        StackOrder* set_stable_levitation_off;
        StackOrder* set_rgb_color;
        StackOrder* turn_on_party;
        StackOrder* turn_off_party;
        StackOrder* turn_on_pump;
        StackOrder* turn_off_pump;
        StackOrder* discharge_dclink;
        StackOrder* change_position_references;
        StackOrder* start_vf_control;
        StackOrder* CRUISING_DEMONSTRATION;
        
        
    OrderPackets(float32 &new_reference_pressure,uint16_t &ldu_id,float32 &pwm_duty_cycle,uint16_t &ldu_id,float32 &lcu_desired_current,uint16_t &ldu_buffer_id,uint16_t &ldu_buffer_id,float32 &lcu_desired_distance,float32 &lcu_desired_distance,float64 &lower_position_limit,float64 &upper_position_limit,float32 &target_test_speed_control_kmh,test_speed_control_direction &test_speed_control_direction,float64 &lower_position_limit,float64 &upper_position_limit}})
{

    propagate_fault=new StackOrder(0,propagate_fault_callback);
    packets[id]=propagate_fault;
    id++;
    start_charging_obccu=new StackOrder(900,start_charging_obccu_callback);
    packets[id]=start_charging_obccu;
    id++;
    stop_charging_obccu=new StackOrder(901,stop_charging_obccu_callback);
    packets[id]=stop_charging_obccu;
    id++;
    open_contactors_obccu=new StackOrder(902,open_contactors_obccu_callback);
    packets[id]=open_contactors_obccu;
    id++;
    close_contactors_obccu=new StackOrder(903,close_contactors_obccu_callback);
    packets[id]=close_contactors_obccu;
    id++;
    brake=new StackOrder(215,brake_callback);
    packets[id]=brake;
    id++;
    unbrake=new StackOrder(216,unbrake_callback);
    packets[id]=unbrake;
    id++;
    set_regulator_pressure=new StackOrder(210,set_regulator_pressure_callback,new_reference_pressure);
    packets[id]=set_regulator_pressure;
    id++;
    disable_emergency_tape=new StackOrder(217,disable_emergency_tape_callback);
    packets[id]=disable_emergency_tape;
    id++;
    enable_emergency_tape=new StackOrder(218,enable_emergency_tape_callback);
    packets[id]=enable_emergency_tape;
    id++;
    reset_vcu=new StackOrder(223,reset_vcu_callback);
    packets[id]=reset_vcu;
    id++;
    test_pwm=new StackOrder(350,test_pwm_callback,ldu_id,pwm_duty_cycle);
    packets[id]=test_pwm;
    id++;
    test_current_control=new StackOrder(352,test_current_control_callback,ldu_id,lcu_desired_current);
    packets[id]=test_current_control;
    id++;
    set_reset_on=new StackOrder(353,set_reset_on_callback,ldu_buffer_id);
    packets[id]=set_reset_on;
    id++;
    set_reset_off=new StackOrder(354,set_reset_off_callback,ldu_buffer_id);
    packets[id]=set_reset_off;
    id++;
    start_levitation_control=new StackOrder(355,start_levitation_control_callback,lcu_desired_distance);
    packets[id]=start_levitation_control;
    id++;
    start_vertical_levitation=new StackOrder(356,start_vertical_levitation_callback,lcu_desired_distance);
    packets[id]=start_vertical_levitation;
    id++;
    stop_levitation=new StackOrder(357,stop_levitation_callback);
    packets[id]=stop_levitation;
    id++;
    stick_down=new StackOrder(358,stick_down_callback);
    packets[id]=stick_down;
    id++;
    landing=new StackOrder(359,landing_callback);
    packets[id]=landing;
    id++;
    start_horizontal_levitation=new StackOrder(360,start_horizontal_levitation_callback);
    packets[id]=start_horizontal_levitation;
    id++;
    enter_testing_mode=new StackOrder(361,enter_testing_mode_callback);
    packets[id]=enter_testing_mode;
    id++;
    exit_testing_mode=new StackOrder(362,exit_testing_mode_callback);
    packets[id]=exit_testing_mode;
    id++;
    manual_zeroing=new StackOrder(611,manual_zeroing_callback);
    packets[id]=manual_zeroing;
    id++;
    set_stable_levitation_on=new StackOrder(363,set_stable_levitation_on_callback);
    packets[id]=set_stable_levitation_on;
    id++;
    set_stable_levitation_off=new StackOrder(364,set_stable_levitation_off_callback);
    packets[id]=set_stable_levitation_off;
    id++;
    set_rgb_color=new StackOrder(290,set_rgb_color_callback);
    packets[id]=set_rgb_color;
    id++;
    turn_on_party=new StackOrder(291,turn_on_party_callback);
    packets[id]=turn_on_party;
    id++;
    turn_off_party=new StackOrder(292,turn_off_party_callback);
    packets[id]=turn_off_party;
    id++;
    turn_on_pump=new StackOrder(293,turn_on_pump_callback);
    packets[id]=turn_on_pump;
    id++;
    turn_off_pump=new StackOrder(294,turn_off_pump_callback);
    packets[id]=turn_off_pump;
    id++;
    discharge_dclink=new StackOrder(368,discharge_dclink_callback);
    packets[id]=discharge_dclink;
    id++;
    change_position_references=new StackOrder(645,change_position_references_callback,lower_position_limit,upper_position_limit);
    packets[id]=change_position_references;
    id++;
    start_vf_control=new StackOrder(625,start_vf_control_callback);
    packets[id]=start_vf_control;
    id++;
    CRUISING_DEMONSTRATION=new StackOrder(646,CRUISING_DEMONSTRATION_callback,target_test_speed_control_kmh,test_speed_control_direction,lower_position_limit,upper_position_limit);
    packets[id]=CRUISING_DEMONSTRATION;
    id++;
    
}
};