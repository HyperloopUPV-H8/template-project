#pragma once
#include "ST-LIB.hpp"

//Order packets for VCU -AUTOGENERATED CODE, DO NOT MODIFY-
class OrderPackets{
    enum class pump:uint8_t
    {
    UNIDADES=0,
    PLACAS=1
    };

    enum class regulator:uint8_t
    {
    REGULATOR_1=0,
    REGULATOR_2=1
    };

    enum class run_id:uint8_t
    {
    LIM=0
    };

    enum class motor_direction:uint8_t
    {
    FORWARD=0,
    BACKWARDS=1
    };

    enum class motor_direction:uint8_t
    {
    FORWARD=0,
    BACKWARDS=1
    };

    enum class motor_direction:uint8_t
    {
    FORWARD=0,
    BACKWARDS=1
    };

    

    void Brake_cb();
    void Unbrake_cb();
    void Potencia_Refri_cb();
    void Set_Regulator_cb();
    void Enable_Tapes_cb();
    void Disbable_Tapes_cb();
    void Close_Contactors_cb();
    void Open_Contactors_cb();
    void Levitation_cb();
    void Stop_Levitation_cb();
    void Emergency_Stop_cb();
    void Propulsion_cb();
    void SVPWM_cb();
    void Stop_Motor_cb();
    void Current_Control_cb();
    void Speed_Control_cb();
    void Motor_Brake_cb();
    void Recovery_cb();
    

    private:
        constexpr static size_t size=18;
        uint32_t id{0};
    public:
        std::array<StackOrder*,size> packets; 
        StackOrder* Brake;
        StackOrder* Unbrake;
        StackOrder* Potencia_Refri;
        StackOrder* Set_Regulator;
        StackOrder* Enable_Tapes;
        StackOrder* Disbable_Tapes;
        StackOrder* Close_Contactors;
        StackOrder* Open_Contactors;
        StackOrder* Levitation;
        StackOrder* Stop_Levitation;
        StackOrder* Emergency_Stop;
        StackOrder* Propulsion;
        StackOrder* SVPWM;
        StackOrder* Stop_Motor;
        StackOrder* Current_Control;
        StackOrder* Speed_Control;
        StackOrder* Motor_Brake;
        StackOrder* Recovery;
        
        
    OrderPackets(uint32_t &duty,pump &pump,float32 &regulator_pressure,regulator &regulator,float32 &levitation_distance,run_id &run_id,float32 &modulation_frequency,float32 &commutation_frequency,float32 &max_voltage,float32 &reference_voltage,motor_direction &motor_direction,float32 &modulation_frequency,float32 &commutation_frequency,float32 &reference_current,float32 &max_voltage,motor_direction &motor_direction,float32 &reference_speed,float32 &commutation_frequency,float32 &max_voltage,motor_direction &motor_direction}})
{

    Brake=new StackOrder(43,Brake_cb);
    packets[id]=Brake;
    id++;
    Unbrake=new StackOrder(52,Unbrake_cb);
    packets[id]=Unbrake;
    id++;
    Potencia_Refri=new StackOrder(33,Potencia_Refri_cb,duty,pump);
    packets[id]=Potencia_Refri;
    id++;
    Set_Regulator=new StackOrder(34,Set_Regulator_cb,regulator_pressure,regulator);
    packets[id]=Set_Regulator;
    id++;
    Enable_Tapes=new StackOrder(35,Enable_Tapes_cb);
    packets[id]=Enable_Tapes;
    id++;
    Disbable_Tapes=new StackOrder(36,Disbable_Tapes_cb);
    packets[id]=Disbable_Tapes;
    id++;
    Close_Contactors=new StackOrder(44,Close_Contactors_cb);
    packets[id]=Close_Contactors;
    id++;
    Open_Contactors=new StackOrder(53,Open_Contactors_cb);
    packets[id]=Open_Contactors;
    id++;
    Levitation=new StackOrder(37,Levitation_cb,levitation_distance);
    packets[id]=Levitation;
    id++;
    Stop_Levitation=new StackOrder(46,Stop_Levitation_cb);
    packets[id]=Stop_Levitation;
    id++;
    Emergency_Stop=new StackOrder(55,Emergency_Stop_cb);
    packets[id]=Emergency_Stop;
    id++;
    Propulsion=new StackOrder(56,Propulsion_cb,run_id);
    packets[id]=Propulsion;
    id++;
    SVPWM=new StackOrder(57,SVPWM_cb,modulation_frequency,commutation_frequency,max_voltage,reference_voltage,motor_direction);
    packets[id]=SVPWM;
    id++;
    Stop_Motor=new StackOrder(58,Stop_Motor_cb);
    packets[id]=Stop_Motor;
    id++;
    Current_Control=new StackOrder(59,Current_Control_cb,modulation_frequency,commutation_frequency,reference_current,max_voltage,motor_direction);
    packets[id]=Current_Control;
    id++;
    Speed_Control=new StackOrder(60,Speed_Control_cb,reference_speed,commutation_frequency,max_voltage,motor_direction);
    packets[id]=Speed_Control;
    id++;
    Motor_Brake=new StackOrder(61,Motor_Brake_cb);
    packets[id]=Motor_Brake;
    id++;
    Recovery=new StackOrder(32,Recovery_cb);
    packets[id]=Recovery;
    id++;
    
}
};