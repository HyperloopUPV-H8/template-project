#pragma once
#include "ST-LIB.hpp"

//Order packets for VCU -AUTOGENERATED CODE, DO NOT MODIFY-

extern void Brake_cb();
extern void Unbrake_cb();
extern void Potencia_Refri_cb();
extern void Set_Regulator_cb();
extern void Enable_Tapes_cb();
extern void Disbable_Tapes_cb();
extern void Close_Contactors_cb();
extern void Open_Contactors_cb();
extern void Levitation_cb();
extern void Stop_Levitation_cb();
extern void Emergency_Stop_cb();
extern void Propulsion_cb();
extern void SVPWM_cb();
extern void Stop_Motor_cb();
extern void Current_Control_cb();
extern void Speed_Control_cb();
extern void Motor_Brake_cb();
extern void Recovery_cb();

class OrderPackets{
    enum class pump:uint8_t
    {
    UNIDADES=0,
    PLACAS=1
    };

    enum class regulator:uint8_t
    {
    REGULATOR_1=0,
    REGULATOR_2=1
    };

    enum class run_id:uint8_t
    {
    LIM=0
    };

    enum class motor_direction:uint8_t
    {
    FORWARD=0,
    BACKWARDS=1
    };

    

    

    private:
        uint32_t id{0};
    public:
        HeapOrder* Brake;
        HeapOrder* Unbrake;
        HeapOrder* Potencia_Refri;
        HeapOrder* Set_Regulator;
        HeapOrder* Enable_Tapes;
        HeapOrder* Disbable_Tapes;
        HeapOrder* Close_Contactors;
        HeapOrder* Open_Contactors;
        HeapOrder* Levitation;
        HeapOrder* Stop_Levitation;
        HeapOrder* Emergency_Stop;
        HeapOrder* Propulsion;
        HeapOrder* SVPWM;
        HeapOrder* Stop_Motor;
        HeapOrder* Current_Control;
        HeapOrder* Speed_Control;
        HeapOrder* Motor_Brake;
        HeapOrder* Recovery;
        
        
    OrderPackets(uint32_t &duty,pump &pump,float &regulator_pressure,regulator &regulator,float &levitation_distance,run_id &run_id,float &modulation_frequency,float &commutation_frequency,float &max_voltage,float &reference_voltage,motor_direction &motor_direction,float &reference_current,float &reference_speed)
{

    Brake=new HeapOrder(43,&Brake_cb);
    Unbrake=new HeapOrder(52,&Unbrake_cb);
    Potencia_Refri=new HeapOrder(33,&Potencia_Refri_cb,&duty,&pump);
    Set_Regulator=new HeapOrder(34,&Set_Regulator_cb,&regulator_pressure,&regulator);
    Enable_Tapes=new HeapOrder(35,&Enable_Tapes_cb);
    Disbable_Tapes=new HeapOrder(36,&Disbable_Tapes_cb);
    Close_Contactors=new HeapOrder(44,&Close_Contactors_cb);
    Open_Contactors=new HeapOrder(53,&Open_Contactors_cb);
    Levitation=new HeapOrder(37,&Levitation_cb,&levitation_distance);
    Stop_Levitation=new HeapOrder(46,&Stop_Levitation_cb);
    Emergency_Stop=new HeapOrder(55,&Emergency_Stop_cb);
    Propulsion=new HeapOrder(56,&Propulsion_cb,&run_id);
    SVPWM=new HeapOrder(57,&SVPWM_cb,&modulation_frequency,&commutation_frequency,&max_voltage,&reference_voltage,&motor_direction);
    Stop_Motor=new HeapOrder(58,&Stop_Motor_cb);
    Current_Control=new HeapOrder(59,&Current_Control_cb,&modulation_frequency,&commutation_frequency,&reference_current,&max_voltage,&motor_direction);
    Speed_Control=new HeapOrder(60,&Speed_Control_cb,&reference_speed,&commutation_frequency,&max_voltage,&motor_direction);
    Motor_Brake=new HeapOrder(61,&Motor_Brake_cb);
    Recovery=new HeapOrder(32,&Recovery_cb);
    
}
};