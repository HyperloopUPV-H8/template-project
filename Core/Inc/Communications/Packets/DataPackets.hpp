#pragma once
#include "ST-LIB.hpp"

//Data packets for VCU -AUTOGENERATED CODE, DO NOT MODIFY-
class DataPackets{
    public:
    enum class general_state:uint8_t
    {
    CONNECTING=0,
    OPERATIONAL=1,
    FAULT=2
    };

    enum class operational_state:uint8_t
    {
    IDLE=0,
    END_OF_RUN=1,
    ENERGIZED=2,
    READY=3,
    DEMONSTRATION=4,
    RECOVERY=5
    };

    enum class reed1:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed2:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed3:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed4:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class flow1:uint8_t
    {
    OFF=0,
    ON=1
    };

    enum class flow2:uint8_t
    {
    OFF=0,
    ON=1
    };

    enum class tape_enable_output:uint8_t
    {
    DISABLED=0,
    ENABLED=1
    };

    enum class emergency_tape:uint8_t
    {
    EMERGENCY_SECTION=0,
    NORMAL_SECTION=1
    };

    enum class SDC:uint8_t
    {
    OFF=0,
    ON=1
    };

    

    private:
        inline static uint32_t id{0};
    public:
        static inline HeapPacket* Current_State{};
        static inline HeapPacket* Reeds{};
        static inline HeapPacket* Flow{};
        static inline HeapPacket* Regulator{};
        static inline HeapPacket* Pressure{};
        static inline HeapPacket* tapes{};
        static inline HeapPacket* sdc{};
        static inline HeapPacket* recovery_state{};
        

        static inline ServerSocket* control_station_tcp = nullptr;
        static inline DatagramSocket* control_station_udp = nullptr;
        static inline Socket* pcu_tcp = nullptr;
        static inline DatagramSocket* pcu_udp = nullptr;
        static inline Socket* hvscu_tcp = nullptr;
        static inline DatagramSocket* hvscu_udp = nullptr;
        
        
    DataPackets(general_state &general_state,operational_state &operational_state,reed1 &reed1,reed2 &reed2,reed3 &reed3,reed4 &reed4,bool &all_reeds,flow1 &flow1,flow2 &flow2,float &regulator_1_pressure,float &regulator_2_pressure,float &pressure_high,float &pressure_regulator,float &pressure_brakes,float &pressure_capsule,tape_enable_output &tape_enable_output,emergency_tape &emergency_tape,SDC &SDC,uint8_t &state)
{   
    control_station_tcp = new ServerSocket("192.168.1.3",50500);
    
    control_station_udp = new DatagramSocket("192.168.1.3",50400,"192.168.0.9",50400);
    pcu_udp = new DatagramSocket("192.168.1.3",50402,"192.168.1.5",50402);
    hvscu_udp = new DatagramSocket("192.168.1.3",50403,"192.168.1.7",50403);
    
    pcu_tcp = new Socket("192.168.1.3",50501,"192.168.1.5",50500);
    hvscu_tcp = new Socket("192.168.1.3",50502,"192.168.1.7",50500);
    
    Current_State = new HeapPacket(static_cast<uint16_t>(249),&general_state,&operational_state);

    Reeds = new HeapPacket(static_cast<uint16_t>(251),&reed1,&reed2,&reed3,&reed4,&all_reeds);

    Flow = new HeapPacket(static_cast<uint16_t>(250),&flow1,&flow2);

    Regulator = new HeapPacket(static_cast<uint16_t>(252),&regulator_1_pressure,&regulator_2_pressure);

    Pressure = new HeapPacket(static_cast<uint16_t>(253),&pressure_high,&pressure_regulator,&pressure_brakes,&pressure_capsule);

    tapes = new HeapPacket(static_cast<uint16_t>(254),&tape_enable_output,&emergency_tape);

    sdc = new HeapPacket(static_cast<uint16_t>(255),&SDC);

    recovery_state = new HeapPacket(static_cast<uint16_t>(65),&state);

    
    Time::register_low_precision_alarm(16.67,+[](){
        
        DataPackets::control_station_udp->send_packet(*Current_State);
        DataPackets::control_station_udp->send_packet(*Reeds);
        DataPackets::control_station_udp->send_packet(*Flow);
        DataPackets::control_station_udp->send_packet(*Regulator);
        DataPackets::control_station_udp->send_packet(*Pressure);
        DataPackets::control_station_udp->send_packet(*tapes);
        DataPackets::control_station_udp->send_packet(*sdc);
        
        
    });
    Time::register_low_precision_alarm(16.67,+[](){
         DataPackets::pcu_udp->send_packet(*DataPackets::recovery_state);
        
    });
    


}
};