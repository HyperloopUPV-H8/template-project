#pragma once
#include "ST-LIB.hpp"

//Data packets for VCU -AUTOGENERATED CODE, DO NOT MODIFY-
class DataPackets{
    enum class general_state:uint8_t
    {
    CONNECTING=0,
    OPERATIONAL=1,
    FAULT=2
    };

    enum class operational_state:uint8_t
    {
    IDLE=0,
    END_OF_RUN=1,
    ENERGIZED=2,
    READY=3,
    DEMONSTRATION=4,
    RECOVERY=5
    };

    enum class reed1:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed2:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed3:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class reed4:uint8_t
    {
    UNDEPLOYED=0,
    DEPLOYED=1
    };

    enum class flow1:uint8_t
    {
    OFF=0,
    ON=1
    };

    enum class flow2:uint8_t
    {
    OFF=0,
    ON=1
    };

    enum class tape_enable_output:uint8_t
    {
    DISABLED=0,
    ENABLED=1
    };

    enum class emergency_tape:uint8_t
    {
    EMERGENCY_SECTION=0,
    NORMAL_SECTION=1
    };

    enum class SDC:uint8_t
    {
    OFF=0,
    ON=1
    };

    

    private:
        constexpr static size_t size=18;
        inline static uint32_t id{0};
    public:
        static std::array<StackPacket*,size> packets; 
        inline static StackPacket* Current_State =nullptr;
        inline static StackPacket* Reeds =nullptr;
        inline static StackPacket* Flow =nullptr;
        inline static StackPacket* Regulator =nullptr;
        inline static StackPacket* Pressure =nullptr;
        inline static StackPacket* tapes =nullptr;
        inline static StackPacket* sdc =nullptr;
        inline static StackPacket* recovery_state =nullptr;
        

        inline static ServerSocket* control_station_tcp = nullptr;
        inline static DatagramSocket* control_station_udp = nullptr;
        inline static Socket* pcu_tcp = nullptr;
        inline static DatagramSocket* pcu_udp = nullptr;
        inline static Socket* hvscu_tcp = nullptr;
        inline static DatagramSocket* hvscu_udp = nullptr;
        
        
    DataPackets(general_state &general_state,operational_state &operational_state,reed1 &reed1,reed2 &reed2,reed3 &reed3,reed4 &reed4,bool &all_reeds,flow1 &flow1,flow2 &flow2,float32 &regulator_1_pressure,float32 &regulator_2_pressure,float32 &pressure_high,float32 &pressure_regulator,float32 &pressure_brakes,float32 &pressure_capsule,tape_enable_output &tape_enable_output,emergency_tape &emergency_tape,SDC &SDC,uint8_t &state)
{   
    control_station_tcp = new ServerSocket("192.168.1.3",50500);
    
    control_station_udp = new DatagramSocket("192.168.1.3",50400,"192.168.0.9",50400);
    pcu_udp = new DatagramSocket("192.168.1.3",50402,"192.168.1.5",50402);
    hvscu_udp = new DatagramSocket("192.168.1.3",50403,"192.168.1.7",50403);
    
    pcu_tcp = new Socket("192.168.1.3",50501,"192.168.1.5",50500);
    hvscu_tcp = new Socket("192.168.1.3",50502,"192.168.1.7",50500);
    
    Current_State = new StackPacket(249,general_state,operational_state);
    packets[id]=Current_State;
    id++;

    Reeds = new StackPacket(251,reed1,reed2,reed3,reed4,all_reeds);
    packets[id]=Reeds;
    id++;

    Flow = new StackPacket(250,flow1,flow2);
    packets[id]=Flow;
    id++;

    Regulator = new StackPacket(252,regulator_1_pressure,regulator_2_pressure);
    packets[id]=Regulator;
    id++;

    Pressure = new StackPacket(253,pressure_high,pressure_regulator,pressure_brakes,pressure_capsule);
    packets[id]=Pressure;
    id++;

    tapes = new StackPacket(254,tape_enable_output,emergency_tape);
    packets[id]=tapes;
    id++;

    sdc = new StackPacket(255,SDC);
    packets[id]=sdc;
    id++;

    recovery_state = new StackPacket(65,state);
    packets[id]=recovery_state;
    id++;

    
    Time::register_low_precision_alarm(16.67,+[](){
        
        DataPackets::control_station_udp->send_packet(*DataPackets::Current_State);
        DataPackets::control_station_udp->send_packet(*DataPackets::Reeds);
        DataPackets::control_station_udp->send_packet(*DataPackets::Flow);
        DataPackets::control_station_udp->send_packet(*DataPackets::Regulator);
        DataPackets::control_station_udp->send_packet(*DataPackets::Pressure);
        DataPackets::control_station_udp->send_packet(*DataPackets::tapes);
        DataPackets::control_station_udp->send_packet(*DataPackets::sdc);
        
        
    });
    Time::register_low_precision_alarm(16.67,+[](){
         DataPackets::pcu_udp->send_packet(*DataPackets::recovery_state);
        
    });
    


}
};