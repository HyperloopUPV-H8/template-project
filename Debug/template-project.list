
template-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000234dc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080237ac  080237ac  000337ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000034  08023fac  08023fac  00033fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000034  08023fe0  08023fe0  00033fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  24000000  08024014  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001828  240000cc  080240e0  000400cc  2**2
                  ALLOC
  7 .lwip_sec     00000200  30000000  30000000  00050000  2**0
                  ALLOC
  8 ._user_heap_stack 00000604  240018f4  240018f4  000418f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0014644a  00000000  00000000  000400fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e19f  00000000  00000000  00186544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00008920  00000000  00000000  001946e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008b80  00000000  00000000  0019d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00081d0d  00000000  00000000  001a5b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005ff53  00000000  00000000  00227895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0029836d  00000000  00000000  002877e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0051fb55  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000285d8  00000000  00000000  0051fba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000cc 	.word	0x240000cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08023794 	.word	0x08023794

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d0 	.word	0x240000d0
 800030c:	08023794 	.word	0x08023794

08000310 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
 8000314:	2300      	movs	r3, #0
 8000316:	4618      	mov	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	7138      	strb	r0, [r7, #4]
 8000340:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 8000342:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	7138      	strb	r0, [r7, #4]
 8000364:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8000366:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	09db      	lsrs	r3, r3, #7
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4618      	mov	r0, r3
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <_ZNKSt4hashIhEclEh>:

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)

  /// Explicit specialization for unsigned char.
  _Cxx_hashtable_define_trivial_hash(unsigned char)
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
 80003a0:	78fb      	ldrb	r3, [r7, #3]
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80003ae:	b480      	push	{r7}
 80003b0:	b083      	sub	sp, #12
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d005      	beq.n	80003e6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	6879      	ldr	r1, [r7, #4]
 80003e2:	2203      	movs	r2, #3
 80003e4:	4798      	blx	r3
    }
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	bf0c      	ite	eq
 8000400:	2301      	moveq	r3, #1
 8000402:	2300      	movne	r3, #0
 8000404:	b2db      	uxtb	r3, r3
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 800042e:	b480      	push	{r7}
 8000430:	b085      	sub	sp, #20
 8000432:	af00      	add	r7, sp, #0
 8000434:	60f8      	str	r0, [r7, #12]
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	fb01 f202 	mul.w	r2, r1, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	4618      	mov	r0, r3
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d201      	bcs.n	8000488 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	e000      	b.n	800048a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000488:	687b      	ldr	r3, [r7, #4]
    }
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
 800049a:	f022 ffcd 	bl	8023438 <abort>

0800049e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
    }
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f002 fc2e 	bl	8002d34 <_ZNSaImED1Ev>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fc11 	bl	8002d14 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffeb 	bl	80004e2 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d109      	bne.n	8000540 <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	889a      	ldrh	r2, [r3, #4]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	bf34      	ite	cc
 8000538:	2301      	movcc	r3, #1
 800053a:	2300      	movcs	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	e008      	b.n	8000552 <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	bf34      	ite	cc
 800054c:	2301      	movcc	r3, #1
 800054e:	2300      	movcs	r3, #0
 8000550:	b2db      	uxtb	r3, r3
	}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_ZN13LowPowerTimerC1EP13LPTIM_TypeDefP19LPTIM_HandleTypeDeft>:
	LPTIM_TypeDef* instance;
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_TypeDef* instance, LPTIM_HandleTypeDef* handle, uint16_t period) :
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	807b      	strh	r3, [r7, #2]
		instance(instance), handle(handle), period(period) {};
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	887a      	ldrh	r2, [r7, #2]
 800057c:	811a      	strh	r2, [r3, #8]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff17 	bl	80003ca <_ZNSt14_Function_baseD1Ev>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_ZN3ADC8InitDataD1Ev>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	330c      	adds	r3, #12
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fbe2 	bl	8002d7c <_ZNSt6vectorImSaImEED1Ev>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3314      	adds	r3, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffe9 	bl	80005a6 <_ZN3ADC8InitDataD1Ev>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <_Z15setup_adc_runesv>:
	int i = 0;
	for(auto& ref : list)
		ptr[i++] = ref;
}

void setup_adc_runes(){
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	f5ad 7d64 	sub.w	sp, sp, #912	; 0x390
 80005e6:	af02      	add	r7, sp, #8

	copy_args(	ADC::ranks, {
 80005e8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80005ec:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80005f0:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <_Z15setup_adc_runesv+0xcc>)
 80005f2:	461c      	mov	r4, r3
 80005f4:	4615      	mov	r5, r2
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800060a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800060e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800061c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8000620:	2210      	movs	r2, #16
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4821      	ldr	r0, [pc, #132]	; (80006b0 <_Z15setup_adc_runesv+0xd0>)
 800062a:	f002 fbd2 	bl	8002dd2 <_Z9copy_argsImEvPT_RKSt16initializer_listIS0_E>
				(uint32_t) ADC_REGULAR_RANK_13,
				(uint32_t) ADC_REGULAR_RANK_14,
				(uint32_t) ADC_REGULAR_RANK_15,
				(uint32_t) ADC_REGULAR_RANK_16 });

	copy_args(	ADC::peripherals,{
 800062e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <_Z15setup_adc_runesv+0xd4>)
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <_Z15setup_adc_runesv+0xd8>)
 8000638:	4a20      	ldr	r2, [pc, #128]	; (80006bc <_Z15setup_adc_runesv+0xdc>)
 800063a:	4921      	ldr	r1, [pc, #132]	; (80006c0 <_Z15setup_adc_runesv+0xe0>)
 800063c:	f01a fcd6 	bl	801afec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8000640:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000644:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <_Z15setup_adc_runesv+0xe4>)
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <_Z15setup_adc_runesv+0xe8>)
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <_Z15setup_adc_runesv+0xec>)
 8000650:	491f      	ldr	r1, [pc, #124]	; (80006d0 <_Z15setup_adc_runesv+0xf0>)
 8000652:	f01a fccb 	bl	801afec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8000656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800065a:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <_Z15setup_adc_runesv+0xf4>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <_Z15setup_adc_runesv+0xf8>)
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <_Z15setup_adc_runesv+0xfc>)
 8000666:	491e      	ldr	r1, [pc, #120]	; (80006e0 <_Z15setup_adc_runesv+0x100>)
 8000668:	f01a fcc0 	bl	801afec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 800066c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000670:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8000674:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800067e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8000682:	2203      	movs	r2, #3
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068a:	4619      	mov	r1, r3
 800068c:	4815      	ldr	r0, [pc, #84]	; (80006e4 <_Z15setup_adc_runesv+0x104>)
 800068e:	f002 fc12 	bl	8002eb6 <_Z9copy_argsIN3ADC10PeripheralEEvPT_RKSt16initializer_listIS2_E>
				ADC::Peripheral(&hadc1, adc_buf1, lptim1, init_data1),
				ADC::Peripheral(&hadc2, adc_buf2, lptim2, init_data2),
				ADC::Peripheral(&hadc3, adc_buf3, lptim3, init_data3) });
 8000692:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000696:	3490      	adds	r4, #144	; 0x90
	copy_args(	ADC::peripherals,{
 8000698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800069c:	429c      	cmp	r4, r3
 800069e:	d023      	beq.n	80006e8 <_Z15setup_adc_runesv+0x108>
				ADC::Peripheral(&hadc3, adc_buf3, lptim3, init_data3) });
 80006a0:	3c30      	subs	r4, #48	; 0x30
 80006a2:	4620      	mov	r0, r4
 80006a4:	f7ff ff8d 	bl	80005c2 <_ZN3ADC10PeripheralD1Ev>
	copy_args(	ADC::peripherals,{
 80006a8:	e7f6      	b.n	8000698 <_Z15setup_adc_runesv+0xb8>
 80006aa:	bf00      	nop
 80006ac:	080237ac 	.word	0x080237ac
 80006b0:	2400139c 	.word	0x2400139c
 80006b4:	24000190 	.word	0x24000190
 80006b8:	24000148 	.word	0x24000148
 80006bc:	240000e8 	.word	0x240000e8
 80006c0:	240004f8 	.word	0x240004f8
 80006c4:	240001a8 	.word	0x240001a8
 80006c8:	24000154 	.word	0x24000154
 80006cc:	24000108 	.word	0x24000108
 80006d0:	24000568 	.word	0x24000568
 80006d4:	240001c0 	.word	0x240001c0
 80006d8:	24000160 	.word	0x24000160
 80006dc:	24000128 	.word	0x24000128
 80006e0:	240005d8 	.word	0x240005d8
 80006e4:	240013dc 	.word	0x240013dc

	ADC::available_instances = {
			{PF11, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_2)},
 80006e8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80006ec:	4ab7      	ldr	r2, [pc, #732]	; (80009cc <_Z15setup_adc_runesv+0x3ec>)
 80006ee:	49b8      	ldr	r1, [pc, #736]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f01a fcb0 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80006f6:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80006fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80006fe:	49b5      	ldr	r1, [pc, #724]	; (80009d4 <_Z15setup_adc_runesv+0x3f4>)
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fc05 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF12, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_6)},
 8000706:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800070a:	4ab3      	ldr	r2, [pc, #716]	; (80009d8 <_Z15setup_adc_runesv+0x3f8>)
 800070c:	49b0      	ldr	r1, [pc, #704]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 800070e:	4618      	mov	r0, r3
 8000710:	f01a fca1 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000714:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8000718:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800071c:	3314      	adds	r3, #20
 800071e:	49af      	ldr	r1, [pc, #700]	; (80009dc <_Z15setup_adc_runesv+0x3fc>)
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fbf5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF13, ADC::Instance(&ADC::peripherals[1], ADC_CHANNEL_2)},
 8000726:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800072a:	4aa8      	ldr	r2, [pc, #672]	; (80009cc <_Z15setup_adc_runesv+0x3ec>)
 800072c:	49ac      	ldr	r1, [pc, #688]	; (80009e0 <_Z15setup_adc_runesv+0x400>)
 800072e:	4618      	mov	r0, r3
 8000730:	f01a fc91 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000734:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8000738:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800073c:	3328      	adds	r3, #40	; 0x28
 800073e:	49a9      	ldr	r1, [pc, #676]	; (80009e4 <_Z15setup_adc_runesv+0x404>)
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fbe5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF14, ADC::Instance(&ADC::peripherals[1], ADC_CHANNEL_6)},
 8000746:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800074a:	4aa3      	ldr	r2, [pc, #652]	; (80009d8 <_Z15setup_adc_runesv+0x3f8>)
 800074c:	49a4      	ldr	r1, [pc, #656]	; (80009e0 <_Z15setup_adc_runesv+0x400>)
 800074e:	4618      	mov	r0, r3
 8000750:	f01a fc81 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000754:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8000758:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800075c:	333c      	adds	r3, #60	; 0x3c
 800075e:	49a2      	ldr	r1, [pc, #648]	; (80009e8 <_Z15setup_adc_runesv+0x408>)
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fbd5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF5, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_4)},
 8000766:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800076a:	4aa0      	ldr	r2, [pc, #640]	; (80009ec <_Z15setup_adc_runesv+0x40c>)
 800076c:	49a0      	ldr	r1, [pc, #640]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800076e:	4618      	mov	r0, r3
 8000770:	f01a fc71 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000774:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8000778:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800077c:	3350      	adds	r3, #80	; 0x50
 800077e:	499d      	ldr	r1, [pc, #628]	; (80009f4 <_Z15setup_adc_runesv+0x414>)
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fbc5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF6, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_8)},
 8000786:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800078a:	4a9b      	ldr	r2, [pc, #620]	; (80009f8 <_Z15setup_adc_runesv+0x418>)
 800078c:	4998      	ldr	r1, [pc, #608]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800078e:	4618      	mov	r0, r3
 8000790:	f01a fc61 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000794:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8000798:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800079c:	3364      	adds	r3, #100	; 0x64
 800079e:	4997      	ldr	r1, [pc, #604]	; (80009fc <_Z15setup_adc_runesv+0x41c>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fbb5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF7, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_3)},
 80007a6:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80007aa:	4a95      	ldr	r2, [pc, #596]	; (8000a00 <_Z15setup_adc_runesv+0x420>)
 80007ac:	4990      	ldr	r1, [pc, #576]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f01a fc51 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80007b4:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80007b8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80007bc:	3378      	adds	r3, #120	; 0x78
 80007be:	4991      	ldr	r1, [pc, #580]	; (8000a04 <_Z15setup_adc_runesv+0x424>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fba5 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF8, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_7)},
 80007c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80007ca:	4a8f      	ldr	r2, [pc, #572]	; (8000a08 <_Z15setup_adc_runesv+0x428>)
 80007cc:	4988      	ldr	r1, [pc, #544]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f01a fc41 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80007d4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80007d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80007dc:	338c      	adds	r3, #140	; 0x8c
 80007de:	498b      	ldr	r1, [pc, #556]	; (8000a0c <_Z15setup_adc_runesv+0x42c>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fb95 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF9, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_2)},
 80007e6:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80007ea:	4a78      	ldr	r2, [pc, #480]	; (80009cc <_Z15setup_adc_runesv+0x3ec>)
 80007ec:	4980      	ldr	r1, [pc, #512]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f01a fc31 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80007f4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 80007f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80007fc:	33a0      	adds	r3, #160	; 0xa0
 80007fe:	4984      	ldr	r1, [pc, #528]	; (8000a10 <_Z15setup_adc_runesv+0x430>)
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fb85 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF10, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_6)},
 8000806:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800080a:	4a73      	ldr	r2, [pc, #460]	; (80009d8 <_Z15setup_adc_runesv+0x3f8>)
 800080c:	4978      	ldr	r1, [pc, #480]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800080e:	4618      	mov	r0, r3
 8000810:	f01a fc21 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000814:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8000818:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800081c:	33b4      	adds	r3, #180	; 0xb4
 800081e:	497d      	ldr	r1, [pc, #500]	; (8000a14 <_Z15setup_adc_runesv+0x434>)
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fb75 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PC2, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_0)},
 8000826:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800082a:	2201      	movs	r2, #1
 800082c:	4970      	ldr	r1, [pc, #448]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800082e:	4618      	mov	r0, r3
 8000830:	f01a fc11 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000834:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8000838:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800083c:	33c8      	adds	r3, #200	; 0xc8
 800083e:	4976      	ldr	r1, [pc, #472]	; (8000a18 <_Z15setup_adc_runesv+0x438>)
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fb65 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PC3, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_1)},
 8000846:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800084a:	4a74      	ldr	r2, [pc, #464]	; (8000a1c <_Z15setup_adc_runesv+0x43c>)
 800084c:	4968      	ldr	r1, [pc, #416]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800084e:	4618      	mov	r0, r3
 8000850:	f01a fc01 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000854:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8000858:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800085c:	33dc      	adds	r3, #220	; 0xdc
 800085e:	4970      	ldr	r1, [pc, #448]	; (8000a20 <_Z15setup_adc_runesv+0x440>)
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fb55 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PF10, ADC::Instance(&ADC::peripherals[2], ADC_CHANNEL_6)},
 8000866:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800086a:	4a5b      	ldr	r2, [pc, #364]	; (80009d8 <_Z15setup_adc_runesv+0x3f8>)
 800086c:	4960      	ldr	r1, [pc, #384]	; (80009f0 <_Z15setup_adc_runesv+0x410>)
 800086e:	4618      	mov	r0, r3
 8000870:	f01a fbf1 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000874:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8000878:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800087c:	33f0      	adds	r3, #240	; 0xf0
 800087e:	4965      	ldr	r1, [pc, #404]	; (8000a14 <_Z15setup_adc_runesv+0x434>)
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fb45 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PC0, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_10)},
 8000886:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800088a:	4a66      	ldr	r2, [pc, #408]	; (8000a24 <_Z15setup_adc_runesv+0x444>)
 800088c:	4950      	ldr	r1, [pc, #320]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 800088e:	4618      	mov	r0, r3
 8000890:	f01a fbe1 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000894:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8000898:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800089c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80008a0:	4961      	ldr	r1, [pc, #388]	; (8000a28 <_Z15setup_adc_runesv+0x448>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fb34 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PA0, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_16)},
 80008a8:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80008ac:	4a5f      	ldr	r2, [pc, #380]	; (8000a2c <_Z15setup_adc_runesv+0x44c>)
 80008ae:	4948      	ldr	r1, [pc, #288]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f01a fbd0 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80008b6:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80008ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80008be:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80008c2:	495b      	ldr	r1, [pc, #364]	; (8000a30 <_Z15setup_adc_runesv+0x450>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fb23 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PA3, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_15)},
 80008ca:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <_Z15setup_adc_runesv+0x454>)
 80008d0:	493f      	ldr	r1, [pc, #252]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f01a fbbf 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80008d8:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80008dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80008e0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80008e4:	4954      	ldr	r1, [pc, #336]	; (8000a38 <_Z15setup_adc_runesv+0x458>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fb12 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PA4, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_18)},
 80008ec:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80008f0:	4a52      	ldr	r2, [pc, #328]	; (8000a3c <_Z15setup_adc_runesv+0x45c>)
 80008f2:	4937      	ldr	r1, [pc, #220]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f01a fbae 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 80008fa:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80008fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000902:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000906:	494e      	ldr	r1, [pc, #312]	; (8000a40 <_Z15setup_adc_runesv+0x460>)
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fb01 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PA5, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_19)},
 800090e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8000912:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <_Z15setup_adc_runesv+0x464>)
 8000914:	492e      	ldr	r1, [pc, #184]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 8000916:	4618      	mov	r0, r3
 8000918:	f01a fb9d 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 800091c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8000920:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000924:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8000928:	4947      	ldr	r1, [pc, #284]	; (8000a48 <_Z15setup_adc_runesv+0x468>)
 800092a:	4618      	mov	r0, r3
 800092c:	f002 faf0 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PA6, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_3)},
 8000930:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8000934:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <_Z15setup_adc_runesv+0x420>)
 8000936:	4926      	ldr	r1, [pc, #152]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 8000938:	4618      	mov	r0, r3
 800093a:	f01a fb8c 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 800093e:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8000942:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800094a:	4940      	ldr	r1, [pc, #256]	; (8000a4c <_Z15setup_adc_runesv+0x46c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fadf 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PB0, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_9)},
 8000952:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8000956:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <_Z15setup_adc_runesv+0x470>)
 8000958:	491d      	ldr	r1, [pc, #116]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 800095a:	4618      	mov	r0, r3
 800095c:	f01a fb7b 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000960:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8000964:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800096c:	4939      	ldr	r1, [pc, #228]	; (8000a54 <_Z15setup_adc_runesv+0x474>)
 800096e:	4618      	mov	r0, r3
 8000970:	f002 face 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
			{PB1, ADC::Instance(&ADC::peripherals[0], ADC_CHANNEL_5)}
 8000974:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8000978:	4a37      	ldr	r2, [pc, #220]	; (8000a58 <_Z15setup_adc_runesv+0x478>)
 800097a:	4915      	ldr	r1, [pc, #84]	; (80009d0 <_Z15setup_adc_runesv+0x3f0>)
 800097c:	4618      	mov	r0, r3
 800097e:	f01a fb6a 	bl	801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
	ADC::available_instances = {
 8000982:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8000986:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800098a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800098e:	4933      	ldr	r1, [pc, #204]	; (8000a5c <_Z15setup_adc_runesv+0x47c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fabd 	bl	8002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8000996:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800099a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800099e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80009a8:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80009ac:	2215      	movs	r2, #21
 80009ae:	605a      	str	r2, [r3, #4]
	};
 80009b0:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80009b4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80009b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009bc:	4828      	ldr	r0, [pc, #160]	; (8000a60 <_Z15setup_adc_runesv+0x480>)
 80009be:	f002 fac4 	bl	8002f4a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>

}
 80009c2:	bf00      	nop
 80009c4:	f507 7762 	add.w	r7, r7, #904	; 0x388
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdb0      	pop	{r4, r5, r7, pc}
 80009cc:	08600004 	.word	0x08600004
 80009d0:	240013dc 	.word	0x240013dc
 80009d4:	240010e0 	.word	0x240010e0
 80009d8:	19200040 	.word	0x19200040
 80009dc:	240010e8 	.word	0x240010e8
 80009e0:	2400140c 	.word	0x2400140c
 80009e4:	240010f0 	.word	0x240010f0
 80009e8:	240010f8 	.word	0x240010f8
 80009ec:	10c00010 	.word	0x10c00010
 80009f0:	2400143c 	.word	0x2400143c
 80009f4:	24001038 	.word	0x24001038
 80009f8:	21800100 	.word	0x21800100
 80009fc:	24001040 	.word	0x24001040
 8000a00:	0c900008 	.word	0x0c900008
 8000a04:	24001048 	.word	0x24001048
 8000a08:	1d500080 	.word	0x1d500080
 8000a0c:	24001050 	.word	0x24001050
 8000a10:	24001058 	.word	0x24001058
 8000a14:	24001060 	.word	0x24001060
 8000a18:	24001330 	.word	0x24001330
 8000a1c:	04300002 	.word	0x04300002
 8000a20:	24001338 	.word	0x24001338
 8000a24:	2a000400 	.word	0x2a000400
 8000a28:	24001068 	.word	0x24001068
 8000a2c:	43210000 	.word	0x43210000
 8000a30:	24001078 	.word	0x24001078
 8000a34:	3ef08000 	.word	0x3ef08000
 8000a38:	24001090 	.word	0x24001090
 8000a3c:	4b840000 	.word	0x4b840000
 8000a40:	24001098 	.word	0x24001098
 8000a44:	4fb80000 	.word	0x4fb80000
 8000a48:	240010a0 	.word	0x240010a0
 8000a4c:	240010a8 	.word	0x240010a8
 8000a50:	25b00200 	.word	0x25b00200
 8000a54:	240010c8 	.word	0x240010c8
 8000a58:	14f00020 	.word	0x14f00020
 8000a5c:	240010d0 	.word	0x240010d0
 8000a60:	24001384 	.word	0x24001384

08000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>:

#include "C++Utilities/CppUtils.hpp"

class TimerPeripheral {
public:
	struct InitData {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f103 0210 	add.w	r2, r3, #16
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3310      	adds	r3, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	f002 fa71 	bl	8002f82 <_ZNSt6vectorImSaImEEC1ERKS1_>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 021c 	add.w	r2, r3, #28
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	331c      	adds	r3, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4610      	mov	r0, r2
 8000aae:	f002 faa5 	bl	8002ffc <_ZNSt6vectorISt4pairImmESaIS1_EEC1ERKS3_>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN15TimerPeripheral8InitDataD1Ev>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	331c      	adds	r3, #28
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fad4 	bl	8003076 <_ZNSt6vectorISt4pairImmESaIS1_EED1Ev>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3310      	adds	r3, #16
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f952 	bl	8002d7c <_ZNSt6vectorImSaImEED1Ev>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <_Z17setup_timer_runesv>:
TimerPeripheral timer17(&htim17, init_data_timer17);
TimerPeripheral timer15(&htim15, init_data_timer15);
TimerPeripheral timer23(&htim23, init_data_timer23);


void setup_timer_runes() {
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8000aea:	af00      	add	r7, sp, #0

	PWMservice::available_instances_dual = {
 8000aec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000af0:	4ae0      	ldr	r2, [pc, #896]	; (8000e74 <_Z17setup_timer_runesv+0x390>)
 8000af2:	49e1      	ldr	r1, [pc, #900]	; (8000e78 <_Z17setup_timer_runesv+0x394>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fad9 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PB8,PB6}, PWMservice::Instance(&timer16, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000afa:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8000afe:	2302      	movs	r3, #2
 8000b00:	2200      	movs	r2, #0
 8000b02:	49de      	ldr	r1, [pc, #888]	; (8000e7c <_Z17setup_timer_runesv+0x398>)
 8000b04:	f020 fd99 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000b08:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000b0c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fae7 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000b1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b1e:	4ad8      	ldr	r2, [pc, #864]	; (8000e80 <_Z17setup_timer_runesv+0x39c>)
 8000b20:	49d8      	ldr	r1, [pc, #864]	; (8000e84 <_Z17setup_timer_runesv+0x3a0>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fac2 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PB9,PB7}, PWMservice::Instance(&timer17, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000b28:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	49d5      	ldr	r1, [pc, #852]	; (8000e88 <_Z17setup_timer_runesv+0x3a4>)
 8000b32:	f020 fd82 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000b36:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8000b3a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	331c      	adds	r3, #28
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 facf 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000b4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b4e:	4acf      	ldr	r2, [pc, #828]	; (8000e8c <_Z17setup_timer_runesv+0x3a8>)
 8000b50:	49cf      	ldr	r1, [pc, #828]	; (8000e90 <_Z17setup_timer_runesv+0x3ac>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 faaa 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE11,PE10}, PWMservice::Instance(&timer1, TIM_CHANNEL_2, PWMservice::DUAL)},
 8000b58:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	2204      	movs	r2, #4
 8000b60:	49cc      	ldr	r1, [pc, #816]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000b62:	f020 fd6a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000b66:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8000b6a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	3338      	adds	r3, #56	; 0x38
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fab7 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000b7a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b7e:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <_Z17setup_timer_runesv+0x3b4>)
 8000b80:	49c6      	ldr	r1, [pc, #792]	; (8000e9c <_Z17setup_timer_runesv+0x3b8>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fa92 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE13,PE12}, PWMservice::Instance(&timer1, TIM_CHANNEL_3, PWMservice::DUAL)},
 8000b88:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	2208      	movs	r2, #8
 8000b90:	49c0      	ldr	r1, [pc, #768]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000b92:	f020 fd52 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000b96:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000b9a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	3354      	adds	r3, #84	; 0x54
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fa9f 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000baa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bae:	4abc      	ldr	r2, [pc, #752]	; (8000ea0 <_Z17setup_timer_runesv+0x3bc>)
 8000bb0:	49bc      	ldr	r1, [pc, #752]	; (8000ea4 <_Z17setup_timer_runesv+0x3c0>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fa7a 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE5,PE4}, PWMservice::Instance(&timer15, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000bb8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	49b9      	ldr	r1, [pc, #740]	; (8000ea8 <_Z17setup_timer_runesv+0x3c4>)
 8000bc2:	f020 fd3a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000bc6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000bca:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	3370      	adds	r3, #112	; 0x70
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fa87 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000bda:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000bde:	4ab3      	ldr	r2, [pc, #716]	; (8000eac <_Z17setup_timer_runesv+0x3c8>)
 8000be0:	49b3      	ldr	r1, [pc, #716]	; (8000eb0 <_Z17setup_timer_runesv+0x3cc>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fa62 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE9,PE8}, PWMservice::Instance(&timer1, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000be8:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8000bec:	2302      	movs	r3, #2
 8000bee:	2200      	movs	r2, #0
 8000bf0:	49a8      	ldr	r1, [pc, #672]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000bf2:	f020 fd22 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000bf6:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8000bfa:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	338c      	adds	r3, #140	; 0x8c
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fa6f 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000c0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000c0e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000c12:	f107 0208 	add.w	r2, r7, #8
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000c1c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000c20:	2206      	movs	r2, #6
 8000c22:	605a      	str	r2, [r3, #4]
	};
 8000c24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000c28:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000c2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000c30:	48a0      	ldr	r0, [pc, #640]	; (8000eb4 <_Z17setup_timer_runesv+0x3d0>)
 8000c32:	f002 fa73 	bl	800311c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEaSESt16initializer_listIS8_E>

	PWMservice::available_instances_dual = {
 8000c36:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8000c3a:	4a8e      	ldr	r2, [pc, #568]	; (8000e74 <_Z17setup_timer_runesv+0x390>)
 8000c3c:	498e      	ldr	r1, [pc, #568]	; (8000e78 <_Z17setup_timer_runesv+0x394>)
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fa34 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PB8,PB6}, PWMservice::Instance(&timer16, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000c44:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	498b      	ldr	r1, [pc, #556]	; (8000e7c <_Z17setup_timer_runesv+0x398>)
 8000c4e:	f020 fcf4 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000c52:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8000c56:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8000c5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fa42 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c68:	4a88      	ldr	r2, [pc, #544]	; (8000e8c <_Z17setup_timer_runesv+0x3a8>)
 8000c6a:	4989      	ldr	r1, [pc, #548]	; (8000e90 <_Z17setup_timer_runesv+0x3ac>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fa1d 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE11,PE10}, PWMservice::Instance(&timer1, TIM_CHANNEL_2, PWMservice::DUAL)},
 8000c72:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8000c76:	2302      	movs	r3, #2
 8000c78:	2204      	movs	r2, #4
 8000c7a:	4986      	ldr	r1, [pc, #536]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000c7c:	f020 fcdd 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000c80:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000c84:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8000c88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000c8c:	331c      	adds	r3, #28
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fa2a 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000c94:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000c98:	4a7f      	ldr	r2, [pc, #508]	; (8000e98 <_Z17setup_timer_runesv+0x3b4>)
 8000c9a:	4980      	ldr	r1, [pc, #512]	; (8000e9c <_Z17setup_timer_runesv+0x3b8>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fa05 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE13,PE12}, PWMservice::Instance(&timer1, TIM_CHANNEL_3, PWMservice::DUAL)},
 8000ca2:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	2208      	movs	r2, #8
 8000caa:	497a      	ldr	r1, [pc, #488]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000cac:	f020 fcc5 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000cb0:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8000cb4:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8000cb8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fa12 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000cc4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cc8:	4a75      	ldr	r2, [pc, #468]	; (8000ea0 <_Z17setup_timer_runesv+0x3bc>)
 8000cca:	4976      	ldr	r1, [pc, #472]	; (8000ea4 <_Z17setup_timer_runesv+0x3c0>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 f9ed 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE5,PE4}, PWMservice::Instance(&timer15, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000cd2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4973      	ldr	r1, [pc, #460]	; (8000ea8 <_Z17setup_timer_runesv+0x3c4>)
 8000cdc:	f020 fcad 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000ce0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000ce4:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8000ce8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000cec:	3354      	adds	r3, #84	; 0x54
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 f9fa 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000cf4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000cf8:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <_Z17setup_timer_runesv+0x3c8>)
 8000cfa:	496d      	ldr	r1, [pc, #436]	; (8000eb0 <_Z17setup_timer_runesv+0x3cc>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 f9d5 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PE9,PE8}, PWMservice::Instance(&timer1, TIM_CHANNEL_1, PWMservice::DUAL)},
 8000d02:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 8000d06:	2302      	movs	r3, #2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4962      	ldr	r1, [pc, #392]	; (8000e94 <_Z17setup_timer_runesv+0x3b0>)
 8000d0c:	f020 fc95 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances_dual = {
 8000d10:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8000d14:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8000d18:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000d1c:	3370      	adds	r3, #112	; 0x70
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 f9e2 	bl	80030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>
 8000d24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d28:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000d2c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d36:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	605a      	str	r2, [r3, #4]
	};
 8000d3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d42:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000d46:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d4a:	485a      	ldr	r0, [pc, #360]	; (8000eb4 <_Z17setup_timer_runesv+0x3d0>)
 8000d4c:	f002 f9e6 	bl	800311c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEaSESt16initializer_listIS8_E>

	PWMservice::available_instances_negated = {};
 8000d50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d54:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d60:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000d6c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000d70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d74:	4850      	ldr	r0, [pc, #320]	; (8000eb8 <_Z17setup_timer_runesv+0x3d4>)
 8000d76:	f002 f9ed 	bl	8003154 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>

	PWMservice::available_instances = {
		{PB9, PWMservice::Instance(&timer17, TIM_CHANNEL_1, PWMservice::NORMAL)},
 8000d7a:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	4941      	ldr	r1, [pc, #260]	; (8000e88 <_Z17setup_timer_runesv+0x3a4>)
 8000d84:	f020 fc59 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000d88:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8000d8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000d90:	493c      	ldr	r1, [pc, #240]	; (8000e84 <_Z17setup_timer_runesv+0x3a0>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 f9fa 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PB14, PWMservice::Instance(&timer12, TIM_CHANNEL_1, PWMservice::NORMAL)},
 8000d98:	f507 706b 	add.w	r0, r7, #940	; 0x3ac
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4946      	ldr	r1, [pc, #280]	; (8000ebc <_Z17setup_timer_runesv+0x3d8>)
 8000da2:	f020 fc4a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000da6:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8000daa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000dae:	3314      	adds	r3, #20
 8000db0:	4943      	ldr	r1, [pc, #268]	; (8000ec0 <_Z17setup_timer_runesv+0x3dc>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 f9ea 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PB15, PWMservice::Instance(&timer12, TIM_CHANNEL_2, PWMservice::NORMAL)},
 8000db8:	f507 706e 	add.w	r0, r7, #952	; 0x3b8
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	493e      	ldr	r1, [pc, #248]	; (8000ebc <_Z17setup_timer_runesv+0x3d8>)
 8000dc2:	f020 fc3a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000dc6:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8000dca:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000dce:	3328      	adds	r3, #40	; 0x28
 8000dd0:	493c      	ldr	r1, [pc, #240]	; (8000ec4 <_Z17setup_timer_runesv+0x3e0>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 f9da 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PB4, PWMservice::Instance(&timer3, TIM_CHANNEL_1, PWMservice::NORMAL)},
 8000dd8:	f507 7071 	add.w	r0, r7, #964	; 0x3c4
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	4939      	ldr	r1, [pc, #228]	; (8000ec8 <_Z17setup_timer_runesv+0x3e4>)
 8000de2:	f020 fc2a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000de6:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8000dea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000dee:	333c      	adds	r3, #60	; 0x3c
 8000df0:	4936      	ldr	r1, [pc, #216]	; (8000ecc <_Z17setup_timer_runesv+0x3e8>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 f9ca 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PB5, PWMservice::Instance(&timer3, TIM_CHANNEL_2, PWMservice::NORMAL)},
 8000df8:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4931      	ldr	r1, [pc, #196]	; (8000ec8 <_Z17setup_timer_runesv+0x3e4>)
 8000e02:	f020 fc1a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000e06:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8000e0a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000e0e:	3350      	adds	r3, #80	; 0x50
 8000e10:	492f      	ldr	r1, [pc, #188]	; (8000ed0 <_Z17setup_timer_runesv+0x3ec>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 f9ba 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PC8, PWMservice::Instance(&timer3, TIM_CHANNEL_3, PWMservice::NORMAL)},
 8000e18:	f507 7077 	add.w	r0, r7, #988	; 0x3dc
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4929      	ldr	r1, [pc, #164]	; (8000ec8 <_Z17setup_timer_runesv+0x3e4>)
 8000e22:	f020 fc0a 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000e26:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8000e2a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000e2e:	3364      	adds	r3, #100	; 0x64
 8000e30:	4928      	ldr	r1, [pc, #160]	; (8000ed4 <_Z17setup_timer_runesv+0x3f0>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 f9aa 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PD12, PWMservice::Instance(&timer4, TIM_CHANNEL_1, PWMservice::NORMAL)},
 8000e38:	f507 707a 	add.w	r0, r7, #1000	; 0x3e8
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4925      	ldr	r1, [pc, #148]	; (8000ed8 <_Z17setup_timer_runesv+0x3f4>)
 8000e42:	f020 fbfa 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000e46:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8000e4a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000e4e:	3378      	adds	r3, #120	; 0x78
 8000e50:	4922      	ldr	r1, [pc, #136]	; (8000edc <_Z17setup_timer_runesv+0x3f8>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 f99a 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PD13, PWMservice::Instance(&timer4, TIM_CHANNEL_2, PWMservice::NORMAL)},
 8000e58:	f507 707d 	add.w	r0, r7, #1012	; 0x3f4
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2204      	movs	r2, #4
 8000e60:	491d      	ldr	r1, [pc, #116]	; (8000ed8 <_Z17setup_timer_runesv+0x3f4>)
 8000e62:	f020 fbea 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000e66:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 8000e6a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000e6e:	338c      	adds	r3, #140	; 0x8c
 8000e70:	e036      	b.n	8000ee0 <_Z17setup_timer_runesv+0x3fc>
 8000e72:	bf00      	nop
 8000e74:	240012e8 	.word	0x240012e8
 8000e78:	240012f8 	.word	0x240012f8
 8000e7c:	2400041c 	.word	0x2400041c
 8000e80:	240012f0 	.word	0x240012f0
 8000e84:	24001300 	.word	0x24001300
 8000e88:	24000448 	.word	0x24000448
 8000e8c:	24001130 	.word	0x24001130
 8000e90:	24001138 	.word	0x24001138
 8000e94:	24000340 	.word	0x24000340
 8000e98:	24001140 	.word	0x24001140
 8000e9c:	24001148 	.word	0x24001148
 8000ea0:	24000ff0 	.word	0x24000ff0
 8000ea4:	24000ff8 	.word	0x24000ff8
 8000ea8:	24000474 	.word	0x24000474
 8000eac:	24001120 	.word	0x24001120
 8000eb0:	24001128 	.word	0x24001128
 8000eb4:	240018c8 	.word	0x240018c8
 8000eb8:	240018b0 	.word	0x240018b0
 8000ebc:	240003f0 	.word	0x240003f0
 8000ec0:	24001180 	.word	0x24001180
 8000ec4:	24001188 	.word	0x24001188
 8000ec8:	24000398 	.word	0x24000398
 8000ecc:	24001318 	.word	0x24001318
 8000ed0:	240012e0 	.word	0x240012e0
 8000ed4:	24001218 	.word	0x24001218
 8000ed8:	240003c4 	.word	0x240003c4
 8000edc:	240011b0 	.word	0x240011b0
 8000ee0:	494b      	ldr	r1, [pc, #300]	; (8001010 <_Z17setup_timer_runesv+0x52c>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 f952 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PD15, PWMservice::Instance(&timer4, TIM_CHANNEL_4, PWMservice::NORMAL)},
 8000ee8:	f507 6080 	add.w	r0, r7, #1024	; 0x400
 8000eec:	2300      	movs	r3, #0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	4948      	ldr	r1, [pc, #288]	; (8001014 <_Z17setup_timer_runesv+0x530>)
 8000ef2:	f020 fba2 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000ef6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000efa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000efe:	33a0      	adds	r3, #160	; 0xa0
 8000f00:	4945      	ldr	r1, [pc, #276]	; (8001018 <_Z17setup_timer_runesv+0x534>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 f942 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PE14, PWMservice::Instance(&timer1, TIM_CHANNEL_4, PWMservice::NORMAL)},
 8000f08:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	4942      	ldr	r1, [pc, #264]	; (800101c <_Z17setup_timer_runesv+0x538>)
 8000f12:	f020 fb92 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000f16:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8000f1a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f1e:	33b4      	adds	r3, #180	; 0xb4
 8000f20:	493f      	ldr	r1, [pc, #252]	; (8001020 <_Z17setup_timer_runesv+0x53c>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 f932 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PE6, PWMservice::Instance(&timer15, TIM_CHANNEL_2, PWMservice::NORMAL)},
 8000f28:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2204      	movs	r2, #4
 8000f30:	493c      	ldr	r1, [pc, #240]	; (8001024 <_Z17setup_timer_runesv+0x540>)
 8000f32:	f020 fb82 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000f36:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8000f3a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f3e:	33c8      	adds	r3, #200	; 0xc8
 8000f40:	4939      	ldr	r1, [pc, #228]	; (8001028 <_Z17setup_timer_runesv+0x544>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 f922 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PF1, PWMservice::Instance(&timer23, TIM_CHANNEL_2, PWMservice::NORMAL)},
 8000f48:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4936      	ldr	r1, [pc, #216]	; (800102c <_Z17setup_timer_runesv+0x548>)
 8000f52:	f020 fb72 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000f56:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8000f5a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f5e:	33dc      	adds	r3, #220	; 0xdc
 8000f60:	4933      	ldr	r1, [pc, #204]	; (8001030 <_Z17setup_timer_runesv+0x54c>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f912 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PF2, PWMservice::Instance(&timer23, TIM_CHANNEL_3, PWMservice::NORMAL)},
 8000f68:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2208      	movs	r2, #8
 8000f70:	492e      	ldr	r1, [pc, #184]	; (800102c <_Z17setup_timer_runesv+0x548>)
 8000f72:	f020 fb62 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000f76:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8000f7a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f7e:	33f0      	adds	r3, #240	; 0xf0
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <_Z17setup_timer_runesv+0x550>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 f902 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PF3, PWMservice::Instance(&timer23, TIM_CHANNEL_4, PWMservice::NORMAL)},
 8000f88:	f207 403c 	addw	r0, r7, #1084	; 0x43c
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	4926      	ldr	r1, [pc, #152]	; (800102c <_Z17setup_timer_runesv+0x548>)
 8000f92:	f020 fb52 	bl	802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>
	PWMservice::available_instances = {
 8000f96:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8000f9a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000f9e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000fa2:	4925      	ldr	r1, [pc, #148]	; (8001038 <_Z17setup_timer_runesv+0x554>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 f8f1 	bl	800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8000faa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000fae:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000fb2:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000fbc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000fc0:	220e      	movs	r2, #14
 8000fc2:	605a      	str	r2, [r3, #4]
	};
 8000fc4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000fc8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000fcc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fd0:	481a      	ldr	r0, [pc, #104]	; (800103c <_Z17setup_timer_runesv+0x558>)
 8000fd2:	f002 f8bf 	bl	8003154 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>

	TimerPeripheral::timers = {
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <_Z17setup_timer_runesv+0x55c>)
 8000fd8:	f507 648a 	add.w	r4, r7, #1104	; 0x450
 8000fdc:	461d      	mov	r5, r3
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fea:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000fee:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
			timer4,
			timer12,
			timer15,
			timer16,
			timer23
	};
 8000ff8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8000ffc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <_Z17setup_timer_runesv+0x560>)
 8001002:	f002 f8e0 	bl	80031c6 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EEaSESt16initializer_listIS2_E>
}
 8001006:	bf00      	nop
 8001008:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 800100c:	46bd      	mov	sp, r7
 800100e:	bdb0      	pop	{r4, r5, r7, pc}
 8001010:	240011b8 	.word	0x240011b8
 8001014:	240003c4 	.word	0x240003c4
 8001018:	240011c8 	.word	0x240011c8
 800101c:	24000340 	.word	0x24000340
 8001020:	24001150 	.word	0x24001150
 8001024:	24000474 	.word	0x24000474
 8001028:	24001000 	.word	0x24001000
 800102c:	240004a0 	.word	0x240004a0
 8001030:	24001018 	.word	0x24001018
 8001034:	24001020 	.word	0x24001020
 8001038:	24001028 	.word	0x24001028
 800103c:	24001898 	.word	0x24001898
 8001040:	080237ec 	.word	0x080237ec
 8001044:	2400135c 	.word	0x2400135c

08001048 <_ZNSt4pairIKN3SPI10PeripheralEPNS0_8InstanceEEC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f000 f810 	bl	800107a <_ZSt7forwardIRN3SPI10PeripheralEEOT_RNSt16remove_referenceIS3_E4typeE>
 800105a:	4603      	mov	r3, r0
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f002 f8ca 	bl	80031fc <_ZSt7forwardIPN3SPI8InstanceEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001068:	4603      	mov	r3, r0
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZSt7forwardIRN3SPI10PeripheralEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_Z15setup_spi_runesv>:

#ifdef HAL_SPI_MODULE_ENABLED

extern SPI_HandleTypeDef hspi3;

void setup_spi_runes() {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
	SPI::instance3 = {&PC10, &PC12, &PC11, &PD0, &hspi3,SPI3, SPI_BAUDRATEPRESCALER_256 };
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <_Z15setup_spi_runesv+0x5c>)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_Z15setup_spi_runesv+0x60>)
 800109a:	4614      	mov	r4, r2
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010ae:	e884 0003 	stmia.w	r4, {r0, r1}
	SPI::spi3 = SPI::Peripheral::peripheral3;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_Z15setup_spi_runesv+0x64>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
	SPI::available_spi = {
		{SPI::spi3, &SPI::instance3}
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <_Z15setup_spi_runesv+0x5c>)
 80010ba:	617b      	str	r3, [r7, #20]
	SPI::available_spi = {
 80010bc:	f107 0214 	add.w	r2, r7, #20
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <_Z15setup_spi_runesv+0x64>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffbe 	bl	8001048 <_ZNSt4pairIKN3SPI10PeripheralEPNS0_8InstanceEEC1IRS1_S4_Lb1EEEOT_OT0_>
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	2301      	movs	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
	};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <_Z15setup_spi_runesv+0x68>)
 80010de:	f002 f898 	bl	8003212 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEaSESt16initializer_listISA_E>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	24001518 	.word	0x24001518
 80010f0:	0802380c 	.word	0x0802380c
 80010f4:	240014a4 	.word	0x240014a4
 80010f8:	24001488 	.word	0x24001488

080010fc <_ZNSt4pairIKN4UART10PeripheralEPNS0_8InstanceEEC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001108:	68b8      	ldr	r0, [r7, #8]
 800110a:	f000 f810 	bl	800112e <_ZSt7forwardIRN4UART10PeripheralEEOT_RNSt16remove_referenceIS3_E4typeE>
 800110e:	4603      	mov	r3, r0
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f002 f88d 	bl	8003236 <_ZSt7forwardIPN4UART8InstanceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800111c:	4603      	mov	r3, r0
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZSt7forwardIRN4UART10PeripheralEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_Z16setup_uart_runesv>:
#ifdef HAL_UART_MODULE_ENABLED

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

void setup_uart_runes(){
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b09a      	sub	sp, #104	; 0x68
 8001148:	af00      	add	r7, sp, #0
	UART::uart1 = UART::Peripheral::peripheral1;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <_Z16setup_uart_runesv+0xf4>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	UART::uart2 = UART::Peripheral::peripheral2;
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <_Z16setup_uart_runesv+0xf8>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

	UART::instance1 = { PA9, PA10, &huart1, USART1, 115200, UART_WORDLENGTH_8B };
 8001156:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <_Z16setup_uart_runesv+0xfc>)
 8001158:	463b      	mov	r3, r7
 800115a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <_Z16setup_uart_runesv+0x100>)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <_Z16setup_uart_runesv+0x104>)
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <_Z16setup_uart_runesv+0x108>)
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3020 	strb.w	r3, [r7, #32]
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <_Z16setup_uart_runesv+0x10c>)
 8001190:	461d      	mov	r5, r3
 8001192:	463c      	mov	r4, r7
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	802b      	strh	r3, [r5, #0]
	UART::instance2 = { PD5, PD6, &huart2, USART2,115200, UART_WORDLENGTH_8B, };
 80011a0:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <_Z16setup_uart_runesv+0x110>)
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80011ae:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <_Z16setup_uart_runesv+0x114>)
 80011b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <_Z16setup_uart_runesv+0x118>)
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <_Z16setup_uart_runesv+0x11c>)
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ca:	2300      	movs	r3, #0
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <_Z16setup_uart_runesv+0x120>)
 80011dc:	461d      	mov	r5, r3
 80011de:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	802b      	strh	r3, [r5, #0]

	UART::available_uarts = {
		{UART::uart1, &UART::instance1},
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <_Z16setup_uart_runesv+0x10c>)
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
	UART::available_uarts = {
 80011f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011fa:	490f      	ldr	r1, [pc, #60]	; (8001238 <_Z16setup_uart_runesv+0xf4>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff7d 	bl	80010fc <_ZNSt4pairIKN4UART10PeripheralEPNS0_8InstanceEEC1IRS1_S4_Lb1EEEOT_OT0_>
		{UART::uart2, &UART::instance2}
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <_Z16setup_uart_runesv+0x120>)
 8001204:	667b      	str	r3, [r7, #100]	; 0x64
	UART::available_uarts = {
 8001206:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800120a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800120e:	3308      	adds	r3, #8
 8001210:	490a      	ldr	r1, [pc, #40]	; (800123c <_Z16setup_uart_runesv+0xf8>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff72 	bl	80010fc <_ZNSt4pairIKN4UART10PeripheralEPNS0_8InstanceEEC1IRS1_S4_Lb1EEEOT_OT0_>
 8001218:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800121c:	64bb      	str	r3, [r7, #72]	; 0x48
 800121e:	2302      	movs	r3, #2
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	};
 8001222:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001226:	e893 0006 	ldmia.w	r3, {r1, r2}
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <_Z16setup_uart_runesv+0x124>)
 800122c:	f002 f80e 	bl	800324c <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEaSESt16initializer_listISA_E>
}
 8001230:	bf00      	nop
 8001232:	3768      	adds	r7, #104	; 0x68
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}
 8001238:	24001630 	.word	0x24001630
 800123c:	24001631 	.word	0x24001631
 8001240:	24001230 	.word	0x24001230
 8001244:	24001238 	.word	0x24001238
 8001248:	24000d5c 	.word	0x24000d5c
 800124c:	40011000 	.word	0x40011000
 8001250:	24001634 	.word	0x24001634
 8001254:	24001290 	.word	0x24001290
 8001258:	24001298 	.word	0x24001298
 800125c:	24000df0 	.word	0x24000df0
 8001260:	40004400 	.word	0x40004400
 8001264:	24001658 	.word	0x24001658
 8001268:	24001614 	.word	0x24001614

0800126c <_ZN15TimerPeripheralD1Ev>:
class TimerPeripheral {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3304      	adds	r3, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fc1f 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_Z19setup_encoder_runesv>:

extern TIM_HandleTypeDef htim8;

TimerPeripheral encoder_timer = TimerPeripheral(&htim8, {TIM8, 0, 65535});

void setup_encoder_runes(){
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
	 Encoder::pin_timer_map = {
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <_Z19setup_encoder_runesv+0x48>)
 8001294:	490f      	ldr	r1, [pc, #60]	; (80012d4 <_Z19setup_encoder_runesv+0x4c>)
 8001296:	4618      	mov	r0, r3
 8001298:	f001 ff08 	bl	80030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
			{{PC6, PC7}, &encoder_timer}
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <_Z19setup_encoder_runesv+0x50>)
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
	 Encoder::pin_timer_map = {
 80012a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012a4:	f107 011c 	add.w	r1, r7, #28
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 ffdf 	bl	8003270 <_ZNSt4pairIKS_I3PinS0_EP15TimerPeripheralEC1IS4_Lb1EEERS2_OT_>
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
	};
 80012bc:	463b      	mov	r3, r7
 80012be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <_Z19setup_encoder_runesv+0x54>)
 80012c4:	f001 ffec 	bl	80032a0 <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEEaSESt16initializer_listIS8_E>
}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	24001210 	.word	0x24001210
 80012d4:	24001208 	.word	0x24001208
 80012d8:	240004cc 	.word	0x240004cc
 80012dc:	24001804 	.word	0x24001804

080012e0 <_Z25setup_input_capture_runesv>:

#ifdef HAL_TIM_MODULE_ENABLED

extern TIM_HandleTypeDef htim2;

void setup_input_capture_runes(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	; 0x58
 80012e4:	af02      	add	r7, sp, #8
	 InputCapture::available_instances = {
			{PA0, InputCapture::Instance(PA0, &timer2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <_Z25setup_input_capture_runesv+0x4c>)
 80012e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012ec:	2304      	movs	r3, #4
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2300      	movs	r3, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <_Z25setup_input_capture_runesv+0x50>)
 80012f6:	ca06      	ldmia	r2, {r1, r2}
 80012f8:	f01f f817 	bl	802032a <_ZN12InputCapture8InstanceC1E3PinP15TimerPeripheralmm>
	 InputCapture::available_instances = {
 80012fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4909      	ldr	r1, [pc, #36]	; (800132c <_Z25setup_input_capture_runesv+0x4c>)
 8001306:	4618      	mov	r0, r3
 8001308:	f001 ffe6 	bl	80032d8 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
	};
 8001316:	463b      	mov	r3, r7
 8001318:	e893 0006 	ldmia.w	r3, {r1, r2}
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <_Z25setup_input_capture_runesv+0x54>)
 800131e:	f001 fffd 	bl	800331c <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24001078 	.word	0x24001078
 8001330:	2400036c 	.word	0x2400036c
 8001334:	2400184c 	.word	0x2400184c

08001338 <_ZN17ExternalInterrupt8InstanceD1Ev>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f921 	bl	800058c <_ZNSt8functionIFvvEED1Ev>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3304      	adds	r3, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ffe9 	bl	8001338 <_ZN17ExternalInterrupt8InstanceD1Ev>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_Z16setup_exti_runesv>:
/************************************************
 *					   EXTI
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

void setup_exti_runes(){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b09d      	sub	sp, #116	; 0x74
 8001374:	af00      	add	r7, sp, #0
	ExternalInterrupt::instances = {
		{PE0.gpio_pin, ExternalInterrupt::Instance(EXTI0_IRQn)},
 8001376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137a:	2106      	movs	r1, #6
 800137c:	4618      	mov	r0, r3
 800137e:	f01e f94f 	bl	801f620 <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>
	ExternalInterrupt::instances = {
 8001382:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	491c      	ldr	r1, [pc, #112]	; (80013fc <_Z16setup_exti_runesv+0x8c>)
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f807 	bl	80033a0 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR7GPIOPinS2_Lb1EEEOT_OT0_>
		{PE1.gpio_pin, ExternalInterrupt::Instance(EXTI1_IRQn)}
 8001392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001396:	2107      	movs	r1, #7
 8001398:	4618      	mov	r0, r3
 800139a:	f01e f941 	bl	801f620 <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>
	ExternalInterrupt::instances = {
 800139e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	331c      	adds	r3, #28
 80013a8:	4915      	ldr	r1, [pc, #84]	; (8001400 <_Z16setup_exti_runesv+0x90>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fff8 	bl	80033a0 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR7GPIOPinS2_Lb1EEEOT_OT0_>
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	2302      	movs	r3, #2
 80013b8:	607b      	str	r3, [r7, #4]
	};
 80013ba:	463b      	mov	r3, r7
 80013bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <_Z16setup_exti_runesv+0x94>)
 80013c2:	f002 f809 	bl	80033d8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEaSESt16initializer_listIS6_E>
 80013c6:	f107 0408 	add.w	r4, r7, #8
 80013ca:	3438      	adds	r4, #56	; 0x38
	ExternalInterrupt::instances = {
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	429c      	cmp	r4, r3
 80013d2:	d004      	beq.n	80013de <_Z16setup_exti_runesv+0x6e>
	};
 80013d4:	3c1c      	subs	r4, #28
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff ffbc 	bl	8001354 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
	ExternalInterrupt::instances = {
 80013dc:	e7f6      	b.n	80013cc <_Z16setup_exti_runesv+0x5c>
		{PE1.gpio_pin, ExternalInterrupt::Instance(EXTI1_IRQn)}
 80013de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffa8 	bl	8001338 <_ZN17ExternalInterrupt8InstanceD1Ev>
		{PE0.gpio_pin, ExternalInterrupt::Instance(EXTI0_IRQn)},
 80013e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffa3 	bl	8001338 <_ZN17ExternalInterrupt8InstanceD1Ev>
}
 80013f2:	bf00      	nop
 80013f4:	3774      	adds	r7, #116	; 0x74
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400130c 	.word	0x2400130c
 8001400:	24001314 	.word	0x24001314
 8001404:	240017ec 	.word	0x240017ec

08001408 <_Z11setup_runesv>:
#include "UART_runes.hpp"
#include "Encoder_runes.hpp"
#include "InputCapture_runes.hpp"
#include "EXTI_runes.hpp"

void setup_runes(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	setup_adc_runes();
 800140c:	f7ff f8e8 	bl	80005e0 <_Z15setup_adc_runesv>
	setup_timer_runes();
 8001410:	f7ff fb68 	bl	8000ae4 <_Z17setup_timer_runesv>
	setup_spi_runes();
 8001414:	f7ff fe3c 	bl	8001090 <_Z15setup_spi_runesv>
	setup_uart_runes();
 8001418:	f7ff fe94 	bl	8001144 <_Z16setup_uart_runesv>
	setup_encoder_runes();
 800141c:	f7ff ff34 	bl	8001288 <_Z19setup_encoder_runesv>
	setup_input_capture_runes();
 8001420:	f7ff ff5e 	bl	80012e0 <_Z25setup_input_capture_runesv>
	setup_exti_runes();
 8001424:	f7ff ffa4 	bl	8001370 <_Z16setup_exti_runesv>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_FDCAN_RxFifo0Callback>:
uint8_t reed6_value;

FDCAN_RxHeaderTypeDef RXheader;
uint8_t RXdata[8] = {0, 1, 2, 3, 4, 5, 6, 7};
uint32_t id;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RXheader, RXdata);
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f010 fe87 	bl	8012150 <HAL_FDCAN_GetRxMessage>
	id = RXheader.Identifier;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_FDCAN_RxFifo0Callback+0x30>)
 8001448:	6013      	str	r3, [r2, #0]
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000050 	.word	0x24000050
 8001458:	24000ef8 	.word	0x24000ef8
 800145c:	24000f20 	.word	0x24000f20

08001460 <main>:
void led_update() {

}

int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b0      	sub	sp, #192	; 0xc0
 8001464:	af00      	add	r7, sp, #0

  setup_runes();
 8001466:	f7ff ffcf 	bl	8001408 <_Z11setup_runesv>

  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001474:	2b09      	cmp	r3, #9
 8001476:	dc1d      	bgt.n	80014b4 <main+0x54>
	  test_ids_adc1[i] = ADC::inscribe(*test_pins_adc1[i]).value();
 8001478:	4acc      	ldr	r2, [pc, #816]	; (80017ac <main+0x34c>)
 800147a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001486:	f019 fdf9 	bl	801b07c <_ZN3ADC8inscribeE3Pin>
 800148a:	4603      	mov	r3, r0
 800148c:	863b      	strh	r3, [r7, #48]	; 0x30
 800148e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001492:	4618      	mov	r0, r3
 8001494:	f001 ffc8 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 8001498:	4603      	mov	r3, r0
 800149a:	7819      	ldrb	r1, [r3, #0]
 800149c:	4ac4      	ldr	r2, [pc, #784]	; (80017b0 <main+0x350>)
 800149e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014a2:	4413      	add	r3, r2
 80014a4:	460a      	mov	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 80014a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014ac:	3301      	adds	r3, #1
 80014ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014b2:	e7dd      	b.n	8001470 <main+0x10>
  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014be:	2b01      	cmp	r3, #1
 80014c0:	dc1d      	bgt.n	80014fe <main+0x9e>
	  test_ids_adc2[i] = ADC::inscribe(*test_pins_adc2[i]).value();
 80014c2:	4abc      	ldr	r2, [pc, #752]	; (80017b4 <main+0x354>)
 80014c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d0:	f019 fdd4 	bl	801b07c <_ZN3ADC8inscribeE3Pin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80014d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 ffa3 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	4ab4      	ldr	r2, [pc, #720]	; (80017b8 <main+0x358>)
 80014e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014ec:	4413      	add	r3, r2
 80014ee:	460a      	mov	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 80014f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014fc:	e7dd      	b.n	80014ba <main+0x5a>
  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001508:	2b07      	cmp	r3, #7
 800150a:	dc1d      	bgt.n	8001548 <main+0xe8>
	  test_ids_adc3[i] = ADC::inscribe(*test_pins_adc3[i]).value();
 800150c:	4aab      	ldr	r2, [pc, #684]	; (80017bc <main+0x35c>)
 800150e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151a:	f019 fdaf 	bl	801b07c <_ZN3ADC8inscribeE3Pin>
 800151e:	4603      	mov	r3, r0
 8001520:	873b      	strh	r3, [r7, #56]	; 0x38
 8001522:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001526:	4618      	mov	r0, r3
 8001528:	f001 ff7e 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 800152c:	4603      	mov	r3, r0
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	4aa3      	ldr	r2, [pc, #652]	; (80017c0 <main+0x360>)
 8001532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 800153c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001540:	3301      	adds	r3, #1
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001546:	e7dd      	b.n	8001504 <main+0xa4>

  // Ethernet::inscribe();

  uint8_t green_pwm				= PWMservice::inscribe(PWM_GREEN).value();
 8001548:	489e      	ldr	r0, [pc, #632]	; (80017c4 <main+0x364>)
 800154a:	f020 f88d 	bl	8021668 <_ZN10PWMservice8inscribeER3Pin>
 800154e:	4603      	mov	r3, r0
 8001550:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001552:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001556:	4618      	mov	r0, r3
 8001558:	f001 ff66 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 800155c:	4603      	mov	r3, r0
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  uint8_t red_pwm				= PWMservice::inscribe(PWM_RED).value();
 8001564:	4898      	ldr	r0, [pc, #608]	; (80017c8 <main+0x368>)
 8001566:	f020 f87f 	bl	8021668 <_ZN10PWMservice8inscribeER3Pin>
 800156a:	4603      	mov	r3, r0
 800156c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001574:	4618      	mov	r0, r3
 8001576:	f001 ff57 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 800157a:	4603      	mov	r3, r0
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
  uint8_t blue_pwm				= PWMservice::inscribe(PWM_BLUE).value();
 8001582:	4892      	ldr	r0, [pc, #584]	; (80017cc <main+0x36c>)
 8001584:	f020 f870 	bl	8021668 <_ZN10PWMservice8inscribeER3Pin>
 8001588:	4603      	mov	r3, r0
 800158a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800158e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001592:	4618      	mov	r0, r3
 8001594:	f001 ff48 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 8001598:	4603      	mov	r3, r0
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
  uint8_t regulador_out_pwm		= PWMservice::inscribe(REGULATOR_OUT).value();
 80015a0:	488b      	ldr	r0, [pc, #556]	; (80017d0 <main+0x370>)
 80015a2:	f020 f861 	bl	8021668 <_ZN10PWMservice8inscribeER3Pin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80015ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 ff39 	bl	8003428 <_ZNOSt8optionalIhE5valueEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

  uint8_t sleep_led				= DigitalOutputService::inscribe(PG4);
 80015be:	4885      	ldr	r0, [pc, #532]	; (80017d4 <main+0x374>)
 80015c0:	f01d ff5a 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint8_t flash_led				= DigitalOutputService::inscribe(PG5);
 80015ca:	4883      	ldr	r0, [pc, #524]	; (80017d8 <main+0x378>)
 80015cc:	f01d ff54 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
  uint8_t can_led 				= DigitalOutputService::inscribe(PG6);
 80015d6:	4881      	ldr	r0, [pc, #516]	; (80017dc <main+0x37c>)
 80015d8:	f01d ff4e 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  uint8_t fault_led				= DigitalOutputService::inscribe(PG7);
 80015e2:	487f      	ldr	r0, [pc, #508]	; (80017e0 <main+0x380>)
 80015e4:	f01d ff48 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  uint8_t operational_led		= DigitalOutputService::inscribe(PG8);
 80015ee:	487d      	ldr	r0, [pc, #500]	; (80017e4 <main+0x384>)
 80015f0:	f01d ff42 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  uint8_t actuator				= DigitalOutputService::inscribe(PE7);
 80015fa:	487b      	ldr	r0, [pc, #492]	; (80017e8 <main+0x388>)
 80015fc:	f01d ff3c 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 8001600:	4603      	mov	r3, r0
 8001602:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  uint8_t emergency_tape_enable	= DigitalOutputService::inscribe(PG1);
 8001606:	4879      	ldr	r0, [pc, #484]	; (80017ec <main+0x38c>)
 8001608:	f01d ff36 	bl	801f478 <_ZN20DigitalOutputService8inscribeER3Pin>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

  uint8_t tape2 = DigitalInput::inscribe(PC6);
 8001612:	4877      	ldr	r0, [pc, #476]	; (80017f0 <main+0x390>)
 8001614:	f01c fe4e 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  uint8_t tape1 = DigitalInput::inscribe(PC7);
 800161e:	4875      	ldr	r0, [pc, #468]	; (80017f4 <main+0x394>)
 8001620:	f01c fe48 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint8_t tapeE = DigitalInput::inscribe(PE0);
 800162a:	4873      	ldr	r0, [pc, #460]	; (80017f8 <main+0x398>)
 800162c:	f01c fe42 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001630:	4603      	mov	r3, r0
 8001632:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

  uint8_t reed1 = DigitalInput::inscribe(REED_1);
 8001636:	4871      	ldr	r0, [pc, #452]	; (80017fc <main+0x39c>)
 8001638:	f01c fe3c 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  uint8_t reed2 = DigitalInput::inscribe(REED_2);
 8001642:	486f      	ldr	r0, [pc, #444]	; (8001800 <main+0x3a0>)
 8001644:	f01c fe36 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  uint8_t reed3 = DigitalInput::inscribe(REED_3);
 800164e:	486d      	ldr	r0, [pc, #436]	; (8001804 <main+0x3a4>)
 8001650:	f01c fe30 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  uint8_t reed4 = DigitalInput::inscribe(REED_4);
 800165a:	486b      	ldr	r0, [pc, #428]	; (8001808 <main+0x3a8>)
 800165c:	f01c fe2a 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  uint8_t reed5 = DigitalInput::inscribe(REED_5);
 8001666:	4869      	ldr	r0, [pc, #420]	; (800180c <main+0x3ac>)
 8001668:	f01c fe24 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
  uint8_t reed6 = DigitalInput::inscribe(REED_6);
 8001672:	4867      	ldr	r0, [pc, #412]	; (8001810 <main+0x3b0>)
 8001674:	f01c fe1e 	bl	801e2b4 <_ZN12DigitalInput8inscribeER3Pin>
 8001678:	4603      	mov	r3, r0
 800167a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

  FDCAN_TxHeaderTypeDef header;
  header.FDFormat = FDCAN_FD_CAN;
 800167e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  header.DataLength = FDCAN_DLC_BYTES_8;
 8001684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001688:	61bb      	str	r3, [r7, #24]
  header.TxFrameType = FDCAN_DATA_FRAME;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  header.BitRateSwitch = FDCAN_BRS_ON;
 800168e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001692:	623b      	str	r3, [r7, #32]
  header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8001694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001698:	61fb      	str	r3, [r7, #28]
  header.FDFormat = FDCAN_FRAME_FD_BRS;
 800169a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  header.IdType = FDCAN_STANDARD_ID;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  header.MessageMarker = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  header.Identifier = 1234;
 80016ac:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80016b0:	60fb      	str	r3, [r7, #12]
  uint8_t data[8] = {0, 1, 2, 3, 4, 5, 6, 7};
 80016b2:	4a58      	ldr	r2, [pc, #352]	; (8001814 <main+0x3b4>)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ba:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_Init();
 80016be:	f00c f8d7 	bl	800d870 <HAL_Init>

  Pin::start();
 80016c2:	f017 fcd5 	bl	8019070 <_ZN3Pin5startEv>
  MX_DMA_Init();
 80016c6:	f000 fb4f 	bl	8001d68 <_Z11MX_DMA_Initv>
  ADC::start();
 80016ca:	f019 fd49 	bl	801b160 <_ZN3ADC5startEv>
  SystemClock_Config();
 80016ce:	f000 fa8b 	bl	8001be8 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 80016d2:	f000 fb11 	bl	8001cf8 <_Z24PeriphCommonClock_Configv>

  MX_FDCAN1_Init();
 80016d6:	f000 fbdb 	bl	8001e90 <_Z14MX_FDCAN1_Initv>
  MX_LPTIM1_Init();
 80016da:	f000 fb75 	bl	8001dc8 <_Z14MX_LPTIM1_Initv>
  MX_LPTIM2_Init();
 80016de:	f000 fba5 	bl	8001e2c <_Z14MX_LPTIM2_Initv>
  MX_LPTIM3_Init();
 80016e2:	f000 fc3f 	bl	8001f64 <_Z14MX_LPTIM3_Initv>

  MX_TIM1_Init();
 80016e6:	f000 fc71 	bl	8001fcc <_Z12MX_TIM1_Initv>
  MX_TIM2_Init();
 80016ea:	f000 fd45 	bl	8002178 <_Z12MX_TIM2_Initv>
  MX_TIM3_Init();
 80016ee:	f000 fd9f 	bl	8002230 <_Z12MX_TIM3_Initv>
  MX_TIM4_Init();
 80016f2:	f000 fe37 	bl	8002364 <_Z12MX_TIM4_Initv>
  MX_TIM5_Init();
 80016f6:	f000 fecf 	bl	8002498 <_Z12MX_TIM5_Initv>
  MX_TIM6_Init();
 80016fa:	f000 ff2b 	bl	8002554 <_Z12MX_TIM6_Initv>
  MX_TIM8_Init();
 80016fe:	f000 ff69 	bl	80025d4 <_Z12MX_TIM8_Initv>
  MX_TIM12_Init();
 8001702:	f000 ffcb 	bl	800269c <_Z13MX_TIM12_Initv>
  MX_TIM15_Init();
 8001706:	f001 f829 	bl	800275c <_Z13MX_TIM15_Initv>
  MX_TIM16_Init();
 800170a:	f001 f8d3 	bl	80028b4 <_Z13MX_TIM16_Initv>
  MX_TIM17_Init();
 800170e:	f001 f95f 	bl	80029d0 <_Z13MX_TIM17_Initv>
  MX_TIM23_Init();
 8001712:	f001 f9eb 	bl	8002aec <_Z13MX_TIM23_Initv>
  MX_TIM24_Init();
 8001716:	f001 fa9f 	bl	8002c58 <_Z13MX_TIM24_Initv>

//  HAL_ETH_Start_IT(&heth);
//  MX_LWIP_Init();

  TimerPeripheral::start();
 800171a:	f018 ff3b 	bl	801a594 <_ZN15TimerPeripheral5startEv>

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800171e:	483e      	ldr	r0, [pc, #248]	; (8001818 <main+0x3b8>)
 8001720:	f010 fc90 	bl	8012044 <HAL_FDCAN_Start>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <main+0x2d8>
	  Error_Handler();
 8001734:	f000 fc44 	bl	8001fc0 <Error_Handler>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	4836      	ldr	r0, [pc, #216]	; (8001818 <main+0x3b8>)
 800173e:	f010 fe75 	bl	801242c <HAL_FDCAN_ActivateNotification>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <main+0x2f6>
	  Error_Handler();
 8001752:	f000 fc35 	bl	8001fc0 <Error_Handler>

  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800175c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001760:	2b09      	cmp	r3, #9
 8001762:	dc0d      	bgt.n	8001780 <main+0x320>
	  ADC::turn_on(test_ids_adc1[i]);
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <main+0x350>)
 8001766:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f019 fd1a 	bl	801b1a8 <_ZN3ADC7turn_onEh>
  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 8001774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001778:	3301      	adds	r3, #1
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800177e:	e7ed      	b.n	800175c <main+0x2fc>
  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178a:	2b01      	cmp	r3, #1
 800178c:	dc46      	bgt.n	800181c <main+0x3bc>
	  ADC::turn_on(test_ids_adc2[i]);
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <main+0x358>)
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f019 fd05 	bl	801b1a8 <_ZN3ADC7turn_onEh>
  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 800179e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a2:	3301      	adds	r3, #1
 80017a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80017a8:	e7ed      	b.n	8001786 <main+0x326>
 80017aa:	bf00      	nop
 80017ac:	24000000 	.word	0x24000000
 80017b0:	24000e84 	.word	0x24000e84
 80017b4:	24000028 	.word	0x24000028
 80017b8:	24000eb8 	.word	0x24000eb8
 80017bc:	24000030 	.word	0x24000030
 80017c0:	24000ec4 	.word	0x24000ec4
 80017c4:	24001020 	.word	0x24001020
 80017c8:	24001028 	.word	0x24001028
 80017cc:	24001018 	.word	0x24001018
 80017d0:	24001300 	.word	0x24001300
 80017d4:	240011e0 	.word	0x240011e0
 80017d8:	240011e8 	.word	0x240011e8
 80017dc:	240011f0 	.word	0x240011f0
 80017e0:	240011f8 	.word	0x240011f8
 80017e4:	24001200 	.word	0x24001200
 80017e8:	24001118 	.word	0x24001118
 80017ec:	24001110 	.word	0x24001110
 80017f0:	24001208 	.word	0x24001208
 80017f4:	24001210 	.word	0x24001210
 80017f8:	24001308 	.word	0x24001308
 80017fc:	240011d8 	.word	0x240011d8
 8001800:	240011d0 	.word	0x240011d0
 8001804:	240011a8 	.word	0x240011a8
 8001808:	240011a0 	.word	0x240011a0
 800180c:	24001190 	.word	0x24001190
 8001810:	24001198 	.word	0x24001198
 8001814:	08023844 	.word	0x08023844
 8001818:	240007b0 	.word	0x240007b0
  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001826:	2b07      	cmp	r3, #7
 8001828:	dc0d      	bgt.n	8001846 <main+0x3e6>
	  ADC::turn_on(test_ids_adc3[i]);
 800182a:	4adf      	ldr	r2, [pc, #892]	; (8001ba8 <main+0x748>)
 800182c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f019 fcb7 	bl	801b1a8 <_ZN3ADC7turn_onEh>
  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 800183a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800183e:	3301      	adds	r3, #1
 8001840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001844:	e7ed      	b.n	8001822 <main+0x3c2>

  DigitalOutputService::turn_on(sleep_led);
 8001846:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800184a:	4618      	mov	r0, r3
 800184c:	f01d fe5e 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(flash_led);
 8001850:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001854:	4618      	mov	r0, r3
 8001856:	f01d fe59 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(fault_led);
 800185a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800185e:	4618      	mov	r0, r3
 8001860:	f01d fe54 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(can_led);
 8001864:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001868:	4618      	mov	r0, r3
 800186a:	f01d fe4f 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(operational_led);
 800186e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001872:	4618      	mov	r0, r3
 8001874:	f01d fe4a 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(actuator);
 8001878:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800187c:	4618      	mov	r0, r3
 800187e:	f01d fe45 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>
  DigitalOutputService::turn_on(emergency_tape_enable);
 8001882:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001886:	4618      	mov	r0, r3
 8001888:	f01d fe40 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>

  PWMservice::set_duty_cycle(green_pwm	, 50);
 800188c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001890:	2132      	movs	r1, #50	; 0x32
 8001892:	4618      	mov	r0, r3
 8001894:	f01f ff90 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(red_pwm	, 50);
 8001898:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800189c:	2132      	movs	r1, #50	; 0x32
 800189e:	4618      	mov	r0, r3
 80018a0:	f01f ff8a 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(blue_pwm	, 50);
 80018a4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80018a8:	2132      	movs	r1, #50	; 0x32
 80018aa:	4618      	mov	r0, r3
 80018ac:	f01f ff84 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(regulador_out_pwm	, 50);
 80018b0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80018b4:	2132      	movs	r1, #50	; 0x32
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01f ff7e 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>

  PWMservice::turn_on(green_pwm);
 80018bc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80018c0:	4618      	mov	r0, r3
 80018c2:	f01f ff35 	bl	8021730 <_ZN10PWMservice7turn_onEh>
  PWMservice::turn_on(blue_pwm);
 80018c6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80018ca:	4618      	mov	r0, r3
 80018cc:	f01f ff30 	bl	8021730 <_ZN10PWMservice7turn_onEh>
  PWMservice::turn_on(red_pwm);
 80018d0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80018d4:	4618      	mov	r0, r3
 80018d6:	f01f ff2b 	bl	8021730 <_ZN10PWMservice7turn_onEh>
  PWMservice::turn_on(regulador_out_pwm);
 80018da:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80018de:	4618      	mov	r0, r3
 80018e0:	f01f ff26 	bl	8021730 <_ZN10PWMservice7turn_onEh>

  PWMservice::set_duty_cycle(green_pwm	, 50);
 80018e4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80018e8:	2132      	movs	r1, #50	; 0x32
 80018ea:	4618      	mov	r0, r3
 80018ec:	f01f ff64 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(red_pwm	, 0);
 80018f0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f01f ff5e 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(blue_pwm	, 0);
 80018fc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f01f ff58 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  HAL_Delay(500);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f00c f842 	bl	800d994 <HAL_Delay>

  PWMservice::set_duty_cycle(green_pwm	, 0);
 8001910:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f01f ff4e 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(red_pwm	, 50);
 800191c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001920:	2132      	movs	r1, #50	; 0x32
 8001922:	4618      	mov	r0, r3
 8001924:	f01f ff48 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(blue_pwm	, 0);
 8001928:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f01f ff42 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  HAL_Delay(500);
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f00c f82c 	bl	800d994 <HAL_Delay>

  PWMservice::set_duty_cycle(green_pwm	, 0);
 800193c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f01f ff38 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(red_pwm	, 0);
 8001948:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f01f ff32 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  PWMservice::set_duty_cycle(blue_pwm	, 50);
 8001954:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001958:	2132      	movs	r1, #50	; 0x32
 800195a:	4618      	mov	r0, r3
 800195c:	f01f ff2c 	bl	80217b8 <_ZN10PWMservice14set_duty_cycleEhh>
  HAL_Delay(500);
 8001960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001964:	f00c f816 	bl	800d994 <HAL_Delay>


  while (1) {

	  HAL_Delay(100);
 8001968:	2064      	movs	r0, #100	; 0x64
 800196a:	f00c f813 	bl	800d994 <HAL_Delay>
	  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001978:	2b09      	cmp	r3, #9
 800197a:	dc1d      	bgt.n	80019b8 <main+0x558>
		  test_results_adc1[i] = ADC::get_value(test_ids_adc1[i]).value();
 800197c:	4a8b      	ldr	r2, [pc, #556]	; (8001bac <main+0x74c>)
 800197e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f019 fc67 	bl	801b260 <_ZN3ADC9get_valueEh>
 8001992:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fd6b 	bl	8003472 <_ZNOSt8optionalIfE5valueEv>
 800199c:	4603      	mov	r3, r0
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4983      	ldr	r1, [pc, #524]	; (8001bb0 <main+0x750>)
 80019a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < TEST_SIZE_ADC1; i++)
 80019ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019b6:	e7dd      	b.n	8001974 <main+0x514>
	  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	dc1d      	bgt.n	8001a02 <main+0x5a2>
		  test_results_adc2[i] = ADC::get_value(test_ids_adc2[i]).value();
 80019c6:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <main+0x754>)
 80019c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019cc:	4413      	add	r3, r2
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f019 fc42 	bl	801b260 <_ZN3ADC9get_valueEh>
 80019dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fd46 	bl	8003472 <_ZNOSt8optionalIfE5valueEv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4973      	ldr	r1, [pc, #460]	; (8001bb8 <main+0x758>)
 80019ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < TEST_SIZE_ADC2; i++)
 80019f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019fa:	3301      	adds	r3, #1
 80019fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a00:	e7dd      	b.n	80019be <main+0x55e>
	  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	dc1d      	bgt.n	8001a4c <main+0x5ec>
		  test_results_adc3[i] = ADC::get_value(test_ids_adc3[i]).value();
 8001a10:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <main+0x748>)
 8001a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a16:	4413      	add	r3, r2
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f019 fc1d 	bl	801b260 <_ZN3ADC9get_valueEh>
 8001a26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fd21 	bl	8003472 <_ZNOSt8optionalIfE5valueEv>
 8001a30:	4603      	mov	r3, r0
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4961      	ldr	r1, [pc, #388]	; (8001bbc <main+0x75c>)
 8001a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < TEST_SIZE_ADC3; i++)
 8001a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a44:	3301      	adds	r3, #1
 8001a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a4a:	e7dd      	b.n	8001a08 <main+0x5a8>

	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &header, data);
 8001a4c:	1d3a      	adds	r2, r7, #4
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4619      	mov	r1, r3
 8001a54:	485a      	ldr	r0, [pc, #360]	; (8001bc0 <main+0x760>)
 8001a56:	f010 fb20 	bl	801209a <HAL_FDCAN_AddMessageToTxFifoQ>
	  tape2_value = DigitalInput::read_pin_state(tape2).value();
 8001a5a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f01c fc48 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001a6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fd24 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <main+0x764>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	  tape1_value = DigitalInput::read_pin_state(tape1).value();
 8001a7c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001a80:	4618      	mov	r0, r3
 8001a82:	f01c fc37 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001a8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fd13 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <main+0x768>)
 8001a9c:	701a      	strb	r2, [r3, #0]
	  tapeE_value = DigitalInput::read_pin_state(tapeE).value();
 8001a9e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f01c fc26 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001aae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fd02 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <main+0x76c>)
 8001abe:	701a      	strb	r2, [r3, #0]

	  reed1_value = DigitalInput::read_pin_state(reed1).value();
 8001ac0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f01c fc15 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001ad0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fcf1 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <main+0x770>)
 8001ae0:	701a      	strb	r2, [r3, #0]
	  reed2_value = DigitalInput::read_pin_state(reed2).value();
 8001ae2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f01c fc04 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001af2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fce0 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <main+0x774>)
 8001b02:	701a      	strb	r2, [r3, #0]
	  reed3_value = DigitalInput::read_pin_state(reed3).value();
 8001b04:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f01c fbf3 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001b14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fccf 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <main+0x778>)
 8001b24:	701a      	strb	r2, [r3, #0]
	  reed4_value = DigitalInput::read_pin_state(reed4).value();
 8001b26:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f01c fbe2 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001b36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fcbe 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <main+0x77c>)
 8001b46:	701a      	strb	r2, [r3, #0]
	  reed5_value = DigitalInput::read_pin_state(reed5).value();
 8001b48:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f01c fbd1 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001b58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fcad 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <main+0x780>)
 8001b68:	701a      	strb	r2, [r3, #0]
	  reed6_value = DigitalInput::read_pin_state(reed6).value();
 8001b6a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f01c fbc0 	bl	801e2f4 <_ZN12DigitalInput14read_pin_stateEh>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001b7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fc9c 	bl	80034bc <_ZNOSt8optionalI8PinStateE5valueEv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <main+0x784>)
 8001b8a:	701a      	strb	r2, [r3, #0]

	  DigitalOutputService::turn_off(actuator);
 8001b8c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001b90:	4618      	mov	r0, r3
 8001b92:	f01d fc91 	bl	801f4b8 <_ZN20DigitalOutputService8turn_offEh>
	  HAL_Delay(100);
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f00b fefc 	bl	800d994 <HAL_Delay>
	  DigitalOutputService::turn_on(actuator);
 8001b9c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f01d fcb3 	bl	801f50c <_ZN20DigitalOutputService7turn_onEh>

//	  ethernetif_input(&gnetif);
//	  MX_LWIP_Process();
  }
 8001ba6:	e6df      	b.n	8001968 <main+0x508>
 8001ba8:	24000ec4 	.word	0x24000ec4
 8001bac:	24000e84 	.word	0x24000e84
 8001bb0:	24000e90 	.word	0x24000e90
 8001bb4:	24000eb8 	.word	0x24000eb8
 8001bb8:	24000ebc 	.word	0x24000ebc
 8001bbc:	24000ecc 	.word	0x24000ecc
 8001bc0:	240007b0 	.word	0x240007b0
 8001bc4:	24000eec 	.word	0x24000eec
 8001bc8:	24000eed 	.word	0x24000eed
 8001bcc:	24000eee 	.word	0x24000eee
 8001bd0:	24000eef 	.word	0x24000eef
 8001bd4:	24000ef0 	.word	0x24000ef0
 8001bd8:	24000ef1 	.word	0x24000ef1
 8001bdc:	24000ef2 	.word	0x24000ef2
 8001be0:	24000ef3 	.word	0x24000ef3
 8001be4:	24000ef4 	.word	0x24000ef4

08001be8 <_Z18SystemClock_Configv>:

}

void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09c      	sub	sp, #112	; 0x70
 8001bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	224c      	movs	r2, #76	; 0x4c
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f021 fc82 	bl	8023500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2220      	movs	r2, #32
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f021 fc7c 	bl	8023500 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f011 ff97 	bl	8013b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <_Z18SystemClock_Configv+0x108>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <_Z18SystemClock_Configv+0x108>)
 8001c18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <_Z18SystemClock_Configv+0x108>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <_Z18SystemClock_Configv+0x108>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d000      	beq.n	8001c44 <_Z18SystemClock_Configv+0x5c>
 8001c42:	e7f2      	b.n	8001c2a <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <_Z18SystemClock_Configv+0x10c>)
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f023 0303 	bic.w	r3, r3, #3
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <_Z18SystemClock_Configv+0x10c>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c54:	2309      	movs	r3, #9
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	2302      	movs	r3, #2
 8001c64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c66:	2302      	movs	r3, #2
 8001c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001c6e:	232c      	movs	r3, #44	; 0x2c
 8001c70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c76:	2303      	movs	r3, #3
 8001c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c7e:	230c      	movs	r3, #12
 8001c80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f011 ff8e 	bl	8013bb0 <HAL_RCC_OscConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <_Z18SystemClock_Configv+0xc0>
  {
	Error_Handler();
 8001ca4:	f000 f98c 	bl	8001fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	233f      	movs	r3, #63	; 0x3f
 8001caa:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
							  |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cac:	2303      	movs	r3, #3
 8001cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cbc:	2340      	movs	r3, #64	; 0x40
 8001cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2103      	movs	r1, #3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f012 fb48 	bl	8014364 <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <_Z18SystemClock_Configv+0x100>
  {
	Error_Handler();
 8001ce4:	f000 f96c 	bl	8001fc0 <Error_Handler>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3770      	adds	r7, #112	; 0x70
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	58024800 	.word	0x58024800
 8001cf4:	58024400 	.word	0x58024400

08001cf8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0ae      	sub	sp, #184	; 0xb8
 8001cfc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	22b8      	movs	r2, #184	; 0xb8
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f021 fbfb 	bl	8023500 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 8001d0a:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8001d16:	230a      	movs	r3, #10
 8001d18:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 120;
 8001d1a:	2378      	movs	r3, #120	; 0x78
 8001d1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001d22:	2314      	movs	r3, #20
 8001d24:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001d2a:	2340      	movs	r3, #64	; 0x40
 8001d2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001d36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	4618      	mov	r0, r3
 8001d46:	f012 fe83 	bl	8014a50 <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <_Z24PeriphCommonClock_Configv+0x66>
  {
	Error_Handler();
 8001d5a:	f000 f931 	bl	8001fc0 <Error_Handler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	37b8      	adds	r7, #184	; 0xb8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_Z11MX_DMA_Initv>:

void MX_DMA_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_Z11MX_DMA_Initv+0x5c>)
 8001d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <_Z11MX_DMA_Initv+0x5c>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_Z11MX_DMA_Initv+0x5c>)
 8001d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	200b      	movs	r0, #11
 8001d92:	f00d fd22 	bl	800f7da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d96:	200b      	movs	r0, #11
 8001d98:	f00d fd39 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200c      	movs	r0, #12
 8001da2:	f00d fd1a 	bl	800f7da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001da6:	200c      	movs	r0, #12
 8001da8:	f00d fd31 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	200d      	movs	r0, #13
 8001db2:	f00d fd12 	bl	800f7da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001db6:	200d      	movs	r0, #13
 8001db8:	f00d fd29 	bl	800f80e <HAL_NVIC_EnableIRQ>

}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	58024400 	.word	0x58024400

08001dc8 <_Z14MX_LPTIM1_Initv>:

void MX_LPTIM1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <_Z14MX_LPTIM1_Initv+0x60>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <_Z14MX_LPTIM1_Initv+0x5c>)
 8001e06:	f011 fa8d 	bl	8013324 <HAL_LPTIM_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <_Z14MX_LPTIM1_Initv+0x56>
  {
    Error_Handler();
 8001e1a:	f000 f8d1 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000850 	.word	0x24000850
 8001e28:	40002400 	.word	0x40002400

08001e2c <_Z14MX_LPTIM2_Initv>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <_Z14MX_LPTIM2_Initv+0x60>)
 8001e34:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e48:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <_Z14MX_LPTIM2_Initv+0x5c>)
 8001e6a:	f011 fa5b 	bl	8013324 <HAL_LPTIM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <_Z14MX_LPTIM2_Initv+0x56>
  {
	Error_Handler();
 8001e7e:	f000 f89f 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	24000888 	.word	0x24000888
 8001e8c:	58002400 	.word	0x58002400

08001e90 <_Z14MX_FDCAN1_Initv>:

void MX_FDCAN1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <_Z14MX_FDCAN1_Initv+0xd0>)
 8001e98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 16;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f02:	2204      	movs	r2, #4
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f38:	2204      	movs	r2, #4
 8001f3a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <_Z14MX_FDCAN1_Initv+0xcc>)
 8001f3e:	f00f fea3 	bl	8011c88 <HAL_FDCAN_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <_Z14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 8001f52:	f000 f835 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	240007b0 	.word	0x240007b0
 8001f60:	4000a000 	.word	0x4000a000

08001f64 <_Z14MX_LPTIM3_Initv>:

void MX_LPTIM3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	/* USER CODE END LPTIM3_Init 0 */

	/* USER CODE BEGIN LPTIM3_Init 1 */

	/* USER CODE END LPTIM3_Init 1 */
	hlptim3.Instance = LPTIM3;
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_Z14MX_LPTIM3_Initv+0x58>)
 8001f6c:	601a      	str	r2, [r3, #0]
	hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
	hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
	hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	615a      	str	r2, [r3, #20]
	hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
	hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <_Z14MX_LPTIM3_Initv+0x54>)
 8001f9c:	f011 f9c2 	bl	8013324 <HAL_LPTIM_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_Z14MX_LPTIM3_Initv+0x50>
	{
	Error_Handler();
 8001fb0:	f000 f806 	bl	8001fc0 <Error_Handler>
	}
	/* USER CODE BEGIN LPTIM3_Init 2 */

	/* USER CODE END LPTIM3_Init 2 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	240008c0 	.word	0x240008c0
 8001fbc:	58002800 	.word	0x58002800

08001fc0 <Error_Handler>:

void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>
	...

08001fcc <_Z12MX_TIM1_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b098      	sub	sp, #96	; 0x60
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2234      	movs	r2, #52	; 0x34
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f021 fa81 	bl	8023500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002000:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <_Z12MX_TIM1_Initv+0x1a8>)
 8002002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002004:	4b5a      	ldr	r3, [pc, #360]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b59      	ldr	r3, [pc, #356]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202a:	4851      	ldr	r0, [pc, #324]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 800202c:	f015 f94d 	bl	80172ca <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_Z12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002040:	f7ff ffbe 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002054:	4619      	mov	r1, r3
 8002056:	4846      	ldr	r0, [pc, #280]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002058:	f016 fde8 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <_Z12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 800206c:	f7ff ffa8 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002070:	2360      	movs	r3, #96	; 0x60
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207c:	2300      	movs	r3, #0
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800208c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	4836      	ldr	r0, [pc, #216]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002096:	f015 fd45 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <_Z12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 80020aa:	f7ff ff89 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b2:	2204      	movs	r2, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	482e      	ldr	r0, [pc, #184]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 80020b8:	f015 fd34 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <_Z12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 80020cc:	f7ff ff78 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d4:	2208      	movs	r2, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	4825      	ldr	r0, [pc, #148]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 80020da:	f015 fd23 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <_Z12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 80020ee:	f7ff ff67 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f6:	220c      	movs	r2, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	481d      	ldr	r0, [pc, #116]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 80020fc:	f015 fd12 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_Z12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8002110:	f7ff ff56 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 800214a:	f016 fe0b 	bl	8018d64 <HAL_TIMEx_ConfigBreakDeadTime>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <_Z12MX_TIM1_Initv+0x196>
  {
    Error_Handler();
 800215e:	f7ff ff2f 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <_Z12MX_TIM1_Initv+0x1a4>)
 8002164:	f00b f844 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 8002168:	bf00      	nop
 800216a:	3760      	adds	r7, #96	; 0x60
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	24000980 	.word	0x24000980
 8002174:	40010000 	.word	0x40010000

08002178 <_Z12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 8002198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021be:	481b      	ldr	r0, [pc, #108]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021c0:	f015 f82c 	bl	801721c <HAL_TIM_Base_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_Z12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80021d4:	f7ff fef4 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4619      	mov	r1, r3
 80021e4:	4811      	ldr	r0, [pc, #68]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 80021e6:	f015 fdb1 	bl	8017d4c <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <_Z12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80021fa:	f7ff fee1 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4808      	ldr	r0, [pc, #32]	; (800222c <_Z12MX_TIM2_Initv+0xb4>)
 800220c:	f016 fd0e 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <_Z12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002220:	f7ff fece 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	240009cc 	.word	0x240009cc

08002230 <_Z12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002242:	463b      	mov	r3, r7
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
 8002250:	615a      	str	r2, [r3, #20]
 8002252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002254:	4b41      	ldr	r3, [pc, #260]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002256:	4a42      	ldr	r2, [pc, #264]	; (8002360 <_Z12MX_TIM3_Initv+0x130>)
 8002258:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b3e      	ldr	r3, [pc, #248]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b39      	ldr	r3, [pc, #228]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800227a:	4838      	ldr	r0, [pc, #224]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 800227c:	f015 f825 	bl	80172ca <HAL_TIM_PWM_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_Z12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8002290:	f7ff fe96 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	482e      	ldr	r0, [pc, #184]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 80022a4:	f016 fcc2 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_Z12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 80022b8:	f7ff fe82 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4822      	ldr	r0, [pc, #136]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 80022d4:	f015 fc26 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_Z12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 80022e8:	f7ff fe6a 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ec:	463b      	mov	r3, r7
 80022ee:	2204      	movs	r2, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	481a      	ldr	r0, [pc, #104]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 80022f4:	f015 fc16 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <_Z12MX_TIM3_Initv+0xdc>
  {
    Error_Handler();
 8002308:	f7ff fe5a 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	2208      	movs	r2, #8
 8002310:	4619      	mov	r1, r3
 8002312:	4812      	ldr	r0, [pc, #72]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002314:	f015 fc06 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_Z12MX_TIM3_Initv+0xfc>
  {
    Error_Handler();
 8002328:	f7ff fe4a 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	220c      	movs	r2, #12
 8002330:	4619      	mov	r1, r3
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 8002334:	f015 fbf6 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <_Z12MX_TIM3_Initv+0x11c>
  {
    Error_Handler();
 8002348:	f7ff fe3a 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <_Z12MX_TIM3_Initv+0x12c>)
 800234e:	f00a ff4f 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	24000a18 	.word	0x24000a18
 8002360:	40000400 	.word	0x40000400

08002364 <_Z12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002376:	463b      	mov	r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	615a      	str	r2, [r3, #20]
 8002386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 800238a:	4a42      	ldr	r2, [pc, #264]	; (8002494 <_Z12MX_TIM4_Initv+0x130>)
 800238c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 800239c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023ae:	4838      	ldr	r0, [pc, #224]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 80023b0:	f014 ff8b 	bl	80172ca <HAL_TIM_PWM_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <_Z12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 80023c4:	f7ff fdfc 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	482e      	ldr	r0, [pc, #184]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 80023d8:	f016 fc28 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <_Z12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 80023ec:	f7ff fde8 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f0:	2360      	movs	r3, #96	; 0x60
 80023f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	4619      	mov	r1, r3
 8002406:	4822      	ldr	r0, [pc, #136]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002408:	f015 fb8c 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <_Z12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 800241c:	f7ff fdd0 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	2204      	movs	r2, #4
 8002424:	4619      	mov	r1, r3
 8002426:	481a      	ldr	r0, [pc, #104]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002428:	f015 fb7c 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <_Z12MX_TIM4_Initv+0xdc>
  {
    Error_Handler();
 800243c:	f7ff fdc0 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002440:	463b      	mov	r3, r7
 8002442:	2208      	movs	r2, #8
 8002444:	4619      	mov	r1, r3
 8002446:	4812      	ldr	r0, [pc, #72]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002448:	f015 fb6c 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf14      	ite	ne
 8002452:	2301      	movne	r3, #1
 8002454:	2300      	moveq	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <_Z12MX_TIM4_Initv+0xfc>
  {
    Error_Handler();
 800245c:	f7ff fdb0 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	220c      	movs	r2, #12
 8002464:	4619      	mov	r1, r3
 8002466:	480a      	ldr	r0, [pc, #40]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002468:	f015 fb5c 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <_Z12MX_TIM4_Initv+0x11c>
  {
    Error_Handler();
 800247c:	f7ff fda0 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <_Z12MX_TIM4_Initv+0x12c>)
 8002482:	f00a feb5 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	24000a64 	.word	0x24000a64
 8002494:	40000800 	.word	0x40000800

08002498 <_Z12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <_Z12MX_TIM5_Initv+0xb8>)
 80024ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80024bc:	4b23      	ldr	r3, [pc, #140]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295
 80024ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024dc:	481b      	ldr	r0, [pc, #108]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 80024de:	f014 fe9d 	bl	801721c <HAL_TIM_Base_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <_Z12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 80024f2:	f7ff fd65 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	4812      	ldr	r0, [pc, #72]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 8002504:	f015 fc22 	bl	8017d4c <HAL_TIM_ConfigClockSource>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <_Z12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8002518:	f7ff fd52 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <_Z12MX_TIM5_Initv+0xb4>)
 800252a:	f016 fb7f 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <_Z12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 800253e:	f7ff fd3f 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000ab0 	.word	0x24000ab0
 8002550:	40000c00 	.word	0x40000c00

08002554 <_Z12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 8002566:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <_Z12MX_TIM6_Initv+0x7c>)
 8002568:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 8002578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002584:	4811      	ldr	r0, [pc, #68]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 8002586:	f014 fe49 	bl	801721c <HAL_TIM_Base_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_Z12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800259a:	f7ff fd11 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <_Z12MX_TIM6_Initv+0x78>)
 80025ac:	f016 fb3e 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <_Z12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80025c0:	f7ff fcfe 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	24000afc 	.word	0x24000afc
 80025d0:	40001000 	.word	0x40001000

080025d4 <_Z12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f020 ff8c 	bl	8023500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <_Z12MX_TIM8_Initv+0xc4>)
 80025f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 8002606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800261e:	2301      	movs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002626:	2301      	movs	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002636:	2301      	movs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	4812      	ldr	r0, [pc, #72]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 800264a:	f015 f809 	bl	8017660 <HAL_TIM_Encoder_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <_Z12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 800265e:	f7ff fcaf 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800266e:	463b      	mov	r3, r7
 8002670:	4619      	mov	r1, r3
 8002672:	4808      	ldr	r0, [pc, #32]	; (8002694 <_Z12MX_TIM8_Initv+0xc0>)
 8002674:	f016 fada 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <_Z12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8002688:	f7ff fc9a 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	3730      	adds	r7, #48	; 0x30
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	24000b48 	.word	0x24000b48
 8002698:	40010400 	.word	0x40010400

0800269c <_Z13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM12_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	615a      	str	r2, [r3, #20]
 80026b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <_Z13MX_TIM12_Initv+0xbc>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026cc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026da:	481e      	ldr	r0, [pc, #120]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 80026dc:	f014 fdf5 	bl	80172ca <HAL_TIM_PWM_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_Z13MX_TIM12_Initv+0x58>
  {
    Error_Handler();
 80026f0:	f7ff fc66 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f4:	2360      	movs	r3, #96	; 0x60
 80026f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	4812      	ldr	r0, [pc, #72]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 800270c:	f015 fa0a 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <_Z13MX_TIM12_Initv+0x88>
  {
    Error_Handler();
 8002720:	f7ff fc4e 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2204      	movs	r2, #4
 8002728:	4619      	mov	r1, r3
 800272a:	480a      	ldr	r0, [pc, #40]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 800272c:	f015 f9fa 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <_Z13MX_TIM12_Initv+0xa8>
  {
    Error_Handler();
 8002740:	f7ff fc3e 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <_Z13MX_TIM12_Initv+0xb8>)
 8002746:	f00a fd53 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	24000b94 	.word	0x24000b94
 8002758:	40001800 	.word	0x40001800

0800275c <_Z13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM15_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b098      	sub	sp, #96	; 0x60
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2234      	movs	r2, #52	; 0x34
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f020 feb9 	bl	8023500 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 8002790:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <_Z13MX_TIM15_Initv+0x154>)
 8002792:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002794:	4b45      	ldr	r3, [pc, #276]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a8:	4b40      	ldr	r3, [pc, #256]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80027ba:	483c      	ldr	r0, [pc, #240]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027bc:	f014 fd85 	bl	80172ca <HAL_TIM_PWM_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <_Z13MX_TIM15_Initv+0x78>
  {
    Error_Handler();
 80027d0:	f7ff fbf6 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80027dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027e0:	4619      	mov	r1, r3
 80027e2:	4832      	ldr	r0, [pc, #200]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 80027e4:	f016 fa22 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <_Z13MX_TIM15_Initv+0xa0>
  {
    Error_Handler();
 80027f8:	f7ff fbe2 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fc:	2360      	movs	r3, #96	; 0x60
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002808:	2300      	movs	r3, #0
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4822      	ldr	r0, [pc, #136]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 8002822:	f015 f97f 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <_Z13MX_TIM15_Initv+0xde>
  {
    Error_Handler();
 8002836:	f7ff fbc3 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800283a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800283e:	2204      	movs	r2, #4
 8002840:	4619      	mov	r1, r3
 8002842:	481a      	ldr	r0, [pc, #104]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 8002844:	f015 f96e 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <_Z13MX_TIM15_Initv+0x100>
  {
    Error_Handler();
 8002858:	f7ff fbb2 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4619      	mov	r1, r3
 8002882:	480a      	ldr	r0, [pc, #40]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 8002884:	f016 fa6e 	bl	8018d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <_Z13MX_TIM15_Initv+0x140>
  {
    Error_Handler();
 8002898:	f7ff fb92 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <_Z13MX_TIM15_Initv+0x150>)
 800289e:	f00a fca7 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 80028a2:	bf00      	nop
 80028a4:	3760      	adds	r7, #96	; 0x60
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	24000be0 	.word	0x24000be0
 80028b0:	40014000 	.word	0x40014000

080028b4 <_Z13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM16_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b094      	sub	sp, #80	; 0x50
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	615a      	str	r2, [r3, #20]
 80028cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ce:	463b      	mov	r3, r7
 80028d0:	2234      	movs	r2, #52	; 0x34
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f020 fe13 	bl	8023500 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028dc:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <_Z13MX_TIM16_Initv+0x118>)
 80028de:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002906:	4830      	ldr	r0, [pc, #192]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 8002908:	f014 fc88 	bl	801721c <HAL_TIM_Base_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <_Z13MX_TIM16_Initv+0x6c>
  {
    Error_Handler();
 800291c:	f7ff fb50 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002920:	4829      	ldr	r0, [pc, #164]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 8002922:	f014 fcd2 	bl	80172ca <HAL_TIM_PWM_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <_Z13MX_TIM16_Initv+0x86>
  {
    Error_Handler();
 8002936:	f7ff fb43 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293a:	2360      	movs	r3, #96	; 0x60
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002942:	2300      	movs	r3, #0
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002946:	2300      	movs	r3, #0
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800295a:	2200      	movs	r2, #0
 800295c:	4619      	mov	r1, r3
 800295e:	481a      	ldr	r0, [pc, #104]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 8002960:	f015 f8e0 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <_Z13MX_TIM16_Initv+0xc4>
  {
    Error_Handler();
 8002974:	f7ff fb24 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800298c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800299a:	463b      	mov	r3, r7
 800299c:	4619      	mov	r1, r3
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80029a0:	f016 f9e0 	bl	8018d64 <HAL_TIMEx_ConfigBreakDeadTime>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <_Z13MX_TIM16_Initv+0x104>
  {
    Error_Handler();
 80029b4:	f7ff fb04 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <_Z13MX_TIM16_Initv+0x114>)
 80029ba:	f00a fc19 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 80029be:	bf00      	nop
 80029c0:	3750      	adds	r7, #80	; 0x50
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	24000c2c 	.word	0x24000c2c
 80029cc:	40014400 	.word	0x40014400

080029d0 <_Z13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM17_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ea:	463b      	mov	r3, r7
 80029ec:	2234      	movs	r2, #52	; 0x34
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f020 fd85 	bl	8023500 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 80029f8:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <_Z13MX_TIM17_Initv+0x118>)
 80029fa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a0e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a16:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a22:	4830      	ldr	r0, [pc, #192]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a24:	f014 fbfa 	bl	801721c <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <_Z13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8002a38:	f7ff fac2 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002a3c:	4829      	ldr	r0, [pc, #164]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a3e:	f014 fc44 	bl	80172ca <HAL_TIM_PWM_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <_Z13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8002a52:	f7ff fab5 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a56:	2360      	movs	r3, #96	; 0x60
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a62:	2300      	movs	r3, #0
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a76:	2200      	movs	r2, #0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002a7c:	f015 f852 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <_Z13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8002a90:	f7ff fa96 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002abc:	f016 f952 	bl	8018d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <_Z13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8002ad0:	f7ff fa76 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002ad4:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <_Z13MX_TIM17_Initv+0x114>)
 8002ad6:	f00a fb8b 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 8002ada:	bf00      	nop
 8002adc:	3750      	adds	r7, #80	; 0x50
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	24000c78 	.word	0x24000c78
 8002ae8:	40014800 	.word	0x40014800

08002aec <_Z13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM23_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	615a      	str	r2, [r3, #20]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b20:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <_Z13MX_TIM23_Initv+0x168>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8002b24:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2a:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002b30:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295
 8002b36:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b38:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 8002b44:	4842      	ldr	r0, [pc, #264]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b46:	f014 fd33 	bl	80175b0 <HAL_TIM_IC_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <_Z13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 8002b5a:	f7ff fa31 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8002b5e:	483c      	ldr	r0, [pc, #240]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b60:	f014 fbb3 	bl	80172ca <HAL_TIM_PWM_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <_Z13MX_TIM23_Initv+0x8c>
  {
    Error_Handler();
 8002b74:	f7ff fa24 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4832      	ldr	r0, [pc, #200]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002b88:	f016 f850 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <_Z13MX_TIM23_Initv+0xb4>
  {
    Error_Handler();
 8002b9c:	f7ff fa10 	bl	8001fc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4825      	ldr	r0, [pc, #148]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002bba:	f014 ff16 	bl	80179ea <HAL_TIM_IC_ConfigChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <_Z13MX_TIM23_Initv+0xe6>
  {
    Error_Handler();
 8002bce:	f7ff f9f7 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd2:	2360      	movs	r3, #96	; 0x60
 8002bd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be2:	463b      	mov	r3, r7
 8002be4:	2204      	movs	r2, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4819      	ldr	r0, [pc, #100]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002bea:	f014 ff9b 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <_Z13MX_TIM23_Initv+0x116>
  {
    Error_Handler();
 8002bfe:	f7ff f9df 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	2208      	movs	r2, #8
 8002c06:	4619      	mov	r1, r3
 8002c08:	4811      	ldr	r0, [pc, #68]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002c0a:	f014 ff8b 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <_Z13MX_TIM23_Initv+0x136>
  {
    Error_Handler();
 8002c1e:	f7ff f9cf 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c22:	463b      	mov	r3, r7
 8002c24:	220c      	movs	r2, #12
 8002c26:	4619      	mov	r1, r3
 8002c28:	4809      	ldr	r0, [pc, #36]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002c2a:	f014 ff7b 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <_Z13MX_TIM23_Initv+0x156>
  {
    Error_Handler();
 8002c3e:	f7ff f9bf 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8002c42:	4803      	ldr	r0, [pc, #12]	; (8002c50 <_Z13MX_TIM23_Initv+0x164>)
 8002c44:	f00a fad4 	bl	800d1f0 <HAL_TIM_MspPostInit>

}
 8002c48:	bf00      	nop
 8002c4a:	3738      	adds	r7, #56	; 0x38
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	24000cc4 	.word	0x24000cc4
 8002c54:	4000e000 	.word	0x4000e000

08002c58 <_Z13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM24_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <_Z13MX_TIM24_Initv+0xb8>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002c9c:	481b      	ldr	r0, [pc, #108]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002c9e:	f014 fabd 	bl	801721c <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <_Z13MX_TIM24_Initv+0x5e>
  {
    Error_Handler();
 8002cb2:	f7ff f985 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002cc4:	f015 f842 	bl	8017d4c <HAL_TIM_ConfigClockSource>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <_Z13MX_TIM24_Initv+0x84>
  {
    Error_Handler();
 8002cd8:	f7ff f972 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4808      	ldr	r0, [pc, #32]	; (8002d0c <_Z13MX_TIM24_Initv+0xb4>)
 8002cea:	f015 ff9f 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <_Z13MX_TIM24_Initv+0xaa>
  {
    Error_Handler();
 8002cfe:	f7ff f95f 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	24000d10 	.word	0x24000d10
 8002d10:	4000e400 	.word	0x4000e400

08002d14 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fbf1 	bl	8003504 <_ZNSaImEC1Ev>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fbf9 	bl	800351c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002d62:	461a      	mov	r2, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fbed 	bl	8003544 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fbac 	bl	80004ca <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fbeb 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002d94:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d96:	461a      	mov	r2, r3
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 fbf0 	bl	8003580 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffd1 	bl	8002d4a <_ZNSt12_Vector_baseImSaImEED1Ev>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}

08002db2 <_ZNKSt6vectorImSaImEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	109b      	asrs	r3, r3, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_Z9copy_argsImEvPT_RKSt16initializer_listIS0_E>:
void copy_args(T* ptr, const std::initializer_list<T>& list) {
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
	int i = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
	for(auto& ref : list)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f000 fbd9 	bl	800359c <_ZNKSt16initializer_listImE5beginEv>
 8002dea:	61b8      	str	r0, [r7, #24]
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f000 fbe1 	bl	80035b4 <_ZNKSt16initializer_listImE3endEv>
 8002df2:	6138      	str	r0, [r7, #16]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d00e      	beq.n	8002e1a <_Z9copy_argsImEvPT_RKSt16initializer_listIS0_E+0x48>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	60fb      	str	r3, [r7, #12]
		ptr[i++] = ref;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	1c58      	adds	r0, r3, #1
 8002e0a:	61f8      	str	r0, [r7, #28]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	601a      	str	r2, [r3, #0]
	for(auto& ref : list)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3304      	adds	r3, #4
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e7ec      	b.n	8002df4 <_Z9copy_argsImEvPT_RKSt16initializer_listIS0_E+0x22>
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_ZN3ADC8InitDataaSERKS0_>:
	struct InitData {
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f103 020c 	add.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fc16 	bl	8003682 <_ZNSt6vectorImSaImEEaSERKS1_>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZN3ADC10PeripheralaSERKS0_>:
	class Peripheral {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	3208      	adds	r2, #8
 8002e82:	6810      	ldr	r0, [r2, #0]
 8002e84:	6851      	ldr	r1, [r2, #4]
 8002e86:	6018      	str	r0, [r3, #0]
 8002e88:	6059      	str	r1, [r3, #4]
 8002e8a:	8912      	ldrh	r2, [r2, #8]
 8002e8c:	811a      	strh	r2, [r3, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f103 0214 	add.w	r2, r3, #20
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3314      	adds	r3, #20
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ffc1 	bl	8002e22 <_ZN3ADC8InitDataaSERKS0_>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_Z9copy_argsIN3ADC10PeripheralEEvPT_RKSt16initializer_listIS2_E>:
void copy_args(T* ptr, const std::initializer_list<T>& list) {
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b088      	sub	sp, #32
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	int i = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
	for(auto& ref : list)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f000 fb85 	bl	80035d8 <_ZNKSt16initializer_listIN3ADC10PeripheralEE5beginEv>
 8002ece:	61b8      	str	r0, [r7, #24]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f000 fb8d 	bl	80035f0 <_ZNKSt16initializer_listIN3ADC10PeripheralEE3endEv>
 8002ed6:	6138      	str	r0, [r7, #16]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d013      	beq.n	8002f08 <_Z9copy_argsIN3ADC10PeripheralEEvPT_RKSt16initializer_listIS2_E+0x52>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]
		ptr[i++] = ref;
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	61f9      	str	r1, [r7, #28]
 8002eec:	4619      	mov	r1, r3
 8002eee:	460b      	mov	r3, r1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	440b      	add	r3, r1
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffb0 	bl	8002e60 <_ZN3ADC10PeripheralaSERKS0_>
	for(auto& ref : list)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3330      	adds	r3, #48	; 0x30
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e7e7      	b.n	8002ed8 <_Z9copy_argsIN3ADC10PeripheralEEvPT_RKSt16initializer_listIS2_E+0x22>
}
 8002f08:	bf00      	nop
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f000 fca8 	bl	8003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fcaa 	bl	8003888 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>:
       *  Note that the assignment completely changes the %map and
       *  that the resulting %map's size is the same as the number
       *  of elements assigned.
       */
      map&
      operator=(initializer_list<value_type> __l)
 8002f4a:	b5b0      	push	{r4, r5, r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_t._M_assign_unique(__l.begin(), __l.end());
 8002f58:	68fc      	ldr	r4, [r7, #12]
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fc9e 	bl	800389e <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8002f62:	4605      	mov	r5, r0
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fca5 	bl	80038b6 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4629      	mov	r1, r5
 8002f72:	4620      	mov	r0, r4
 8002f74:	f000 fcb4 	bl	80038e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>
	return *this;
 8002f78:	68fb      	ldr	r3, [r7, #12]
      }
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}

08002f82 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8002f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8002f8c:	687c      	ldr	r4, [r7, #4]
 8002f8e:	6838      	ldr	r0, [r7, #0]
 8002f90:	f7ff ff0f 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8002f94:	4605      	mov	r5, r0
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fce5 	bl	8003968 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fcd0 	bl	800394c <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fce2 	bl	800397e <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff feb8 	bl	8002d34 <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f000 fcee 	bl	80039a6 <_ZNKSt6vectorImSaImEE5beginEv>
 8002fca:	4605      	mov	r5, r0
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f000 fcfa 	bl	80039c6 <_ZNKSt6vectorImSaImEE3endEv>
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fac5 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8002fe0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	f000 fcfe 	bl	80039e8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8002fec:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]
      }
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffc <_ZNSt6vectorISt4pairImmESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003006:	687c      	ldr	r4, [r7, #4]
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	f000 fcfe 	bl	8003a0a <_ZNKSt6vectorISt4pairImmESaIS1_EE4sizeEv>
 800300e:	4605      	mov	r5, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fd17 	bl	8003a46 <_ZNKSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>
 8003018:	4602      	mov	r2, r0
 800301a:	f107 030c 	add.w	r3, r7, #12
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fd02 	bl	8003a2a <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairImmEES2_E17_S_select_on_copyERKS3_>
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	461a      	mov	r2, r3
 800302c:	4629      	mov	r1, r5
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fd2b 	bl	8003a8a <_ZNSt12_Vector_baseISt4pairImmESaIS1_EEC1EjRKS2_>
 8003034:	f107 030c 	add.w	r3, r7, #12
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fd0f 	bl	8003a5c <_ZNSaISt4pairImmEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800303e:	6838      	ldr	r0, [r7, #0]
 8003040:	f000 fd50 	bl	8003ae4 <_ZNKSt6vectorISt4pairImmESaIS1_EE5beginEv>
 8003044:	4605      	mov	r5, r0
 8003046:	6838      	ldr	r0, [r7, #0]
 8003048:	f000 fd5c 	bl	8003b04 <_ZNKSt6vectorISt4pairImmESaIS1_EE3endEv>
 800304c:	4606      	mov	r6, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fd66 	bl	8003b26 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>
 800305a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800305c:	4622      	mov	r2, r4
 800305e:	4631      	mov	r1, r6
 8003060:	4628      	mov	r0, r5
 8003062:	f000 fd6b 	bl	8003b3c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8003066:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]
      }
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003076 <_ZNSt6vectorISt4pairImmESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003076:	b5b0      	push	{r4, r5, r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681c      	ldr	r4, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd4c 	bl	8003b26 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>
 800308e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003090:	461a      	mov	r2, r3
 8003092:	4629      	mov	r1, r5
 8003094:	4620      	mov	r0, r4
 8003096:	f000 fd62 	bl	8003b5e <_ZSt8_DestroyIPSt4pairImmES1_EvT_S3_RSaIT0_E>
      }
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd08 	bl	8003ab2 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EED1Ev>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}

080030ac <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80030b8:	68b8      	ldr	r0, [r7, #8]
 80030ba:	f000 fbda 	bl	8003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbd1 	bl	8003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3308      	adds	r3, #8
 80030d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030da:	e883 0003 	stmia.w	r3, {r0, r1}
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZNSt4pairIKS_I3PinS0_EN10PWMservice8InstanceEEC1IS4_Lb1EEERS2_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4614      	mov	r4, r2
 80030fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fd3a 	bl	8003b7a <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3310      	adds	r3, #16
 800310c:	ca07      	ldmia	r2, {r0, r1, r2}
 800310e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}

0800311c <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEaSESt16initializer_listIS8_E>:
      operator=(initializer_list<value_type> __l)
 800311c:	b5b0      	push	{r4, r5, r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_t._M_assign_unique(__l.begin(), __l.end());
 800312a:	68fc      	ldr	r4, [r7, #12]
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd2e 	bl	8003b90 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>
 8003134:	4605      	mov	r5, r0
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fd35 	bl	8003ba8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE3endEv>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4629      	mov	r1, r5
 8003144:	4620      	mov	r0, r4
 8003146:	f000 fd44 	bl	8003bd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_>
	return *this;
 800314a:	68fb      	ldr	r3, [r7, #12]
      }
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bdb0      	pop	{r4, r5, r7, pc}

08003154 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>:
      operator=(initializer_list<value_type> __l)
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_t._M_assign_unique(__l.begin(), __l.end());
 8003162:	68fc      	ldr	r4, [r7, #12]
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd69 	bl	8003c3e <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>
 800316c:	4605      	mov	r5, r0
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fd70 	bl	8003c56 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE3endEv>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	4629      	mov	r1, r5
 800317c:	4620      	mov	r0, r4
 800317e:	f000 fd7f 	bl	8003c80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>
	return *this;
 8003182:	68fb      	ldr	r3, [r7, #12]
      }
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}

0800318c <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f000 fb6a 	bl	8003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fce5 	bl	8003b7a <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3308      	adds	r3, #8
 80031b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EEaSESt16initializer_listIS2_E>:
      operator=(initializer_list<value_type> __l)
 80031c6:	b5b0      	push	{r4, r5, r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fd88 	bl	8003cec <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE5beginEv>
 80031dc:	4604      	mov	r4, r0
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fd8f 	bl	8003d04 <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE3endEv>
 80031e6:	4602      	mov	r2, r0
 80031e8:	462b      	mov	r3, r5
 80031ea:	4621      	mov	r1, r4
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fdc7 	bl	8003d80 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag>
	return *this;
 80031f2:	68fb      	ldr	r3, [r7, #12]
      }
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bdb0      	pop	{r4, r5, r7, pc}

080031fc <_ZSt7forwardIPN3SPI8InstanceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEaSESt16initializer_listISA_E>:
       *  Note that the assignment completely changes the %unordered_map and
       *  that the resulting %unordered_map's size is the same as the number
       *  of elements assigned.
       */
      unordered_map&
      operator=(initializer_list<value_type> __l)
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_h = __l;
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003228:	f000 fe43 	bl	8003eb2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEaSESt16initializer_listIS6_E>
	return *this;
 800322c:	68fb      	ldr	r3, [r7, #12]
      }
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZSt7forwardIPN4UART8InstanceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEaSESt16initializer_listISA_E>:
      operator=(initializer_list<value_type> __l)
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_h = __l;
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003262:	f000 fe5a 	bl	8003f1a <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEaSESt16initializer_listIS6_E>
	return *this;
 8003266:	68fb      	ldr	r3, [r7, #12]
      }
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZNSt4pairIKS_I3PinS0_EP15TimerPeripheralEC1IS4_Lb1EEERS2_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4614      	mov	r4, r2
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fe7a 	bl	8003f82 <_ZSt7forwardIP15TimerPeripheralEOT_RNSt16remove_referenceIS2_E4typeE>
 800328e:	4603      	mov	r3, r0
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	611a      	str	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEEaSESt16initializer_listIS8_E>:
      operator=(initializer_list<value_type> __l)
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_t._M_assign_unique(__l.begin(), __l.end());
 80032ae:	68fc      	ldr	r4, [r7, #12]
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fe70 	bl	8003f98 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE5beginEv>
 80032b8:	4605      	mov	r5, r0
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fe77 	bl	8003fb0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE3endEv>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4629      	mov	r1, r5
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 fe86 	bl	8003fda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_>
	return *this;
 80032ce:	68fb      	ldr	r3, [r7, #12]
      }
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}

080032d8 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80032e4:	68b8      	ldr	r0, [r7, #8]
 80032e6:	f000 fac4 	bl	8003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fea5 	bl	8004046 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f103 0408 	add.w	r4, r3, #8
 8003304:	4615      	mov	r5, r2
 8003306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800330e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}

0800331c <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEaSESt16initializer_listIS7_E>:
      operator=(initializer_list<value_type> __l)
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_t._M_assign_unique(__l.begin(), __l.end());
 800332a:	68fc      	ldr	r4, [r7, #12]
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fe94 	bl	800405c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8003334:	4605      	mov	r5, r0
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fe9b 	bl	8004074 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	4629      	mov	r1, r5
 8003344:	4620      	mov	r0, r4
 8003346:	f000 feaa 	bl	800409e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>
	return *this;
 800334a:	68fb      	ldr	r3, [r7, #12]
      }
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}

08003354 <_ZSt7forwardIR7GPIOPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f9b3 2000 	ldrsh.w	r2, [r3]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1d1a      	adds	r2, r3, #4
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f000 fec9 	bl	8004120 <_ZNSt8functionIFvvEEC1EOS1_>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7d1a      	ldrb	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	751a      	strb	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR7GPIOPinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80033ac:	68b8      	ldr	r0, [r7, #8]
 80033ae:	f7ff ffd1 	bl	8003354 <_ZSt7forwardIR7GPIOPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80033b2:	4603      	mov	r3, r0
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1d1c      	adds	r4, r3, #4
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fea3 	bl	800410a <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4619      	mov	r1, r3
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ffce 	bl	800336a <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}

080033d8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEaSESt16initializer_listIS6_E>:
      operator=(initializer_list<value_type> __l)
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_t._M_assign_unique(__l.begin(), __l.end());
 80033e6:	68fc      	ldr	r4, [r7, #12]
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 feaa 	bl	8004144 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 80033f0:	4605      	mov	r5, r0
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 feb1 	bl	800415c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	4629      	mov	r1, r5
 8003400:	4620      	mov	r0, r4
 8003402:	f000 fec0 	bl	8004186 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE16_M_assign_uniqueIPKS4_EEvT_SE_>
	return *this;
 8003406:	68fb      	ldr	r3, [r7, #12]
      }
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}

08003410 <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      // _M_reset is a 'safe' operation with no precondition.
      constexpr void
      _M_reset() noexcept
      { static_cast<_Dp*>(this)->_M_payload._M_reset(); }

      constexpr bool _M_is_engaged() const noexcept
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_ZNOSt8optionalIhE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&&
      value()&&
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffed 	bl	8003410 <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 8003436:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <_ZNOSt8optionalIhE5valueEv+0x26>
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fed8 	bl	80041f2 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 8003442:	4603      	mov	r3, r0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fee1 	bl	800420c <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800344a:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 800344c:	e001      	b.n	8003452 <_ZNOSt8optionalIhE5valueEv+0x2a>
 800344e:	f7fd f822 	bl	8000496 <_ZSt27__throw_bad_optional_accessv>
      }
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	791b      	ldrb	r3, [r3, #4]
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_ZNOSt8optionalIfE5valueEv>:
      value()&&
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffed 	bl	800345a <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>
 8003480:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <_ZNOSt8optionalIfE5valueEv+0x26>
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fecb 	bl	8004222 <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>
 800348c:	4603      	mov	r3, r0
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fed4 	bl	800423c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8003494:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 8003496:	e001      	b.n	800349c <_ZNOSt8optionalIfE5valueEv+0x2a>
 8003498:	f7fc fffd 	bl	8000496 <_ZSt27__throw_bad_optional_accessv>
      }
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ZNKSt19_Optional_base_implI8PinStateSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZNOSt8optionalI8PinStateE5valueEv>:
      value()&&
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ffed 	bl	80034a4 <_ZNKSt19_Optional_base_implI8PinStateSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 80034ca:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <_ZNOSt8optionalI8PinStateE5valueEv+0x26>
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 febe 	bl	8004252 <_ZNSt19_Optional_base_implI8PinStateSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fec7 	bl	800426c <_ZSt4moveIR8PinStateEONSt16remove_referenceIT_E4typeEOS3_>
 80034de:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 80034e0:	e001      	b.n	80034e6 <_ZNOSt8optionalI8PinStateE5valueEv+0x2a>
 80034e2:	f7fc ffd8 	bl	8000496 <_ZSt27__throw_bad_optional_accessv>
      }
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 feb8 	bl	8004282 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
	{ }
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fe9b 	bl	8004298 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fea1 	bl	80042d6 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZNKSt16initializer_listImE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_ZNKSt16initializer_listImE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ffed 	bl	800359c <_ZNKSt16initializer_listImE5beginEv>
 80035c2:	4604      	mov	r4, r0
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fe9c 	bl	8004302 <_ZNKSt16initializer_listImE4sizeEv>
 80035ca:	4603      	mov	r3, r0
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4423      	add	r3, r4
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}

080035d8 <_ZNKSt16initializer_listIN3ADC10PeripheralEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_ZNKSt16initializer_listIN3ADC10PeripheralEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ffed 	bl	80035d8 <_ZNKSt16initializer_listIN3ADC10PeripheralEE5beginEv>
 80035fe:	4604      	mov	r4, r0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fe8a 	bl	800431a <_ZNKSt16initializer_listIN3ADC10PeripheralEE4sizeEv>
 8003606:	4602      	mov	r2, r0
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4423      	add	r3, r4
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}

0800361a <_ZN9__gnu_cxx14__alloc_traitsISaImEmE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800361e:	2300      	movs	r3, #0
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZN9__gnu_cxx14__alloc_traitsISaImEmE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800362e:	2301      	movs	r3, #1
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <_ZSteqRKSaImES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
      { return true; }
 8003644:	2301      	movs	r3, #1
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZSt4copyIPmS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003652:	b590      	push	{r4, r7, lr}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fef3 	bl	800444a <_ZSt12__miter_baseIPmET_S1_>
 8003664:	4604      	mov	r4, r0
 8003666:	68b8      	ldr	r0, [r7, #8]
 8003668:	f000 feef 	bl	800444a <_ZSt12__miter_baseIPmET_S1_>
 800366c:	4603      	mov	r3, r0
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4619      	mov	r1, r3
 8003672:	4620      	mov	r0, r4
 8003674:	f000 fef4 	bl	8004460 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>
 8003678:	4603      	mov	r3, r0
    }
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <_ZNSt6vectorImSaImEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8003682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	f000 80e9 	beq.w	8003868 <_ZNSt6vectorImSaImEEaSERKS1_+0x1e6>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8003696:	f7ff ffc0 	bl	800361a <_ZN9__gnu_cxx14__alloc_traitsISaImEmE27_S_propagate_on_copy_assignEv>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d046      	beq.n	800372e <_ZNSt6vectorImSaImEEaSERKS1_+0xac>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 80036a0:	f7ff ffc3 	bl	800362a <_ZN9__gnu_cxx14__alloc_traitsISaImEmE15_S_always_equalEv>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f083 0301 	eor.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <_ZNSt6vectorImSaImEEaSERKS1_+0x5a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff59 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80036b8:	4604      	mov	r4, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f953 	bl	8003968 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4619      	mov	r1, r3
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff ffb7 	bl	800363a <_ZSteqRKSaImES1_>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <_ZNSt6vectorImSaImEEaSERKS1_+0x5a>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <_ZNSt6vectorImSaImEEaSERKS1_+0x5c>
 80036dc:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <_ZNSt6vectorImSaImEEaSERKS1_+0x90>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fe25 	bl	8004332 <_ZNSt6vectorImSaImEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7ff ff22 	bl	8003544 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
		  this->_M_impl._M_start = nullptr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff28 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800371a:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f922 	bl	8003968 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8003724:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8003726:	4619      	mov	r1, r3
 8003728:	4620      	mov	r0, r4
 800372a:	f000 fe10 	bl	800434e <_ZSt15__alloc_on_copyISaImEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 800372e:	6838      	ldr	r0, [r7, #0]
 8003730:	f7ff fb3f 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003734:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fe14 	bl	8004364 <_ZNKSt6vectorImSaImEE8capacityEv>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4293      	cmp	r3, r2
 8003742:	bf8c      	ite	hi
 8003744:	2301      	movhi	r3, #1
 8003746:	2300      	movls	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <_ZNSt6vectorImSaImEEaSERKS1_+0x132>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	f000 f929 	bl	80039a6 <_ZNKSt6vectorImSaImEE5beginEv>
 8003754:	4604      	mov	r4, r0
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f000 f935 	bl	80039c6 <_ZNKSt6vectorImSaImEE3endEv>
 800375c:	4603      	mov	r3, r0
 800375e:	4622      	mov	r2, r4
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fe0e 	bl	8004384 <_ZNSt6vectorImSaImEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKmS1_EEEEPmjT_S9_>
 8003768:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681c      	ldr	r4, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fef8 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800377a:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800377c:	461a      	mov	r2, r3
 800377e:	4629      	mov	r1, r5
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff fefd 	bl	8003580 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8003798:	461a      	mov	r2, r3
 800379a:	f7ff fed3 	bl	8003544 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
	      this->_M_impl._M_start = __tmp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	e052      	b.n	800385a <_ZNSt6vectorImSaImEEaSERKS1_+0x1d8>
	    }
	  else if (size() >= __xlen)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fafc 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4293      	cmp	r3, r2
 80037c0:	bf94      	ite	ls
 80037c2:	2301      	movls	r3, #1
 80037c4:	2300      	movhi	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <_ZNSt6vectorImSaImEEaSERKS1_+0x18c>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f000 f8ea 	bl	80039a6 <_ZNKSt6vectorImSaImEE5beginEv>
 80037d2:	4604      	mov	r4, r0
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f000 f8f6 	bl	80039c6 <_ZNKSt6vectorImSaImEE3endEv>
 80037da:	4605      	mov	r5, r0
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fded 	bl	80043bc <_ZNSt6vectorImSaImEE5beginEv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	4629      	mov	r1, r5
 80037e8:	4620      	mov	r0, r4
 80037ea:	f000 fdf7 	bl	80043dc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEENS1_IPmS6_EEET0_T_SB_SA_>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fe0b 	bl	800440c <_ZNSt6vectorImSaImEE3endEv>
 80037f6:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff feb5 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8003800:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8003802:	461a      	mov	r2, r3
 8003804:	4629      	mov	r1, r5
 8003806:	4620      	mov	r0, r4
 8003808:	f000 fe11 	bl	800442e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEvT_S7_RSaIT0_E>
 800380c:	e025      	b.n	800385a <_ZNSt6vectorImSaImEEaSERKS1_+0x1d8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681d      	ldr	r5, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff facb 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 800381c:	4603      	mov	r3, r0
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	18e1      	adds	r1, r4, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4628      	mov	r0, r5
 800382a:	f7ff ff12 	bl	8003652 <_ZSt4copyIPmS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681c      	ldr	r4, [r3, #0]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fabd 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003838:	4603      	mov	r3, r0
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe8e 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800384e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003850:	4632      	mov	r2, r6
 8003852:	4629      	mov	r1, r5
 8003854:	4620      	mov	r0, r4
 8003856:	f000 fe26 	bl	80044a6 <_ZSt22__uninitialized_copy_aIPmS0_mET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8003868:	687b      	ldr	r3, [r7, #4]
    }
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003872 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffed 	bl	800389e <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 80038c4:	4604      	mov	r4, r0
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fdfe 	bl	80044c8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4423      	add	r3, r4
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
	_Reuse_or_alloc_node __roan(*this);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fdf4 	bl	80044e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>
	_M_impl._M_reset();
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fdce 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d017      	beq.n	800393a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fe2a 	bl	8004564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8003910:	4603      	mov	r3, r0
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
 8003914:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003918:	f107 0320 	add.w	r3, r7, #32
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fe31 	bl	8004586 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fe3a 	bl	80045a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	for (; __first != __last; ++__first)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3314      	adds	r3, #20
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	e7e3      	b.n	8003902 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fdff 	bl	8004542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 8003944:	bf00      	nop
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fe56 	bl	800460c <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fe49 	bl	8004626 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fe57 	bl	800464a <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fe62 	bl	8004680 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fe51 	bl	8004680 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fe50 	bl	80046a0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_ZNKSt6vectorISt4pairImmESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	10db      	asrs	r3, r3, #3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairImmEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fe43 	bl	80046c4 <_ZNSt16allocator_traitsISaISt4pairImmEEE37select_on_container_copy_constructionERKS2_>
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_ZNKSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_ZNSaISt4pairImmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffee 	bl	8003a5c <_ZNSaISt4pairImmEED1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZNSt12_Vector_baseISt4pairImmESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fe1f 	bl	80046de <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fe2d 	bl	8004702 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE17_M_create_storageEj>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8003aca:	461a      	mov	r2, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fe33 	bl	8004738 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE13_M_deallocateEPS1_j>
      }
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ffcc 	bl	8003a72 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE12_Vector_implD1Ev>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_ZNKSt6vectorISt4pairImmESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fe32 	bl	800475e <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZNKSt6vectorISt4pairImmESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fe21 	bl	800475e <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fe15 	bl	800477e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_ZSt8_DestroyIPSt4pairImmES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fe18 	bl	80047a2 <_ZSt8_DestroyIPSt4pairImmEEvT_S3_>
    }
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZSt7forwardIN10PWMservice8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ffed 	bl	8003b90 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE5beginEv>
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fe08 	bl	80047ce <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE4sizeEv>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4423      	add	r3, r4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}

08003bd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08a      	sub	sp, #40	; 0x28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
	_Reuse_or_alloc_node __roan(*this);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fdfe 	bl	80047e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_>
	_M_impl._M_reset();
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fc55 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d017      	beq.n	8003c2c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fe34 	bl	800486a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8003c02:	4603      	mov	r3, r0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c0a:	f107 0320 	add.w	r3, r7, #32
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fe3b 	bl	800488c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8003c16:	f107 0314 	add.w	r3, r7, #20
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	6a39      	ldr	r1, [r7, #32]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fe44 	bl	80048ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	for (; __first != __last; ++__first)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	331c      	adds	r3, #28
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	e7e3      	b.n	8003bf4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fe09 	bl	8004848 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8003c56:	b590      	push	{r4, r7, lr}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ffed 	bl	8003c3e <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE5beginEv>
 8003c64:	4604      	mov	r4, r0
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fe53 	bl	8004912 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE4sizeEv>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4423      	add	r3, r4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd90      	pop	{r4, r7, pc}

08003c80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
	_Reuse_or_alloc_node __roan(*this);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fe49 	bl	800492a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>
	_M_impl._M_reset();
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fbfe 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d017      	beq.n	8003cda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fe7f 	bl	80049ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fe86 	bl	80049d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	6a39      	ldr	r1, [r7, #32]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fe8f 	bl	80049f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	for (; __first != __last; ++__first)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	e7e3      	b.n	8003ca2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fe54 	bl	800498c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 8003ce4:	bf00      	nop
 8003ce6:	3728      	adds	r7, #40	; 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ffed 	bl	8003cec <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE5beginEv>
 8003d12:	4604      	mov	r4, r0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fe9e 	bl	8004a56 <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE4sizeEv>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4423      	add	r3, r4
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd90      	pop	{r4, r7, pc}

08003d28 <_ZSt8distanceIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003d32:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fe99 	bl	8004a6e <_ZSt19__iterator_categoryIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 fe9e 	bl	8004a82 <_ZSt10__distanceIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 8003d46:	4603      	mov	r3, r0
    }
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bdb0      	pop	{r4, r5, r7, pc}

08003d50 <_ZSt4copyIPKSt17reference_wrapperI15TimerPeripheralEPS2_ET0_T_S7_S6_>:
    copy(_II __first, _II __last, _OI __result)
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 ff65 	bl	8004c2c <_ZSt12__miter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>
 8003d62:	4604      	mov	r4, r0
 8003d64:	68b8      	ldr	r0, [r7, #8]
 8003d66:	f000 ff61 	bl	8004c2c <_ZSt12__miter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 ff66 	bl	8004c42 <_ZSt13__copy_move_aILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>
 8003d76:	4603      	mov	r3, r0
    }
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f7ff ffc9 	bl	8003d28 <_ZSt8distanceIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8003d96:	4603      	mov	r3, r0
 8003d98:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fe81 	bl	8004aa2 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE8capacityEv>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bf8c      	ite	hi
 8003da8:	2301      	movhi	r3, #1
 8003daa:	2300      	movls	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d038      	beq.n	8003e24 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fead 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	69f8      	ldr	r0, [r7, #28]
 8003dc0:	f000 fe80 	bl	8004ac4 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_S_check_init_lenEjRKS3_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	69f9      	ldr	r1, [r7, #28]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fead 	bl	8004b2a <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE20_M_allocate_and_copyIPKS2_EEPS2_jT_S9_>
 8003dd0:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681c      	ldr	r4, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fe99 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 8003de2:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003de4:	461a      	mov	r2, r3
 8003de6:	4629      	mov	r1, r5
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 feba 	bl	8004b62 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralES2_EvT_S4_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 febc 	bl	8004b7e <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_deallocateEPS2_j>
	    this->_M_impl._M_start = __tmp;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 8003e22:	e042      	b.n	8003eaa <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 febd 	bl	8004ba4 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE4sizeEv>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bf94      	ite	ls
 8003e32:	2301      	movls	r3, #1
 8003e34:	2300      	movhi	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	68b8      	ldr	r0, [r7, #8]
 8003e46:	f7ff ff83 	bl	8003d50 <_ZSt4copyIPKSt17reference_wrapperI15TimerPeripheralEPS2_ET0_T_S7_S6_>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 feb8 	bl	8004bc4 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE15_M_erase_at_endEPS2_>
      }
 8003e54:	e029      	b.n	8003eaa <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_assign_auxIPKS2_EEvT_S8_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fea2 	bl	8004ba4 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE4sizeEv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f107 0310 	add.w	r3, r7, #16
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fecc 	bl	8004c06 <_ZSt7advanceIPKSt17reference_wrapperI15TimerPeripheralEjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8003e6e:	6939      	ldr	r1, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68b8      	ldr	r0, [r7, #8]
 8003e78:	f7ff ff6a 	bl	8003d50 <_ZSt4copyIPKSt17reference_wrapperI15TimerPeripheralEPS2_ET0_T_S7_S6_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fe91 	bl	8004ba4 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE4sizeEv>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8003e8a:	693c      	ldr	r4, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fe3e 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 8003e98:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 fef2 	bl	8004c88 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI15TimerPeripheralEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8003ea4:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]
      }
 8003eaa:	bf00      	nop
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bdb0      	pop	{r4, r5, r7, pc}

08003eb2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEaSESt16initializer_listIS6_E>:
	_M_move_assign(std::move(__ht), __bool_constant<__move_storage>());
	return *this;
      }

      _Hashtable&
      operator=(initializer_list<value_type> __l)
 8003eb2:	b5b0      	push	{r4, r5, r7, lr}
 8003eb4:	b088      	sub	sp, #32
 8003eb6:	af02      	add	r7, sp, #8
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fef2 	bl	8004caa <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	f107 0310 	add.w	r3, r7, #16
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fef7 	bl	8004cc2 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEC1EPS9_RNS_16_Hashtable_allocISA_EE>
	_M_before_begin._M_nxt = nullptr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
	clear();
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 ff15 	bl	8004d0a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
	this->_M_insert_range(__l.begin(), __l.end(), __roan, __unique_keys());
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 ff31 	bl	8004d4a <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE5beginEv>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 ff38 	bl	8004d62 <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE3endEv>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	f88d 5000 	strb.w	r5, [sp]
 8003efc:	4621      	mov	r1, r4
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 ff41 	bl	8004d86 <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE>
	return *this;
 8003f04:	68fc      	ldr	r4, [r7, #12]
	__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 feec 	bl	8004ce8 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>
	return *this;
 8003f10:	4623      	mov	r3, r4
      }
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bdb0      	pop	{r4, r5, r7, pc}

08003f1a <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEaSESt16initializer_listIS6_E>:
      operator=(initializer_list<value_type> __l)
 8003f1a:	b5b0      	push	{r4, r5, r7, lr}
 8003f1c:	b088      	sub	sp, #32
 8003f1e:	af02      	add	r7, sp, #8
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	e883 0006 	stmia.w	r3, {r1, r2}
	__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 ff63 	bl	8004df4 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8003f2e:	4601      	mov	r1, r0
 8003f30:	f107 0310 	add.w	r3, r7, #16
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 ff68 	bl	8004e0c <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEC1EPS9_RNS_16_Hashtable_allocISA_EE>
	_M_before_begin._M_nxt = nullptr;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
	clear();
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 ff86 	bl	8004e54 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
	this->_M_insert_range(__l.begin(), __l.end(), __roan, __unique_keys());
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 ffa2 	bl	8004e94 <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE5beginEv>
 8003f50:	4604      	mov	r4, r0
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 ffa9 	bl	8004eac <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE3endEv>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f107 0310 	add.w	r3, r7, #16
 8003f60:	f88d 5000 	strb.w	r5, [sp]
 8003f64:	4621      	mov	r1, r4
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 ffb2 	bl	8004ed0 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE>
	return *this;
 8003f6c:	68fc      	ldr	r4, [r7, #12]
	__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 ff5d 	bl	8004e32 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>
	return *this;
 8003f78:	4623      	mov	r3, r4
      }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bdb0      	pop	{r4, r5, r7, pc}

08003f82 <_ZSt7forwardIP15TimerPeripheralEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ffed 	bl	8003f98 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE5beginEv>
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 ffbc 	bl	8004f3e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE4sizeEv>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4423      	add	r3, r4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}

08003fda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08a      	sub	sp, #40	; 0x28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
	_Reuse_or_alloc_node __roan(*this);
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ffb2 	bl	8004f56 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_>
	_M_impl._M_reset();
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fa51 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d017      	beq.n	8004034 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 ffe8 	bl	8004fda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 800400a:	4603      	mov	r3, r0
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004012:	f107 0320 	add.w	r3, r7, #32
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f000 ffef 	bl	8004ffc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	6a39      	ldr	r1, [r7, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fff8 	bl	800501c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	for (; __first != __last; ++__first)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3314      	adds	r3, #20
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	e7e3      	b.n	8003ffc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE16_M_assign_uniqueIPKS6_EEvT_SG_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4618      	mov	r0, r3
 800403a:	f000 ffbd 	bl	8004fb8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 800403e:	bf00      	nop
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ffed 	bl	800405c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8004082:	4604      	mov	r4, r0
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fffc 	bl	8005082 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 800408a:	4602      	mov	r2, r0
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4423      	add	r3, r4
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}

0800409e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
	_Reuse_or_alloc_node __roan(*this);
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fff2 	bl	800509a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>
	_M_impl._M_reset();
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc f9ef 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d017      	beq.n	80040f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f001 f828 	bl	800511e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80040d6:	f107 0320 	add.w	r3, r7, #32
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 f82f 	bl	8005140 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f001 f838 	bl	8005160 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	for (; __first != __last; ++__first)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3328      	adds	r3, #40	; 0x28
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	e7e3      	b.n	80040c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE16_M_assign_uniqueIPKS5_EEvT_SF_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fffd 	bl	80050fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	; 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_ZNSt8functionIFvvEEC1EOS1_>:
       *  @param __x A %function object rvalue with identical call signature.
       *
       *  The newly-created %function contains the target of @a __x
       *  (if it has one).
       */
      function(function&& __x) noexcept : _Function_base()
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc f93e 	bl	80003ae <_ZNSt14_Function_baseC1Ev>
      {
	__x.swap(*this);
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	6838      	ldr	r0, [r7, #0]
 8004136:	f001 f846 	bl	80051c6 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffed 	bl	8004144 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 800416a:	4604      	mov	r4, r0
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f001 f84b 	bl	8005208 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 8004172:	4602      	mov	r2, r0
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4423      	add	r3, r4
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}

08004186 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE16_M_assign_uniqueIPKS4_EEvT_SE_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
	_Reuse_or_alloc_node __roan(*this);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f001 f841 	bl	8005220 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeC1ERSA_>
	_M_impl._M_reset();
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f97b 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
	for (; __first != __last; ++__first)
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d017      	beq.n	80041e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE16_M_assign_uniqueIPKS4_EEvT_SE_+0x5a>
	  _M_insert_unique_(end(), *__first, __roan);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f001 f877 	bl	80052a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80041be:	f107 0320 	add.w	r3, r7, #32
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f87e 	bl	80052c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f001 f887 	bl	80052e6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	for (; __first != __last; ++__first)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	331c      	adds	r3, #28
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	e7e3      	b.n	80041a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE16_M_assign_uniqueIPKS4_EEvT_SE_+0x22>
	_Reuse_or_alloc_node __roan(*this);
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f84c 	bl	8005282 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeD1Ev>
      }
 80041ea:	bf00      	nop
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 f8a5 	bl	800534c <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 8004202:	4603      	mov	r3, r0
      }
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 f898 	bl	8005362 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>
 8004232:	4603      	mov	r3, r0
      }
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZNSt19_Optional_base_implI8PinStateSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f88b 	bl	8005378 <_ZNSt22_Optional_payload_baseI8PinStateE6_M_getEv>
 8004262:	4603      	mov	r3, r0
      }
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_ZSt4moveIR8PinStateEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80042b0:	f7fc f82e 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 80042ba:	69b8      	ldr	r0, [r7, #24]
 80042bc:	f01e ff0d 	bl	80230da <_ZdlPv>
	    return;
 80042c0:	e005      	b.n	80042ce <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	69f8      	ldr	r0, [r7, #28]
 80042c8:	f002 ff76 	bl	80071b8 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80042e0:	f7fc f816 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 f84e 	bl	800538e <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 80042f2:	e003      	b.n	80042fc <_ZSt8_DestroyIPmEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 f861 	bl	80053be <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZNKSt16initializer_listImE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <_ZNKSt16initializer_listIN3ADC10PeripheralEE4sizeEv>:
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <_ZNSt6vectorImSaImEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f001 f847 	bl	80053d4 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <_ZSt15__alloc_on_copyISaImEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
    }
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <_ZNKSt6vectorImSaImEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	109b      	asrs	r3, r3, #2
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZNSt6vectorImSaImEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKmS1_EEEEPmjT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f83d 	bl	8005416 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 800439c:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff f8e2 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80043a6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fb1b 	bl	80039e8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80043b2:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	f107 030c 	add.w	r3, r7, #12
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 f836 	bl	800543e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEENS1_IPmS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f001 f838 	bl	800545e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 80043ee:	4604      	mov	r4, r0
 80043f0:	68b8      	ldr	r0, [r7, #8]
 80043f2:	f001 f834 	bl	800545e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 80043f6:	4603      	mov	r3, r0
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4619      	mov	r1, r3
 80043fc:	4620      	mov	r0, r4
 80043fe:	f001 f839 	bl	8005474 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEENS1_IPmS6_EEET1_T0_SB_SA_>
 8004402:	4603      	mov	r3, r0
    }
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}

0800440c <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f80d 	bl	800543e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEmEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f001 f83a 	bl	80054b6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEvT_S7_>
    }
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <_ZSt12__miter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <_ZSt13__copy_move_aILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f001 f838 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 8004472:	4604      	mov	r4, r0
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f001 f834 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 800447a:	4605      	mov	r5, r0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f001 f82f 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	4629      	mov	r1, r5
 800448a:	4620      	mov	r0, r4
 800448c:	f001 f834 	bl	80054f8 <_ZSt14__copy_move_a1ILb0EPmS0_ET1_T0_S2_S1_>
 8004490:	4602      	mov	r2, r0
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f83e 	bl	8005518 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 800449c:	4603      	mov	r3, r0
    }
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bdb0      	pop	{r4, r5, r7, pc}

080044a6 <_ZSt22__uninitialized_copy_aIPmS0_mET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f001 f839 	bl	8005530 <_ZSt18uninitialized_copyIPmS0_ET0_T_S2_S1_>
 80044be:	4603      	mov	r3, r0
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f001 f832 	bl	8005554 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	6838      	ldr	r0, [r7, #0]
 80044fa:	f001 f837 	bl	800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80044fe:	4603      	mov	r3, r0
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x52>
	      _M_root->_M_parent = 0;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
		_M_nodes = _M_nodes->_M_left;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e002      	b.n	8004538 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
	    _M_nodes = 0;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	605a      	str	r2, [r3, #4]
	}
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f001 f815 	bl	8005584 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f823 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80045a6:	b5b0      	push	{r4, r5, r7, lr}
 80045a8:	b08a      	sub	sp, #40	; 0x28
 80045aa:	af02      	add	r7, sp, #8
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80045b4:	f107 0318 	add.w	r3, r7, #24
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f933 	bl	8005826 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f107 0010 	add.w	r0, r7, #16
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	f001 f809 	bl	80055e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>

      if (__res.second)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00f      	beq.n	80045f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80045d4:	693c      	ldr	r4, [r7, #16]
 80045d6:	697d      	ldr	r5, [r7, #20]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 f930 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80045de:	4602      	mov	r2, r0
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	462a      	mov	r2, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 f932 	bl	8005854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80045f0:	4603      	mov	r3, r0
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 80045f2:	e007      	b.n	8004604 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	f107 031c 	add.w	r3, r7, #28
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ffe0 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8004602:	69fb      	ldr	r3, [r7, #28]
    }
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bdb0      	pop	{r4, r5, r7, pc}

0800460c <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 f964 	bl	80058e6 <_ZNSaImEC1ERKS_>
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 f957 	bl	80058e6 <_ZNSaImEC1ERKS_>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe ff6e 	bl	800351c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fedd 	bl	8005416 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
      }
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f001 f924 	bl	8005902 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 80046ba:	4603      	mov	r3, r0
    }
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_ZNSt16allocator_traitsISaISt4pairImmEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 f926 	bl	8005922 <_ZNSaISt4pairImmEEC1ERKS1_>
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f919 	bl	8005922 <_ZNSaISt4pairImmEEC1ERKS1_>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f923 	bl	800593e <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 f929 	bl	8005966 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE11_M_allocateEj>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
      }
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
	if (__p)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	4618      	mov	r0, r3
 8004752:	f001 f91c 	bl	800598e <_ZNSt16allocator_traitsISaISt4pairImmEEE10deallocateERS2_PS1_j>
      }
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f001 f936 	bl	8005a04 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8004798:	4603      	mov	r3, r0
    }
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZSt8_DestroyIPSt4pairImmEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80047ac:	f7fb fdb0 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <_ZSt8_DestroyIPSt4pairImmEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 f955 	bl	8005a68 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairImmEEEvT_S5_>
 80047be:	e003      	b.n	80047c8 <_ZSt8_DestroyIPSt4pairImmEEvT_S3_+0x26>
	__destroy(__first, __last);
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 f968 	bl	8005a98 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairImmEEEvT_S5_>
    }
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE4sizeEv>:
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 80047f0:	6838      	ldr	r0, [r7, #0]
 80047f2:	f001 f95c 	bl	8005aae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_M_rootEv>
 80047f6:	4603      	mov	r3, r0
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	6838      	ldr	r0, [r7, #0]
 8004800:	f001 f961 	bl	8005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8004804:	4603      	mov	r3, r0
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00e      	beq.n	8004838 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x52>
	      _M_root->_M_parent = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x58>
		_M_nodes = _M_nodes->_M_left;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e002      	b.n	800483e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x58>
	    _M_nodes = 0;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
	}
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f001 f93f 	bl	8005ade <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f94d 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80048ba:	f107 0318 	add.w	r3, r7, #24
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 fa5d 	bl	8005d80 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f107 0010 	add.w	r0, r7, #16
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	f001 f933 	bl	8005b3a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80048da:	693c      	ldr	r4, [r7, #16]
 80048dc:	697d      	ldr	r5, [r7, #20]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fa5a 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80048e4:	4602      	mov	r2, r0
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	462a      	mov	r2, r5
 80048ee:	4621      	mov	r1, r4
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f001 fa5c 	bl	8005dae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 80048f6:	4603      	mov	r3, r0
			  __node_gen);
 80048f8:	e007      	b.n	800490a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f001 f90a 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8004908:	69fb      	ldr	r3, [r7, #28]
    }
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bdb0      	pop	{r4, r5, r7, pc}

08004912 <_ZNKSt16initializer_listISt4pairIK3PinN10PWMservice8InstanceEEE4sizeEv>:
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f001 fa83 	bl	8005e40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>
 800493a:	4603      	mov	r3, r0
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f001 fa88 	bl	8005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8004948:	4603      	mov	r3, r0
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x52>
	      _M_root->_M_parent = 0;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
		_M_nodes = _M_nodes->_M_left;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e002      	b.n	8004982 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
	    _M_nodes = 0;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
	}
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f001 fa66 	bl	8005e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fa74 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80049fe:	f107 0318 	add.w	r3, r7, #24
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fb84 	bl	8006112 <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f107 0010 	add.w	r0, r7, #16
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	f001 fa5a 	bl	8005ecc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00f      	beq.n	8004a3e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8004a1e:	693c      	ldr	r4, [r7, #16]
 8004a20:	697d      	ldr	r5, [r7, #20]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 fb81 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	462a      	mov	r2, r5
 8004a32:	4621      	mov	r1, r4
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f001 fb83 	bl	8006140 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8004a3a:	4603      	mov	r3, r0
			  __node_gen);
 8004a3c:	e007      	b.n	8004a4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fa31 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
    }
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}

08004a56 <_ZNKSt16initializer_listISt17reference_wrapperI15TimerPeripheralEE4sizeEv>:
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <_ZSt19__iterator_categoryIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <_ZSt10__distanceIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	109b      	asrs	r3, r3, #2
    }
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	109b      	asrs	r3, r3, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fba2 	bl	800621e <_ZNSaISt17reference_wrapperI15TimerPeripheralEEC1ERKS2_>
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 fb83 	bl	80061ea <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_S_max_sizeERKS3_>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	bf8c      	ite	hi
 8004aec:	2301      	movhi	r3, #1
 8004aee:	2300      	movls	r3, #0
 8004af0:	b2dc      	uxtb	r4, r3
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fb9f 	bl	800623a <_ZNSaISt17reference_wrapperI15TimerPeripheralEED1Ev>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	d002      	beq.n	8004b06 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 8004b00:	4803      	ldr	r0, [pc, #12]	; (8004b10 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 8004b02:	f01e fbb5 	bl	8023270 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8004b06:	687b      	ldr	r3, [r7, #4]
      }
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}
 8004b10:	0802384c 	.word	0x0802384c

08004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE20_M_allocate_and_copyIPKS2_EEPS2_jT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 fb87 	bl	8006250 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_M_allocateEj>
 8004b42:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff ffe4 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 8004b4c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f898 	bl	8004c88 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI15TimerPeripheralEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
	      return __result;
 8004b58:	697b      	ldr	r3, [r7, #20]
	}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f001 fb81 	bl	8006278 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralEEvT_S4_>
    }
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
	if (__p)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fb84 	bl	80062a4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE10deallocateERS3_PS2_j>
      }
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_ZNKSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	109b      	asrs	r3, r3, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE15_M_erase_at_endEPS2_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	109b      	asrs	r3, r3, #2
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff94 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 8004bec:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f7ff ffb5 	bl	8004b62 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}

08004c06 <_ZSt7advanceIPKSt17reference_wrapperI15TimerPeripheralEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff2a 	bl	8004a6e <_ZSt19__iterator_categoryIPKSt17reference_wrapperI15TimerPeripheralEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 fb5f 	bl	80062e2 <_ZSt9__advanceIPKSt17reference_wrapperI15TimerPeripheralEiEvRT_T0_St26random_access_iterator_tag>
    }
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <_ZSt12__miter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>:
    __miter_base(_Iterator __it)
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_ZSt13__copy_move_aILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c42:	b5b0      	push	{r4, r5, r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f001 fb5a 	bl	8006308 <_ZSt12__niter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>
 8004c54:	4604      	mov	r4, r0
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f001 fb56 	bl	8006308 <_ZSt12__niter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fb5c 	bl	800631e <_ZSt12__niter_baseIPSt17reference_wrapperI15TimerPeripheralEET_S4_>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f001 fb61 	bl	8006334 <_ZSt14__copy_move_a1ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>
 8004c72:	4602      	mov	r2, r0
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fb6b 	bl	8006354 <_ZSt12__niter_wrapIPSt17reference_wrapperI15TimerPeripheralEET_RKS4_S4_>
 8004c7e:	4603      	mov	r3, r0
    }
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bdb0      	pop	{r4, r5, r7, pc}

08004c88 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI15TimerPeripheralEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 fb66 	bl	800636c <_ZSt18uninitialized_copyIPKSt17reference_wrapperI15TimerPeripheralEPS2_ET0_T_S7_S6_>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEC1EPS9_RNS_16_Hashtable_allocISA_EE>:
      _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
      : _M_nodes(__nodes), _M_h(__h) { }
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>:
      ~_ReuseOrAllocNode()
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
      { _M_h._M_deallocate_nodes(_M_nodes); }
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f001 fb48 	bl	8006390 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ffc9 	bl	8004caa <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 fb37 	bl	8006390 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2100      	movs	r1, #0
 8004d32:	f01e fbe5 	bl	8023500 <memset>
      _M_element_count = 0;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
    }
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8004d62:	b590      	push	{r4, r7, lr}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffed 	bl	8004d4a <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE5beginEv>
 8004d70:	4604      	mov	r4, r0
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 fb23 	bl	80063be <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE4sizeEv>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4423      	add	r3, r4
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd90      	pop	{r4, r7, pc}

08004d86 <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE>:
	   typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash,
	   typename _RehashPolicy, typename _Traits>
    template<typename _InputIterator, typename _NodeGetter>
      void
      _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
 8004d86:	b590      	push	{r4, r7, lr}
 8004d88:	b08b      	sub	sp, #44	; 0x2c
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
		    _RehashPolicy, _Traits>::
      _M_insert_range(_InputIterator __first, _InputIterator __last,
		      const _NodeGetter& __node_gen, true_type)
      {
	size_type __n_elt = __detail::__distance_fw(__first, __last);
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	68b8      	ldr	r0, [r7, #8]
 8004d98:	f001 fb1d 	bl	80063d6 <_ZNSt8__detail13__distance_fwIPKSt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	61fb      	str	r3, [r7, #28]
	if (__n_elt == 0)
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d022      	beq.n	8004dec <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x66>
	  return;

	__hashtable& __h = _M_conjure_hashtable();
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f001 fb29 	bl	80063fe <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8004dac:	61b8      	str	r0, [r7, #24]
	for (; __first != __last; ++__first)
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d01b      	beq.n	8004dee <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x68>
	  {
	    if (__h._M_insert(*__first, __node_gen, __unique_keys(),
 8004db6:	f107 0010 	add.w	r0, r7, #16
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	f88d 4000 	strb.w	r4, [sp]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	f001 fb24 	bl	8006414 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj>
			      __n_elt).second)
 8004dcc:	7d3b      	ldrb	r3, [r7, #20]
	    if (__h._M_insert(*__first, __node_gen, __unique_keys(),
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x52>
	      __n_elt = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	e005      	b.n	8004de4 <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x5e>
	    else if (__n_elt != 1)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d002      	beq.n	8004de4 <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x5e>
	      --__n_elt;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
	for (; __first != __last; ++__first)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3308      	adds	r3, #8
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	e7e0      	b.n	8004dae <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x28>
	  return;
 8004dec:	bf00      	nop
	  }
      }
 8004dee:	3724      	adds	r7, #36	; 0x24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}

08004df4 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEC1EPS9_RNS_16_Hashtable_allocISA_EE>:
      _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
      : _M_nodes(__nodes), _M_h(__h) { }
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <_ZNSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>:
      ~_ReuseOrAllocNode()
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
      { _M_h._M_deallocate_nodes(_M_nodes); }
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f001 fb4d 	bl	80064e4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ffc9 	bl	8004df4 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 fb3c 	bl	80064e4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4610      	mov	r0, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	f01e fb40 	bl	8023500 <memset>
      _M_element_count = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
    }
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ffed 	bl	8004e94 <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE5beginEv>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 fb28 	bl	8006512 <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE4sizeEv>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4423      	add	r3, r4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE>:
      _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b08b      	sub	sp, #44	; 0x2c
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
	size_type __n_elt = __detail::__distance_fw(__first, __last);
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f001 fb22 	bl	800652a <_ZNSt8__detail13__distance_fwIPKSt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	61fb      	str	r3, [r7, #28]
	if (__n_elt == 0)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x66>
	__hashtable& __h = _M_conjure_hashtable();
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f001 fb2e 	bl	8006552 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 8004ef6:	61b8      	str	r0, [r7, #24]
	for (; __first != __last; ++__first)
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d01b      	beq.n	8004f38 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x68>
	    if (__h._M_insert(*__first, __node_gen, __unique_keys(),
 8004f00:	f107 0010 	add.w	r0, r7, #16
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	f88d 4000 	strb.w	r4, [sp]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	f001 fb29 	bl	8006568 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj>
			      __n_elt).second)
 8004f16:	7d3b      	ldrb	r3, [r7, #20]
	    if (__h._M_insert(*__first, __node_gen, __unique_keys(),
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x52>
	      __n_elt = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	e005      	b.n	8004f2e <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x5e>
	    else if (__n_elt != 1)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x5e>
	      --__n_elt;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
	for (; __first != __last; ++__first)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3308      	adds	r3, #8
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	e7e0      	b.n	8004ef8 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_insert_rangeIPKS7_NS_17_ReuseOrAllocNodeISaINS_10_Hash_nodeIS7_Lb0EEEEEEEEvT_SS_RKT0_St17integral_constantIbLb1EE+0x28>
	  return;
 8004f36:	bf00      	nop
      }
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd90      	pop	{r4, r7, pc}

08004f3e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 8004f60:	6838      	ldr	r0, [r7, #0]
 8004f62:	f001 fb69 	bl	8006638 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_M_rootEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f001 fb6e 	bl	8006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8004f74:	4603      	mov	r3, r0
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x52>
	      _M_root->_M_parent = 0;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x58>
		_M_nodes = _M_nodes->_M_left;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	e002      	b.n	8004fae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeC1ERSC_+0x58>
	    _M_nodes = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
	}
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f001 fb4c 	bl	8006668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	f107 030c 	add.w	r3, r7, #12
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 fb5a 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800502a:	f107 0318 	add.w	r3, r7, #24
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fc6a 	bl	800690a <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEclERKS6_>
 8005036:	4603      	mov	r3, r0
 8005038:	f107 0010 	add.w	r0, r7, #16
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	f001 fb40 	bl	80066c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00f      	beq.n	800506a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800504a:	693c      	ldr	r4, [r7, #16]
 800504c:	697d      	ldr	r5, [r7, #20]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fc67 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 8005054:	4602      	mov	r2, r0
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	462a      	mov	r2, r5
 800505e:	4621      	mov	r1, r4
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f001 fc69 	bl	8006938 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 8005066:	4603      	mov	r3, r0
			  __node_gen);
 8005068:	e007      	b.n	800507a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	f107 031c 	add.w	r3, r7, #28
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fb17 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
 8005078:	69fb      	ldr	r3, [r7, #28]
    }
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bdb0      	pop	{r4, r5, r7, pc}

08005082 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 80050a4:	6838      	ldr	r0, [r7, #0]
 80050a6:	f001 fc90 	bl	80069ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f001 fc95 	bl	80069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80050b8:	4603      	mov	r3, r0
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x52>
	      _M_root->_M_parent = 0;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
		_M_nodes = _M_nodes->_M_left;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	e002      	b.n	80050f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeC1ERSB_+0x58>
	    _M_nodes = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	605a      	str	r2, [r3, #4]
	}
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f001 fc73 	bl	80069fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	f107 030c 	add.w	r3, r7, #12
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f001 fc81 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fd91 	bl	8006c9c <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 800517a:	4603      	mov	r3, r0
 800517c:	f107 0010 	add.w	r0, r7, #16
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f001 fc67 	bl	8006a56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00f      	beq.n	80051ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800518e:	693c      	ldr	r4, [r7, #16]
 8005190:	697d      	ldr	r5, [r7, #20]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 fd8e 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8005198:	4602      	mov	r2, r0
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	462a      	mov	r2, r5
 80051a2:	4621      	mov	r1, r4
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f001 fd90 	bl	8006cca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80051aa:	4603      	mov	r3, r0
			  __node_gen);
 80051ac:	e007      	b.n	80051be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	f107 031c 	add.w	r3, r7, #28
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fc3e 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80051bc:	69fb      	ldr	r3, [r7, #28]
    }
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bdb0      	pop	{r4, r5, r7, pc}

080051c6 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fdc0 	bl	8006d5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f001 fdde 	bl	8006daa <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 020c 	add.w	r2, r3, #12
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f001 fdf4 	bl	8006de8 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeC1ERSA_>:
	_Reuse_or_alloc_node(_Rb_tree& __t)
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 800522a:	6838      	ldr	r0, [r7, #0]
 800522c:	f001 fdfb 	bl	8006e26 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_M_rootEv>
 8005230:	4603      	mov	r3, r0
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	6838      	ldr	r0, [r7, #0]
 800523a:	f001 fe00 	bl	8006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800523e:	4603      	mov	r3, r0
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	609a      	str	r2, [r3, #8]
	  if (_M_root)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeC1ERSA_+0x52>
	      _M_root->_M_parent = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
	      if (_M_nodes->_M_left)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeC1ERSA_+0x58>
		_M_nodes = _M_nodes->_M_left;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	e002      	b.n	8005278 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeC1ERSA_+0x58>
	    _M_nodes = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
	}
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeD1Ev>:
	~_Reuse_or_alloc_node()
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f001 fdde 	bl	8006e56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	f107 030c 	add.w	r3, r7, #12
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fdec 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80052e6:	b5b0      	push	{r4, r5, r7, lr}
 80052e8:	b08a      	sub	sp, #40	; 0x28
 80052ea:	af02      	add	r7, sp, #8
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80052f4:	f107 0318 	add.w	r3, r7, #24
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fefc 	bl	80070f8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8005300:	4603      	mov	r3, r0
 8005302:	f107 0010 	add.w	r0, r7, #16
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	f001 fdd2 	bl	8006eb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00f      	beq.n	8005334 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8005314:	693c      	ldr	r4, [r7, #16]
 8005316:	697d      	ldr	r5, [r7, #20]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 fef9 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	462a      	mov	r2, r5
 8005328:	4621      	mov	r1, r4
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 fefb 	bl	8007126 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8005330:	4603      	mov	r3, r0
			  __node_gen);
 8005332:	e007      	b.n	8005344 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	f107 031c 	add.w	r3, r7, #28
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f001 fda9 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8005342:	69fb      	ldr	r3, [r7, #28]
    }
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bdb0      	pop	{r4, r5, r7, pc}

0800534c <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>:
      _M_get() noexcept
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNSt22_Optional_payload_baseI8PinStateE6_M_getEv>:
      _M_get() noexcept
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d00a      	beq.n	80053b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 ff18 	bl	80071d6 <_ZSt11__addressofImEPT_RS0_>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 ff1f 	bl	80071ec <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e7f0      	b.n	8005398 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	109b      	asrs	r3, r3, #2
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00e      	beq.n	800540e <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe f8b7 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80053fc:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80053fe:	461a      	mov	r2, r3
 8005400:	4621      	mov	r1, r4
 8005402:	6838      	ldr	r0, [r7, #0]
 8005404:	f7fe f8bc 	bl	8003580 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	605a      	str	r2, [r3, #4]
      }
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}

08005416 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d006      	beq.n	8005434 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fee9 	bl	8007202 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8005430:	4603      	mov	r3, r0
 8005432:	e000      	b.n	8005436 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8005434:	2300      	movs	r3, #0
      }
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEENS1_IPmS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f001 fede 	bl	8007242 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005486:	4604      	mov	r4, r0
 8005488:	68b8      	ldr	r0, [r7, #8]
 800548a:	f001 feda 	bl	8007242 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800548e:	4605      	mov	r5, r0
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 fee4 	bl	800725e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	4629      	mov	r1, r5
 800549c:	4620      	mov	r0, r4
 800549e:	f001 feec 	bl	800727a <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 fef7 	bl	800729a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEES2_ET_S7_T0_>
 80054ac:	4603      	mov	r3, r0
    }
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bdb0      	pop	{r4, r5, r7, pc}

080054b6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80054c0:	f7fa ff26 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 ff2e 	bl	800732e <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_>
 80054d2:	e003      	b.n	80054dc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 ff4f 	bl	800737a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_>
    }
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_ZSt14__copy_move_a1ILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f001 ff41 	bl	8007390 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>
 800550e:	4603      	mov	r3, r0
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_ZSt18uninitialized_copyIPmS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800553c:	2301      	movs	r3, #1
 800553e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f001 ff40 	bl	80073ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPmS2_EET0_T_S4_S3_>
 800554a:	4603      	mov	r3, r0
    }
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3308      	adds	r3, #8
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3310      	adds	r3, #16
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d012      	beq.n	80055ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8005594:	6838      	ldr	r0, [r7, #0]
 8005596:	f001 ff28 	bl	80073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800559a:	4603      	mov	r3, r0
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fff0 	bl	8005584 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80055a4:	6838      	ldr	r0, [r7, #0]
 80055a6:	f001 ff2c 	bl	8007402 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80055aa:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 ff33 	bl	800741a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80055b8:	e7e9      	b.n	800558e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b08d      	sub	sp, #52	; 0x34
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 ff23 	bl	800743c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 80055f6:	4603      	mov	r3, r0
 80055f8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80055fa:	69bc      	ldr	r4, [r7, #24]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f001 ff2e 	bl	800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8005602:	4603      	mov	r3, r0
 8005604:	429c      	cmp	r4, r3
 8005606:	bf0c      	ite	eq
 8005608:	2301      	moveq	r3, #1
 800560a:	2300      	movne	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d030      	beq.n	8005674 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8005612:	68b8      	ldr	r0, [r7, #8]
 8005614:	f001 ff2f 	bl	8007476 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8005618:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800561a:	2b00      	cmp	r3, #0
 800561c:	d013      	beq.n	8005646 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 800561e:	68bc      	ldr	r4, [r7, #8]
 8005620:	68b8      	ldr	r0, [r7, #8]
 8005622:	f7ff ffa3 	bl	800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005626:	4603      	mov	r3, r0
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f001 ff2f 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005630:	4603      	mov	r3, r0
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	4620      	mov	r0, r4
 8005638:	f001 ff35 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8005646:	2300      	movs	r3, #0
	  if (size() > 0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	68b8      	ldr	r0, [r7, #8]
 8005652:	f7ff ff8b 	bl	800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005656:	4602      	mov	r2, r0
 8005658:	f107 031c 	add.w	r3, r7, #28
 800565c:	4619      	mov	r1, r3
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f001 ff30 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005664:	e0db      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f001 ff3f 	bl	80074f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8005672:	e0d4      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8005674:	68bc      	ldr	r4, [r7, #8]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4618      	mov	r0, r3
 800567a:	f001 ff08 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	4620      	mov	r0, r4
 8005686:	f001 ff0e 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d057      	beq.n	8005740 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8005694:	69bc      	ldr	r4, [r7, #24]
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f001 ffaf 	bl	80075fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 800569c:	4603      	mov	r3, r0
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429c      	cmp	r4, r3
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00d      	beq.n	80056ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80056ae:	68b8      	ldr	r0, [r7, #8]
 80056b0:	f001 ffa3 	bl	80075fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80056b4:	4604      	mov	r4, r0
 80056b6:	68b8      	ldr	r0, [r7, #8]
 80056b8:	f001 ff9f 	bl	80075fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80056bc:	4603      	mov	r3, r0
 80056be:	461a      	mov	r2, r3
 80056c0:	4621      	mov	r1, r4
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f001 ffa5 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80056c8:	e0a9      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80056ca:	68bc      	ldr	r4, [r7, #8]
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 ffb7 	bl	8007644 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 80056d6:	4603      	mov	r3, r0
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fed7 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80056e0:	4603      	mov	r3, r0
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	f001 fedd 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01f      	beq.n	8005732 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 fe78 	bl	80073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	f107 0214 	add.w	r2, r7, #20
 8005712:	f107 0320 	add.w	r3, r7, #32
 8005716:	4619      	mov	r1, r3
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f001 fed3 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800571e:	e07e      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8005720:	f107 0218 	add.w	r2, r7, #24
 8005724:	f107 0318 	add.w	r3, r7, #24
 8005728:	4619      	mov	r1, r3
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f001 ff71 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005730:	e075      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fed9 	bl	80074f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800573e:	e06e      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8005740:	68bc      	ldr	r4, [r7, #8]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fea2 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800574a:	4603      	mov	r3, r0
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	4619      	mov	r1, r3
 8005750:	4620      	mov	r0, r4
 8005752:	f001 fea8 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d056      	beq.n	800580a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8005760:	69bc      	ldr	r4, [r7, #24]
 8005762:	68b8      	ldr	r0, [r7, #8]
 8005764:	f7ff ff02 	bl	800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005768:	4603      	mov	r3, r0
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	429c      	cmp	r4, r3
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	68b8      	ldr	r0, [r7, #8]
 8005780:	f7ff fef4 	bl	800556c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005784:	4602      	mov	r2, r0
 8005786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578a:	4619      	mov	r1, r3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f001 fe99 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005792:	e044      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8005794:	68bc      	ldr	r4, [r7, #8]
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	4618      	mov	r0, r3
 800579c:	f001 ff63 	bl	8007666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 80057a0:	4603      	mov	r3, r0
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fe72 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	4620      	mov	r0, r4
 80057b2:	f001 fe78 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01f      	beq.n	80057fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 fe13 	bl	80073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 80057d4:	2300      	movs	r3, #0
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d8:	f107 0218 	add.w	r2, r7, #24
 80057dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057e0:	4619      	mov	r1, r3
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f001 fe6e 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80057e8:	e019      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80057ea:	f107 0210 	add.w	r2, r7, #16
 80057ee:	f107 0310 	add.w	r3, r7, #16
 80057f2:	4619      	mov	r1, r3
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 ff0c 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80057fa:	e010      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fe74 	bl	80074f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8005808:	e009      	b.n	800581e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800580a:	2300      	movs	r3, #0
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005812:	f107 0318 	add.w	r3, r7, #24
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f001 ff35 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	3734      	adds	r7, #52	; 0x34
 8005822:	46bd      	mov	sp, r7
 8005824:	bd90      	pop	{r4, r7, pc}

08005826 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11a      	bne.n	800589e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 fdf8 	bl	800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005876:	68fc      	ldr	r4, [r7, #12]
 8005878:	f107 0310 	add.w	r3, r7, #16
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ffd1 	bl	8005826 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8005884:	4605      	mov	r5, r0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 fe01 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	4629      	mov	r1, r5
 8005892:	4620      	mov	r0, r4
 8005894:	f001 fe07 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 80058a2:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80058a4:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80058a6:	6838      	ldr	r0, [r7, #0]
 80058a8:	f7ff ffc9 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80058ac:	4603      	mov	r3, r0
 80058ae:	4619      	mov	r1, r3
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f001 feff 	bl	80076b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80058b6:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80058bc:	7ff8      	ldrb	r0, [r7, #31]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	f01d fc77 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fe73 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80058dc:	697b      	ldr	r3, [r7, #20]
      }
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bdb0      	pop	{r4, r5, r7, pc}

080058e6 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 ff0d 	bl	8007712 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 ff09 	bl	800772a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8005918:	4603      	mov	r3, r0
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <_ZNSaISt4pairImmEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 ff13 	bl	800775a <_ZN9__gnu_cxx13new_allocatorISt4pairImmEEC1ERKS3_>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	609a      	str	r2, [r3, #8]
	{ }
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE11_M_allocateEj+0x1e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f001 fef9 	bl	8007772 <_ZNSt16allocator_traitsISaISt4pairImmEEE8allocateERS2_j>
 8005980:	4603      	mov	r3, r0
 8005982:	e000      	b.n	8005986 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE11_M_allocateEj+0x20>
 8005984:	2300      	movs	r3, #0
      }
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <_ZNSt16allocator_traitsISaISt4pairImmEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800598e:	b580      	push	{r7, lr}
 8005990:	b088      	sub	sp, #32
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80059a6:	f7fa fcb3 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <_ZNSt16allocator_traitsISaISt4pairImmEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80059b0:	69b8      	ldr	r0, [r7, #24]
 80059b2:	f01d fb92 	bl	80230da <_ZdlPv>
	    return;
 80059b6:	e005      	b.n	80059c4 <_ZNSt16allocator_traitsISaISt4pairImmEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	69f8      	ldr	r0, [r7, #28]
 80059be:	f003 fb8c 	bl	80090da <_ZN9__gnu_cxx13new_allocatorISt4pairImmEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
	return *this;
 80059f6:	687b      	ldr	r3, [r7, #4]
      }
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005a14:	f107 0208 	add.w	r2, r7, #8
 8005a18:	f107 030c 	add.w	r3, r7, #12
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fec7 	bl	80077b2 <_ZN9__gnu_cxxeqIPKSt4pairImmES4_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f083 0301 	eor.w	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d016      	beq.n	8005a5e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x5a>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005a30:	6978      	ldr	r0, [r7, #20]
 8005a32:	f001 fed6 	bl	80077e2 <_ZSt11__addressofISt4pairImmEEPT_RS2_>
 8005a36:	4604      	mov	r4, r0
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fedb 	bl	80077f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEdeEv>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4619      	mov	r1, r3
 8005a46:	4620      	mov	r0, r4
 8005a48:	f001 fee2 	bl	8007810 <_ZSt10_ConstructISt4pairImmEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ffc6 	bl	80059e2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEppEv>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e7da      	b.n	8005a14 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x10>
	      return __cur;
 8005a5e:	697b      	ldr	r3, [r7, #20]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairImmEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d00a      	beq.n	8005a90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairImmEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 feb1 	bl	80077e2 <_ZSt11__addressofISt4pairImmEEPT_RS2_>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fedc 	bl	8007840 <_ZSt8_DestroyISt4pairImmEEvPT_>
	  for (; __first != __last; ++__first)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e7f0      	b.n	8005a72 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairImmEEEvT_S5_+0xa>
	}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairImmEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d012      	beq.n	8005b14 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8005aee:	6838      	ldr	r0, [r7, #0]
 8005af0:	f001 feb1 	bl	8007856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fff0 	bl	8005ade <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8005afe:	6838      	ldr	r0, [r7, #0]
 8005b00:	f001 feb5 	bl	800786e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005b04:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 febc 	bl	8007886 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8005b12:	e7e9      	b.n	8005ae8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005b3a:	b590      	push	{r4, r7, lr}
 8005b3c:	b08d      	sub	sp, #52	; 0x34
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 feac 	bl	80078a8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE13_M_const_castEv>
 8005b50:	4603      	mov	r3, r0
 8005b52:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8005b54:	69bc      	ldr	r4, [r7, #24]
 8005b56:	68b8      	ldr	r0, [r7, #8]
 8005b58:	f001 feb7 	bl	80078ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d030      	beq.n	8005bce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8005b6c:	68b8      	ldr	r0, [r7, #8]
 8005b6e:	f001 feb8 	bl	80078e2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 8005b72:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8005b78:	68bc      	ldr	r4, [r7, #8]
 8005b7a:	68b8      	ldr	r0, [r7, #8]
 8005b7c:	f7ff ffa3 	bl	8005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8005b80:	4603      	mov	r3, r0
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 feb8 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 fedb 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8005ba0:	2300      	movs	r3, #0
	  if (size() > 0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	68b8      	ldr	r0, [r7, #8]
 8005bac:	f7ff ff8b 	bl	8005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	f107 031c 	add.w	r3, r7, #28
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f001 fc83 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005bbe:	e0db      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 feda 	bl	8007980 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8005bcc:	e0d4      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8005bce:	68bc      	ldr	r4, [r7, #8]
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fe91 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	4620      	mov	r0, r4
 8005be0:	f001 feb4 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d057      	beq.n	8005c9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8005bee:	69bc      	ldr	r4, [r7, #24]
 8005bf0:	68b8      	ldr	r0, [r7, #8]
 8005bf2:	f001 ff4a 	bl	8007a8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	429c      	cmp	r4, r3
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8005c08:	68b8      	ldr	r0, [r7, #8]
 8005c0a:	f001 ff3e 	bl	8007a8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8005c0e:	4604      	mov	r4, r0
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	f001 ff3a 	bl	8007a8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f001 fcf8 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005c22:	e0a9      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8005c24:	68bc      	ldr	r4, [r7, #8]
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 ff39 	bl	8007aa2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>
 8005c30:	4603      	mov	r3, r0
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fe60 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4620      	mov	r0, r4
 8005c42:	f001 fe83 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01f      	beq.n	8005c8c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fe01 	bl	8007856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8005c64:	2300      	movs	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	f107 0214 	add.w	r2, r7, #20
 8005c6c:	f107 0320 	add.w	r3, r7, #32
 8005c70:	4619      	mov	r1, r3
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 fc26 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005c78:	e07e      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8005c7a:	f107 0218 	add.w	r2, r7, #24
 8005c7e:	f107 0318 	add.w	r3, r7, #24
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f001 fcc4 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005c8a:	e075      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fe74 	bl	8007980 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8005c98:	e06e      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8005c9a:	68bc      	ldr	r4, [r7, #8]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fe2b 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4620      	mov	r0, r4
 8005cac:	f001 fe4e 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d056      	beq.n	8005d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8005cba:	69bc      	ldr	r4, [r7, #24]
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f7ff ff02 	bl	8005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	68b8      	ldr	r0, [r7, #8]
 8005cda:	f7ff fef4 	bl	8005ac6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f001 fbec 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005cec:	e044      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8005cee:	68bc      	ldr	r4, [r7, #8]
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fee5 	bl	8007ac4 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEppEv>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fdfb 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f001 fe1e 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01f      	beq.n	8005d56 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fd9c 	bl	8007856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d32:	f107 0218 	add.w	r2, r7, #24
 8005d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fbc1 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005d42:	e019      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8005d44:	f107 0210 	add.w	r2, r7, #16
 8005d48:	f107 0310 	add.w	r3, r7, #16
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f001 fc5f 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005d54:	e010      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fe0f 	bl	8007980 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8005d62:	e009      	b.n	8005d78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8005d64:	2300      	movs	r3, #0
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d68:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005d6c:	f107 0318 	add.w	r3, r7, #24
 8005d70:	4619      	mov	r1, r3
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f001 fc88 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	3734      	adds	r7, #52	; 0x34
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd90      	pop	{r4, r7, pc}

08005d80 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>:
      operator()(const _Pair& __x) const
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005dae:	b5b0      	push	{r4, r5, r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11a      	bne.n	8005df8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 fd81 	bl	80078ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005dd0:	68fc      	ldr	r4, [r7, #12]
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ffd1 	bl	8005d80 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 8005dde:	4605      	mov	r5, r0
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fd8a 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005de6:	4603      	mov	r3, r0
 8005de8:	461a      	mov	r2, r3
 8005dea:	4629      	mov	r1, r5
 8005dec:	4620      	mov	r0, r4
 8005dee:	f001 fdad 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8005dfc:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005dfe:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005e00:	6838      	ldr	r0, [r7, #0]
 8005e02:	f7ff ffc9 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8005e06:	4603      	mov	r3, r0
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0c:	f001 fe6b 	bl	8007ae6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 8005e10:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005e16:	7ff8      	ldrb	r0, [r7, #31]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	69b9      	ldr	r1, [r7, #24]
 8005e1c:	f01d f9ca 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8005e2a:	f107 0314 	add.w	r3, r7, #20
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fe73 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8005e36:	697b      	ldr	r3, [r7, #20]
      }
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bdb0      	pop	{r4, r5, r7, pc}

08005e40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3310      	adds	r3, #16
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d012      	beq.n	8005ea6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8005e80:	6838      	ldr	r0, [r7, #0]
 8005e82:	f001 fe5f 	bl	8007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fff0 	bl	8005e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8005e90:	6838      	ldr	r0, [r7, #0]
 8005e92:	f001 fe63 	bl	8007b5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005e96:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fe6a 	bl	8007b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8005ea4:	e7e9      	b.n	8005e7a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b08d      	sub	sp, #52	; 0x34
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fe5a 	bl	8007b96 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEE13_M_const_castEv>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8005ee6:	69bc      	ldr	r4, [r7, #24]
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f001 fe65 	bl	8007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d030      	beq.n	8005f60 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8005efe:	68b8      	ldr	r0, [r7, #8]
 8005f00:	f001 fe66 	bl	8007bd0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8005f04:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d013      	beq.n	8005f32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8005f0a:	68bc      	ldr	r4, [r7, #8]
 8005f0c:	68b8      	ldr	r0, [r7, #8]
 8005f0e:	f7ff ffa3 	bl	8005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005f12:	4603      	mov	r3, r0
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fe66 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	4620      	mov	r0, r4
 8005f24:	f001 fabf 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8005f32:	2300      	movs	r3, #0
	  if (size() > 0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	68b8      	ldr	r0, [r7, #8]
 8005f3e:	f7ff ff8b 	bl	8005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8005f42:	4602      	mov	r2, r0
 8005f44:	f107 031c 	add.w	r3, r7, #28
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 faba 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8005f50:	e0db      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fe51 	bl	8007c00 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8005f5e:	e0d4      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8005f60:	68bc      	ldr	r4, [r7, #8]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fe3f 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 fa98 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d057      	beq.n	800602c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8005f80:	69bc      	ldr	r4, [r7, #24]
 8005f82:	68b8      	ldr	r0, [r7, #8]
 8005f84:	f001 fec1 	bl	8007d0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	f001 feb5 	bl	8007d0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	68b8      	ldr	r0, [r7, #8]
 8005fa4:	f001 feb1 	bl	8007d0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	461a      	mov	r2, r3
 8005fac:	4621      	mov	r1, r4
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 fb2f 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005fb4:	e0a9      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8005fb6:	68bc      	ldr	r4, [r7, #8]
 8005fb8:	f107 0314 	add.w	r3, r7, #20
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 feb0 	bl	8007d22 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 fe0e 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f001 fa67 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01f      	beq.n	800601e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fdaf 	bl	8007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	f107 0214 	add.w	r2, r7, #20
 8005ffe:	f107 0320 	add.w	r3, r7, #32
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 fa5d 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800600a:	e07e      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800600c:	f107 0218 	add.w	r2, r7, #24
 8006010:	f107 0318 	add.w	r3, r7, #24
 8006014:	4619      	mov	r1, r3
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f001 fafb 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800601c:	e075      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fdeb 	bl	8007c00 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 800602a:	e06e      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800602c:	68bc      	ldr	r4, [r7, #8]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fdd9 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006036:	4603      	mov	r3, r0
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	4620      	mov	r0, r4
 800603e:	f001 fa32 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d056      	beq.n	80060f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800604c:	69bc      	ldr	r4, [r7, #24]
 800604e:	68b8      	ldr	r0, [r7, #8]
 8006050:	f7ff ff02 	bl	8005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006054:	4603      	mov	r3, r0
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	429c      	cmp	r4, r3
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7ff fef4 	bl	8005e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006070:	4602      	mov	r2, r0
 8006072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006076:	4619      	mov	r1, r3
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 fa23 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800607e:	e044      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006080:	68bc      	ldr	r4, [r7, #8]
 8006082:	f107 0310 	add.w	r3, r7, #16
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fe5c 	bl	8007d44 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEppEv>
 800608c:	4603      	mov	r3, r0
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fda9 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	4620      	mov	r0, r4
 800609e:	f001 fa02 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01f      	beq.n	80060e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fd4a 	bl	8007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bf0c      	ite	eq
 80060b6:	2301      	moveq	r3, #1
 80060b8:	2300      	movne	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 80060c0:	2300      	movs	r3, #0
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c4:	f107 0218 	add.w	r2, r7, #24
 80060c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060cc:	4619      	mov	r1, r3
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f001 f9f8 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80060d4:	e019      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80060d6:	f107 0210 	add.w	r2, r7, #16
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	4619      	mov	r1, r3
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 fa96 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80060e6:	e010      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fd86 	bl	8007c00 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80060f4:	e009      	b.n	800610a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80060f6:	2300      	movs	r3, #0
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80060fe:	f107 0318 	add.w	r3, r7, #24
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f001 fabf 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	3734      	adds	r7, #52	; 0x34
 800610e:	46bd      	mov	sp, r7
 8006110:	bd90      	pop	{r4, r7, pc}

08006112 <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006140:	b5b0      	push	{r4, r5, r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11a      	bne.n	800618a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 fd2f 	bl	8007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800615a:	4602      	mov	r2, r0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006162:	68fc      	ldr	r4, [r7, #12]
 8006164:	f107 0310 	add.w	r3, r7, #16
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff ffd1 	bl	8006112 <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 8006170:	4605      	mov	r5, r0
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fd38 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4629      	mov	r1, r5
 800617e:	4620      	mov	r0, r4
 8006180:	f001 f991 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 800618e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006190:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8006192:	6838      	ldr	r0, [r7, #0]
 8006194:	f7ff ffc9 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006198:	4603      	mov	r3, r0
 800619a:	4619      	mov	r1, r3
 800619c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619e:	f001 fde2 	bl	8007d66 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80061a2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80061a8:	7ff8      	ldrb	r0, [r7, #31]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	69b9      	ldr	r1, [r7, #24]
 80061ae:	f01d f801 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	69b9      	ldr	r1, [r7, #24]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fe73 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80061c8:	697b      	ldr	r3, [r7, #20]
      }
 80061ca:	4618      	mov	r0, r3
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bdb0      	pop	{r4, r5, r7, pc}

080061d2 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80061da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80061f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80061f6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ffea 	bl	80061d2 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8max_sizeERKS3_>
 80061fe:	4603      	mov	r3, r0
 8006200:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006202:	f107 0208 	add.w	r2, r7, #8
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	4611      	mov	r1, r2
 800620c:	4618      	mov	r0, r3
 800620e:	f7fa f92e 	bl	800046e <_ZSt3minIjERKT_S2_S2_>
 8006212:	4603      	mov	r3, r0
 8006214:	681b      	ldr	r3, [r3, #0]
      }
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <_ZNSaISt17reference_wrapperI15TimerPeripheralEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fdca 	bl	8007dc4 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEEC1ERKS4_>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <_ZNSaISt17reference_wrapperI15TimerPeripheralEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_M_allocateEj+0x1e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fdb9 	bl	8007ddc <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8allocateERS3_j>
 800626a:	4603      	mov	r3, r0
 800626c:	e000      	b.n	8006270 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE11_M_allocateEj+0x20>
 800626e:	2300      	movs	r3, #0
      }
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8006282:	f7fa f845 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fdc4 	bl	8007e1c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_>
 8006294:	e003      	b.n	800629e <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralEEvT_S4_+0x26>
	__destroy(__first, __last);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 fdd7 	bl	8007e4c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_>
    }
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80062bc:	f7fa f828 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80062c6:	69b8      	ldr	r0, [r7, #24]
 80062c8:	f01c ff07 	bl	80230da <_ZdlPv>
	    return;
 80062cc:	e005      	b.n	80062da <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69f8      	ldr	r0, [r7, #28]
 80062d4:	f003 f982 	bl	80095dc <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <_ZSt9__advanceIPKSt17reference_wrapperI15TimerPeripheralEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]
    }
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <_ZSt12__niter_baseIPKSt17reference_wrapperI15TimerPeripheralEET_S5_>:
    __niter_base(_Iterator __it)
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZSt12__niter_baseIPSt17reference_wrapperI15TimerPeripheralEET_S4_>:
    __niter_base(_Iterator __it)
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <_ZSt14__copy_move_a1ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fd8c 	bl	8007e62 <_ZSt14__copy_move_a2ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>
 800634a:	4603      	mov	r3, r0
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZSt12__niter_wrapIPSt17reference_wrapperI15TimerPeripheralEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZSt18uninitialized_copyIPKSt17reference_wrapperI15TimerPeripheralEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f001 fd8b 	bl	8007e9c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI15TimerPeripheralEPS4_EET0_T_S9_S8_>
 8006386:	4603      	mov	r3, r0
    }
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_+0x26>
	{
	  __node_type* __tmp = __n;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80063a4:	6838      	ldr	r0, [r7, #0]
 80063a6:	f001 fd99 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 80063aa:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fda0 	bl	8007ef4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>
      while (__n)
 80063b4:	e7f1      	b.n	800639a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_+0xa>
	}
    }
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <_ZNKSt16initializer_listISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEE4sizeEv>:
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <_ZNSt8__detail13__distance_fwIPKSt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_>:
    __distance_fw(_Iterator __first, _Iterator __last)
 80063d6:	b5b0      	push	{r4, r5, r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
    { return __distance_fw(__first, __last,
 80063e0:	687c      	ldr	r4, [r7, #4]
			   std::__iterator_category(__first)); }
 80063e2:	1d3b      	adds	r3, r7, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fd9f 	bl	8007f28 <_ZSt19__iterator_categoryIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
    { return __distance_fw(__first, __last,
 80063ea:	462a      	mov	r2, r5
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	4620      	mov	r0, r4
 80063f0:	f001 fda4 	bl	8007f3c <_ZNSt8__detail13__distance_fwIPKSt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_St20forward_iterator_tag>
 80063f4:	4603      	mov	r3, r0
			   std::__iterator_category(__first)); }
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bdb0      	pop	{r4, r5, r7, pc}

080063fe <_ZNSt8__detail12_Insert_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006414:	b580      	push	{r7, lr}
 8006416:	b090      	sub	sp, #64	; 0x40
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
	const key_type& __k = this->_M_extract()(__v);
 8006422:	68b8      	ldr	r0, [r7, #8]
 8006424:	f001 fd99 	bl	8007f5a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 8006428:	4603      	mov	r3, r0
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fda0 	bl	8007f72 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN3SPI10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 8006432:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8006434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f001 fdac 	bl	8007f94 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 800643c:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__k, __code);
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f001 fdba 	bl	8007fbc <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8006448:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_type* __node = _M_find_node(__bkt, __k, __code))
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	68b8      	ldr	r0, [r7, #8]
 8006452:	f001 fdc5 	bl	8007fe0 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8006456:	62b8      	str	r0, [r7, #40]	; 0x28
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d011      	beq.n	8006482 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj+0x6e>
	  return { iterator(__node), false };
 800645e:	f107 0320 	add.w	r3, r7, #32
 8006462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006464:	4618      	mov	r0, r3
 8006466:	f001 fdd4 	bl	8008012 <_ZNSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 800646a:	2300      	movs	r3, #0
 800646c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006470:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8006474:	f107 0320 	add.w	r3, r7, #32
 8006478:	4619      	mov	r1, r3
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 fdd8 	bl	8008030 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IS8_bLb1EEEOT_OT0_>
      }
 8006480:	e02c      	b.n	80064dc <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj+0xc8>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fded 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8006488:	4603      	mov	r3, r0
 800648a:	4619      	mov	r1, r3
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f001 fdf3 	bl	8008078 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_>
 8006492:	4601      	mov	r1, r0
 8006494:	f107 0318 	add.w	r3, r7, #24
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fe32 	bl	8008104 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>
	  = _M_insert_unique_node(__k, __bkt, __code, __node._M_node, __n_elt);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a4:	9201      	str	r2, [sp, #4]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064ae:	68b8      	ldr	r0, [r7, #8]
 80064b0:	f001 fe50 	bl	8008154 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj>
 80064b4:	4603      	mov	r3, r0
 80064b6:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
	return { __pos, true };
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064c2:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80064c6:	f107 0314 	add.w	r3, r7, #20
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f001 fe89 	bl	80081e4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IRS8_bLb1EEEOT_OT0_>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 80064d2:	f107 0318 	add.w	r3, r7, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fe27 	bl	800812a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
      }
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	3738      	adds	r7, #56	; 0x38
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
      while (__n)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_+0x26>
	  __node_type* __tmp = __n;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80064f8:	6838      	ldr	r0, [r7, #0]
 80064fa:	f001 fe8c 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 80064fe:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fe93 	bl	800822e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>
      while (__n)
 8006508:	e7f1      	b.n	80064ee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_deallocate_nodesEPS9_+0xa>
    }
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_ZNKSt16initializer_listISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEE4sizeEv>:
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <_ZNSt8__detail13__distance_fwIPKSt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_>:
    __distance_fw(_Iterator __first, _Iterator __last)
 800652a:	b5b0      	push	{r4, r5, r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
    { return __distance_fw(__first, __last,
 8006534:	687c      	ldr	r4, [r7, #4]
			   std::__iterator_category(__first)); }
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fe92 	bl	8008262 <_ZSt19__iterator_categoryIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
    { return __distance_fw(__first, __last,
 800653e:	462a      	mov	r2, r5
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	4620      	mov	r0, r4
 8006544:	f001 fe97 	bl	8008276 <_ZNSt8__detail13__distance_fwIPKSt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_St20forward_iterator_tag>
 8006548:	4603      	mov	r3, r0
			   std::__iterator_category(__first)); }
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bdb0      	pop	{r4, r5, r7, pc}

08006552 <_ZNSt8__detail12_Insert_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEESaIS7_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8006568:	b580      	push	{r7, lr}
 800656a:	b090      	sub	sp, #64	; 0x40
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
	const key_type& __k = this->_M_extract()(__v);
 8006576:	68b8      	ldr	r0, [r7, #8]
 8006578:	f001 fe8c 	bl	8008294 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800657c:	4603      	mov	r3, r0
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fe93 	bl	80082ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN4UART10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 8006586:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8006588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800658a:	68b8      	ldr	r0, [r7, #8]
 800658c:	f001 fe9f 	bl	80082ce <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8006590:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__k, __code);
 8006592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f001 fead 	bl	80082f6 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800659c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_type* __node = _M_find_node(__bkt, __k, __code))
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a4:	68b8      	ldr	r0, [r7, #8]
 80065a6:	f001 feb8 	bl	800831a <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 80065aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d011      	beq.n	80065d6 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj+0x6e>
	  return { iterator(__node), false };
 80065b2:	f107 0320 	add.w	r3, r7, #32
 80065b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fec7 	bl	800834c <_ZNSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80065c4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80065c8:	f107 0320 	add.w	r3, r7, #32
 80065cc:	4619      	mov	r1, r3
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f001 fecb 	bl	800836a <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IS8_bLb1EEEOT_OT0_>
      }
 80065d4:	e02c      	b.n	8006630 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS6_NS8_17_ReuseOrAllocNodeISaINS8_10_Hash_nodeIS6_Lb0EEEEEEEES2_INS8_14_Node_iteratorIS6_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EEj+0xc8>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fee0 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80065dc:	4603      	mov	r3, r0
 80065de:	4619      	mov	r1, r3
 80065e0:	6838      	ldr	r0, [r7, #0]
 80065e2:	f001 fee6 	bl	80083b2 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_>
 80065e6:	4601      	mov	r1, r0
 80065e8:	f107 0318 	add.w	r3, r7, #24
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 ff25 	bl	800843e <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>
	  = _M_insert_unique_node(__k, __bkt, __code, __node._M_node, __n_elt);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f8:	9201      	str	r2, [sp, #4]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006600:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f001 ff43 	bl	800848e <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj>
 8006608:	4603      	mov	r3, r0
 800660a:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
	return { __pos, true };
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006616:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800661a:	f107 0314 	add.w	r3, r7, #20
 800661e:	4619      	mov	r1, r3
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 ff7c 	bl	800851e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IRS8_bLb1EEEOT_OT0_>
	_Scoped_node __node{ __node_gen(std::forward<_Arg>(__v)), this };
 8006626:	f107 0318 	add.w	r3, r7, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f001 ff1a 	bl	8008464 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
      }
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	3738      	adds	r7, #56	; 0x38
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3308      	adds	r3, #8
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3310      	adds	r3, #16
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006678:	6838      	ldr	r0, [r7, #0]
 800667a:	f001 ff69 	bl	8008550 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800667e:	4603      	mov	r3, r0
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fff0 	bl	8006668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006688:	6838      	ldr	r0, [r7, #0]
 800668a:	f001 ff6d 	bl	8008568 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800668e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 ff74 	bl	8008580 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800669c:	e7e9      	b.n	8006672 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b08d      	sub	sp, #52	; 0x34
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80066d2:	1d3b      	adds	r3, r7, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 ff64 	bl	80085a2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE13_M_const_castEv>
 80066da:	4603      	mov	r3, r0
 80066dc:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80066de:	69bc      	ldr	r4, [r7, #24]
 80066e0:	68b8      	ldr	r0, [r7, #8]
 80066e2:	f001 ff6f 	bl	80085c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 80066e6:	4603      	mov	r3, r0
 80066e8:	429c      	cmp	r4, r3
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d030      	beq.n	8006758 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 80066f6:	68b8      	ldr	r0, [r7, #8]
 80066f8:	f001 ff70 	bl	80085dc <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 80066fc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8006702:	68bc      	ldr	r4, [r7, #8]
 8006704:	68b8      	ldr	r0, [r7, #8]
 8006706:	f7ff ffa3 	bl	8006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800670a:	4603      	mov	r3, r0
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f001 ff70 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006714:	4603      	mov	r3, r0
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	4620      	mov	r0, r4
 800671c:	f001 f916 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 800672a:	2300      	movs	r3, #0
	  if (size() > 0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	68b8      	ldr	r0, [r7, #8]
 8006736:	f7ff ff8b 	bl	8006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800673a:	4602      	mov	r2, r0
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	4619      	mov	r1, r3
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 febe 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006748:	e0db      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f001 ff5b 	bl	800860c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006756:	e0d4      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006758:	68bc      	ldr	r4, [r7, #8]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	4618      	mov	r0, r3
 800675e:	f001 ff49 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006762:	4603      	mov	r3, r0
 8006764:	461a      	mov	r2, r3
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	4620      	mov	r0, r4
 800676a:	f001 f8ef 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d057      	beq.n	8006824 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006778:	69bc      	ldr	r4, [r7, #24]
 800677a:	68b8      	ldr	r0, [r7, #8]
 800677c:	f001 ffcb 	bl	8008716 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8006780:	4603      	mov	r3, r0
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	429c      	cmp	r4, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006792:	68b8      	ldr	r0, [r7, #8]
 8006794:	f001 ffbf 	bl	8008716 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8006798:	4604      	mov	r4, r0
 800679a:	68b8      	ldr	r0, [r7, #8]
 800679c:	f001 ffbb 	bl	8008716 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	4621      	mov	r1, r4
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 ff33 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80067ac:	e0a9      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80067ae:	68bc      	ldr	r4, [r7, #8]
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 ffba 	bl	800872e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEmmEv>
 80067ba:	4603      	mov	r3, r0
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 ff18 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80067c4:	4603      	mov	r3, r0
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4620      	mov	r0, r4
 80067cc:	f001 f8be 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01f      	beq.n	8006816 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 feb9 	bl	8008550 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 80067ee:	2300      	movs	r3, #0
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	f107 0214 	add.w	r2, r7, #20
 80067f6:	f107 0320 	add.w	r3, r7, #32
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fe61 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006802:	e07e      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8006804:	f107 0218 	add.w	r2, r7, #24
 8006808:	f107 0318 	add.w	r3, r7, #24
 800680c:	4619      	mov	r1, r3
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 feff 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006814:	e075      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fef5 	bl	800860c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006822:	e06e      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006824:	68bc      	ldr	r4, [r7, #8]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fee3 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800682e:	4603      	mov	r3, r0
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	4619      	mov	r1, r3
 8006834:	4620      	mov	r0, r4
 8006836:	f001 f889 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d056      	beq.n	80068ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006844:	69bc      	ldr	r4, [r7, #24]
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff ff02 	bl	8006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 800684c:	4603      	mov	r3, r0
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	429c      	cmp	r4, r3
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00c      	beq.n	8006878 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 800685e:	2300      	movs	r3, #0
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
 8006862:	68b8      	ldr	r0, [r7, #8]
 8006864:	f7ff fef4 	bl	8006650 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8006868:	4602      	mov	r2, r0
 800686a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fe27 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006876:	e044      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006878:	68bc      	ldr	r4, [r7, #8]
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	4618      	mov	r0, r3
 8006880:	f001 ff66 	bl	8008750 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEppEv>
 8006884:	4603      	mov	r3, r0
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f001 feb3 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800688e:	4603      	mov	r3, r0
 8006890:	461a      	mov	r2, r3
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	4620      	mov	r0, r4
 8006896:	f001 f859 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01f      	beq.n	80068e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fe54 	bl	8008550 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80068bc:	f107 0218 	add.w	r2, r7, #24
 80068c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c4:	4619      	mov	r1, r3
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fdfc 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80068cc:	e019      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80068ce:	f107 0210 	add.w	r2, r7, #16
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	4619      	mov	r1, r3
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fe9a 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80068de:	e010      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fe90 	bl	800860c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80068ec:	e009      	b.n	8006902 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 80068ee:	2300      	movs	r3, #0
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80068f6:	f107 0318 	add.w	r3, r7, #24
 80068fa:	4619      	mov	r1, r3
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fec3 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	3734      	adds	r7, #52	; 0x34
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}

0800690a <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEclERKS6_>:
      operator()(const _Pair& __x) const
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006938:	b5b0      	push	{r4, r5, r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11a      	bne.n	8006982 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f001 fe39 	bl	80085c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800695a:	68fc      	ldr	r4, [r7, #12]
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff ffd1 	bl	800690a <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEclERKS6_>
 8006968:	4605      	mov	r5, r0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fe42 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	4629      	mov	r1, r5
 8006976:	4620      	mov	r0, r4
 8006978:	f000 ffe8 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8006986:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006988:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f7ff ffc9 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 8006990:	4603      	mov	r3, r0
 8006992:	4619      	mov	r1, r3
 8006994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006996:	f001 feec 	bl	8008772 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 800699a:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80069a0:	7ff8      	ldrb	r0, [r7, #31]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	f01c fc05 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fe73 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
 80069c0:	697b      	ldr	r3, [r7, #20]
      }
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bdb0      	pop	{r4, r5, r7, pc}

080069ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3308      	adds	r3, #8
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3310      	adds	r3, #16
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d012      	beq.n	8006a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	f001 fee0 	bl	80087d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fff0 	bl	80069fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f001 fee4 	bl	80087e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006a20:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 feeb 	bl	8008800 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8006a2e:	e7e9      	b.n	8006a04 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006a56:	b590      	push	{r4, r7, lr}
 8006a58:	b08d      	sub	sp, #52	; 0x34
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 fedb 	bl	8008822 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006a70:	69bc      	ldr	r4, [r7, #24]
 8006a72:	68b8      	ldr	r0, [r7, #8]
 8006a74:	f001 fee6 	bl	8008844 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d030      	beq.n	8006aea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	f001 fee7 	bl	800885c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8006a8e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d013      	beq.n	8006abc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8006a94:	68bc      	ldr	r4, [r7, #8]
 8006a96:	68b8      	ldr	r0, [r7, #8]
 8006a98:	f7ff ffa3 	bl	80069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fee7 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fcfa 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8006abc:	2300      	movs	r3, #0
	  if (size() > 0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	68b8      	ldr	r0, [r7, #8]
 8006ac8:	f7ff ff8b 	bl	80069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006acc:	4602      	mov	r2, r0
 8006ace:	f107 031c 	add.w	r3, r7, #28
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fcf5 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006ada:	e0db      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fed2 	bl	800888c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8006ae8:	e0d4      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006aea:	68bc      	ldr	r4, [r7, #8]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fec0 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fcd3 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d057      	beq.n	8006bb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006b0a:	69bc      	ldr	r4, [r7, #24]
 8006b0c:	68b8      	ldr	r0, [r7, #8]
 8006b0e:	f001 ff42 	bl	8008996 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006b12:	4603      	mov	r3, r0
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429c      	cmp	r4, r3
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006b24:	68b8      	ldr	r0, [r7, #8]
 8006b26:	f001 ff36 	bl	8008996 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	68b8      	ldr	r0, [r7, #8]
 8006b2e:	f001 ff32 	bl	8008996 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	4621      	mov	r1, r4
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fd6a 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006b3e:	e0a9      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006b40:	68bc      	ldr	r4, [r7, #8]
 8006b42:	f107 0314 	add.w	r3, r7, #20
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 ff31 	bl	80089ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fe8f 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006b56:	4603      	mov	r3, r0
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 fca2 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01f      	beq.n	8006ba8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 fe30 	bl	80087d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8006b80:	2300      	movs	r3, #0
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	f107 0214 	add.w	r2, r7, #20
 8006b88:	f107 0320 	add.w	r3, r7, #32
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fc98 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006b94:	e07e      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8006b96:	f107 0218 	add.w	r2, r7, #24
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fd36 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006ba6:	e075      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fe6c 	bl	800888c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8006bb4:	e06e      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006bb6:	68bc      	ldr	r4, [r7, #8]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 fe5a 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fc6d 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d056      	beq.n	8006c80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006bd6:	69bc      	ldr	r4, [r7, #24]
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f7ff ff02 	bl	80069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006bde:	4603      	mov	r3, r0
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429c      	cmp	r4, r3
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00c      	beq.n	8006c0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf4:	68b8      	ldr	r0, [r7, #8]
 8006bf6:	f7ff fef4 	bl	80069e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c00:	4619      	mov	r1, r3
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fc5e 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006c08:	e044      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006c0a:	68bc      	ldr	r4, [r7, #8]
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fedd 	bl	80089d0 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 8006c16:	4603      	mov	r3, r0
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fe2a 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006c20:	4603      	mov	r3, r0
 8006c22:	461a      	mov	r2, r3
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fc3d 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01f      	beq.n	8006c72 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 fdcb 	bl	80087d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c4e:	f107 0218 	add.w	r2, r7, #24
 8006c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c56:	4619      	mov	r1, r3
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fc33 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006c5e:	e019      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8006c60:	f107 0210 	add.w	r2, r7, #16
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	4619      	mov	r1, r3
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fcd1 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006c70:	e010      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fe07 	bl	800888c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8006c7e:	e009      	b.n	8006c94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8006c80:	2300      	movs	r3, #0
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c84:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006c88:	f107 0318 	add.w	r3, r7, #24
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fcfa 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	3734      	adds	r7, #52	; 0x34
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}

08006c9c <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006cca:	b5b0      	push	{r4, r5, r7, lr}
 8006ccc:	b088      	sub	sp, #32
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11a      	bne.n	8006d14 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f001 fdb0 	bl	8008844 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8006cec:	68fc      	ldr	r4, [r7, #12]
 8006cee:	f107 0310 	add.w	r3, r7, #16
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff ffd1 	bl	8006c9c <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fdb9 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	4629      	mov	r1, r5
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fbcc 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8006d18:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8006d1a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f7ff ffc9 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4619      	mov	r1, r3
 8006d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d28:	f001 fe63 	bl	80089f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8006d2c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8006d32:	7ff8      	ldrb	r0, [r7, #31]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	69b9      	ldr	r1, [r7, #24]
 8006d38:	f01c fa3c 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8006d46:	f107 0314 	add.w	r3, r7, #20
 8006d4a:	69b9      	ldr	r1, [r7, #24]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fe73 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8006d52:	697b      	ldr	r3, [r7, #20]
      }
 8006d54:	4618      	mov	r0, r3
 8006d56:	3720      	adds	r7, #32
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bdb0      	pop	{r4, r5, r7, pc}

08006d5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fe72 	bl	8008a50 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	f107 0308 	add.w	r3, r7, #8
 8006d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d76:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f001 fe68 	bl	8008a50 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d80:	4602      	mov	r2, r0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d88:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006d8c:	f107 0308 	add.w	r3, r7, #8
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fe5d 	bl	8008a50 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d96:	4602      	mov	r2, r0
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fe56 	bl	8008a66 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	f001 fe50 	bl	8008a66 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fe47 	bl	8008a66 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	601a      	str	r2, [r3, #0]
    }
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fe42 	bl	8008a7c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006dfe:	6838      	ldr	r0, [r7, #0]
 8006e00:	f001 fe3c 	bl	8008a7c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006e04:	4603      	mov	r3, r0
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 fe33 	bl	8008a7c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006e16:	4603      	mov	r3, r0
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	601a      	str	r2, [r3, #0]
    }
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3308      	adds	r3, #8
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3310      	adds	r3, #16
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8006e66:	6838      	ldr	r0, [r7, #0]
 8006e68:	f001 fe13 	bl	8008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fff0 	bl	8006e56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f001 fe17 	bl	8008aaa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8006e7c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fe1e 	bl	8008ac2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8006e8a:	e7e9      	b.n	8006e60 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006eb2:	b590      	push	{r4, r7, lr}
 8006eb4:	b08d      	sub	sp, #52	; 0x34
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fe0e 	bl	8008ae4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006ecc:	69bc      	ldr	r4, [r7, #24]
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f001 fe19 	bl	8008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	429c      	cmp	r4, r3
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d030      	beq.n	8006f46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8006ee4:	68b8      	ldr	r0, [r7, #8]
 8006ee6:	f001 fe1a 	bl	8008b1e <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8006eea:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d013      	beq.n	8006f18 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8006ef0:	68bc      	ldr	r4, [r7, #8]
 8006ef2:	68b8      	ldr	r0, [r7, #8]
 8006ef4:	f7ff ffa3 	bl	8006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 fe1a 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f02:	4603      	mov	r3, r0
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	4619      	mov	r1, r3
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fe20 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8006f18:	2300      	movs	r3, #0
	  if (size() > 0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	68b8      	ldr	r0, [r7, #8]
 8006f24:	f7ff ff8b 	bl	8006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f107 031c 	add.w	r3, r7, #28
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fac7 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f36:	e0db      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fe1a 	bl	8008b78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8006f44:	e0d4      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006f46:	68bc      	ldr	r4, [r7, #8]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 fdf3 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 fdf9 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d057      	beq.n	8007012 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006f66:	69bc      	ldr	r4, [r7, #24]
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	f001 fe8a 	bl	8008c82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429c      	cmp	r4, r3
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00d      	beq.n	8006f9c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006f80:	68b8      	ldr	r0, [r7, #8]
 8006f82:	f001 fe7e 	bl	8008c82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8006f86:	4604      	mov	r4, r0
 8006f88:	68b8      	ldr	r0, [r7, #8]
 8006f8a:	f001 fe7a 	bl	8008c82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	461a      	mov	r2, r3
 8006f92:	4621      	mov	r1, r4
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fb3c 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f9a:	e0a9      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006f9c:	68bc      	ldr	r4, [r7, #8]
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 fe79 	bl	8008c9a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fdc2 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f001 fdc8 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01f      	beq.n	8007004 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fd63 	bl	8008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	f107 0214 	add.w	r2, r7, #20
 8006fe4:	f107 0320 	add.w	r3, r7, #32
 8006fe8:	4619      	mov	r1, r3
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fa6a 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006ff0:	e07e      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8006ff2:	f107 0218 	add.w	r2, r7, #24
 8006ff6:	f107 0318 	add.w	r3, r7, #24
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fb08 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8007002:	e075      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fdb4 	bl	8008b78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8007010:	e06e      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8007012:	68bc      	ldr	r4, [r7, #8]
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fd8d 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800701c:	4603      	mov	r3, r0
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4619      	mov	r1, r3
 8007022:	4620      	mov	r0, r4
 8007024:	f001 fd93 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d056      	beq.n	80070dc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8007032:	69bc      	ldr	r4, [r7, #24]
 8007034:	68b8      	ldr	r0, [r7, #8]
 8007036:	f7ff ff02 	bl	8006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 800703a:	4603      	mov	r3, r0
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429c      	cmp	r4, r3
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00c      	beq.n	8007066 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 800704c:	2300      	movs	r3, #0
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f7ff fef4 	bl	8006e3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8007056:	4602      	mov	r2, r0
 8007058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800705c:	4619      	mov	r1, r3
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa30 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8007064:	e044      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8007066:	68bc      	ldr	r4, [r7, #8]
 8007068:	f107 0310 	add.w	r3, r7, #16
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fe25 	bl	8008cbc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 8007072:	4603      	mov	r3, r0
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fd5d 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	4620      	mov	r0, r4
 8007084:	f001 fd63 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01f      	beq.n	80070ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fcfe 	bl	8008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80070a6:	2300      	movs	r3, #0
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070aa:	f107 0218 	add.w	r2, r7, #24
 80070ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070b2:	4619      	mov	r1, r3
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fa05 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80070ba:	e019      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80070bc:	f107 0210 	add.w	r2, r7, #16
 80070c0:	f107 0310 	add.w	r3, r7, #16
 80070c4:	4619      	mov	r1, r3
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 faa3 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80070cc:	e010      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fd4f 	bl	8008b78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80070da:	e009      	b.n	80070f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80070dc:	2300      	movs	r3, #0
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80070e4:	f107 0318 	add.w	r3, r7, #24
 80070e8:	4619      	mov	r1, r3
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 facc 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	3734      	adds	r7, #52	; 0x34
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd90      	pop	{r4, r7, pc}

080070f8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007126:	b5b0      	push	{r4, r5, r7, lr}
 8007128:	b088      	sub	sp, #32
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d11a      	bne.n	8007170 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 fce3 	bl	8008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8007140:	4602      	mov	r2, r0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4293      	cmp	r3, r2
 8007146:	d013      	beq.n	8007170 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8007148:	68fc      	ldr	r4, [r7, #12]
 800714a:	f107 0310 	add.w	r3, r7, #16
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff ffd1 	bl	80070f8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8007156:	4605      	mov	r5, r0
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fcec 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800715e:	4603      	mov	r3, r0
 8007160:	461a      	mov	r2, r3
 8007162:	4629      	mov	r1, r5
 8007164:	4620      	mov	r0, r4
 8007166:	f001 fcf2 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8007174:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8007176:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8007178:	6838      	ldr	r0, [r7, #0]
 800717a:	f7ff ffc9 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800717e:	4603      	mov	r3, r0
 8007180:	4619      	mov	r1, r3
 8007182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007184:	f001 fdab 	bl	8008cde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8007188:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800718e:	7ff8      	ldrb	r0, [r7, #31]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	69b9      	ldr	r1, [r7, #24]
 8007194:	f01c f80e 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80071a2:	f107 0314 	add.w	r3, r7, #20
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fe73 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80071ae:	697b      	ldr	r3, [r7, #20]
      }
 80071b0:	4618      	mov	r0, r3
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bdb0      	pop	{r4, r5, r7, pc}

080071b8 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4619      	mov	r1, r3
 80071ca:	68b8      	ldr	r0, [r7, #8]
 80071cc:	f01b ff87 	bl	80230de <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fda1 	bl	8008d3c <_ZSt10destroy_atImEvPT_>
    }
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007214:	f7f9 f87c 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d006      	beq.n	800722c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f01b ff5d 	bl	80230e2 <_Znwj>
 8007228:	4603      	mov	r3, r0
 800722a:	e006      	b.n	800723a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800722c:	2200      	movs	r2, #0
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f003 f91b 	bl	800a46c <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8007236:	4603      	mov	r3, r0
 8007238:	bf00      	nop
      { return __a.allocate(__n); }
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800724a:	1d3b      	adds	r3, r7, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fd7f 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 8007252:	4603      	mov	r3, r0
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f82d 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800726e:	4603      	mov	r3, r0
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f001 fd6b 	bl	8008d66 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 8007290:	4603      	mov	r3, r0
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ffda 	bl	800725e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80072aa:	4602      	mov	r2, r0
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	109b      	asrs	r3, r3, #2
 80072b2:	461a      	mov	r2, r3
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fd71 	bl	8008da0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEplEi>
 80072be:	4603      	mov	r3, r0
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
	return *this;
 80072f0:	687b      	ldr	r3, [r7, #4]
      }
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80072fe:	b590      	push	{r4, r7, lr}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ffdd 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800730e:	4603      	mov	r3, r0
 8007310:	681c      	ldr	r4, [r3, #0]
 8007312:	6838      	ldr	r0, [r7, #0]
 8007314:	f7ff ffd8 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8007318:	4603      	mov	r3, r0
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	429c      	cmp	r4, r3
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bd90      	pop	{r4, r7, pc}

0800732e <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007338:	463a      	mov	r2, r7
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff ffdd 	bl	80072fe <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 8007344:	4603      	mov	r3, r0
 8007346:	f083 0301 	eor.w	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_+0x44>
	    std::_Destroy(std::__addressof(*__first));
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fd3c 	bl	8008dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 8007358:	4603      	mov	r3, r0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff ff3b 	bl	80071d6 <_ZSt11__addressofImEPT_RS0_>
 8007360:	4603      	mov	r3, r0
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff ff42 	bl	80071ec <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 8007368:	1d3b      	adds	r3, r7, #4
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ffb7 	bl	80072de <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 8007370:	e7e2      	b.n	8007338 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_+0xa>
	}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800739c:	f7f8 ffb8 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d006      	beq.n	80073b4 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f001 fd1c 	bl	8008de8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPmS3_EET0_T_S5_S4_>
 80073b0:	4603      	mov	r3, r0
 80073b2:	e006      	b.n	80073c2 <_ZSt14__copy_move_a2ILb0EPmS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 fd38 	bl	8008e2e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 80073be:	4603      	mov	r3, r0
 80073c0:	bf00      	nop
    }
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPmS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7fc f939 	bl	8003652 <_ZSt4copyIPmS0_ET0_T_S2_S1_>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fd1e 	bl	8008e68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fd2f 	bl	8008e92 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	f107 030c 	add.w	r3, r7, #12
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe f8b7 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3304      	adds	r3, #4
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 fd0d 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800749c:	4603      	mov	r3, r0
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	68b8      	ldr	r0, [r7, #8]
 80074b6:	f7f9 f82e 	bl	8000516 <_ZNK3PinltERKS_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fcff 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80074de:	4603      	mov	r3, r0
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b08b      	sub	sp, #44	; 0x2c
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80074fc:	68b8      	ldr	r0, [r7, #8]
 80074fe:	f001 fcf8 	bl	8008ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8007502:	4603      	mov	r3, r0
 8007504:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8007506:	68b8      	ldr	r0, [r7, #8]
 8007508:	f7ff ffa9 	bl	800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 800750c:	4603      	mov	r3, r0
 800750e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d020      	beq.n	800755e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007520:	68bc      	ldr	r4, [r7, #8]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	4618      	mov	r0, r3
 8007526:	f001 fcc6 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff ffb8 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff ff5b 	bl	8007402 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 800754c:	4603      	mov	r3, r0
 800754e:	e004      	b.n	800755a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ff49 	bl	80073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007558:	4603      	mov	r3, r0
 800755a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800755c:	e7db      	b.n	8007516 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	f107 0310 	add.w	r3, r7, #16
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe f82b 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01d      	beq.n	80075b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f001 fcc8 	bl	8008f0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 800757a:	4603      	mov	r3, r0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	f107 021c 	add.w	r2, r7, #28
 8007582:	f107 0310 	add.w	r3, r7, #16
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fccf 	bl	8008f2c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d008      	beq.n	80075a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8007594:	f107 0214 	add.w	r2, r7, #20
 8007598:	f107 0318 	add.w	r3, r7, #24
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f001 fcd8 	bl	8008f54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 80075a4:	e025      	b.n	80075f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f84a 	bl	8007644 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80075b0:	68bc      	ldr	r4, [r7, #8]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff ff6a 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80075ba:	4603      	mov	r3, r0
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff ff70 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 80075cc:	f107 0214 	add.w	r2, r7, #20
 80075d0:	f107 0318 	add.w	r3, r7, #24
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f001 fcbc 	bl	8008f54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 80075dc:	e009      	b.n	80075f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80075de:	2300      	movs	r3, #0
 80075e0:	623b      	str	r3, [r7, #32]
 80075e2:	f107 0220 	add.w	r2, r7, #32
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	4619      	mov	r1, r3
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f84b 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	372c      	adds	r7, #44	; 0x2c
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd90      	pop	{r4, r7, pc}

080075fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	330c      	adds	r3, #12
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800761e:	68b8      	ldr	r0, [r7, #8]
 8007620:	f001 fc5c 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007624:	4603      	mov	r3, r0
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fc55 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007632:	4603      	mov	r3, r0
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f01b fdad 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007656:	4602      	mov	r2, r0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
	return *this;
 800765c:	687b      	ldr	r3, [r7, #4]
      }
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f01b fd9a 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
	return *this;
 800767e:	687b      	ldr	r3, [r7, #4]
      }
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8007694:	68b8      	ldr	r0, [r7, #8]
 8007696:	f001 fc21 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800769a:	4603      	mov	r3, r0
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg)
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 fc61 	bl	8008f86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>
 80076c4:	60f8      	str	r0, [r7, #12]
	    if (__node)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d012      	beq.n	80076f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fbc8 	bl	8008e68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689c      	ldr	r4, [r3, #8]
 80076dc:	6838      	ldr	r0, [r7, #0]
 80076de:	f7fe f8ae 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 fc9c 	bl	8009026 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
		return __node;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	e00b      	b.n	800770a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689c      	ldr	r4, [r3, #8]
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f7fe f8a1 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80076fc:	4603      	mov	r3, r0
 80076fe:	4619      	mov	r1, r3
 8007700:	4620      	mov	r0, r4
 8007702:	f001 fcb0 	bl	8009066 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8007706:	4603      	mov	r3, r0
 8007708:	bf00      	nop
	  }
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	bd90      	pop	{r4, r7, pc}

08007712 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800772a:	b590      	push	{r4, r7, lr}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7fd fe91 	bl	800545e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 800773c:	4604      	mov	r4, r0
 800773e:	68b8      	ldr	r0, [r7, #8]
 8007740:	f7fd fe8d 	bl	800545e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8007744:	4603      	mov	r3, r0
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	4620      	mov	r0, r4
 800774c:	f001 fca2 	bl	8009094 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 8007750:	4603      	mov	r3, r0
    }
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	bd90      	pop	{r4, r7, pc}

0800775a <_ZN9__gnu_cxx13new_allocatorISt4pairImmEEC1ERKS3_>:
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <_ZNSt16allocator_traitsISaISt4pairImmEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007784:	f7f8 fdc4 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <_ZNSt16allocator_traitsISaISt4pairImmEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	4618      	mov	r0, r3
 8007794:	f01b fca5 	bl	80230e2 <_Znwj>
 8007798:	4603      	mov	r3, r0
 800779a:	e006      	b.n	80077aa <_ZNSt16allocator_traitsISaISt4pairImmEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800779c:	2200      	movs	r2, #0
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f002 ff3e 	bl	800a622 <_ZN9__gnu_cxx13new_allocatorISt4pairImmEE8allocateEjPKv>
 80077a6:	4603      	mov	r3, r0
 80077a8:	bf00      	nop
      { return __a.allocate(__n); }
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZN9__gnu_cxxeqIPKSt4pairImmES4_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80077b2:	b590      	push	{r4, r7, lr}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fe f905 	bl	80059cc <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>
 80077c2:	4603      	mov	r3, r0
 80077c4:	681c      	ldr	r4, [r3, #0]
 80077c6:	6838      	ldr	r0, [r7, #0]
 80077c8:	f7fe f900 	bl	80059cc <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>
 80077cc:	4603      	mov	r3, r0
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429c      	cmp	r4, r3
 80077d2:	bf0c      	ite	eq
 80077d4:	2301      	moveq	r3, #1
 80077d6:	2300      	movne	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd90      	pop	{r4, r7, pc}

080077e2 <_ZSt11__addressofISt4pairImmEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairImmESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <_ZSt10_ConstructISt4pairImmEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800781a:	6838      	ldr	r0, [r7, #0]
 800781c:	f001 fc6c 	bl	80090f8 <_ZSt7forwardIRKSt4pairImmEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007820:	4604      	mov	r4, r0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4619      	mov	r1, r3
 8007826:	2008      	movs	r0, #8
 8007828:	f7f8 fda8 	bl	800037c <_ZnwjPv>
 800782c:	4603      	mov	r3, r0
 800782e:	4622      	mov	r2, r4
 8007830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007834:	e883 0003 	stmia.w	r3, {r0, r1}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bd90      	pop	{r4, r7, pc}

08007840 <_ZSt8_DestroyISt4pairImmEEvPT_>:
    _Destroy(_Tp* __pointer)
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fc60 	bl	800910e <_ZSt10destroy_atISt4pairImmEEvPT_>
    }
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fc45 	bl	8009122 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 fc56 	bl	800914c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f107 030c 	add.w	r3, r7, #12
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe f92e 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fc34 	bl	8009170 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007908:	4603      	mov	r3, r0
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f7f8 fdf8 	bl	8000516 <_ZNK3PinltERKS_>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 800792c:	23ff      	movs	r3, #255	; 0xff
 800792e:	e009      	b.n	8007944 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7f8 fdef 	bl	8000516 <_ZNK3PinltERKS_>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 8007942:	2300      	movs	r3, #0
	    }
	}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	68b8      	ldr	r0, [r7, #8]
 800795c:	f001 fc1c 	bl	8009198 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 8007960:	4604      	mov	r4, r0
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f7f8 fcd9 	bl	8000320 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800796e:	7d39      	ldrb	r1, [r7, #20]
 8007970:	4620      	mov	r0, r4
 8007972:	f7f8 fcf3 	bl	800035c <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8007976:	4603      	mov	r3, r0
 8007978:	4618      	mov	r0, r3
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd90      	pop	{r4, r7, pc}

08007980 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b08b      	sub	sp, #44	; 0x2c
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800798c:	68b8      	ldr	r0, [r7, #8]
 800798e:	f001 fc33 	bl	80091f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8007992:	4603      	mov	r3, r0
 8007994:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8007996:	68b8      	ldr	r0, [r7, #8]
 8007998:	f7ff ff97 	bl	80078ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 800799c:	4603      	mov	r3, r0
 800799e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d020      	beq.n	80079ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80079b0:	68bc      	ldr	r4, [r7, #8]
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fbdb 	bl	8009170 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80079ba:	4603      	mov	r3, r0
 80079bc:	461a      	mov	r2, r3
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff ffc3 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80079cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff ff49 	bl	800786e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80079dc:	4603      	mov	r3, r0
 80079de:	e004      	b.n	80079ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff ff37 	bl	8007856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80079e8:	4603      	mov	r3, r0
 80079ea:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80079ec:	e7db      	b.n	80079a6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	f107 0310 	add.w	r3, r7, #16
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe f890 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01d      	beq.n	8007a40 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f001 fc03 	bl	8009210 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	f107 021c 	add.w	r2, r7, #28
 8007a12:	f107 0310 	add.w	r3, r7, #16
 8007a16:	4611      	mov	r1, r2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fc0a 	bl	8009232 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8007a24:	f107 0214 	add.w	r2, r7, #20
 8007a28:	f107 0318 	add.w	r3, r7, #24
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f001 fc13 	bl	800925a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8007a34:	e025      	b.n	8007a82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8007a36:	f107 0310 	add.w	r3, r7, #16
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f831 	bl	8007aa2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8007a40:	68bc      	ldr	r4, [r7, #8]
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff ff58 	bl	80078fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7ff ff7b 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8007a5c:	f107 0214 	add.w	r2, r7, #20
 8007a60:	f107 0318 	add.w	r3, r7, #24
 8007a64:	4619      	mov	r1, r3
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f001 fbf7 	bl	800925a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8007a6c:	e009      	b.n	8007a82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	f107 0220 	add.w	r2, r7, #32
 8007a76:	f107 0310 	add.w	r3, r7, #16
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff fe03 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	372c      	adds	r7, #44	; 0x2c
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd90      	pop	{r4, r7, pc}

08007a8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	330c      	adds	r3, #12
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f01b fb7e 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	return *this;
 8007aba:	687b      	ldr	r3, [r7, #4]
      }
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f01b fb6b 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]
	return *this;
 8007adc:	687b      	ldr	r3, [r7, #4]
      }
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg)
 8007ae6:	b590      	push	{r4, r7, lr}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fbcb 	bl	800928c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv>
 8007af6:	60f8      	str	r0, [r7, #12]
	    if (__node)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d012      	beq.n	8007b24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 fb0c 	bl	8009122 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689c      	ldr	r4, [r3, #8]
 8007b0e:	6838      	ldr	r0, [r7, #0]
 8007b10:	f7fe f942 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f001 fc06 	bl	800932c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
		return __node;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	e00b      	b.n	8007b3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689c      	ldr	r4, [r3, #8]
 8007b28:	6838      	ldr	r0, [r7, #0]
 8007b2a:	f7fe f935 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4619      	mov	r1, r3
 8007b32:	4620      	mov	r0, r4
 8007b34:	f001 fc1a 	bl	800936c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	bf00      	nop
	  }
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fc0a 	bl	800939a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fc1b 	bl	80093c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	f107 030c 	add.w	r3, r7, #12
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe f980 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 fbf9 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b08b      	sub	sp, #44	; 0x2c
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007c0c:	68b8      	ldr	r0, [r7, #8]
 8007c0e:	f001 fbfe 	bl	800940e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8007c12:	4603      	mov	r3, r0
 8007c14:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8007c16:	68b8      	ldr	r0, [r7, #8]
 8007c18:	f7ff ffce 	bl	8007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d020      	beq.n	8007c6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007c30:	68bc      	ldr	r4, [r7, #8]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 fbd7 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff fc30 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff80 	bl	8007b5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	e004      	b.n	8007c6a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff ff6e 	bl	8007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007c6c:	e7db      	b.n	8007c26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	f107 0310 	add.w	r3, r7, #16
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe f919 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01d      	beq.n	8007cc0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8007c84:	68b8      	ldr	r0, [r7, #8]
 8007c86:	f001 fbce 	bl	8009426 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	f107 021c 	add.w	r2, r7, #28
 8007c92:	f107 0310 	add.w	r3, r7, #16
 8007c96:	4611      	mov	r1, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 fbd5 	bl	8009448 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8007ca4:	f107 0214 	add.w	r2, r7, #20
 8007ca8:	f107 0318 	add.w	r3, r7, #24
 8007cac:	4619      	mov	r1, r3
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f001 fbde 	bl	8009470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8007cb4:	e025      	b.n	8007d02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8007cb6:	f107 0310 	add.w	r3, r7, #16
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f831 	bl	8007d22 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8007cc0:	68bc      	ldr	r4, [r7, #8]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff ff8f 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff fbe8 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8007cdc:	f107 0214 	add.w	r2, r7, #20
 8007ce0:	f107 0318 	add.w	r3, r7, #24
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f001 fbc2 	bl	8009470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8007cec:	e009      	b.n	8007d02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8007cee:	2300      	movs	r3, #0
 8007cf0:	623b      	str	r3, [r7, #32]
 8007cf2:	f107 0220 	add.w	r2, r7, #32
 8007cf6:	f107 0310 	add.w	r3, r7, #16
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff fcc3 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	372c      	adds	r7, #44	; 0x2c
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}

08007d0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	330c      	adds	r3, #12
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f01b fa3e 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007d34:	4602      	mov	r2, r0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	601a      	str	r2, [r3, #0]
	return *this;
 8007d3a:	687b      	ldr	r3, [r7, #4]
      }
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f01b fa2b 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007d56:	4602      	mov	r2, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	return *this;
 8007d5c:	687b      	ldr	r3, [r7, #4]
      }
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg)
 8007d66:	b590      	push	{r4, r7, lr}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fb96 	bl	80094a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>
 8007d76:	60f8      	str	r0, [r7, #12]
	    if (__node)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d012      	beq.n	8007da4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fb08 	bl	800939a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689c      	ldr	r4, [r3, #8]
 8007d8e:	6838      	ldr	r0, [r7, #0]
 8007d90:	f7fe f9cb 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8007d94:	4603      	mov	r3, r0
 8007d96:	461a      	mov	r2, r3
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f001 fbd1 	bl	8009542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
		return __node;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	e00b      	b.n	8007dbc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689c      	ldr	r4, [r3, #8]
 8007da8:	6838      	ldr	r0, [r7, #0]
 8007daa:	f7fe f9be 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4619      	mov	r1, r3
 8007db2:	4620      	mov	r0, r4
 8007db4:	f001 fbe5 	bl	8009582 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8007db8:	4603      	mov	r3, r0
 8007dba:	bf00      	nop
	  }
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd90      	pop	{r4, r7, pc}

08007dc4 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEEC1ERKS4_>:
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007dee:	f7f8 fa8f 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f01b f970 	bl	80230e2 <_Znwj>
 8007e02:	4603      	mov	r3, r0
 8007e04:	e006      	b.n	8007e14 <_ZNSt16allocator_traitsISaISt17reference_wrapperI15TimerPeripheralEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007e06:	2200      	movs	r2, #0
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f002 fd5c 	bl	800a8c8 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE8allocateEjPKv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	bf00      	nop
      { return __a.allocate(__n); }
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d00a      	beq.n	8007e44 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fbbe 	bl	80095b0 <_ZSt11__addressofISt17reference_wrapperI15TimerPeripheralEEPT_RS3_>
 8007e34:	4603      	mov	r3, r0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fbc5 	bl	80095c6 <_ZSt8_DestroyISt17reference_wrapperI15TimerPeripheralEEvPT_>
	  for (; __first != __last; ++__first)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	607b      	str	r3, [r7, #4]
 8007e42:	e7f0      	b.n	8007e26 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_+0xa>
	}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI15TimerPeripheralEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <_ZSt14__copy_move_a2ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8007e6e:	f7f8 fa4f 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d006      	beq.n	8007e86 <_ZSt14__copy_move_a2ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_+0x24>
	  __copy_m(__first, __last, __result);
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f001 fbbc 	bl	80095fa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt17reference_wrapperI15TimerPeripheralEPS5_EET0_T_SA_S9_>
 8007e82:	4603      	mov	r3, r0
 8007e84:	e006      	b.n	8007e94 <_ZSt14__copy_move_a2ILb0EPKSt17reference_wrapperI15TimerPeripheralEPS2_ET1_T0_S7_S6_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f001 fbd8 	bl	8009640 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mISt17reference_wrapperI15TimerPeripheralEEEPT_PKS6_S9_S7_>
 8007e90:	4603      	mov	r3, r0
 8007e92:	bf00      	nop
    }
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI15TimerPeripheralEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d00e      	beq.n	8007ed2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI15TimerPeripheralEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007eb4:	6978      	ldr	r0, [r7, #20]
 8007eb6:	f001 fb7b 	bl	80095b0 <_ZSt11__addressofISt17reference_wrapperI15TimerPeripheralEEPT_RS3_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	68f9      	ldr	r1, [r7, #12]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 fbdb 	bl	800967a <_ZSt10_ConstructISt17reference_wrapperI15TimerPeripheralEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e7ec      	b.n	8007eac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI15TimerPeripheralEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 8007ed2:	697b      	ldr	r3, [r7, #20]
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 8007ef4:	b590      	push	{r4, r7, lr}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fbd0 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8007f04:	4604      	mov	r4, r0
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fbd7 	bl	80096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4619      	mov	r1, r3
 8007f12:	4620      	mov	r0, r4
 8007f14:	f001 fbe0 	bl	80096d8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>
      _M_deallocate_node_ptr(__n);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fbf4 	bl	8009708 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS9_>
    }
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd90      	pop	{r4, r7, pc}

08007f28 <_ZSt19__iterator_categoryIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
    __iterator_category(const _Iter&)
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <_ZNSt8__detail13__distance_fwIPKSt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_St20forward_iterator_tag>:
    __distance_fw(_Iterator __first, _Iterator __last,
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	713a      	strb	r2, [r7, #4]
    { return std::distance(__first, __last); }
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f001 fbf2 	bl	8009734 <_ZSt8distanceIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>
 8007f50:	4603      	mov	r3, r0
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fbfa 	bl	800975c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN3SPI10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>:
      operator()(_Tp&& __x) const
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8007f7c:	6838      	ldr	r0, [r7, #0]
 8007f7e:	f000 f870 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 fbf4 	bl	8009772 <_ZSt3getILj0EKN3SPI10PeripheralEPNS0_8InstanceEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	return _M_h1()(__k);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fbf3 	bl	800978a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f001 fbf8 	bl	80097a2 <_ZNKSt11__hash_enumIN3SPI10PeripheralELb1EEclES1_>
 8007fb2:	4603      	mov	r3, r0
      }
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f001 fbf8 	bl	80097c6 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f001 fbfb 	bl	80097f0 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8007ffa:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	e000      	b.n	800800a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8008008:	2300      	movs	r3, #0
      }
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <_ZNSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f001 fc28 	bl	8009876 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IS8_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800803c:	68b8      	ldr	r0, [r7, #8]
 800803e:	f001 fc29 	bl	8009894 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>
 8008042:	4602      	mov	r2, r0
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fb fa4f 	bl	80034ee <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008050:	4603      	mov	r3, r0
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	711a      	strb	r2, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_>:
	operator()(_Arg&& __arg) const
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	  if (_M_nodes)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d02c      	beq.n	80080e4 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_+0x6c>
	      __node_type* __node = _M_nodes;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
	      _M_nodes = _M_nodes->_M_next();
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff ff21 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 800809a:	4602      	mov	r2, r0
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]
	      __node->_M_nxt = nullptr;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
	      auto& __a = _M_h._M_node_allocator();
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fafa 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 80080b0:	60b8      	str	r0, [r7, #8]
	      __node_alloc_traits::destroy(__a, __node->_M_valptr());
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fb01 	bl	80096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4619      	mov	r1, r3
 80080be:	68b8      	ldr	r0, [r7, #8]
 80080c0:	f001 fb0a 	bl	80096d8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>
		  __node_alloc_traits::construct(__a, __node->_M_valptr(),
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 faf8 	bl	80096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 80080cc:	4604      	mov	r4, r0
 80080ce:	6838      	ldr	r0, [r7, #0]
 80080d0:	f7ff ffc7 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	4621      	mov	r1, r4
 80080da:	68b8      	ldr	r0, [r7, #8]
 80080dc:	f001 fbff 	bl	80098de <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>
	      return __node;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	e00b      	b.n	80080fc <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_+0x84>
	  return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685c      	ldr	r4, [r3, #4]
 80080e8:	6838      	ldr	r0, [r7, #0]
 80080ea:	f7ff ffba 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80080ee:	4603      	mov	r3, r0
 80080f0:	4619      	mov	r1, r3
 80080f2:	4620      	mov	r0, r4
 80080f4:	f001 fc1f 	bl	8009936 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE16_M_allocate_nodeIJRKS8_EEEPS9_DpOT_>
 80080f8:	4603      	mov	r3, r0
 80080fa:	bf00      	nop
	}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>:
	_Scoped_node(__node_type* __n, __hashtable_alloc* __h)
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	605a      	str	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f7ff fed5 	bl	8007ef4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b08d      	sub	sp, #52	; 0x34
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3310      	adds	r3, #16
 8008166:	4618      	mov	r0, r3
 8008168:	f7f8 f975 	bl	8000456 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800816c:	4603      	mov	r3, r0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	f107 031c 	add.w	r3, r7, #28
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f103 0110 	add.w	r1, r3, #16
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68dc      	ldr	r4, [r3, #12]
 8008184:	f107 0014 	add.w	r0, r7, #20
 8008188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4623      	mov	r3, r4
 800818e:	f01b f8c1 	bl	8023314 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8008192:	7d3b      	ldrb	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj+0x5c>
	  _M_rehash(__do_rehash.second, __saved_state);
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	4619      	mov	r1, r3
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f001 fbfb 	bl	800999a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff ff07 	bl	8007fbc <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 80081ae:	6078      	str	r0, [r7, #4]
      this->_M_store_code(__node, __code);
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f001 fbff 	bl	80099b8 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS7_Lb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 80081ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fc06 	bl	80099d0 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>
      ++_M_element_count;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80081ce:	f107 0320 	add.w	r3, r7, #32
 80081d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff ff1c 	bl	8008012 <_ZNSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 80081da:	6a3b      	ldr	r3, [r7, #32]
    }
 80081dc:	4618      	mov	r0, r3
 80081de:	372c      	adds	r7, #44	; 0x2c
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd90      	pop	{r4, r7, pc}

080081e4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN3SPI10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IRS8_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80081f0:	68b8      	ldr	r0, [r7, #8]
 80081f2:	f001 fc33 	bl	8009a5c <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>
 80081f6:	4602      	mov	r2, r0
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fb f975 	bl	80034ee <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008204:	4603      	mov	r3, r0
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	711a      	strb	r2, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 800822e:	b590      	push	{r4, r7, lr}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fc1a 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 800823e:	4604      	mov	r4, r0
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f001 fc21 	bl	8009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 8008248:	4603      	mov	r3, r0
 800824a:	4619      	mov	r1, r3
 800824c:	4620      	mov	r0, r4
 800824e:	f001 fc2a 	bl	8009aa6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>
      _M_deallocate_node_ptr(__n);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fc3e 	bl	8009ad6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS9_>
    }
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	bd90      	pop	{r4, r7, pc}

08008262 <_ZSt19__iterator_categoryIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
    __iterator_category(const _Iter&)
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZNSt8__detail13__distance_fwIPKSt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEENSt15iterator_traitsIT_E15difference_typeESB_SB_St20forward_iterator_tag>:
    __distance_fw(_Iterator __first, _Iterator __last,
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	713a      	strb	r2, [r7, #4]
    { return std::distance(__first, __last); }
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 fc3c 	bl	8009b02 <_ZSt8distanceIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>
 800828a:	4603      	mov	r3, r0
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_M_cget(); }
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 fa5d 	bl	800975c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN4UART10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>:
      operator()(_Tp&& __x) const
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 80082b6:	6838      	ldr	r0, [r7, #0]
 80082b8:	f000 f870 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80082bc:	4603      	mov	r3, r0
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fc33 	bl	8009b2a <_ZSt3getILj0EKN4UART10PeripheralEPNS0_8InstanceEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>
 80082c4:	4603      	mov	r3, r0
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
	return _M_h1()(__k);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fc32 	bl	8009b42 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 80082de:	4602      	mov	r2, r0
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	f001 fc37 	bl	8009b5a <_ZNKSt11__hash_enumIN4UART10PeripheralELb1EEclES1_>
 80082ec:	4603      	mov	r3, r0
      }
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 fc37 	bl	8009b7e <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>
 8008310:	4603      	mov	r3, r0
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	603b      	str	r3, [r7, #0]
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f001 fc3a 	bl	8009ba8 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8008334:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	e000      	b.n	8008344 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8008342:	2300      	movs	r3, #0
      }
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZNSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f001 fc67 	bl	8009c2e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IS8_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008376:	68b8      	ldr	r0, [r7, #8]
 8008378:	f001 fc68 	bl	8009c4c <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>
 800837c:	4602      	mov	r2, r0
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7fb f8b2 	bl	80034ee <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800838a:	4603      	mov	r3, r0
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	711a      	strb	r2, [r3, #4]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_>:
	operator()(_Arg&& __arg) const
 80083b2:	b590      	push	{r4, r7, lr}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
	  if (_M_nodes)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d02c      	beq.n	800841e <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_+0x6c>
	      __node_type* __node = _M_nodes;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
	      _M_nodes = _M_nodes->_M_next();
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff ff21 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 80083d4:	4602      	mov	r2, r0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]
	      __node->_M_nxt = nullptr;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
	      auto& __a = _M_h._M_node_allocator();
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fb44 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 80083ea:	60b8      	str	r0, [r7, #8]
	      __node_alloc_traits::destroy(__a, __node->_M_valptr());
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fb4b 	bl	8009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 80083f4:	4603      	mov	r3, r0
 80083f6:	4619      	mov	r1, r3
 80083f8:	68b8      	ldr	r0, [r7, #8]
 80083fa:	f001 fb54 	bl	8009aa6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>
		  __node_alloc_traits::construct(__a, __node->_M_valptr(),
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fb42 	bl	8009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 8008406:	4604      	mov	r4, r0
 8008408:	6838      	ldr	r0, [r7, #0]
 800840a:	f7ff ffc7 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	4621      	mov	r1, r4
 8008414:	68b8      	ldr	r0, [r7, #8]
 8008416:	f001 fc3e 	bl	8009c96 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>
	      return __node;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	e00b      	b.n	8008436 <_ZNKSt8__detail17_ReuseOrAllocNodeISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEclIRKS8_EEPS9_OT_+0x84>
	  return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685c      	ldr	r4, [r3, #4]
 8008422:	6838      	ldr	r0, [r7, #0]
 8008424:	f7ff ffba 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8008428:	4603      	mov	r3, r0
 800842a:	4619      	mov	r1, r3
 800842c:	4620      	mov	r0, r4
 800842e:	f001 fc5e 	bl	8009cee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE16_M_allocate_nodeIJRKS8_EEEPS9_DpOT_>
 8008432:	4603      	mov	r3, r0
 8008434:	bf00      	nop
	}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}

0800843e <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS8_10_Hash_nodeIS6_Lb0EEEPNS8_16_Hashtable_allocISaISM_EEE>:
	_Scoped_node(__node_type* __n, __hashtable_alloc* __h)
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	605a      	str	r2, [r3, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7ff fed5 	bl	800822e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE18_M_deallocate_nodeEPS9_>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800848e:	b590      	push	{r4, r7, lr}
 8008490:	b08d      	sub	sp, #52	; 0x34
 8008492:	af02      	add	r7, sp, #8
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3310      	adds	r3, #16
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f7 ffd8 	bl	8000456 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 80084a6:	4603      	mov	r3, r0
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	f107 031c 	add.w	r3, r7, #28
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f103 0110 	add.w	r1, r3, #16
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68dc      	ldr	r4, [r3, #12]
 80084be:	f107 0014 	add.w	r0, r7, #20
 80084c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4623      	mov	r3, r4
 80084c8:	f01a ff24 	bl	8023314 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 80084cc:	7d3b      	ldrb	r3, [r7, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeERS3_jjPNS8_10_Hash_nodeIS6_Lb0EEEj+0x5c>
	  _M_rehash(__do_rehash.second, __saved_state);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d6:	4619      	mov	r1, r3
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f001 fc3a 	bl	8009d52 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__k, __code);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff ff07 	bl	80082f6 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 80084e8:	6078      	str	r0, [r7, #4]
      this->_M_store_code(__node, __code);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f001 fc3e 	bl	8009d70 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS7_Lb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 80084f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f001 fc45 	bl	8009d88 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>
      ++_M_element_count;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8008508:	f107 0320 	add.w	r3, r7, #32
 800850c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff1c 	bl	800834c <_ZNSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>
 8008514:	6a3b      	ldr	r3, [r7, #32]
    }
 8008516:	4618      	mov	r0, r3
 8008518:	372c      	adds	r7, #44	; 0x2c
 800851a:	46bd      	mov	sp, r7
 800851c:	bd90      	pop	{r4, r7, pc}

0800851e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4UART10PeripheralEPNS2_8InstanceEELb0ELb0EEEbEC1IRS8_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f001 fc72 	bl	8009e14 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008530:	4602      	mov	r2, r0
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fa ffd8 	bl	80034ee <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800853e:	4603      	mov	r3, r0
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	711a      	strb	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 fc4c 	bl	8009e2a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fc5d 	bl	8009e54 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe f876 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 fc3b 	bl	8009e78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008602:	4603      	mov	r3, r0
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b08b      	sub	sp, #44	; 0x2c
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008618:	68b8      	ldr	r0, [r7, #8]
 800861a:	f001 fc40 	bl	8009e9e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 800861e:	4603      	mov	r3, r0
 8008620:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	f7ff ffce 	bl	80085c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8008628:	4603      	mov	r3, r0
 800862a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d020      	beq.n	800867a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800863c:	68bc      	ldr	r4, [r7, #8]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fc19 	bl	8009e78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008646:	4603      	mov	r3, r0
 8008648:	461a      	mov	r2, r3
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff f97d 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff ff80 	bl	8008568 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008668:	4603      	mov	r3, r0
 800866a:	e004      	b.n	8008676 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff ff6e 	bl	8008550 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008674:	4603      	mov	r3, r0
 8008676:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008678:	e7db      	b.n	8008632 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	f107 0310 	add.w	r3, r7, #16
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe f80f 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01d      	beq.n	80086cc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8008690:	68b8      	ldr	r0, [r7, #8]
 8008692:	f001 fc10 	bl	8009eb6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 8008696:	4603      	mov	r3, r0
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	f107 021c 	add.w	r2, r7, #28
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fc17 	bl	8009ed8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEES9_>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 80086b0:	f107 0214 	add.w	r2, r7, #20
 80086b4:	f107 0318 	add.w	r3, r7, #24
 80086b8:	4619      	mov	r1, r3
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f001 fc20 	bl	8009f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP15TimerPeripheralEERS1_Lb1EEEOT_OT0_>
 80086c0:	e025      	b.n	800870e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f831 	bl	800872e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80086cc:	68bc      	ldr	r4, [r7, #8]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff ff8f 	bl	80085f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086d6:	4603      	mov	r3, r0
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4619      	mov	r1, r3
 80086dc:	4620      	mov	r0, r4
 80086de:	f7ff f935 	bl	800794c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 80086e8:	f107 0214 	add.w	r2, r7, #20
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f001 fc04 	bl	8009f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP15TimerPeripheralEERS1_Lb1EEEOT_OT0_>
 80086f8:	e009      	b.n	800870e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 80086fa:	2300      	movs	r3, #0
 80086fc:	623b      	str	r3, [r7, #32]
 80086fe:	f107 0220 	add.w	r2, r7, #32
 8008702:	f107 0310 	add.w	r3, r7, #16
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7fe ffbd 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	372c      	adds	r7, #44	; 0x2c
 8008712:	46bd      	mov	sp, r7
 8008714:	bd90      	pop	{r4, r7, pc}

08008716 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	330c      	adds	r3, #12
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f01a fd38 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
	return *this;
 8008746:	687b      	ldr	r3, [r7, #4]
      }
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f01a fd25 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008762:	4602      	mov	r2, r0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
	return *this;
 8008768:	687b      	ldr	r3, [r7, #4]
      }
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg)
 8008772:	b590      	push	{r4, r7, lr}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fbd8 	bl	8009f32 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv>
 8008782:	60f8      	str	r0, [r7, #12]
	    if (__node)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d012      	beq.n	80087b0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fb4a 	bl	8009e2a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689c      	ldr	r4, [r3, #8]
 800879a:	6838      	ldr	r0, [r7, #0]
 800879c:	f7fe f8c1 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	68f9      	ldr	r1, [r7, #12]
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 fc13 	bl	8009fd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
		return __node;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e00b      	b.n	80087c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689c      	ldr	r4, [r3, #8]
 80087b4:	6838      	ldr	r0, [r7, #0]
 80087b6:	f7fe f8b4 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4619      	mov	r1, r3
 80087be:	4620      	mov	r0, r4
 80087c0:	f001 fc27 	bl	800a012 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80087c4:	4603      	mov	r3, r0
 80087c6:	bf00      	nop
	  }
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fc17 	bl	800a040 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 fc28 	bl	800a06a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f107 030c 	add.w	r3, r7, #12
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe f8ff 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fc06 	bl	800a08e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8008882:	4603      	mov	r3, r0
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b08b      	sub	sp, #44	; 0x2c
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f001 fc0b 	bl	800a0b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 800889e:	4603      	mov	r3, r0
 80088a0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80088a2:	68b8      	ldr	r0, [r7, #8]
 80088a4:	f7ff ffce 	bl	8008844 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80088a8:	4603      	mov	r3, r0
 80088aa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d020      	beq.n	80088fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80088bc:	68bc      	ldr	r4, [r7, #8]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fbe4 	bl	800a08e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80088c6:	4603      	mov	r3, r0
 80088c8:	461a      	mov	r2, r3
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7fe fdea 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80088d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff ff80 	bl	80087e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80088e8:	4603      	mov	r3, r0
 80088ea:	e004      	b.n	80088f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff ff6e 	bl	80087d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80088f4:	4603      	mov	r3, r0
 80088f6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80088f8:	e7db      	b.n	80088b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe f898 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01d      	beq.n	800894c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8008910:	68b8      	ldr	r0, [r7, #8]
 8008912:	f001 fbdb 	bl	800a0cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8008916:	4603      	mov	r3, r0
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	f107 021c 	add.w	r2, r7, #28
 800891e:	f107 0310 	add.w	r3, r7, #16
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f001 fbe2 	bl	800a0ee <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8008930:	f107 0214 	add.w	r2, r7, #20
 8008934:	f107 0318 	add.w	r3, r7, #24
 8008938:	4619      	mov	r1, r3
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 fbeb 	bl	800a116 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8008940:	e025      	b.n	800898e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8008942:	f107 0310 	add.w	r3, r7, #16
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f831 	bl	80089ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800894c:	68bc      	ldr	r4, [r7, #8]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff ff8f 	bl	8008874 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008956:	4603      	mov	r3, r0
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	4619      	mov	r1, r3
 800895c:	4620      	mov	r0, r4
 800895e:	f7fe fda2 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8008968:	f107 0214 	add.w	r2, r7, #20
 800896c:	f107 0318 	add.w	r3, r7, #24
 8008970:	4619      	mov	r1, r3
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f001 fbcf 	bl	800a116 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8008978:	e009      	b.n	800898e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800897a:	2300      	movs	r3, #0
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	f107 0220 	add.w	r2, r7, #32
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	4619      	mov	r1, r3
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7fe fe7d 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	372c      	adds	r7, #44	; 0x2c
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}

08008996 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	330c      	adds	r3, #12
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f01a fbf8 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80089c0:	4602      	mov	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	return *this;
 80089c6:	687b      	ldr	r3, [r7, #4]
      }
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f01a fbe5 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80089e2:	4602      	mov	r2, r0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]
	return *this;
 80089e8:	687b      	ldr	r3, [r7, #4]
      }
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg)
 80089f2:	b590      	push	{r4, r7, lr}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fba3 	bl	800a148 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>
 8008a02:	60f8      	str	r0, [r7, #12]
	    if (__node)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d012      	beq.n	8008a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 fb15 	bl	800a040 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689c      	ldr	r4, [r3, #8]
 8008a1a:	6838      	ldr	r0, [r7, #0]
 8008a1c:	f7fe f94a 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	68f9      	ldr	r1, [r7, #12]
 8008a26:	4620      	mov	r0, r4
 8008a28:	f001 fbde 	bl	800a1e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
		return __node;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e00b      	b.n	8008a48 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689c      	ldr	r4, [r3, #8]
 8008a34:	6838      	ldr	r0, [r7, #0]
 8008a36:	f7fe f93d 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 fbf2 	bl	800a228 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8008a44:	4603      	mov	r3, r0
 8008a46:	bf00      	nop
	  }
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fbc1 	bl	800a256 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fbd2 	bl	800a280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	f107 030c 	add.w	r3, r7, #12
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe f9cc 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 fbb0 	bl	800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8008b44:	4603      	mov	r3, r0
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	881a      	ldrh	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	bf34      	ite	cc
 8008b66:	2301      	movcc	r3, #1
 8008b68:	2300      	movcs	r3, #0
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b08b      	sub	sp, #44	; 0x2c
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008b84:	68b8      	ldr	r0, [r7, #8]
 8008b86:	f001 fba0 	bl	800a2ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008b8e:	68b8      	ldr	r0, [r7, #8]
 8008b90:	f7ff ffb9 	bl	8008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8008b94:	4603      	mov	r3, r0
 8008b96:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d020      	beq.n	8008be6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008ba8:	68bc      	ldr	r4, [r7, #8]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 fb79 	bl	800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff ffc8 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff ff6b 	bl	8008aaa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	e004      	b.n	8008be2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff ff59 	bl	8008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008be0:	4603      	mov	r3, r0
 8008be2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008be4:	e7db      	b.n	8008b9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	f107 0310 	add.w	r3, r7, #16
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe f950 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01d      	beq.n	8008c38 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8008bfc:	68b8      	ldr	r0, [r7, #8]
 8008bfe:	f001 fb70 	bl	800a2e2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8008c02:	4603      	mov	r3, r0
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	f107 021c 	add.w	r2, r7, #28
 8008c0a:	f107 0310 	add.w	r3, r7, #16
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 fb77 	bl	800a304 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8008c1c:	f107 0214 	add.w	r2, r7, #20
 8008c20:	f107 0318 	add.w	r3, r7, #24
 8008c24:	4619      	mov	r1, r3
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 fb80 	bl	800a32c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 8008c2c:	e025      	b.n	8008c7a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8008c2e:	f107 0310 	add.w	r3, r7, #16
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f831 	bl	8008c9a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c38:	68bc      	ldr	r4, [r7, #8]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff ff7a 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c42:	4603      	mov	r3, r0
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7ff ff80 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d008      	beq.n	8008c66 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8008c54:	f107 0214 	add.w	r2, r7, #20
 8008c58:	f107 0318 	add.w	r3, r7, #24
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f001 fb64 	bl	800a32c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 8008c64:	e009      	b.n	8008c7a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8008c66:	2300      	movs	r3, #0
 8008c68:	623b      	str	r3, [r7, #32]
 8008c6a:	f107 0220 	add.w	r2, r7, #32
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fe fd07 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	372c      	adds	r7, #44	; 0x2c
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}

08008c82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f01a fa82 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
	return *this;
 8008cb2:	687b      	ldr	r3, [r7, #4]
      }
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f01a fa6f 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
	return *this;
 8008cd4:	687b      	ldr	r3, [r7, #4]
      }
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg)
 8008cde:	b590      	push	{r4, r7, lr}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fb38 	bl	800a35e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv>
 8008cee:	60f8      	str	r0, [r7, #12]
	    if (__node)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d012      	beq.n	8008d1c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_+0x3e>
		_M_t._M_destroy_node(__node);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 faaa 	bl	800a256 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689c      	ldr	r4, [r3, #8]
 8008d06:	6838      	ldr	r0, [r7, #0]
 8008d08:	f7fe fa02 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68f9      	ldr	r1, [r7, #12]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f001 fb73 	bl	800a3fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
		return __node;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e00b      	b.n	8008d34 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_+0x56>
	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689c      	ldr	r4, [r3, #8]
 8008d20:	6838      	ldr	r0, [r7, #0]
 8008d22:	f7fe f9f5 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8008d26:	4603      	mov	r3, r0
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f001 fb87 	bl	800a43e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8008d30:	4603      	mov	r3, r0
 8008d32:	bf00      	nop
	  }
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd90      	pop	{r4, r7, pc}

08008d3c <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
    }
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8008d72:	f7f7 facd 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f001 fb92 	bl	800a4aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 8008d86:	4603      	mov	r3, r0
 8008d88:	e006      	b.n	8008d98 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f84d 	bl	8008e2e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8008d94:	4603      	mov	r3, r0
 8008d96:	bf00      	nop
    }
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	f107 020c 	add.w	r2, r7, #12
 8008dba:	f107 0308 	add.w	r3, r7, #8
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fc fb3c 	bl	800543e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPmS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	109b      	asrs	r3, r3, #2
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dd0d      	ble.n	8008e20 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPmS3_EET0_T_S5_S4_+0x38>
	      *__result = *__first;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
	      ++__first;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3304      	adds	r3, #4
 8008e16:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e7ee      	b.n	8008dfe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPmS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8008e20:	687b      	ldr	r3, [r7, #4]
	}
 8008e22:	4618      	mov	r0, r3
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	109b      	asrs	r3, r3, #2
 8008e42:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68f9      	ldr	r1, [r7, #12]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f01a fb3a 	bl	80234cc <memmove>
	  return __result + _Num;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	4413      	add	r3, r2
	}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 fb3c 	bl	800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	6838      	ldr	r0, [r7, #0]
 8008e7c:	f001 fb43 	bl	800a506 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8008e80:	4603      	mov	r3, r0
 8008e82:	4619      	mov	r1, r3
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 fb4c 	bl	800a522 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd90      	pop	{r4, r7, pc}

08008e92 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fb27 	bl	800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fb46 	bl	800a53a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fb5a 	bl	800a578 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f107 030c 	add.w	r3, r7, #12
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fc fcaa 	bl	8005826 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8008ed2:	4603      	mov	r3, r0
      }
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	f107 030c 	add.w	r3, r7, #12
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fc fb50 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	bf0c      	ite	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	2300      	movne	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008f60:	68b8      	ldr	r0, [r7, #8]
 8008f62:	f001 fb17 	bl	800a594 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8008f66:	4603      	mov	r3, r0
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff ffb4 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f74:	4603      	mov	r3, r0
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	605a      	str	r2, [r3, #4]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	e03e      	b.n	800901a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02e      	beq.n	8009012 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d123      	bne.n	8009008 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d022      	beq.n	8009018 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 8008ff0:	e7f4      	b.n	8008fdc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00d      	beq.n	8009018 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	605a      	str	r2, [r3, #4]
 8009006:	e007      	b.n	8009018 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	609a      	str	r2, [r3, #8]
 8009010:	e002      	b.n	8009018 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	601a      	str	r2, [r3, #0]
	  return __node;
 8009018:	68fb      	ldr	r3, [r7, #12]
	}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8009026:	b5b0      	push	{r4, r5, r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4619      	mov	r1, r3
 8009036:	2024      	movs	r0, #36	; 0x24
 8009038:	f7f7 f9a0 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fa57 	bl	800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8009042:	4604      	mov	r4, r0
 8009044:	68b8      	ldr	r0, [r7, #8]
 8009046:	f001 fa5e 	bl	800a506 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 800904a:	4605      	mov	r5, r0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fc fbf6 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	4629      	mov	r1, r5
 8009058:	4620      	mov	r0, r4
 800905a:	f001 fabf 	bl	800a5dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bdb0      	pop	{r4, r5, r7, pc}

08009066 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fac5 	bl	800a600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8009076:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009078:	6838      	ldr	r0, [r7, #0]
 800907a:	f7fc fbe0 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ffce 	bl	8009026 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 800908a:	68fb      	ldr	r3, [r7, #12]
	}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009094:	b5b0      	push	{r4, r5, r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7fe f8ce 	bl	8007242 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80090a6:	4604      	mov	r4, r0
 80090a8:	68b8      	ldr	r0, [r7, #8]
 80090aa:	f7fe f8ca 	bl	8007242 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80090ae:	4605      	mov	r5, r0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fc fa15 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	4629      	mov	r1, r5
 80090be:	4620      	mov	r0, r4
 80090c0:	f7fe f8db 	bl	800727a <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 80090c4:	4602      	mov	r2, r0
 80090c6:	1d3b      	adds	r3, r7, #4
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fc fa24 	bl	8005518 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 80090d0:	4603      	mov	r3, r0
    }
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bdb0      	pop	{r4, r5, r7, pc}

080090da <_ZN9__gnu_cxx13new_allocatorISt4pairImmEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	4619      	mov	r1, r3
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f019 fff6 	bl	80230de <_ZdlPvj>
      }
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <_ZSt7forwardIRKSt4pairImmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <_ZSt10destroy_atISt4pairImmEEvPT_>:
    destroy_at(_Tp* __location)
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
    }
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009122:	b590      	push	{r4, r7, lr}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 fa97 	bl	800a660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009132:	4604      	mov	r4, r0
 8009134:	6838      	ldr	r0, [r7, #0]
 8009136:	f001 fa9e 	bl	800a676 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 800913a:	4603      	mov	r3, r0
 800913c:	4619      	mov	r1, r3
 800913e:	4620      	mov	r0, r4
 8009140:	f001 faa7 	bl	800a692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE7destroyIS7_EEvRS9_PT_>
      }
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}

0800914c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 fa82 	bl	800a660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800915c:	4603      	mov	r3, r0
 800915e:	2201      	movs	r2, #1
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f001 faa1 	bl	800a6aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j>
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fab5 	bl	800a6e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 800917e:	4602      	mov	r2, r0
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f7fc fdfa 	bl	8005d80 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEclERKS6_>
 800918c:	4603      	mov	r3, r0
      }
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4619      	mov	r1, r3
 80091a8:	4812      	ldr	r0, [pc, #72]	; (80091f4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 80091aa:	f7fe fbb2 	bl	8007912 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 80091ae:	4603      	mov	r3, r0
 80091b0:	723b      	strb	r3, [r7, #8]
 80091b2:	f107 030c 	add.w	r3, r7, #12
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f7 f8b1 	bl	8000320 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80091be:	7b39      	ldrb	r1, [r7, #12]
 80091c0:	7a38      	ldrb	r0, [r7, #8]
 80091c2:	f7f7 f8b9 	bl	8000338 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f083 0301 	eor.w	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 80091d2:	7a3b      	ldrb	r3, [r7, #8]
 80091d4:	e00a      	b.n	80091ec <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f103 0108 	add.w	r1, r3, #8
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	461a      	mov	r2, r3
 80091e2:	4804      	ldr	r0, [pc, #16]	; (80091f4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 80091e4:	f7fe fb95 	bl	8007912 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 80091e8:	4603      	mov	r3, r0
 80091ea:	bf00      	nop
    }
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	08023b08 	.word	0x08023b08

080091f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fc fc7a 	bl	8005b1c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	bf0c      	ite	eq
 8009248:	2301      	moveq	r3, #1
 800924a:	2300      	movne	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8009266:	68b8      	ldr	r0, [r7, #8]
 8009268:	f001 fa4c 	bl	800a704 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800926c:	4603      	mov	r3, r0
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff fe31 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800927a:	4603      	mov	r3, r0
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	e03e      	b.n	8009320 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d02e      	beq.n	8009318 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d123      	bne.n	800930e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d022      	beq.n	800931e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	68da      	ldr	r2, [r3, #12]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 80092f6:	e7f4      	b.n	80092e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	605a      	str	r2, [r3, #4]
 800930c:	e007      	b.n	800931e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	609a      	str	r2, [r3, #8]
 8009316:	e002      	b.n	800931e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
	  return __node;
 800931e:	68fb      	ldr	r3, [r7, #12]
	}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800932c:	b5b0      	push	{r4, r5, r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4619      	mov	r1, r3
 800933c:	202c      	movs	r0, #44	; 0x2c
 800933e:	f7f7 f81d 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f001 f98c 	bl	800a660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009348:	4604      	mov	r4, r0
 800934a:	68b8      	ldr	r0, [r7, #8]
 800934c:	f001 f993 	bl	800a676 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>
 8009350:	4605      	mov	r5, r0
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fc fd20 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	4629      	mov	r1, r5
 800935e:	4620      	mov	r0, r4
 8009360:	f001 f9f6 	bl	800a750 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bdb0      	pop	{r4, r5, r7, pc}

0800936c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 f9fc 	bl	800a774 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 800937c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800937e:	6838      	ldr	r0, [r7, #0]
 8009380:	f7fc fd0a 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	68f9      	ldr	r1, [r7, #12]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff ffce 	bl	800932c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8009390:	68fb      	ldr	r3, [r7, #12]
	}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800939a:	b590      	push	{r4, r7, lr}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f9f6 	bl	800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80093aa:	4604      	mov	r4, r0
 80093ac:	6838      	ldr	r0, [r7, #0]
 80093ae:	f001 f9fd 	bl	800a7ac <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4619      	mov	r1, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f001 fa06 	bl	800a7c8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}

080093c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 f9e1 	bl	800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2201      	movs	r2, #1
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fa00 	bl	800a7e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j>
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 fa14 	bl	800a81e <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 80093f6:	4602      	mov	r2, r0
 80093f8:	f107 030c 	add.w	r3, r7, #12
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fc fe87 	bl	8006112 <_ZNKSt10_Select1stISt4pairIK3PinN10PWMservice8InstanceEEEclERKS5_>
 8009404:	4603      	mov	r3, r0
      }
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7fc fd38 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	bf0c      	ite	eq
 800945e:	2301      	moveq	r3, #1
 8009460:	2300      	movne	r3, #0
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800947c:	68b8      	ldr	r0, [r7, #8]
 800947e:	f001 f9dc 	bl	800a83a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8009482:	4603      	mov	r3, r0
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fd26 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8009490:	4603      	mov	r3, r0
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	605a      	str	r2, [r3, #4]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d102      	bne.n	80094b8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	e03e      	b.n	8009536 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d02e      	beq.n	800952e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d123      	bne.n	8009524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d022      	beq.n	8009534 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 800950c:	e7f4      	b.n	80094f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00d      	beq.n	8009534 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	e007      	b.n	8009534 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	e002      	b.n	8009534 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
	  return __node;
 8009534:	68fb      	ldr	r3, [r7, #12]
	}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8009542:	b5b0      	push	{r4, r5, r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4619      	mov	r1, r3
 8009552:	2024      	movs	r0, #36	; 0x24
 8009554:	f7f6 ff12 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f001 f91c 	bl	800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800955e:	4604      	mov	r4, r0
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f001 f923 	bl	800a7ac <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 8009566:	4605      	mov	r5, r0
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7fc fdde 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	4629      	mov	r1, r5
 8009574:	4620      	mov	r0, r4
 8009576:	f001 f984 	bl	800a882 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bdb0      	pop	{r4, r5, r7, pc}

08009582 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f98a 	bl	800a8a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8009592:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009594:	6838      	ldr	r0, [r7, #0]
 8009596:	f7fc fdc8 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ffce 	bl	8009542 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80095a6:	68fb      	ldr	r3, [r7, #12]
	}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <_ZSt11__addressofISt17reference_wrapperI15TimerPeripheralEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <_ZSt8_DestroyISt17reference_wrapperI15TimerPeripheralEEvPT_>:
    _Destroy(_Tp* __pointer)
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 f999 	bl	800a906 <_ZSt10destroy_atISt17reference_wrapperI15TimerPeripheralEEvPT_>
    }
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4619      	mov	r1, r3
 80095ee:	68b8      	ldr	r0, [r7, #8]
 80095f0:	f019 fd75 	bl	80230de <_ZdlPvj>
      }
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt17reference_wrapperI15TimerPeripheralEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80095fa:	b480      	push	{r7}
 80095fc:	b087      	sub	sp, #28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	109b      	asrs	r3, r3, #2
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd0d      	ble.n	8009632 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt17reference_wrapperI15TimerPeripheralEPS5_EET0_T_SA_S9_+0x38>
	      *__result = *__first;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	6812      	ldr	r2, [r2, #0]
 800961c:	601a      	str	r2, [r3, #0]
	      ++__first;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3304      	adds	r3, #4
 8009622:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	3b01      	subs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e7ee      	b.n	8009610 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt17reference_wrapperI15TimerPeripheralEPS5_EET0_T_SA_S9_+0x16>
	  return __result;
 8009632:	687b      	ldr	r3, [r7, #4]
	}
 8009634:	4618      	mov	r0, r3
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mISt17reference_wrapperI15TimerPeripheralEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	109b      	asrs	r3, r3, #2
 8009654:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d006      	beq.n	800966a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mISt17reference_wrapperI15TimerPeripheralEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	461a      	mov	r2, r3
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f019 ff31 	bl	80234cc <memmove>
	  return __result + _Num;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4413      	add	r3, r2
	}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <_ZSt10_ConstructISt17reference_wrapperI15TimerPeripheralEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800967a:	b590      	push	{r4, r7, lr}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8009684:	6838      	ldr	r0, [r7, #0]
 8009686:	f001 f948 	bl	800a91a <_ZSt7forwardIRKSt17reference_wrapperI15TimerPeripheralEEOT_RNSt16remove_referenceIS5_E4typeE>
 800968a:	4604      	mov	r4, r0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4619      	mov	r1, r3
 8009690:	2004      	movs	r0, #4
 8009692:	f7f6 fe73 	bl	800037c <_ZnwjPv>
 8009696:	4602      	mov	r2, r0
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd90      	pop	{r4, r7, pc}

080096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 f93f 	bl	800a930 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EE6_M_getEv>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>:
      _M_valptr() noexcept
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 f93c 	bl	800a946 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>
 80096ce:	4603      	mov	r3, r0
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f001 f93b 	bl	800a95e <_ZSt10destroy_atISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEvPT_>
	}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEE10pointer_toERS9_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 f93a 	bl	800a972 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>
 80096fe:	4603      	mov	r3, r0
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f7ff ffec 	bl	80096f0 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEE10pointer_toERS9_>
 8009718:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff ffc2 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009720:	4603      	mov	r3, r0
 8009722:	2201      	movs	r2, #1
 8009724:	68f9      	ldr	r1, [r7, #12]
 8009726:	4618      	mov	r0, r3
 8009728:	f001 f92f 	bl	800a98a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j>
    }
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_ZSt8distanceIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>:
    distance(_InputIterator __first, _InputIterator __last)
 8009734:	b5b0      	push	{r4, r5, r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800973e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fbf0 	bl	8007f28 <_ZSt19__iterator_categoryIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__distance(__first, __last,
 8009748:	462a      	mov	r2, r5
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	4620      	mov	r0, r4
 800974e:	f001 f93b 	bl	800a9c8 <_ZSt10__distanceIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>
 8009752:	4603      	mov	r3, r0
    }
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bdb0      	pop	{r4, r5, r7, pc}

0800975c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <_ZSt3getILj0EKN3SPI10PeripheralEPNS0_8InstanceEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>:
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f934 	bl	800a9e8 <_ZNSt10__pair_getILj0EE11__const_getIKN3SPI10PeripheralEPNS2_8InstanceEEERKT_RKSt4pairIS7_T0_E>
 8009780:	4603      	mov	r3, r0
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:
      _M_h1() const { return __ebo_h1::_M_cget(); }
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 f933 	bl	800a9fe <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN3SPI10PeripheralEELb1EE7_M_cgetEv>
 8009798:	4603      	mov	r3, r0
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <_ZNKSt11__hash_enumIN3SPI10PeripheralELb1EEclES1_>:
      operator()(_Tp __val) const noexcept
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
       return hash<__type>{}(static_cast<__type>(__val));
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	f107 030c 	add.w	r3, r7, #12
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f6 fdec 	bl	8000394 <_ZNKSt4hashIhEclEh>
 80097bc:	4603      	mov	r3, r0
      }
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
 80097d2:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f001 f91d 	bl	800aa14 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 80097da:	4603      	mov	r3, r0
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f6 fe24 	bl	800042e <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8009812:	2300      	movs	r3, #0
 8009814:	e02b      	b.n	800986e <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 f902 	bl	800aa2c <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	e01d      	b.n	800986e <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 800983a:	6938      	ldr	r0, [r7, #16]
 800983c:	f7fe fb4e 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009840:	4603      	mov	r3, r0
 8009842:	4619      	mov	r1, r3
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f001 f920 	bl	800aa8a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>
 800984a:	4602      	mov	r2, r0
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4293      	cmp	r3, r2
 8009850:	d001      	beq.n	8009856 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 8009852:	2301      	movs	r3, #1
 8009854:	e000      	b.n	8009858 <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 8009856:	2300      	movs	r3, #0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8009860:	6938      	ldr	r0, [r7, #16]
 8009862:	f7fe fb3b 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009866:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8009868:	e7d8      	b.n	800981c <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 800986a:	bf00      	nop
      return nullptr;
 800986c:	2300      	movs	r3, #0
    }
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <_ZSt12construct_atISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80098aa:	b5b0      	push	{r4, r5, r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80098b4:	6838      	ldr	r0, [r7, #0]
 80098b6:	f7fe fbd4 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80098ba:	4605      	mov	r5, r0
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4619      	mov	r1, r3
 80098c0:	2008      	movs	r0, #8
 80098c2:	f7f6 fd5b 	bl	800037c <_ZnwjPv>
 80098c6:	4604      	mov	r4, r0
 80098c8:	4623      	mov	r3, r4
 80098ca:	462a      	mov	r2, r5
 80098cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80098d4:	4623      	mov	r3, r4
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bdb0      	pop	{r4, r5, r7, pc}

080098de <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7fe fbb9 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80098f0:	4603      	mov	r3, r0
 80098f2:	4619      	mov	r1, r3
 80098f4:	68b8      	ldr	r0, [r7, #8]
 80098f6:	f7ff ffd8 	bl	80098aa <_ZSt12construct_atISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	f7f6 fd80 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <_ZNSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff ffeb 	bl	8009902 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEEC1Ev>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE16_M_allocate_nodeIJRKS8_EEEPS9_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8009936:	b5b0      	push	{r4, r5, r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff feaf 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009946:	4603      	mov	r3, r0
 8009948:	2101      	movs	r1, #1
 800994a:	4618      	mov	r0, r3
 800994c:	f001 f8ae 	bl	800aaac <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j>
 8009950:	60f8      	str	r0, [r7, #12]
	__node_type* __n = std::__to_address(__nptr);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f001 f8cd 	bl	800aaf2 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_SB_>
 8009958:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4619      	mov	r1, r3
 800995e:	200c      	movs	r0, #12
 8009960:	f7f6 fd0c 	bl	800037c <_ZnwjPv>
 8009964:	4603      	mov	r3, r0
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff ffd8 	bl	800991c <_ZNSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fe99 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009972:	4604      	mov	r4, r0
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fea0 	bl	80096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 800997c:	4605      	mov	r5, r0
 800997e:	6838      	ldr	r0, [r7, #0]
 8009980:	f7fe fb6f 	bl	8008062 <_ZSt7forwardIRKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009984:	4603      	mov	r3, r0
 8009986:	461a      	mov	r2, r3
 8009988:	4629      	mov	r1, r5
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff ffa7 	bl	80098de <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>
	    return __n;
 8009990:	68bb      	ldr	r3, [r7, #8]
      }
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bdb0      	pop	{r4, r5, r7, pc}

0800999a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys());
 80099a6:	461a      	mov	r2, r3
 80099a8:	68b9      	ldr	r1, [r7, #8]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f001 f8ac 	bl	800ab08 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS7_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
      { }
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80099d0:	b5b0      	push	{r4, r5, r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d011      	beq.n	8009a10 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	601a      	str	r2, [r3, #0]
    }
 8009a0e:	e021      	b.n	8009a54 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8009a26:	687c      	ldr	r4, [r7, #4]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681d      	ldr	r5, [r3, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7fe fa55 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4619      	mov	r1, r3
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f001 f827 	bl	800aa8a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	442b      	add	r3, r5
 8009a42:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	3208      	adds	r2, #8
 8009a52:	601a      	str	r2, [r3, #0]
    }
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bdb0      	pop	{r4, r5, r7, pc}

08009a5c <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 f8a6 	bl	800abcc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EE6_M_getEv>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 f8a3 	bl	800abe2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8009ab0:	6838      	ldr	r0, [r7, #0]
 8009ab2:	f001 f8a2 	bl	800abfa <_ZSt10destroy_atISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEvPT_>
	}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEE10pointer_toERS9_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 f8a1 	bl	800ac0e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>
 8009acc:	4603      	mov	r3, r0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS9_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8009ae0:	6838      	ldr	r0, [r7, #0]
 8009ae2:	f7ff ffec 	bl	8009abe <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEE10pointer_toERS9_>
 8009ae6:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff ffc2 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2201      	movs	r2, #1
 8009af2:	68f9      	ldr	r1, [r7, #12]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f896 	bl	800ac26 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j>
    }
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_ZSt8distanceIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>:
    distance(_InputIterator __first, _InputIterator __last)
 8009b02:	b5b0      	push	{r4, r5, r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8009b0c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009b0e:	1d3b      	adds	r3, r7, #4
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fba6 	bl	8008262 <_ZSt19__iterator_categoryIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__distance(__first, __last,
 8009b16:	462a      	mov	r2, r5
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f001 f8a2 	bl	800ac64 <_ZSt10__distanceIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>
 8009b20:	4603      	mov	r3, r0
    }
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bdb0      	pop	{r4, r5, r7, pc}

08009b2a <_ZSt3getILj0EKN4UART10PeripheralEPNS0_8InstanceEERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS9_>:
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 f8a6 	bl	800ac84 <_ZNSt10__pair_getILj0EE11__const_getIKN4UART10PeripheralEPNS2_8InstanceEEERKT_RKSt4pairIS7_T0_E>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>:
      _M_h1() const { return __ebo_h1::_M_cget(); }
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 f8a5 	bl	800ac9a <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN4UART10PeripheralEELb1EE7_M_cgetEv>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZNKSt11__hash_enumIN4UART10PeripheralELb1EEclES1_>:
      operator()(_Tp __val) const noexcept
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
       return hash<__type>{}(static_cast<__type>(__val));
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f6 fc10 	bl	8000394 <_ZNKSt4hashIhEclEh>
 8009b74:	4603      	mov	r3, r0
      }
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __bkt_count); }
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f001 f88f 	bl	800acb0 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 8009b92:	4603      	mov	r3, r0
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f6 fc48 	bl	800042e <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__bkt];
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e02b      	b.n	8009c26 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f001 f874 	bl	800acc8 <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	e01d      	b.n	8009c26 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __bkt)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 8009bf2:	6938      	ldr	r0, [r7, #16]
 8009bf4:	f7fe fb0f 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f001 f892 	bl	800ad26 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>
 8009c02:	4602      	mov	r2, r0
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d001      	beq.n	8009c0e <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8009c18:	6938      	ldr	r0, [r7, #16]
 8009c1a:	f7fe fafc 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009c1e:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 8009c20:	e7d8      	b.n	8009bd4 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8009c22:	bf00      	nop
      return nullptr;
 8009c24:	2300      	movs	r3, #0
    }
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEC1EPNS_10_Hash_nodeIS7_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <_ZSt12construct_atISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009c62:	b5b0      	push	{r4, r5, r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009c6c:	6838      	ldr	r0, [r7, #0]
 8009c6e:	f7fe fb95 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009c72:	4605      	mov	r5, r0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	2008      	movs	r0, #8
 8009c7a:	f7f6 fb7f 	bl	800037c <_ZnwjPv>
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4623      	mov	r3, r4
 8009c82:	462a      	mov	r2, r5
 8009c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c88:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bdb0      	pop	{r4, r5, r7, pc}

08009c96 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7fe fb7a 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4619      	mov	r1, r3
 8009cac:	68b8      	ldr	r0, [r7, #8]
 8009cae:	f7ff ffd8 	bl	8009c62 <_ZSt12construct_atISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7f6 fba4 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZNSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEC1Ev>:
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff ffeb 	bl	8009cba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEEC1Ev>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE16_M_allocate_nodeIJRKS8_EEEPS9_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8009cee:	b5b0      	push	{r4, r5, r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff feba 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 f820 	bl	800ad48 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j>
 8009d08:	60f8      	str	r0, [r7, #12]
	__node_type* __n = std::__to_address(__nptr);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f001 f83f 	bl	800ad8e <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_SB_>
 8009d10:	60b8      	str	r0, [r7, #8]
	    ::new ((void*)__n) __node_type;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4619      	mov	r1, r3
 8009d16:	200c      	movs	r0, #12
 8009d18:	f7f6 fb30 	bl	800037c <_ZnwjPv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff ffd8 	bl	8009cd4 <_ZNSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fea4 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff feab 	bl	8009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 8009d34:	4605      	mov	r5, r0
 8009d36:	6838      	ldr	r0, [r7, #0]
 8009d38:	f7fe fb30 	bl	800839c <_ZSt7forwardIRKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	4629      	mov	r1, r5
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff ffa7 	bl	8009c96 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE9constructIS8_JRKS8_EEEvRSA_PT_DpOT0_>
	    return __n;
 8009d48:	68bb      	ldr	r3, [r7, #8]
      }
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bdb0      	pop	{r4, r5, r7, pc}

08009d52 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
	  _M_rehash_aux(__bkt_count, __unique_keys());
 8009d5e:	461a      	mov	r2, r3
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f001 f81e 	bl	800ada4 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
    }
 8009d68:	bf00      	nop
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeEPNS_10_Hash_nodeIS7_Lb0EEEj>:
      _M_store_code(__node_type*, __hash_code) const
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
      { }
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8009d88:	b5b0      	push	{r4, r5, r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d011      	beq.n	8009dc8 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
    }
 8009dc6:	e021      	b.n	8009e0c <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00e      	beq.n	8009dfc <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS8_10_Hash_nodeIS6_Lb0EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8009dde:	687c      	ldr	r4, [r7, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681d      	ldr	r5, [r3, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7fe fa16 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 8009dea:	4603      	mov	r3, r0
 8009dec:	4619      	mov	r1, r3
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 ff99 	bl	800ad26 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>
 8009df4:	4603      	mov	r3, r0
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	442b      	add	r3, r5
 8009dfa:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	3208      	adds	r2, #8
 8009e0a:	601a      	str	r2, [r3, #0]
    }
 8009e0c:	bf00      	nop
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bdb0      	pop	{r4, r5, r7, pc}

08009e14 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0ELb0EEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009e2a:	b590      	push	{r4, r7, lr}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f817 	bl	800ae68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	6838      	ldr	r0, [r7, #0]
 8009e3e:	f001 f81e 	bl	800ae7e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE9_M_valptrEv>
 8009e42:	4603      	mov	r3, r0
 8009e44:	4619      	mov	r1, r3
 8009e46:	4620      	mov	r0, r4
 8009e48:	f001 f827 	bl	800ae9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE7destroyIS7_EEvRS9_PT_>
      }
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}

08009e54 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 f802 	bl	800ae68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2201      	movs	r2, #1
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 f821 	bl	800aeb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE10deallocateERS9_PS8_j>
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f835 	bl	800aef0 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE9_M_valptrEv>
 8009e86:	4602      	mov	r2, r0
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fc fd3b 	bl	800690a <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEclERKS6_>
 8009e94:	4603      	mov	r3, r0
      }
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	f107 030c 	add.w	r3, r7, #12
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fc fbec 	bl	80066a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEC1EPSt18_Rb_tree_node_base>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP15TimerPeripheralEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	bf0c      	ite	eq
 8009eee:	2301      	moveq	r3, #1
 8009ef0:	2300      	movne	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP15TimerPeripheralEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8009f0c:	68b8      	ldr	r0, [r7, #8]
 8009f0e:	f000 fffd 	bl	800af0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009f12:	4603      	mov	r3, r0
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7fe ffde 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f20:	4603      	mov	r3, r0
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	605a      	str	r2, [r3, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	e03e      	b.n	8009fc6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d02e      	beq.n	8009fbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d123      	bne.n	8009fb4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d022      	beq.n	8009fc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 8009f9c:	e7f4      	b.n	8009f88 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00d      	beq.n	8009fc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	605a      	str	r2, [r3, #4]
 8009fb2:	e007      	b.n	8009fc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	e002      	b.n	8009fc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
	  return __node;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
	}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8009fd2:	b5b0      	push	{r4, r5, r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2024      	movs	r0, #36	; 0x24
 8009fe4:	f7f6 f9ca 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 ff3d 	bl	800ae68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f000 ff44 	bl	800ae7e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE9_M_valptrEv>
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fc fc92 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009ffe:	4603      	mov	r3, r0
 800a000:	461a      	mov	r2, r3
 800a002:	4629      	mov	r1, r5
 800a004:	4620      	mov	r0, r4
 800a006:	f000 ffa5 	bl	800af54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bdb0      	pop	{r4, r5, r7, pc}

0800a012 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 ffab 	bl	800af78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 800a022:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a024:	6838      	ldr	r0, [r7, #0]
 800a026:	f7fc fc7c 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a02a:	4603      	mov	r3, r0
 800a02c:	461a      	mov	r2, r3
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ffce 	bl	8009fd2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800a036:	68fb      	ldr	r3, [r7, #12]
	}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 ffa5 	bl	800af9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800a050:	4604      	mov	r4, r0
 800a052:	6838      	ldr	r0, [r7, #0]
 800a054:	f000 ffac 	bl	800afb0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800a058:	4603      	mov	r3, r0
 800a05a:	4619      	mov	r1, r3
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 ffb5 	bl	800afcc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}

0800a06a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 ff90 	bl	800af9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2201      	movs	r2, #1
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 ffaf 	bl	800afe4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 ffc3 	bl	800b022 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800a09c:	4602      	mov	r2, r0
 800a09e:	f107 030c 	add.w	r3, r7, #12
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fc fdf9 	bl	8006c9c <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 800a0aa:	4603      	mov	r3, r0
      }
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68da      	ldr	r2, [r3, #12]
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fc fcaa 	bl	8006a38 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	bf0c      	ite	eq
 800a104:	2301      	moveq	r3, #1
 800a106:	2300      	movne	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a122:	68b8      	ldr	r0, [r7, #8]
 800a124:	f000 ff8b 	bl	800b03e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 800a128:	4603      	mov	r3, r0
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fe fed3 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a136:	4603      	mov	r3, r0
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	605a      	str	r2, [r3, #4]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	e03e      	b.n	800a1dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d02e      	beq.n	800a1d4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d123      	bne.n	800a1ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 800a1b2:	e7f4      	b.n	800a19e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
 800a1c8:	e007      	b.n	800a1da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
 800a1d2:	e002      	b.n	800a1da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
	  return __node;
 800a1da:	68fb      	ldr	r3, [r7, #12]
	}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a1e8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	2038      	movs	r0, #56	; 0x38
 800a1fa:	f7f6 f8bf 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 fecb 	bl	800af9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800a204:	4604      	mov	r4, r0
 800a206:	68b8      	ldr	r0, [r7, #8]
 800a208:	f000 fed2 	bl	800afb0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 800a20c:	4605      	mov	r5, r0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7fc fd50 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 ff37 	bl	800b08e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bdb0      	pop	{r4, r5, r7, pc}

0800a228 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 ff3d 	bl	800b0b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 800a238:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a23a:	6838      	ldr	r0, [r7, #0]
 800a23c:	f7fc fd3a 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	68f9      	ldr	r1, [r7, #12]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff ffce 	bl	800a1e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 800a24c:	68fb      	ldr	r3, [r7, #12]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a256:	b590      	push	{r4, r7, lr}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ff37 	bl	800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800a266:	4604      	mov	r4, r0
 800a268:	6838      	ldr	r0, [r7, #0]
 800a26a:	f000 ff3e 	bl	800b0ea <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800a26e:	4603      	mov	r3, r0
 800a270:	4619      	mov	r1, r3
 800a272:	4620      	mov	r0, r4
 800a274:	f000 ff47 	bl	800b106 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd90      	pop	{r4, r7, pc}

0800a280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 ff22 	bl	800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800a290:	4603      	mov	r3, r0
 800a292:	2201      	movs	r2, #1
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 ff41 	bl	800b11e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 ff55 	bl	800b15c <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	f107 030c 	add.w	r3, r7, #12
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fc ff1c 	bl	80070f8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 800a2c0:	4603      	mov	r3, r0
      }
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	f107 030c 	add.w	r3, r7, #12
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fc fdcd 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	bf0c      	ite	eq
 800a31a:	2301      	moveq	r3, #1
 800a31c:	2300      	movne	r3, #0
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a338:	68b8      	ldr	r0, [r7, #8]
 800a33a:	f000 ff1d 	bl	800b178 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a33e:	4603      	mov	r3, r0
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fe fdc8 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a34c:	4603      	mov	r3, r0
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	605a      	str	r2, [r3, #4]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv>:
	_M_extract()
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
	  if (!_M_nodes)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x16>
	    return _M_nodes;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	e03e      	b.n	800a3f2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x94>
	  _Base_ptr __node = _M_nodes;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	60fb      	str	r3, [r7, #12]
	  _M_nodes = _M_nodes->_M_parent;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	605a      	str	r2, [r3, #4]
	  if (_M_nodes)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d02e      	beq.n	800a3ea <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x8c>
	      if (_M_nodes->_M_right == __node)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	429a      	cmp	r2, r3
 800a396:	d123      	bne.n	800a3e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x82>
		  _M_nodes->_M_right = 0;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	60da      	str	r2, [r3, #12]
		  if (_M_nodes->_M_left)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d022      	beq.n	800a3f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		      _M_nodes = _M_nodes->_M_left;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x6c>
			_M_nodes = _M_nodes->_M_right;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	605a      	str	r2, [r3, #4]
		      while (_M_nodes->_M_right)
 800a3c8:	e7f4      	b.n	800a3b4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x56>
		      if (_M_nodes->_M_left)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00d      	beq.n	800a3f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
			_M_nodes = _M_nodes->_M_left;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	e007      	b.n	800a3f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
		_M_nodes->_M_left = 0;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	609a      	str	r2, [r3, #8]
 800a3e8:	e002      	b.n	800a3f0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE20_Reuse_or_alloc_node10_M_extractEv+0x92>
	    _M_root = 0;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
	  return __node;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
	}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a3fe:	b5b0      	push	{r4, r5, r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4619      	mov	r1, r3
 800a40e:	202c      	movs	r0, #44	; 0x2c
 800a410:	f7f5 ffb4 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fe5d 	bl	800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800a41a:	4604      	mov	r4, r0
 800a41c:	68b8      	ldr	r0, [r7, #8]
 800a41e:	f000 fe64 	bl	800b0ea <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800a422:	4605      	mov	r5, r0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7fc fe73 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800a42a:	4603      	mov	r3, r0
 800a42c:	461a      	mov	r2, r3
 800a42e:	4629      	mov	r1, r5
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fef5 	bl	800b220 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bdb0      	pop	{r4, r5, r7, pc}

0800a43e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fefb 	bl	800b244 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 800a44e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a450:	6838      	ldr	r0, [r7, #0]
 800a452:	f7fc fe5d 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800a456:	4603      	mov	r3, r0
 800a458:	461a      	mov	r2, r3
 800a45a:	68f9      	ldr	r1, [r7, #12]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff ffce 	bl	800a3fe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 800a462:	68fb      	ldr	r3, [r7, #12]
	}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 fef4 	bl	800b266 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800a47e:	4602      	mov	r2, r0
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4293      	cmp	r3, r2
 800a484:	bf8c      	ite	hi
 800a486:	2301      	movhi	r3, #1
 800a488:	2300      	movls	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a490:	f018 feeb 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4618      	mov	r0, r3
 800a49a:	f018 fe22 	bl	80230e2 <_Znwj>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	bf00      	nop
      }
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	109b      	asrs	r3, r3, #2
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd0d      	ble.n	800a4e2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
	      ++__first;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	e7ee      	b.n	800a4c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 800a4e2:	687b      	ldr	r3, [r7, #4]
	}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3310      	adds	r3, #16
 800a512:	4618      	mov	r0, r3
 800a514:	f000 feb3 	bl	800b27e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 800a518:	4603      	mov	r3, r0
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a52c:	6838      	ldr	r0, [r7, #0]
 800a52e:	f000 feb2 	bl	800b296 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b088      	sub	sp, #32
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a552:	f7f5 fedd 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800a55c:	69b8      	ldr	r0, [r7, #24]
 800a55e:	f018 fdbc 	bl	80230da <_ZdlPv>
	    return;
 800a562:	e005      	b.n	800a570 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	69b9      	ldr	r1, [r7, #24]
 800a568:	69f8      	ldr	r0, [r7, #28]
 800a56a:	f001 f9e7 	bl	800b93c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3310      	adds	r3, #16
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fe90 	bl	800b2aa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a5b4:	6838      	ldr	r0, [r7, #0]
 800a5b6:	f7fb f942 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	2014      	movs	r0, #20
 800a5c2:	f7f5 fedb 	bl	800037c <_ZnwjPv>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	4634      	mov	r4, r6
 800a5ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ce:	682b      	ldr	r3, [r5, #0]
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	4633      	mov	r3, r6
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5dc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fb f928 	bl	800583e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	68b8      	ldr	r0, [r7, #8]
 800a5f4:	f7ff ffd9 	bl	800a5aa <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff71 	bl	800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800a60e:	4603      	mov	r3, r0
 800a610:	2101      	movs	r1, #1
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fe55 	bl	800b2c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 800a618:	4603      	mov	r3, r0
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <_ZN9__gnu_cxx13new_allocatorISt4pairImmEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 fe6a 	bl	800b308 <_ZNK9__gnu_cxx13new_allocatorISt4pairImmEE11_M_max_sizeEv>
 800a634:	4602      	mov	r2, r0
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	4293      	cmp	r3, r2
 800a63a:	bf8c      	ite	hi
 800a63c:	2301      	movhi	r3, #1
 800a63e:	2300      	movls	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <_ZN9__gnu_cxx13new_allocatorISt4pairImmEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a646:	f018 fe10 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	4618      	mov	r0, r3
 800a650:	f018 fd47 	bl	80230e2 <_Znwj>
 800a654:	4603      	mov	r3, r0
 800a656:	bf00      	nop
      }
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3310      	adds	r3, #16
 800a682:	4618      	mov	r0, r3
 800a684:	f000 fe4c 	bl	800b320 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>
 800a688:	4603      	mov	r3, r0
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a692:	b580      	push	{r7, lr}
 800a694:	b082      	sub	sp, #8
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a69c:	6838      	ldr	r0, [r7, #0]
 800a69e:	f000 fe4b 	bl	800b338 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEvPT_>
	}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b088      	sub	sp, #32
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a6c2:	f7f5 fe25 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d003      	beq.n	800a6d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a6cc:	69b8      	ldr	r0, [r7, #24]
 800a6ce:	f018 fd04 	bl	80230da <_ZdlPv>
	    return;
 800a6d2:	e005      	b.n	800a6e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	69b9      	ldr	r1, [r7, #24]
 800a6d8:	69f8      	ldr	r0, [r7, #28]
 800a6da:	f001 f957 	bl	800b98c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3310      	adds	r3, #16
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fe29 	bl	800b34c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a71a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a724:	6838      	ldr	r0, [r7, #0]
 800a726:	f7fb fb37 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a72a:	4605      	mov	r5, r0
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4619      	mov	r1, r3
 800a730:	201c      	movs	r0, #28
 800a732:	f7f5 fe23 	bl	800037c <_ZnwjPv>
 800a736:	4606      	mov	r6, r0
 800a738:	4634      	mov	r4, r6
 800a73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a73c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a73e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a746:	4633      	mov	r3, r6
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a750 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7fb fb1b 	bl	8005d98 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800a762:	4603      	mov	r3, r0
 800a764:	4619      	mov	r1, r3
 800a766:	68b8      	ldr	r0, [r7, #8]
 800a768:	f7ff ffd7 	bl	800a71a <_ZSt12construct_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff ff6f 	bl	800a660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a782:	4603      	mov	r3, r0
 800a784:	2101      	movs	r1, #1
 800a786:	4618      	mov	r0, r3
 800a788:	f000 fdec 	bl	800b364 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j>
 800a78c:	4603      	mov	r3, r0
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3310      	adds	r3, #16
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fdf5 	bl	800b3a8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a7d2:	6838      	ldr	r0, [r7, #0]
 800a7d4:	f000 fdf4 	bl	800b3c0 <_ZSt10destroy_atISt4pairIK3PinN10PWMservice8InstanceEEEvPT_>
	}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a7f8:	f7f5 fd8a 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800a802:	69b8      	ldr	r0, [r7, #24]
 800a804:	f018 fc69 	bl	80230da <_ZdlPv>
	    return;
 800a808:	e005      	b.n	800a816 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	69b9      	ldr	r1, [r7, #24]
 800a80e:	69f8      	ldr	r0, [r7, #28]
 800a810:	f001 f8e3 	bl	800b9da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800a814:	bf00      	nop
 800a816:	bf00      	nop
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3310      	adds	r3, #16
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fdd2 	bl	800b3d4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>
 800a830:	4603      	mov	r3, r0
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a85a:	6838      	ldr	r0, [r7, #0]
 800a85c:	f7fb fc65 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a860:	4605      	mov	r5, r0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4619      	mov	r1, r3
 800a866:	2014      	movs	r0, #20
 800a868:	f7f5 fd88 	bl	800037c <_ZnwjPv>
 800a86c:	4606      	mov	r6, r0
 800a86e:	4634      	mov	r4, r6
 800a870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	4633      	mov	r3, r6
 800a87a:	4618      	mov	r0, r3
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a882 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7fb fc4b 	bl	800612a <_ZSt7forwardIRKSt4pairIK3PinN10PWMservice8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a894:	4603      	mov	r3, r0
 800a896:	4619      	mov	r1, r3
 800a898:	68b8      	ldr	r0, [r7, #8]
 800a89a:	f7ff ffd9 	bl	800a850 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff ff71 	bl	800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fd97 	bl	800b3ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fdac 	bl	800b432 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE11_M_max_sizeEv>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	bf8c      	ite	hi
 800a8e2:	2301      	movhi	r3, #1
 800a8e4:	2300      	movls	r3, #0
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a8ec:	f018 fcbd 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f018 fbf4 	bl	80230e2 <_Znwj>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	bf00      	nop
      }
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <_ZSt10destroy_atISt17reference_wrapperI15TimerPeripheralEEvPT_>:
    destroy_at(_Tp* __location)
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
    }
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <_ZSt7forwardIRKSt17reference_wrapperI15TimerPeripheralEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fd7b 	bl	800b44a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE7_M_addrEv>
 800a954:	4603      	mov	r3, r0
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <_ZSt10destroy_atISt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800a95e:	b480      	push	{r7}
 800a960:	b083      	sub	sp, #12
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
    }
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fd70 	bl	800b460 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>
 800a980:	4603      	mov	r3, r0
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b088      	sub	sp, #32
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	61fb      	str	r3, [r7, #28]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a9a2:	f7f5 fcb5 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d003      	beq.n	800a9b4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j+0x2a>
	    ::operator delete(__p);
 800a9ac:	69b8      	ldr	r0, [r7, #24]
 800a9ae:	f018 fb94 	bl	80230da <_ZdlPv>
	    return;
 800a9b2:	e005      	b.n	800a9c0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	69b9      	ldr	r1, [r7, #24]
 800a9b8:	69f8      	ldr	r0, [r7, #28]
 800a9ba:	f001 f82b 	bl	800ba14 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE10deallocateEPSA_j>
      { __a.deallocate(__p, __n); }
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <_ZSt10__distanceIPKSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	10db      	asrs	r3, r3, #3
    }
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <_ZNSt10__pair_getILj0EE11__const_getIKN3SPI10PeripheralEPNS2_8InstanceEEERKT_RKSt4pairIS7_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN3SPI10PeripheralEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fd2a 	bl	800b476 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 800aa22:	4603      	mov	r3, r0
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 800aa2c:	b5b0      	push	{r4, r5, r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fd25 	bl	800b48c <_ZNSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS7_Lb0EEEE9_S_equalsEjRKSK_>
 800aa42:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01b      	beq.n	800aa80 <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x54>
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 fd2b 	bl	800b4a4 <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7fd fa82 	bl	8007f5a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800aa56:	4605      	mov	r5, r0
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fd2e 	bl	800b4bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE4_M_vEv>
 800aa60:	4603      	mov	r3, r0
 800aa62:	4619      	mov	r1, r3
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 fd35 	bl	800b4d4 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN3SPI10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fd40 	bl	800b4f6 <_ZNKSt8equal_toIN3SPI10PeripheralEEclERKS1_S4_>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x54>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e000      	b.n	800aa82 <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x56>
 800aa80:	2300      	movs	r3, #0
    }
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bdb0      	pop	{r4, r5, r7, pc}

0800aa8a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fd3f 	bl	800b520 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800aabe:	f7f5 fc27 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d009      	beq.n	800aadc <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f018 fb05 	bl	80230e2 <_Znwj>
 800aad8:	4603      	mov	r3, r0
 800aada:	e006      	b.n	800aaea <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800aadc:	2200      	movs	r2, #0
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 ffd7 	bl	800ba94 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv>
 800aae6:	4603      	mov	r3, r0
 800aae8:	bf00      	nop
      { return __a.allocate(__n); }
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_SB_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800aafa:	687b      	ldr	r3, [r7, #4]
    }
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	713a      	strb	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fd2e 	bl	800b578 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800ab1c:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7fa f8c3 	bl	8004caa <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800ab24:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	623b      	str	r3, [r7, #32]
      while (__p)
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d03d      	beq.n	800abb2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	{
	  __node_type* __next = __p->_M_next();
 800ab36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab38:	f7fd f9d0 	bl	8007edc <_ZNKSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 800ab3c:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fcec 	bl	800b520 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>
 800ab48:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	4413      	add	r3, r2
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d11a      	bne.n	800ab8e <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab64:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	3208      	adds	r2, #8
 800ab72:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab86:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	623b      	str	r3, [r7, #32]
 800ab8c:	e00e      	b.n	800abac <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	4413      	add	r3, r2
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	4413      	add	r3, r2
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abaa:	601a      	str	r2, [r3, #0]
	    }
	  __p = __next;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800abb0:	e7be      	b.n	800ab30 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
	}

      _M_deallocate_buckets();
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 fcfd 	bl	800b5b2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	601a      	str	r2, [r3, #0]
    }
 800abc4:	bf00      	nop
 800abc6:	3728      	adds	r7, #40	; 0x28
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fcf1 	bl	800b5d2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE7_M_addrEv>
 800abf0:	4603      	mov	r3, r0
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <_ZSt10destroy_atISt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
    }
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>:
    addressof(_Tp& __r) noexcept
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fce6 	bl	800b5e8 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b088      	sub	sp, #32
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	61fb      	str	r3, [r7, #28]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ac3e:	f7f5 fb67 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j+0x2a>
	    ::operator delete(__p);
 800ac48:	69b8      	ldr	r0, [r7, #24]
 800ac4a:	f018 fa46 	bl	80230da <_ZdlPv>
	    return;
 800ac4e:	e005      	b.n	800ac5c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE10deallocateERSA_PS9_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	69b9      	ldr	r1, [r7, #24]
 800ac54:	69f8      	ldr	r0, [r7, #28]
 800ac56:	f000 ffa3 	bl	800bba0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE10deallocateEPSA_j>
      { __a.deallocate(__p, __n); }
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZSt10__distanceIPKSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	10db      	asrs	r3, r3, #3
    }
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <_ZNSt10__pair_getILj0EE11__const_getIKN4UART10PeripheralEPNS2_8InstanceEEERKT_RKSt4pairIS7_T0_E>:
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN4UART10PeripheralEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_M_cget(); }
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fbdc 	bl	800b476 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 800acc8:	b5b0      	push	{r4, r5, r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fc90 	bl	800b5fe <_ZNSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS7_Lb0EEEE9_S_equalsEjRKSK_>
 800acde:	4603      	mov	r3, r0
	&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01b      	beq.n	800ad1c <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x54>
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f000 fc96 	bl	800b616 <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 800acea:	4604      	mov	r4, r0
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7fd fad1 	bl	8008294 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800acf2:	4605      	mov	r5, r0
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fc99 	bl	800b62e <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE4_M_vEv>
 800acfc:	4603      	mov	r3, r0
 800acfe:	4619      	mov	r1, r3
 800ad00:	4628      	mov	r0, r5
 800ad02:	f000 fca0 	bl	800b646 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4UART10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_>
 800ad06:	4603      	mov	r3, r0
 800ad08:	461a      	mov	r2, r3
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fcab 	bl	800b668 <_ZNKSt8equal_toIN4UART10PeripheralEEclERKS1_S4_>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x54>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e000      	b.n	800ad1e <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS7_Lb0EEE+0x56>
 800ad1c:	2300      	movs	r3, #0
    }
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bdb0      	pop	{r4, r5, r7, pc}

0800ad26 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEPNS8_10_Hash_nodeIS6_Lb0EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fcaa 	bl	800b692 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ad5a:	f7f5 fad9 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4613      	mov	r3, r2
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f018 f9b7 	bl	80230e2 <_Znwj>
 800ad74:	4603      	mov	r3, r0
 800ad76:	e006      	b.n	800ad86 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE8allocateERSA_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 ff4f 	bl	800bc20 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv>
 800ad82:	4603      	mov	r3, r0
 800ad84:	bf00      	nop
      { return __a.allocate(__n); }
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_SB_>:
    __to_address(_Tp* __ptr) noexcept
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
      return __ptr;
 800ad96:	687b      	ldr	r3, [r7, #4]
    }
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08a      	sub	sp, #40	; 0x28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	713a      	strb	r2, [r7, #4]
      __bucket_type* __new_buckets = _M_allocate_buckets(__bkt_count);
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f000 fc99 	bl	800b6ea <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 800adb8:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7fa f81a 	bl	8004df4 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800adc0:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	623b      	str	r3, [r7, #32]
      while (__p)
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	d03d      	beq.n	800ae4e <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	  __node_type* __next = __p->_M_next();
 800add2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add4:	f7fd fa1f 	bl	8008216 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EE7_M_nextEv>
 800add8:	61b8      	str	r0, [r7, #24]
	    = __hash_code_base::_M_bucket_index(__p, __bkt_count);
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 fc57 	bl	800b692 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>
 800ade4:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	4413      	add	r3, r2
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d11a      	bne.n	800ae2a <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	      __p->_M_nxt = _M_before_begin._M_nxt;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae00:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	69fa      	ldr	r2, [r7, #28]
 800ae08:	4413      	add	r3, r2
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	3208      	adds	r2, #8
 800ae0e:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	69fa      	ldr	r2, [r7, #28]
 800ae1e:	4413      	add	r3, r2
 800ae20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae22:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	623b      	str	r3, [r7, #32]
 800ae28:	e00e      	b.n	800ae48 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	4413      	add	r3, r2
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	69fa      	ldr	r2, [r7, #28]
 800ae40:	4413      	add	r3, r2
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae46:	601a      	str	r2, [r3, #0]
	  __p = __next;
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800ae4c:	e7be      	b.n	800adcc <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
      _M_deallocate_buckets();
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f000 fc68 	bl	800b724 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	601a      	str	r2, [r3, #0]
    }
 800ae60:	bf00      	nop
 800ae62:	3728      	adds	r7, #40	; 0x28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE9_M_valptrEv>:
      _M_valptr()
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3310      	adds	r3, #16
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fc5a 	bl	800b744 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE6_M_ptrEv>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800aea4:	6838      	ldr	r0, [r7, #0]
 800aea6:	f000 fc59 	bl	800b75c <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEvPT_>
	}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b088      	sub	sp, #32
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800aeca:	f7f5 fa21 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800aed4:	69b8      	ldr	r0, [r7, #24]
 800aed6:	f018 f900 	bl	80230da <_ZdlPv>
	    return;
 800aeda:	e005      	b.n	800aee8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	69b9      	ldr	r1, [r7, #24]
 800aee0:	69f8      	ldr	r0, [r7, #28]
 800aee2:	f000 ff0e 	bl	800bd02 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800aee6:	bf00      	nop
 800aee8:	bf00      	nop
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEE9_M_valptrEv>:
      _M_valptr() const
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3310      	adds	r3, #16
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fc37 	bl	800b770 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE6_M_ptrEv>
 800af02:	4603      	mov	r3, r0
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP15TimerPeripheralEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800af22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800af2c:	6838      	ldr	r0, [r7, #0]
 800af2e:	f7fb fcf8 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 800af32:	4605      	mov	r5, r0
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4619      	mov	r1, r3
 800af38:	2014      	movs	r0, #20
 800af3a:	f7f5 fa1f 	bl	800037c <_ZnwjPv>
 800af3e:	4606      	mov	r6, r0
 800af40:	4634      	mov	r4, r6
 800af42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af46:	682b      	ldr	r3, [r5, #0]
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	4633      	mov	r3, r6
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7fb fcde 	bl	8006922 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP15TimerPeripheralEEOT_RNSt16remove_referenceIS9_E4typeE>
 800af66:	4603      	mov	r3, r0
 800af68:	4619      	mov	r1, r3
 800af6a:	68b8      	ldr	r0, [r7, #8]
 800af6c:	f7ff ffd9 	bl	800af22 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP15TimerPeripheralEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 800af70:	bf00      	nop
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff ff71 	bl	800ae68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 800af86:	4603      	mov	r3, r0
 800af88:	2101      	movs	r1, #1
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fbfc 	bl	800b788 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE8allocateERS9_j>
 800af90:	4603      	mov	r3, r0
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3310      	adds	r3, #16
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fc06 	bl	800b7ce <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 800afc2:	4603      	mov	r3, r0
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800afd6:	6838      	ldr	r0, [r7, #0]
 800afd8:	f000 fc05 	bl	800b7e6 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	61bb      	str	r3, [r7, #24]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800affc:	f7f5 f988 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800b006:	69b8      	ldr	r0, [r7, #24]
 800b008:	f018 f867 	bl	80230da <_ZdlPv>
	    return;
 800b00c:	e005      	b.n	800b01a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	69b9      	ldr	r1, [r7, #24]
 800b012:	69f8      	ldr	r0, [r7, #28]
 800b014:	f000 fe9d 	bl	800bd52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
 800b01c:	3720      	adds	r7, #32
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3310      	adds	r3, #16
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fbe3 	bl	800b7fa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 800b034:	4603      	mov	r3, r0
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800b05e:	6838      	ldr	r0, [r7, #0]
 800b060:	f7fb fe28 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b064:	4605      	mov	r5, r0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4619      	mov	r1, r3
 800b06a:	2028      	movs	r0, #40	; 0x28
 800b06c:	f7f5 f986 	bl	800037c <_ZnwjPv>
 800b070:	4606      	mov	r6, r0
 800b072:	4634      	mov	r4, r6
 800b074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b07c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b080:	e884 0003 	stmia.w	r4, {r0, r1}
 800b084:	4633      	mov	r3, r6
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b08e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7fb fe0a 	bl	8006cb4 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	68b8      	ldr	r0, [r7, #8]
 800b0a6:	f7ff ffd5 	bl	800b054 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff ff6d 	bl	800af9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fba4 	bl	800b812 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3310      	adds	r3, #16
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fbae 	bl	800b858 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800b110:	6838      	ldr	r0, [r7, #0]
 800b112:	f000 fbad 	bl	800b870 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b11e:	b580      	push	{r7, lr}
 800b120:	b088      	sub	sp, #32
 800b122:	af00      	add	r7, sp, #0
 800b124:	60f8      	str	r0, [r7, #12]
 800b126:	60b9      	str	r1, [r7, #8]
 800b128:	607a      	str	r2, [r7, #4]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	61fb      	str	r3, [r7, #28]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b136:	f7f5 f8eb 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800b140:	69b8      	ldr	r0, [r7, #24]
 800b142:	f017 ffca 	bl	80230da <_ZdlPv>
	    return;
 800b146:	e005      	b.n	800b154 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	69b9      	ldr	r1, [r7, #24]
 800b14c:	69f8      	ldr	r0, [r7, #28]
 800b14e:	f000 fe28 	bl	800bda2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	3720      	adds	r7, #32
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3310      	adds	r3, #16
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fb8c 	bl	800b886 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 800b16e:	4603      	mov	r3, r0
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	801a      	strh	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	1d1a      	adds	r2, r3, #4
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	f000 fb76 	bl	800b89e <_ZNSt8functionIFvvEEC1ERKS1_>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	7d1a      	ldrb	r2, [r3, #20]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	751a      	strb	r2, [r3, #20]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	881a      	ldrh	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	801a      	strh	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1d1a      	adds	r2, r3, #4
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7ff ffd4 	bl	800b18e <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800b1fa:	6838      	ldr	r0, [r7, #0]
 800b1fc:	f7fb ff88 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b200:	4605      	mov	r5, r0
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4619      	mov	r1, r3
 800b206:	201c      	movs	r0, #28
 800b208:	f7f5 f8b8 	bl	800037c <_ZnwjPv>
 800b20c:	4604      	mov	r4, r0
 800b20e:	4629      	mov	r1, r5
 800b210:	4620      	mov	r0, r4
 800b212:	f7ff ffd7 	bl	800b1c4 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 800b216:	4623      	mov	r3, r4
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bdb0      	pop	{r4, r5, r7, pc}

0800b220 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7fb ff6f 	bl	8007110 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b232:	4603      	mov	r3, r0
 800b234:	4619      	mov	r1, r3
 800b236:	68b8      	ldr	r0, [r7, #8]
 800b238:	f7ff ffda 	bl	800b1f0 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ff41 	bl	800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800b252:	4603      	mov	r3, r0
 800b254:	2101      	movs	r1, #1
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fb43 	bl	800b8e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 800b25c:	4603      	mov	r3, r0
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b26e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fb4d 	bl	800b926 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 800b28c:	4603      	mov	r3, r0
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
    }
 800b29e:	bf00      	nop
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb54 	bl	800b960 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b2d4:	f7f5 f81c 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f017 fefa 	bl	80230e2 <_Znwj>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	e006      	b.n	800b300 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fd7f 	bl	800bdfa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	bf00      	nop
      { return __a.allocate(__n); }
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <_ZNK9__gnu_cxx13new_allocatorISt4pairImmEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b310:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fb24 	bl	800b976 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>
 800b32e:	4603      	mov	r3, r0
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
    }
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fb2a 	bl	800b9ae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>
 800b35a:	4603      	mov	r3, r0
 800b35c:	4618      	mov	r0, r3
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b376:	f7f4 ffcb 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d008      	beq.n	800b392 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	222c      	movs	r2, #44	; 0x2c
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	4618      	mov	r0, r3
 800b38a:	f017 feaa 	bl	80230e2 <_Znwj>
 800b38e:	4603      	mov	r3, r0
 800b390:	e006      	b.n	800b3a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEEEE8allocateERS9_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b392:	2200      	movs	r2, #0
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 fd51 	bl	800be3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv>
 800b39c:	4603      	mov	r3, r0
 800b39e:	bf00      	nop
      { return __a.allocate(__n); }
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb07 	bl	800b9c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <_ZSt10destroy_atISt4pairIK3PinN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
    }
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fb0e 	bl	800b9fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b3fe:	f7f4 ff87 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d009      	beq.n	800b41c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4618      	mov	r0, r3
 800b414:	f017 fe65 	bl	80230e2 <_Znwj>
 800b418:	4603      	mov	r3, r0
 800b41a:	e006      	b.n	800b42a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b41c:	2200      	movs	r2, #0
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 fd2d 	bl	800be80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv>
 800b426:	4603      	mov	r3, r0
 800b428:	bf00      	nop
      { return __a.allocate(__n); }
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b43a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b452:	687b      	ldr	r3, [r7, #4]
      }
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <_ZNKSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <_ZNSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS7_Lb0EEEE9_S_equalsEjRKSK_>:
       _S_equals(__hash_code, const _NodeT&)
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
       { return true; }
 800b496:	2301      	movs	r3, #1
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <_ZNKSt8__detail15_Hashtable_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fac3 	bl	800ba38 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN3SPI10PeripheralEELb1EE7_M_cgetEv>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE4_M_vEv>:
      _M_v() noexcept
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7fe f8f9 	bl	80096bc <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN3SPI10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_>:
      operator()(_Tp&& __x) const
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 800b4de:	6838      	ldr	r0, [r7, #0]
 800b4e0:	f000 fab5 	bl	800ba4e <_ZSt7forwardIRSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fabc 	bl	800ba64 <_ZSt3getILj0EKN3SPI10PeripheralEPNS0_8InstanceEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS9_>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <_ZNKSt8equal_toIN3SPI10PeripheralEEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	bf0c      	ite	eq
 800b50e:	2301      	moveq	r3, #1
 800b510:	2300      	movne	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 800b520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff fa71 	bl	800aa14 <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 800b532:	4604      	mov	r4, r0
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7fe f928 	bl	800978a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 800b53a:	4605      	mov	r5, r0
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7fc fd0c 	bl	8007f5a <_ZNKSt8__detail15_Hash_code_baseIN3SPI10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800b542:	4606      	mov	r6, r0
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fa98 	bl	800ba7c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE4_M_vEv>
 800b54c:	4603      	mov	r3, r0
 800b54e:	4619      	mov	r1, r3
 800b550:	4630      	mov	r0, r6
 800b552:	f7fc fd0e 	bl	8007f72 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN3SPI10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800b556:	4603      	mov	r3, r0
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	4619      	mov	r1, r3
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7fe f920 	bl	80097a2 <_ZNKSt11__hash_enumIN3SPI10PeripheralELb1EEclES1_>
 800b562:	4603      	mov	r3, r0
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	4619      	mov	r1, r3
 800b568:	4620      	mov	r0, r4
 800b56a:	f7f4 ff60 	bl	800042e <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800b56e:	4603      	mov	r3, r0
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b578 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	bf0c      	ite	eq
 800b588:	2301      	moveq	r3, #1
 800b58a:	2300      	movne	r3, #0
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d005      	beq.n	800b59e <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3318      	adds	r3, #24
 800b59c:	e005      	b.n	800b5aa <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fab9 	bl	800bb18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_allocate_bucketsEj>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	bf00      	nop
      }
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6819      	ldr	r1, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fad4 	bl	800bb72 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b5da:	687b      	ldr	r3, [r7, #4]
      }
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <_ZNSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_Equal_hash_codeINS_10_Hash_nodeIS7_Lb0EEEE9_S_equalsEjRKSK_>:
       _S_equals(__hash_code, const _NodeT&)
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
       { return true; }
 800b608:	2301      	movs	r3, #1
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <_ZNKSt8__detail15_Hashtable_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_M_cget(); }
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fad0 	bl	800bbc4 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN4UART10PeripheralEELb1EE7_M_cgetEv>
 800b624:	4603      	mov	r3, r0
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE4_M_vEv>:
      _M_v() noexcept
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe fa27 	bl	8009a8a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 800b63c:	4603      	mov	r3, r0
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4UART10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_>:
      operator()(_Tp&& __x) const
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 800b650:	6838      	ldr	r0, [r7, #0]
 800b652:	f000 fac2 	bl	800bbda <_ZSt7forwardIRSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b656:	4603      	mov	r3, r0
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 fac9 	bl	800bbf0 <_ZSt3getILj0EKN4UART10PeripheralEPNS0_8InstanceEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS9_>
 800b65e:	4603      	mov	r3, r0
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_ZNKSt8equal_toIN4UART10PeripheralEEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	bf0c      	ite	eq
 800b680:	2301      	moveq	r3, #1
 800b682:	2300      	movne	r3, #0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	4618      	mov	r0, r3
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEPKNS_10_Hash_nodeIS7_Lb0EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __bkt_count) const
 800b692:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b694:	b085      	sub	sp, #20
 800b696:	af00      	add	r7, sp, #0
 800b698:	60f8      	str	r0, [r7, #12]
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	607a      	str	r2, [r7, #4]
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __bkt_count); }
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f7ff fb06 	bl	800acb0 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h2Ev>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7fe fa4b 	bl	8009b42 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE5_M_h1Ev>
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7fc fdf0 	bl	8008294 <_ZNKSt8__detail15_Hash_code_baseIN4UART10PeripheralESt4pairIKS2_PNS1_8InstanceEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE10_M_extractEv>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 faa5 	bl	800bc08 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE4_M_vEv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7fc fdf2 	bl	80082ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN4UART10PeripheralEPNS3_8InstanceEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSB_>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7fe fa43 	bl	8009b5a <_ZNKSt11__hash_enumIN4UART10PeripheralELb1EEclES1_>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7f4 fea7 	bl	800042e <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6ea <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	bf0c      	ite	eq
 800b6fa:	2301      	moveq	r3, #1
 800b6fc:	2300      	movne	r3, #0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3318      	adds	r3, #24
 800b70e:	e005      	b.n	800b71c <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 faa6 	bl	800bc64 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_allocate_bucketsEj>
 800b718:	4603      	mov	r3, r0
 800b71a:	bf00      	nop
      }
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	461a      	mov	r2, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fac1 	bl	800bcbe <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 facd 	bl	800bcec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE7_M_addrEv>
 800b752:	4603      	mov	r3, r0
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEvPT_>:
    destroy_at(_Tp* __location)
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
    }
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fad4 	bl	800bd26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE7_M_addrEv>
 800b77e:	4603      	mov	r3, r0
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b79a:	f7f4 fdb9 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d009      	beq.n	800b7b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f017 fc97 	bl	80230e2 <_Znwj>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	e006      	b.n	800b7c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP15TimerPeripheralEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 fc84 	bl	800c0ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE8allocateEjPKv>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	bf00      	nop
      { return __a.allocate(__n); }
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fab0 	bl	800bd3c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
    }
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fab7 	bl	800bd76 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 800b808:	4603      	mov	r3, r0
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b824:	f7f4 fd74 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d009      	beq.n	800b842 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4613      	mov	r3, r2
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4618      	mov	r0, r3
 800b83a:	f017 fc52 	bl	80230e2 <_Znwj>
 800b83e:	4603      	mov	r3, r0
 800b840:	e006      	b.n	800b850 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b842:	2200      	movs	r2, #0
 800b844:	68b9      	ldr	r1, [r7, #8]
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 fc61 	bl	800c10e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 800b84c:	4603      	mov	r3, r0
 800b84e:	bf00      	nop
      { return __a.allocate(__n); }
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fa93 	bl	800bd8c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 800b866:	4603      	mov	r3, r0
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7f5 fd6b 	bl	8001354 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa98 	bl	800bdc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 800b894:	4603      	mov	r3, r0
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7f4 fd7f 	bl	80003ae <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 800b8b0:	6838      	ldr	r0, [r7, #0]
 800b8b2:	f000 fa92 	bl	800bdda <_ZNKSt8functionIFvvEEcvbEv>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00d      	beq.n	800b8d8 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	609a      	str	r2, [r3, #8]
	}
    }
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b8f4:	f7f4 fd0c 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d008      	beq.n	800b910 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	222c      	movs	r2, #44	; 0x2c
 800b902:	fb02 f303 	mul.w	r3, r2, r3
 800b906:	4618      	mov	r0, r3
 800b908:	f017 fbeb 	bl	80230e2 <_Znwj>
 800b90c:	4603      	mov	r3, r0
 800b90e:	e006      	b.n	800b91e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b910:	2200      	movs	r2, #0
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fc1c 	bl	800c152 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 800b91a:	4603      	mov	r3, r0
 800b91c:	bf00      	nop
      { return __a.allocate(__n); }
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4618      	mov	r0, r3
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4619      	mov	r1, r3
 800b954:	68b8      	ldr	r0, [r7, #8]
 800b956:	f017 fbc2 	bl	80230de <_ZdlPvj>
      }
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	222c      	movs	r2, #44	; 0x2c
 800b99c:	fb02 f303 	mul.w	r3, r2, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	68b8      	ldr	r0, [r7, #8]
 800b9a4:	f017 fb9b 	bl	80230de <_ZdlPvj>
      }
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	4413      	add	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f017 fb73 	bl	80230de <_ZdlPvj>
      }
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE10deallocateEPSA_j>:
      deallocate(_Tp* __p, size_type __t)
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	68b8      	ldr	r0, [r7, #8]
 800ba2e:	f017 fb56 	bl	80230de <_ZdlPvj>
      }
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN3SPI10PeripheralEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <_ZSt7forwardIRSt4pairIKN3SPI10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <_ZSt3getILj0EKN3SPI10PeripheralEPNS0_8InstanceEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS9_>:
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fa29 	bl	800bec4 <_ZNSt10__pair_getILj0EE5__getIKN3SPI10PeripheralEPNS2_8InstanceEEERT_RSt4pairIS7_T0_E>
 800ba72:	4603      	mov	r3, r0
 800ba74:	4618      	mov	r0, r3
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE4_M_vEv>:
      _M_v() const noexcept
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fa28 	bl	800beda <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fa29 	bl	800bef8 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv>
 800baa6:	4602      	mov	r2, r0
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	4293      	cmp	r3, r2
 800baac:	bf8c      	ite	hi
 800baae:	2301      	movhi	r3, #1
 800bab0:	2300      	movls	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bab8:	f017 fbd7 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f017 fb0b 	bl	80230e2 <_Znwj>
 800bacc:	4603      	mov	r3, r0
 800bace:	bf00      	nop
      }
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800baea:	f7f4 fc11 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d006      	beq.n	800bb02 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f017 faf2 	bl	80230e2 <_Znwj>
 800bafe:	4603      	mov	r3, r0
 800bb00:	e006      	b.n	800bb10 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800bb02:	2200      	movs	r2, #0
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fb85 	bl	800c216 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	bf00      	nop
      { return __a.allocate(__n); }
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_allocate_bucketsEj>:

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
    {
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7fd fdbe 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	4611      	mov	r1, r2
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f9ef 	bl	800bf14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 800bb36:	f107 030c 	add.w	r3, r7, #12
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff ffcb 	bl	800bad8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 800bb42:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 800bb44:	6978      	ldr	r0, [r7, #20]
 800bb46:	f000 f9fd 	bl	800bf44 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800bb4a:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4610      	mov	r0, r2
 800bb54:	461a      	mov	r2, r3
 800bb56:	2100      	movs	r1, #0
 800bb58:	f017 fcd2 	bl	8023500 <memset>
      return __p;
 800bb5c:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bb5e:	f107 030c 	add.w	r3, r7, #12
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 f9e3 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800bb68:	4623      	mov	r3, r4
    }
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	371c      	adds	r7, #28
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd90      	pop	{r4, r7, pc}

0800bb72 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 f9ea 	bl	800bf5a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	68b9      	ldr	r1, [r7, #8]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 fa06 	bl	800bfa2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800bb96:	e000      	b.n	800bb9a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x28>
	  return;
 800bb98:	bf00      	nop
      }
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE10deallocateEPSA_j>:
      deallocate(_Tp* __p, size_type __t)
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68b8      	ldr	r0, [r7, #8]
 800bbba:	f017 fa90 	bl	80230de <_ZdlPvj>
      }
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN4UART10PeripheralEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <_ZSt7forwardIRSt4pairIKN4UART10PeripheralEPNS1_8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <_ZSt3getILj0EKN4UART10PeripheralEPNS0_8InstanceEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS9_>:
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f9f6 	bl	800bfea <_ZNSt10__pair_getILj0EE5__getIKN4UART10PeripheralEPNS2_8InstanceEEERT_RSt4pairIS7_T0_E>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE4_M_vEv>:
      _M_v() const noexcept
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f9f5 	bl	800c000 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>
 800bc16:	4603      	mov	r3, r0
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f9f5 	bl	800c01c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv>
 800bc32:	4602      	mov	r2, r0
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4293      	cmp	r3, r2
 800bc38:	bf8c      	ite	hi
 800bc3a:	2301      	movhi	r3, #1
 800bc3c:	2300      	movls	r3, #0
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bc44:	f017 fb11 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f017 fa45 	bl	80230e2 <_Znwj>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	bf00      	nop
      }
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7fd feff 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 800bc74:	4602      	mov	r2, r0
 800bc76:	f107 030c 	add.w	r3, r7, #12
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f9db 	bl	800c038 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>
      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __bkt_count);
 800bc82:	f107 030c 	add.w	r3, r7, #12
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff ff25 	bl	800bad8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 800bc8e:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__to_address(__ptr);
 800bc90:	6978      	ldr	r0, [r7, #20]
 800bc92:	f000 f957 	bl	800bf44 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 800bc96:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__bucket_type));
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	4610      	mov	r0, r2
 800bca0:	461a      	mov	r2, r3
 800bca2:	2100      	movs	r1, #0
 800bca4:	f017 fc2c 	bl	8023500 <memset>
      return __p;
 800bca8:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bcaa:	f107 030c 	add.w	r3, r7, #12
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f93d 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800bcb4:	4623      	mov	r3, r4
    }
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd90      	pop	{r4, r7, pc}

0800bcbe <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f9c0 	bl	800c052 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f9d0 	bl	800c082 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800bce2:	e000      	b.n	800bce6 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS8_15_Hash_node_baseEj+0x28>
	  return;
 800bce4:	bf00      	nop
      }
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE7_M_addrEv>:
      _M_addr() noexcept
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	60f8      	str	r0, [r7, #12]
 800bd0a:	60b9      	str	r1, [r7, #8]
 800bd0c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4613      	mov	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68b8      	ldr	r0, [r7, #8]
 800bd1c:	f017 f9df 	bl	80230de <_ZdlPvj>
      }
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP15TimerPeripheralEE7_M_addrEv>:
      _M_addr() const noexcept
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4613      	mov	r3, r2
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4619      	mov	r1, r3
 800bd6a:	68b8      	ldr	r0, [r7, #8]
 800bd6c:	f017 f9b7 	bl	80230de <_ZdlPvj>
      }
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	222c      	movs	r2, #44	; 0x2c
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68b8      	ldr	r0, [r7, #8]
 800bdba:	f017 f990 	bl	80230de <_ZdlPvj>
      }
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7f4 fb03 	bl	80003f0 <_ZNKSt14_Function_base8_M_emptyEv>
 800bdea:	4603      	mov	r3, r0
 800bdec:	f083 0301 	eor.w	r3, r3, #1
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f9c4 	bl	800c194 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 800be0c:	4602      	mov	r2, r0
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4293      	cmp	r3, r2
 800be12:	bf8c      	ite	hi
 800be14:	2301      	movhi	r3, #1
 800be16:	2300      	movls	r3, #0
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800be1e:	f017 fa24 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	4613      	mov	r3, r2
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f017 f958 	bl	80230e2 <_Znwj>
 800be32:	4603      	mov	r3, r0
 800be34:	bf00      	nop
      }
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	60f8      	str	r0, [r7, #12]
 800be46:	60b9      	str	r1, [r7, #8]
 800be48:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f9b0 	bl	800c1b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 800be50:	4602      	mov	r2, r0
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	4293      	cmp	r3, r2
 800be56:	bf8c      	ite	hi
 800be58:	2301      	movhi	r3, #1
 800be5a:	2300      	movls	r3, #0
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800be62:	f017 fa02 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	222c      	movs	r2, #44	; 0x2c
 800be6a:	fb02 f303 	mul.w	r3, r2, r3
 800be6e:	4618      	mov	r0, r3
 800be70:	f017 f937 	bl	80230e2 <_Znwj>
 800be74:	4603      	mov	r3, r0
 800be76:	bf00      	nop
      }
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f99d 	bl	800c1cc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 800be92:	4602      	mov	r2, r0
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4293      	cmp	r3, r2
 800be98:	bf8c      	ite	hi
 800be9a:	2301      	movhi	r3, #1
 800be9c:	2300      	movls	r3, #0
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bea4:	f017 f9e1 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	4613      	mov	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f017 f915 	bl	80230e2 <_Znwj>
 800beb8:	4603      	mov	r3, r0
 800beba:	bf00      	nop
      }
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <_ZNSt10__pair_getILj0EE5__getIKN3SPI10PeripheralEPNS2_8InstanceEEERT_RSt4pairIS7_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f97e 	bl	800c1e8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>
 800beec:	4603      	mov	r3, r0
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bf00:	4b03      	ldr	r3, [pc, #12]	; (800bf10 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800bf02:	4618      	mov	r0, r3
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	0aaaaaaa 	.word	0x0aaaaaaa

0800bf14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f96e 	bl	800c200 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
      return __ptr;
 800bf4c:	687b      	ldr	r3, [r7, #4]
    }
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <_ZNKSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3318      	adds	r3, #24
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	bf0c      	ite	eq
 800bf6e:	2301      	moveq	r3, #1
 800bf70:	2300      	movne	r3, #0
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bf14      	ite	ne
 800bf78:	2301      	movne	r3, #1
 800bf7a:	2300      	moveq	r3, #0
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f95e 	bl	800c254 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b086      	sub	sp, #24
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	60f8      	str	r0, [r7, #12]
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	607a      	str	r2, [r7, #4]
							std::size_t __bkt_count)
    {
      typedef typename __bucket_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800bfae:	68b8      	ldr	r0, [r7, #8]
 800bfb0:	f7ff ffeb 	bl	800bf8a <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 800bfb4:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7fd fb74 	bl	80096a4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	f107 0310 	add.w	r3, r7, #16
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff ffa5 	bl	800bf14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800bfca:	f107 0310 	add.w	r3, r7, #16
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6979      	ldr	r1, [r7, #20]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f94a 	bl	800c26c <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 800bfd8:	f107 0310 	add.w	r3, r7, #16
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff ffa6 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 800bfe2:	bf00      	nop
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <_ZNSt10__pair_getILj0EE5__getIKN4UART10PeripheralEPNS2_8InstanceEEERT_RSt4pairIS7_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4618      	mov	r0, r3
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f94c 	bl	800c2aa <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>
 800c012:	4603      	mov	r3, r0
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c024:	4b03      	ldr	r3, [pc, #12]	; (800c034 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	0aaaaaaa 	.word	0x0aaaaaaa

0800c038 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f8dc 	bl	800c200 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <_ZNKSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS8_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3318      	adds	r3, #24
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	bf0c      	ite	eq
 800c066:	2301      	moveq	r3, #1
 800c068:	2300      	movne	r3, #0
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	bf14      	ite	ne
 800c070:	2301      	movne	r3, #1
 800c072:	2300      	moveq	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800c08e:	68b8      	ldr	r0, [r7, #8]
 800c090:	f7ff ff7b 	bl	800bf8a <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 800c094:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f7fd fceb 	bl	8009a72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEE17_M_node_allocatorEv>
 800c09c:	4602      	mov	r2, r0
 800c09e:	f107 0310 	add.w	r3, r7, #16
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff ffc7 	bl	800c038 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS6_8InstanceEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800c0aa:	f107 0310 	add.w	r3, r7, #16
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	6979      	ldr	r1, [r7, #20]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 f8da 	bl	800c26c <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 800c0b8:	f107 0310 	add.w	r3, r7, #16
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff ff36 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 800c0c2:	bf00      	nop
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	60b9      	str	r1, [r7, #8]
 800c0d4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 f8f4 	bl	800c2c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE11_M_max_sizeEv>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	bf8c      	ite	hi
 800c0e4:	2301      	movhi	r3, #1
 800c0e6:	2300      	movls	r3, #0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c0ee:	f017 f8bc 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f016 fff0 	bl	80230e2 <_Znwj>
 800c102:	4603      	mov	r3, r0
 800c104:	bf00      	nop
      }
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 f8e0 	bl	800c2e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 800c120:	4602      	mov	r2, r0
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	4293      	cmp	r3, r2
 800c126:	bf8c      	ite	hi
 800c128:	2301      	movhi	r3, #1
 800c12a:	2300      	movls	r3, #0
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c132:	f017 f89a 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	4613      	mov	r3, r2
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	1a9b      	subs	r3, r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4618      	mov	r0, r3
 800c142:	f016 ffce 	bl	80230e2 <_Znwj>
 800c146:	4603      	mov	r3, r0
 800c148:	bf00      	nop
      }
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 f8cc 	bl	800c2fc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 800c164:	4602      	mov	r2, r0
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	4293      	cmp	r3, r2
 800c16a:	bf8c      	ite	hi
 800c16c:	2301      	movhi	r3, #1
 800c16e:	2300      	movls	r3, #0
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c176:	f017 f878 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	222c      	movs	r2, #44	; 0x2c
 800c17e:	fb02 f303 	mul.w	r3, r2, r3
 800c182:	4618      	mov	r0, r3
 800c184:	f016 ffad 	bl	80230e2 <_Znwj>
 800c188:	4603      	mov	r3, r0
 800c18a:	bf00      	nop
      }
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c19c:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	038e38e3 	.word	0x038e38e3

0800c1b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c1b8:	4b03      	ldr	r3, [pc, #12]	; (800c1c8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	02e8ba2e 	.word	0x02e8ba2e

0800c1cc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c1d4:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	038e38e3 	.word	0x038e38e3

0800c1e8 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f891 	bl	800c318 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE7_M_addrEv>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	60f8      	str	r0, [r7, #12]
 800c21e:	60b9      	str	r1, [r7, #8]
 800c220:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 f883 	bl	800c32e <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 800c228:	4602      	mov	r2, r0
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	bf8c      	ite	hi
 800c230:	2301      	movhi	r3, #1
 800c232:	2300      	movls	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c23a:	f017 f816 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4618      	mov	r0, r3
 800c244:	f016 ff4d 	bl	80230e2 <_Znwj>
 800c248:	4603      	mov	r3, r0
 800c24a:	bf00      	nop
      }
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f872 	bl	800c346 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800c262:	4603      	mov	r3, r0
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	61bb      	str	r3, [r7, #24]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c284:	f7f4 f844 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 800c28e:	69b8      	ldr	r0, [r7, #24]
 800c290:	f016 ff23 	bl	80230da <_ZdlPv>
	    return;
 800c294:	e005      	b.n	800c2a2 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	69b9      	ldr	r1, [r7, #24]
 800c29a:	69f8      	ldr	r0, [r7, #28]
 800c29c:	f000 f869 	bl	800c372 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f852 	bl	800c35c <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE7_M_addrEv>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c2cc:	4b03      	ldr	r3, [pc, #12]	; (800c2dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEE11_M_max_sizeEv+0x18>)
      }
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	038e38e3 	.word	0x038e38e3

0800c2e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c2e8:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	02492492 	.word	0x02492492

0800c2fc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c304:	4b03      	ldr	r3, [pc, #12]	; (800c314 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	02e8ba2e 	.word	0x02e8ba2e

0800c318 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800c320:	687b      	ldr	r3, [r7, #4]
      }
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c336:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4618      	mov	r0, r3
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN4UART10PeripheralEPNS2_8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800c364:	687b      	ldr	r3, [r7, #4]
      }
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4619      	mov	r1, r3
 800c384:	68b8      	ldr	r0, [r7, #8]
 800c386:	f016 feaa 	bl	80230de <_ZdlPvj>
      }
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_Z41__static_initialization_and_destruction_0ii>:
 800c390:	b580      	push	{r7, lr}
 800c392:	b0e8      	sub	sp, #416	; 0x1a0
 800c394:	af02      	add	r7, sp, #8
 800c396:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c39a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800c39e:	6018      	str	r0, [r3, #0]
 800c3a0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c3a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800c3a8:	6019      	str	r1, [r3, #0]
 800c3aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c3ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	f040 8168 	bne.w	800c68a <_Z41__static_initialization_and_destruction_0ii+0x2fa>
 800c3ba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c3be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	f040 815e 	bne.w	800c68a <_Z41__static_initialization_and_destruction_0ii+0x2fa>
LowPowerTimer lptim1 = LowPowerTimer(LPTIM1, &hlptim1, LPTIM1_PERIOD);
 800c3ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c3d2:	4ac8      	ldr	r2, [pc, #800]	; (800c6f4 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800c3d4:	49c8      	ldr	r1, [pc, #800]	; (800c6f8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800c3d6:	48c9      	ldr	r0, [pc, #804]	; (800c6fc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800c3d8:	f7f4 f8c1 	bl	800055e <_ZN13LowPowerTimerC1EP13LPTIM_TypeDefP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(LPTIM2, &hlptim2, LPTIM2_PERIOD);
 800c3dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c3e0:	4ac7      	ldr	r2, [pc, #796]	; (800c700 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800c3e2:	49c8      	ldr	r1, [pc, #800]	; (800c704 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800c3e4:	48c8      	ldr	r0, [pc, #800]	; (800c708 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800c3e6:	f7f4 f8ba 	bl	800055e <_ZN13LowPowerTimerC1EP13LPTIM_TypeDefP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(LPTIM3, &hlptim3, LPTIM3_PERIOD);
 800c3ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c3ee:	4ac7      	ldr	r2, [pc, #796]	; (800c70c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800c3f0:	49c7      	ldr	r1, [pc, #796]	; (800c710 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800c3f2:	48c8      	ldr	r0, [pc, #800]	; (800c714 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800c3f4:	f7f4 f8b3 	bl	800055e <_ZN13LowPowerTimerC1EP13LPTIM_TypeDefP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 800c3f8:	4bc7      	ldr	r3, [pc, #796]	; (800c718 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	6053      	str	r3, [r2, #4]
 800c402:	6093      	str	r3, [r2, #8]
 800c404:	48c4      	ldr	r0, [pc, #784]	; (800c718 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800c406:	f7f4 f879 	bl	80004fc <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 800c40a:	4bc4      	ldr	r3, [pc, #784]	; (800c71c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800c40c:	461a      	mov	r2, r3
 800c40e:	2300      	movs	r3, #0
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	6053      	str	r3, [r2, #4]
 800c414:	6093      	str	r3, [r2, #8]
 800c416:	48c1      	ldr	r0, [pc, #772]	; (800c71c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800c418:	f7f4 f870 	bl	80004fc <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 800c41c:	4bc0      	ldr	r3, [pc, #768]	; (800c720 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800c41e:	461a      	mov	r2, r3
 800c420:	2300      	movs	r3, #0
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	6053      	str	r3, [r2, #4]
 800c426:	6093      	str	r3, [r2, #8]
 800c428:	48bd      	ldr	r0, [pc, #756]	; (800c720 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800c42a:	f7f4 f867 	bl	80004fc <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = { ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1 };
 800c42e:	4bba      	ldr	r3, [pc, #744]	; (800c718 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c436:	2200      	movs	r2, #0
 800c438:	49ba      	ldr	r1, [pc, #744]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c43a:	48bb      	ldr	r0, [pc, #748]	; (800c728 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800c43c:	f00e fd9c 	bl	801af78 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = { ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2 };
 800c440:	4bb6      	ldr	r3, [pc, #728]	; (800c71c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800c448:	2200      	movs	r2, #0
 800c44a:	49b8      	ldr	r1, [pc, #736]	; (800c72c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800c44c:	48b8      	ldr	r0, [pc, #736]	; (800c730 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800c44e:	f00e fd93 	bl	801af78 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = { ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3 };
 800c452:	4bb3      	ldr	r3, [pc, #716]	; (800c720 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 800c45a:	2208      	movs	r2, #8
 800c45c:	49b5      	ldr	r1, [pc, #724]	; (800c734 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800c45e:	48b6      	ldr	r0, [pc, #728]	; (800c738 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800c460:	f00e fd8a 	bl	801af78 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
TimerPeripheral::InitData init_data_timer1(TIM1);
 800c464:	2300      	movs	r3, #0
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c46c:	f240 1213 	movw	r2, #275	; 0x113
 800c470:	49b2      	ldr	r1, [pc, #712]	; (800c73c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800c472:	48b3      	ldr	r0, [pc, #716]	; (800c740 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800c474:	f00d fe90 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer2(TIM2);
 800c478:	2300      	movs	r3, #0
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c480:	f240 1213 	movw	r2, #275	; 0x113
 800c484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c488:	48ae      	ldr	r0, [pc, #696]	; (800c744 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800c48a:	f00d fe85 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer3(TIM3);
 800c48e:	2300      	movs	r3, #0
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c496:	f240 1213 	movw	r2, #275	; 0x113
 800c49a:	49ab      	ldr	r1, [pc, #684]	; (800c748 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800c49c:	48ab      	ldr	r0, [pc, #684]	; (800c74c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800c49e:	f00d fe7b 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer4(TIM4);
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4aa:	f240 1213 	movw	r2, #275	; 0x113
 800c4ae:	49a8      	ldr	r1, [pc, #672]	; (800c750 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800c4b0:	48a8      	ldr	r0, [pc, #672]	; (800c754 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800c4b2:	f00d fe71 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer12(TIM12);
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4be:	f240 1213 	movw	r2, #275	; 0x113
 800c4c2:	49a5      	ldr	r1, [pc, #660]	; (800c758 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800c4c4:	48a5      	ldr	r0, [pc, #660]	; (800c75c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800c4c6:	f00d fe67 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer16(TIM16);
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4d2:	f240 1213 	movw	r2, #275	; 0x113
 800c4d6:	49a2      	ldr	r1, [pc, #648]	; (800c760 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800c4d8:	48a2      	ldr	r0, [pc, #648]	; (800c764 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800c4da:	f00d fe5d 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer17(TIM17);
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4e6:	f240 1213 	movw	r2, #275	; 0x113
 800c4ea:	499f      	ldr	r1, [pc, #636]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c4ec:	489f      	ldr	r0, [pc, #636]	; (800c76c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800c4ee:	f00d fe53 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer15(TIM15);
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4fa:	f240 1213 	movw	r2, #275	; 0x113
 800c4fe:	499c      	ldr	r1, [pc, #624]	; (800c770 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800c500:	489c      	ldr	r0, [pc, #624]	; (800c774 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800c502:	f00d fe49 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral::InitData init_data_timer23(TIM23);
 800c506:	2300      	movs	r3, #0
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c50e:	f240 1213 	movw	r2, #275	; 0x113
 800c512:	4999      	ldr	r1, [pc, #612]	; (800c778 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800c514:	4899      	ldr	r0, [pc, #612]	; (800c77c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800c516:	f00d fe3f 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
TimerPeripheral timer1(&htim1, init_data_timer1);
 800c51a:	f107 0308 	add.w	r3, r7, #8
 800c51e:	4988      	ldr	r1, [pc, #544]	; (800c740 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800c520:	4618      	mov	r0, r3
 800c522:	f7f4 fa9f 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c526:	f107 0308 	add.w	r3, r7, #8
 800c52a:	461a      	mov	r2, r3
 800c52c:	4994      	ldr	r1, [pc, #592]	; (800c780 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800c52e:	4895      	ldr	r0, [pc, #596]	; (800c784 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800c530:	f00d fe7c 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c534:	f107 0308 	add.w	r3, r7, #8
 800c538:	4618      	mov	r0, r3
 800c53a:	f7f4 fabf 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer2(&htim2, init_data_timer2);
 800c53e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c542:	4980      	ldr	r1, [pc, #512]	; (800c744 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800c544:	4618      	mov	r0, r3
 800c546:	f7f4 fa8d 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c54a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c54e:	461a      	mov	r2, r3
 800c550:	498d      	ldr	r1, [pc, #564]	; (800c788 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800c552:	488e      	ldr	r0, [pc, #568]	; (800c78c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800c554:	f00d fe6a 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7f4 faad 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer3(&htim3, init_data_timer3);
 800c562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c566:	4979      	ldr	r1, [pc, #484]	; (800c74c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800c568:	4618      	mov	r0, r3
 800c56a:	f7f4 fa7b 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c56e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c572:	461a      	mov	r2, r3
 800c574:	4986      	ldr	r1, [pc, #536]	; (800c790 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800c576:	4887      	ldr	r0, [pc, #540]	; (800c794 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800c578:	f00d fe58 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c57c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c580:	4618      	mov	r0, r3
 800c582:	f7f4 fa9b 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer4(&htim4, init_data_timer4);
 800c586:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c58a:	4972      	ldr	r1, [pc, #456]	; (800c754 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f4 fa69 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c592:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c596:	461a      	mov	r2, r3
 800c598:	497f      	ldr	r1, [pc, #508]	; (800c798 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800c59a:	4880      	ldr	r0, [pc, #512]	; (800c79c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800c59c:	f00d fe46 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c5a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7f4 fa89 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer12(&htim12, init_data_timer12);
 800c5aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c5ae:	496b      	ldr	r1, [pc, #428]	; (800c75c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f4 fa57 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c5b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4978      	ldr	r1, [pc, #480]	; (800c7a0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800c5be:	4879      	ldr	r0, [pc, #484]	; (800c7a4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800c5c0:	f00d fe34 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c5c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f4 fa77 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer16(&htim16, init_data_timer16);
 800c5ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c5d2:	4964      	ldr	r1, [pc, #400]	; (800c764 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7f4 fa45 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c5da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4971      	ldr	r1, [pc, #452]	; (800c7a8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800c5e2:	4872      	ldr	r0, [pc, #456]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800c5e4:	f00d fe22 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c5e8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f4 fa65 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer17(&htim17, init_data_timer17);
 800c5f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c5f6:	495d      	ldr	r1, [pc, #372]	; (800c76c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7f4 fa33 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c5fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c602:	461a      	mov	r2, r3
 800c604:	496a      	ldr	r1, [pc, #424]	; (800c7b0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800c606:	486b      	ldr	r0, [pc, #428]	; (800c7b4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800c608:	f00d fe10 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c60c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800c610:	4618      	mov	r0, r3
 800c612:	f7f4 fa53 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer15(&htim15, init_data_timer15);
 800c616:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c61a:	4956      	ldr	r1, [pc, #344]	; (800c774 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7f4 fa21 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c622:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c626:	461a      	mov	r2, r3
 800c628:	4963      	ldr	r1, [pc, #396]	; (800c7b8 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800c62a:	4864      	ldr	r0, [pc, #400]	; (800c7bc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800c62c:	f00d fdfe 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c630:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c634:	4618      	mov	r0, r3
 800c636:	f7f4 fa41 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral timer23(&htim23, init_data_timer23);
 800c63a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c63e:	494f      	ldr	r1, [pc, #316]	; (800c77c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800c640:	4618      	mov	r0, r3
 800c642:	f7f4 fa0f 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 800c646:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c64a:	461a      	mov	r2, r3
 800c64c:	495c      	ldr	r1, [pc, #368]	; (800c7c0 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800c64e:	485d      	ldr	r0, [pc, #372]	; (800c7c4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800c650:	f00d fdec 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c654:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c658:	4618      	mov	r0, r3
 800c65a:	f7f4 fa2f 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral encoder_timer = TimerPeripheral(&htim8, {TIM8, 0, 65535});
 800c65e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800c662:	2300      	movs	r3, #0
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c66a:	2200      	movs	r2, #0
 800c66c:	4956      	ldr	r1, [pc, #344]	; (800c7c8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800c66e:	f00d fd93 	bl	801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>
 800c672:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c676:	461a      	mov	r2, r3
 800c678:	4954      	ldr	r1, [pc, #336]	; (800c7cc <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 800c67a:	4855      	ldr	r0, [pc, #340]	; (800c7d0 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800c67c:	f00d fdd6 	bl	801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>
 800c680:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c684:	4618      	mov	r0, r3
 800c686:	f7f4 fa19 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
 800c68a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c68e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 80c7 	bne.w	800c828 <_Z41__static_initialization_and_destruction_0ii+0x498>
 800c69a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800c69e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	f040 80bd 	bne.w	800c828 <_Z41__static_initialization_and_destruction_0ii+0x498>
 800c6ae:	4848      	ldr	r0, [pc, #288]	; (800c7d0 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800c6b0:	f7f4 fddc 	bl	800126c <_ZN15TimerPeripheralD1Ev>
 800c6b4:	4843      	ldr	r0, [pc, #268]	; (800c7c4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800c6b6:	f7f4 fdd9 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer15(&htim15, init_data_timer15);
 800c6ba:	4840      	ldr	r0, [pc, #256]	; (800c7bc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800c6bc:	f7f4 fdd6 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer17(&htim17, init_data_timer17);
 800c6c0:	483c      	ldr	r0, [pc, #240]	; (800c7b4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800c6c2:	f7f4 fdd3 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer16(&htim16, init_data_timer16);
 800c6c6:	4839      	ldr	r0, [pc, #228]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800c6c8:	f7f4 fdd0 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer12(&htim12, init_data_timer12);
 800c6cc:	4835      	ldr	r0, [pc, #212]	; (800c7a4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800c6ce:	f7f4 fdcd 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer4(&htim4, init_data_timer4);
 800c6d2:	4832      	ldr	r0, [pc, #200]	; (800c79c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800c6d4:	f7f4 fdca 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer3(&htim3, init_data_timer3);
 800c6d8:	482e      	ldr	r0, [pc, #184]	; (800c794 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800c6da:	f7f4 fdc7 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer2(&htim2, init_data_timer2);
 800c6de:	482b      	ldr	r0, [pc, #172]	; (800c78c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800c6e0:	f7f4 fdc4 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral timer1(&htim1, init_data_timer1);
 800c6e4:	4827      	ldr	r0, [pc, #156]	; (800c784 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800c6e6:	f7f4 fdc1 	bl	800126c <_ZN15TimerPeripheralD1Ev>
TimerPeripheral::InitData init_data_timer23(TIM23);
 800c6ea:	4824      	ldr	r0, [pc, #144]	; (800c77c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800c6ec:	f7f4 f9e6 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
 800c6f0:	e070      	b.n	800c7d4 <_Z41__static_initialization_and_destruction_0ii+0x444>
 800c6f2:	bf00      	nop
 800c6f4:	24000850 	.word	0x24000850
 800c6f8:	40002400 	.word	0x40002400
 800c6fc:	24000148 	.word	0x24000148
 800c700:	24000888 	.word	0x24000888
 800c704:	58002400 	.word	0x58002400
 800c708:	24000154 	.word	0x24000154
 800c70c:	240008c0 	.word	0x240008c0
 800c710:	58002800 	.word	0x58002800
 800c714:	24000160 	.word	0x24000160
 800c718:	2400016c 	.word	0x2400016c
 800c71c:	24000178 	.word	0x24000178
 800c720:	24000184 	.word	0x24000184
 800c724:	40022000 	.word	0x40022000
 800c728:	24000190 	.word	0x24000190
 800c72c:	40022100 	.word	0x40022100
 800c730:	240001a8 	.word	0x240001a8
 800c734:	58026000 	.word	0x58026000
 800c738:	240001c0 	.word	0x240001c0
 800c73c:	40010000 	.word	0x40010000
 800c740:	240001d8 	.word	0x240001d8
 800c744:	24000200 	.word	0x24000200
 800c748:	40000400 	.word	0x40000400
 800c74c:	24000228 	.word	0x24000228
 800c750:	40000800 	.word	0x40000800
 800c754:	24000250 	.word	0x24000250
 800c758:	40001800 	.word	0x40001800
 800c75c:	24000278 	.word	0x24000278
 800c760:	40014400 	.word	0x40014400
 800c764:	240002a0 	.word	0x240002a0
 800c768:	40014800 	.word	0x40014800
 800c76c:	240002c8 	.word	0x240002c8
 800c770:	40014000 	.word	0x40014000
 800c774:	240002f0 	.word	0x240002f0
 800c778:	4000e000 	.word	0x4000e000
 800c77c:	24000318 	.word	0x24000318
 800c780:	24000980 	.word	0x24000980
 800c784:	24000340 	.word	0x24000340
 800c788:	240009cc 	.word	0x240009cc
 800c78c:	2400036c 	.word	0x2400036c
 800c790:	24000a18 	.word	0x24000a18
 800c794:	24000398 	.word	0x24000398
 800c798:	24000a64 	.word	0x24000a64
 800c79c:	240003c4 	.word	0x240003c4
 800c7a0:	24000b94 	.word	0x24000b94
 800c7a4:	240003f0 	.word	0x240003f0
 800c7a8:	24000c2c 	.word	0x24000c2c
 800c7ac:	2400041c 	.word	0x2400041c
 800c7b0:	24000c78 	.word	0x24000c78
 800c7b4:	24000448 	.word	0x24000448
 800c7b8:	24000be0 	.word	0x24000be0
 800c7bc:	24000474 	.word	0x24000474
 800c7c0:	24000cc4 	.word	0x24000cc4
 800c7c4:	240004a0 	.word	0x240004a0
 800c7c8:	40010400 	.word	0x40010400
 800c7cc:	24000b48 	.word	0x24000b48
 800c7d0:	240004cc 	.word	0x240004cc
TimerPeripheral::InitData init_data_timer15(TIM15);
 800c7d4:	4817      	ldr	r0, [pc, #92]	; (800c834 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 800c7d6:	f7f4 f971 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer17(TIM17);
 800c7da:	4817      	ldr	r0, [pc, #92]	; (800c838 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 800c7dc:	f7f4 f96e 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer16(TIM16);
 800c7e0:	4816      	ldr	r0, [pc, #88]	; (800c83c <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 800c7e2:	f7f4 f96b 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer12(TIM12);
 800c7e6:	4816      	ldr	r0, [pc, #88]	; (800c840 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 800c7e8:	f7f4 f968 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer4(TIM4);
 800c7ec:	4815      	ldr	r0, [pc, #84]	; (800c844 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 800c7ee:	f7f4 f965 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer3(TIM3);
 800c7f2:	4815      	ldr	r0, [pc, #84]	; (800c848 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 800c7f4:	f7f4 f962 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer2(TIM2);
 800c7f8:	4814      	ldr	r0, [pc, #80]	; (800c84c <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 800c7fa:	f7f4 f95f 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
TimerPeripheral::InitData init_data_timer1(TIM1);
 800c7fe:	4814      	ldr	r0, [pc, #80]	; (800c850 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 800c800:	f7f4 f95c 	bl	8000abc <_ZN15TimerPeripheral8InitDataD1Ev>
 800c804:	4813      	ldr	r0, [pc, #76]	; (800c854 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 800c806:	f7f3 fece 	bl	80005a6 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = { ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2 };
 800c80a:	4813      	ldr	r0, [pc, #76]	; (800c858 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 800c80c:	f7f3 fecb 	bl	80005a6 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = { ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1 };
 800c810:	4812      	ldr	r0, [pc, #72]	; (800c85c <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 800c812:	f7f3 fec8 	bl	80005a6 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 800c816:	4812      	ldr	r0, [pc, #72]	; (800c860 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 800c818:	f7f6 fab0 	bl	8002d7c <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 800c81c:	4811      	ldr	r0, [pc, #68]	; (800c864 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 800c81e:	f7f6 faad 	bl	8002d7c <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 800c822:	4811      	ldr	r0, [pc, #68]	; (800c868 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 800c824:	f7f6 faaa 	bl	8002d7c <_ZNSt6vectorImSaImEED1Ev>
 800c828:	bf00      	nop
 800c82a:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	240002f0 	.word	0x240002f0
 800c838:	240002c8 	.word	0x240002c8
 800c83c:	240002a0 	.word	0x240002a0
 800c840:	24000278 	.word	0x24000278
 800c844:	24000250 	.word	0x24000250
 800c848:	24000228 	.word	0x24000228
 800c84c:	24000200 	.word	0x24000200
 800c850:	240001d8 	.word	0x240001d8
 800c854:	240001c0 	.word	0x240001c0
 800c858:	240001a8 	.word	0x240001a8
 800c85c:	24000190 	.word	0x24000190
 800c860:	24000184 	.word	0x24000184
 800c864:	24000178 	.word	0x24000178
 800c868:	2400016c 	.word	0x2400016c

0800c86c <_GLOBAL__sub_I_adc_buf1>:
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
 800c870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c874:	2001      	movs	r0, #1
 800c876:	f7ff fd8b 	bl	800c390 <_Z41__static_initialization_and_destruction_0ii>
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <_GLOBAL__sub_D_adc_buf1>:
 800c87c:	b580      	push	{r7, lr}
 800c87e:	af00      	add	r7, sp, #0
 800c880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c884:	2000      	movs	r0, #0
 800c886:	f7ff fd83 	bl	800c390 <_Z41__static_initialization_and_destruction_0ii>
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c892:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <HAL_MspInit+0x30>)
 800c894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c898:	4a08      	ldr	r2, [pc, #32]	; (800c8bc <HAL_MspInit+0x30>)
 800c89a:	f043 0302 	orr.w	r3, r3, #2
 800c89e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c8a2:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <HAL_MspInit+0x30>)
 800c8a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	58024400 	.word	0x58024400

0800c8c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b092      	sub	sp, #72	; 0x48
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	605a      	str	r2, [r3, #4]
 800c8d2:	609a      	str	r2, [r3, #8]
 800c8d4:	60da      	str	r2, [r3, #12]
 800c8d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a91      	ldr	r2, [pc, #580]	; (800cb24 <HAL_ADC_MspInit+0x264>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	f040 80b6 	bne.w	800ca50 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800c8e4:	4b90      	ldr	r3, [pc, #576]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	4a8f      	ldr	r2, [pc, #572]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800c8ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800c8ee:	4b8e      	ldr	r3, [pc, #568]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d10e      	bne.n	800c914 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800c8f6:	4b8d      	ldr	r3, [pc, #564]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c8f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c8fc:	4a8b      	ldr	r2, [pc, #556]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c8fe:	f043 0320 	orr.w	r3, r3, #32
 800c902:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c906:	4b89      	ldr	r3, [pc, #548]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c90c:	f003 0320 	and.w	r3, r3, #32
 800c910:	633b      	str	r3, [r7, #48]	; 0x30
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c914:	4b85      	ldr	r3, [pc, #532]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c91a:	4a84      	ldr	r2, [pc, #528]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c91c:	f043 0304 	orr.w	r3, r3, #4
 800c920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c924:	4b81      	ldr	r3, [pc, #516]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c932:	4b7e      	ldr	r3, [pc, #504]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c938:	4a7c      	ldr	r2, [pc, #496]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c93a:	f043 0301 	orr.w	r3, r3, #1
 800c93e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c942:	4b7a      	ldr	r3, [pc, #488]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c950:	4b76      	ldr	r3, [pc, #472]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c956:	4a75      	ldr	r2, [pc, #468]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c958:	f043 0302 	orr.w	r3, r3, #2
 800c95c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c960:	4b72      	ldr	r3, [pc, #456]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c966:	f003 0302 	and.w	r3, r3, #2
 800c96a:	627b      	str	r3, [r7, #36]	; 0x24
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c96e:	4b6f      	ldr	r3, [pc, #444]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c974:	4a6d      	ldr	r2, [pc, #436]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c976:	f043 0320 	orr.w	r3, r3, #32
 800c97a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c97e:	4b6b      	ldr	r3, [pc, #428]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800c980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	623b      	str	r3, [r7, #32]
 800c98a:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 800c98c:	2301      	movs	r3, #1
 800c98e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c990:	2303      	movs	r3, #3
 800c992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 800c998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c99c:	4619      	mov	r1, r3
 800c99e:	4864      	ldr	r0, [pc, #400]	; (800cb30 <HAL_ADC_MspInit+0x270>)
 800c9a0:	f006 facc 	bl	8012f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 800c9a4:	2379      	movs	r3, #121	; 0x79
 800c9a6:	637b      	str	r3, [r7, #52]	; 0x34
                          |ADC_16BITA6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	485f      	ldr	r0, [pc, #380]	; (800cb34 <HAL_ADC_MspInit+0x274>)
 800c9b8:	f006 fac0 	bl	8012f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	485a      	ldr	r0, [pc, #360]	; (800cb38 <HAL_ADC_MspInit+0x278>)
 800c9d0:	f006 fab4 	bl	8012f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 800c9d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c9d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9da:	2303      	movs	r3, #3
 800c9dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c9e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4854      	ldr	r0, [pc, #336]	; (800cb3c <HAL_ADC_MspInit+0x27c>)
 800c9ea:	f006 faa7 	bl	8012f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800c9ee:	4b54      	ldr	r3, [pc, #336]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800c9f0:	4a54      	ldr	r2, [pc, #336]	; (800cb44 <HAL_ADC_MspInit+0x284>)
 800c9f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800c9f4:	4b52      	ldr	r3, [pc, #328]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800c9f6:	2209      	movs	r2, #9
 800c9f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c9fa:	4b51      	ldr	r3, [pc, #324]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca00:	4b4f      	ldr	r3, [pc, #316]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ca06:	4b4e      	ldr	r3, [pc, #312]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca0e:	4b4c      	ldr	r3, [pc, #304]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca16:	4b4a      	ldr	r3, [pc, #296]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ca1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ca1e:	4b48      	ldr	r3, [pc, #288]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ca26:	4b46      	ldr	r3, [pc, #280]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ca2c:	4b44      	ldr	r3, [pc, #272]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ca32:	4843      	ldr	r0, [pc, #268]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca34:	f002 ff06 	bl	800f844 <HAL_DMA_Init>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 800ca3e:	f7f5 fabf 	bl	8001fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a3e      	ldr	r2, [pc, #248]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca46:	659a      	str	r2, [r3, #88]	; 0x58
 800ca48:	4a3d      	ldr	r2, [pc, #244]	; (800cb40 <HAL_ADC_MspInit+0x280>)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800ca4e:	e0fc      	b.n	800cc4a <HAL_ADC_MspInit+0x38a>
  else if(hadc->Instance==ADC2)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a3c      	ldr	r2, [pc, #240]	; (800cb48 <HAL_ADC_MspInit+0x288>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d17c      	bne.n	800cb54 <HAL_ADC_MspInit+0x294>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800ca5a:	4b33      	ldr	r3, [pc, #204]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	4a31      	ldr	r2, [pc, #196]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800ca62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800ca64:	4b30      	ldr	r3, [pc, #192]	; (800cb28 <HAL_ADC_MspInit+0x268>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d10e      	bne.n	800ca8a <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800ca6c:	4b2f      	ldr	r3, [pc, #188]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ca72:	4a2e      	ldr	r2, [pc, #184]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca74:	f043 0320 	orr.w	r3, r3, #32
 800ca78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ca7c:	4b2b      	ldr	r3, [pc, #172]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ca82:	f003 0320 	and.w	r3, r3, #32
 800ca86:	61fb      	str	r3, [r7, #28]
 800ca88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ca8a:	4b28      	ldr	r3, [pc, #160]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca90:	4a26      	ldr	r2, [pc, #152]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca92:	f043 0320 	orr.w	r3, r3, #32
 800ca96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ca9a:	4b24      	ldr	r3, [pc, #144]	; (800cb2c <HAL_ADC_MspInit+0x26c>)
 800ca9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800caa0:	f003 0320 	and.w	r3, r3, #32
 800caa4:	61bb      	str	r3, [r7, #24]
 800caa6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 800caa8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800caac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800caae:	2303      	movs	r3, #3
 800cab0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800caba:	4619      	mov	r1, r3
 800cabc:	481f      	ldr	r0, [pc, #124]	; (800cb3c <HAL_ADC_MspInit+0x27c>)
 800cabe:	f006 fa3d 	bl	8012f3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800cac2:	4b22      	ldr	r3, [pc, #136]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cac4:	4a22      	ldr	r2, [pc, #136]	; (800cb50 <HAL_ADC_MspInit+0x290>)
 800cac6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800cac8:	4b20      	ldr	r3, [pc, #128]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800caca:	220a      	movs	r2, #10
 800cacc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cace:	4b1f      	ldr	r3, [pc, #124]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800cad4:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cada:	4b1c      	ldr	r3, [pc, #112]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cadc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cae0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cae2:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cae8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800caea:	4b18      	ldr	r3, [pc, #96]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800caec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800caf0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800caf2:	4b16      	ldr	r3, [pc, #88]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800caf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caf8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800cafa:	4b14      	ldr	r3, [pc, #80]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb00:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cb06:	4811      	ldr	r0, [pc, #68]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cb08:	f002 fe9c 	bl	800f844 <HAL_DMA_Init>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <HAL_ADC_MspInit+0x256>
      Error_Handler();
 800cb12:	f7f5 fa55 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cb1a:	659a      	str	r2, [r3, #88]	; 0x58
 800cb1c:	4a0b      	ldr	r2, [pc, #44]	; (800cb4c <HAL_ADC_MspInit+0x28c>)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cb22:	e092      	b.n	800cc4a <HAL_ADC_MspInit+0x38a>
 800cb24:	40022000 	.word	0x40022000
 800cb28:	24000f24 	.word	0x24000f24
 800cb2c:	58024400 	.word	0x58024400
 800cb30:	58020800 	.word	0x58020800
 800cb34:	58020000 	.word	0x58020000
 800cb38:	58020400 	.word	0x58020400
 800cb3c:	58021400 	.word	0x58021400
 800cb40:	24000648 	.word	0x24000648
 800cb44:	40020010 	.word	0x40020010
 800cb48:	40022100 	.word	0x40022100
 800cb4c:	240006c0 	.word	0x240006c0
 800cb50:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a3e      	ldr	r2, [pc, #248]	; (800cc54 <HAL_ADC_MspInit+0x394>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d175      	bne.n	800cc4a <HAL_ADC_MspInit+0x38a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800cb5e:	4b3e      	ldr	r3, [pc, #248]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb64:	4a3c      	ldr	r2, [pc, #240]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cb6e:	4b3a      	ldr	r3, [pc, #232]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb78:	617b      	str	r3, [r7, #20]
 800cb7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800cb7c:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb82:	4a35      	ldr	r2, [pc, #212]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb84:	f043 0320 	orr.w	r3, r3, #32
 800cb88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cb8c:	4b32      	ldr	r3, [pc, #200]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb92:	f003 0320 	and.w	r3, r3, #32
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb9a:	4b2f      	ldr	r3, [pc, #188]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cb9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cba0:	4a2d      	ldr	r2, [pc, #180]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cba2:	f043 0304 	orr.w	r3, r3, #4
 800cba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cbaa:	4b2b      	ldr	r3, [pc, #172]	; (800cc58 <HAL_ADC_MspInit+0x398>)
 800cbac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 800cbb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800cbbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cbc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4823      	ldr	r0, [pc, #140]	; (800cc5c <HAL_ADC_MspInit+0x39c>)
 800cbce:	f006 f9b5 	bl	8012f3c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800cbd2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800cbd6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800cbda:	f000 feff 	bl	800d9dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800cbde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800cbe2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800cbe6:	f000 fef9 	bl	800d9dc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800cbea:	4b1d      	ldr	r3, [pc, #116]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <HAL_ADC_MspInit+0x3a4>)
 800cbee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800cbf0:	4b1b      	ldr	r3, [pc, #108]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cbf2:	2273      	movs	r2, #115	; 0x73
 800cbf4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cbf6:	4b1a      	ldr	r3, [pc, #104]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800cbfc:	4b18      	ldr	r3, [pc, #96]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800cc02:	4b17      	ldr	r3, [pc, #92]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cc0a:	4b15      	ldr	r3, [pc, #84]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800cc1a:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800cc22:	4b0f      	ldr	r3, [pc, #60]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc28:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800cc2e:	480c      	ldr	r0, [pc, #48]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc30:	f002 fe08 	bl	800f844 <HAL_DMA_Init>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d001      	beq.n	800cc3e <HAL_ADC_MspInit+0x37e>
      Error_Handler();
 800cc3a:	f7f5 f9c1 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a07      	ldr	r2, [pc, #28]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc42:	659a      	str	r2, [r3, #88]	; 0x58
 800cc44:	4a06      	ldr	r2, [pc, #24]	; (800cc60 <HAL_ADC_MspInit+0x3a0>)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cc4a:	bf00      	nop
 800cc4c:	3748      	adds	r7, #72	; 0x48
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	58026000 	.word	0x58026000
 800cc58:	58024400 	.word	0x58024400
 800cc5c:	58021400 	.word	0x58021400
 800cc60:	24000738 	.word	0x24000738
 800cc64:	40020040 	.word	0x40020040

0800cc68 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	; 0x28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc70:	f107 0314 	add.w	r3, r7, #20
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	605a      	str	r2, [r3, #4]
 800cc7a:	609a      	str	r2, [r3, #8]
 800cc7c:	60da      	str	r2, [r3, #12]
 800cc7e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a22      	ldr	r2, [pc, #136]	; (800cd10 <HAL_FDCAN_MspInit+0xa8>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d13d      	bne.n	800cd06 <HAL_FDCAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800cc8a:	4b22      	ldr	r3, [pc, #136]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800cc8c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800cc90:	4a20      	ldr	r2, [pc, #128]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800cc92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc96:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800cc9a:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800cc9c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800cca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca4:	613b      	str	r3, [r7, #16]
 800cca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cca8:	4b1a      	ldr	r3, [pc, #104]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800ccaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccae:	4a19      	ldr	r2, [pc, #100]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800ccb0:	f043 0308 	orr.w	r3, r3, #8
 800ccb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ccb8:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <HAL_FDCAN_MspInit+0xac>)
 800ccba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccbe:	f003 0308 	and.w	r3, r3, #8
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccca:	2302      	movs	r3, #2
 800cccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800ccd6:	2309      	movs	r3, #9
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ccda:	f107 0314 	add.w	r3, r7, #20
 800ccde:	4619      	mov	r1, r3
 800cce0:	480d      	ldr	r0, [pc, #52]	; (800cd18 <HAL_FDCAN_MspInit+0xb0>)
 800cce2:	f006 f92b 	bl	8012f3c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800cce6:	2200      	movs	r2, #0
 800cce8:	2100      	movs	r1, #0
 800ccea:	2013      	movs	r0, #19
 800ccec:	f002 fd75 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800ccf0:	2013      	movs	r0, #19
 800ccf2:	f002 fd8c 	bl	800f80e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	2015      	movs	r0, #21
 800ccfc:	f002 fd6d 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800cd00:	2015      	movs	r0, #21
 800cd02:	f002 fd84 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800cd06:	bf00      	nop
 800cd08:	3728      	adds	r7, #40	; 0x28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	4000a000 	.word	0x4000a000
 800cd14:	58024400 	.word	0x58024400
 800cd18:	58020c00 	.word	0x58020c00

0800cd1c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b0b4      	sub	sp, #208	; 0xd0
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cd24:	f107 0318 	add.w	r3, r7, #24
 800cd28:	22b8      	movs	r2, #184	; 0xb8
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f016 fbe7 	bl	8023500 <memset>
  if(hlptim->Instance==LPTIM1)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a48      	ldr	r2, [pc, #288]	; (800ce58 <HAL_LPTIM_MspInit+0x13c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d12a      	bne.n	800cd92 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800cd3c:	f04f 0220 	mov.w	r2, #32
 800cd40:	f04f 0300 	mov.w	r3, #0
 800cd44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cd4e:	f107 0318 	add.w	r3, r7, #24
 800cd52:	4618      	mov	r0, r3
 800cd54:	f007 fe7c 	bl	8014a50 <HAL_RCCEx_PeriphCLKConfig>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 800cd5e:	f7f5 f92f 	bl	8001fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800cd62:	4b3e      	ldr	r3, [pc, #248]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cd64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd68:	4a3c      	ldr	r2, [pc, #240]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cd6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cd72:	4b3a      	ldr	r3, [pc, #232]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cd74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	697b      	ldr	r3, [r7, #20]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800cd80:	2200      	movs	r2, #0
 800cd82:	2100      	movs	r1, #0
 800cd84:	205d      	movs	r0, #93	; 0x5d
 800cd86:	f002 fd28 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800cd8a:	205d      	movs	r0, #93	; 0x5d
 800cd8c:	f002 fd3f 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }

}
 800cd90:	e05e      	b.n	800ce50 <HAL_LPTIM_MspInit+0x134>
  else if(hlptim->Instance==LPTIM2)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a32      	ldr	r2, [pc, #200]	; (800ce60 <HAL_LPTIM_MspInit+0x144>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d12a      	bne.n	800cdf2 <HAL_LPTIM_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800cd9c:	f04f 0240 	mov.w	r2, #64	; 0x40
 800cda0:	f04f 0300 	mov.w	r3, #0
 800cda4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cdae:	f107 0318 	add.w	r3, r7, #24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f007 fe4c 	bl	8014a50 <HAL_RCCEx_PeriphCLKConfig>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d001      	beq.n	800cdc2 <HAL_LPTIM_MspInit+0xa6>
      Error_Handler();
 800cdbe:	f7f5 f8ff 	bl	8001fc0 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800cdc2:	4b26      	ldr	r3, [pc, #152]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cdc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cdc8:	4a24      	ldr	r2, [pc, #144]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cdca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cdd2:	4b22      	ldr	r3, [pc, #136]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800cdd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cdd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cddc:	613b      	str	r3, [r7, #16]
 800cdde:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800cde0:	2200      	movs	r2, #0
 800cde2:	2100      	movs	r1, #0
 800cde4:	208a      	movs	r0, #138	; 0x8a
 800cde6:	f002 fcf8 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800cdea:	208a      	movs	r0, #138	; 0x8a
 800cdec:	f002 fd0f 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800cdf0:	e02e      	b.n	800ce50 <HAL_LPTIM_MspInit+0x134>
  else if(hlptim->Instance==LPTIM3)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a1b      	ldr	r2, [pc, #108]	; (800ce64 <HAL_LPTIM_MspInit+0x148>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d129      	bne.n	800ce50 <HAL_LPTIM_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 800cdfc:	f04f 0280 	mov.w	r2, #128	; 0x80
 800ce00:	f04f 0300 	mov.w	r3, #0
 800ce04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ce0e:	f107 0318 	add.w	r3, r7, #24
 800ce12:	4618      	mov	r0, r3
 800ce14:	f007 fe1c 	bl	8014a50 <HAL_RCCEx_PeriphCLKConfig>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <HAL_LPTIM_MspInit+0x106>
      Error_Handler();
 800ce1e:	f7f5 f8cf 	bl	8001fc0 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 800ce22:	4b0e      	ldr	r3, [pc, #56]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800ce24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ce28:	4a0c      	ldr	r2, [pc, #48]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800ce2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ce32:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <HAL_LPTIM_MspInit+0x140>)
 800ce34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ce38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce3c:	60fb      	str	r3, [r7, #12]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 800ce40:	2200      	movs	r2, #0
 800ce42:	2100      	movs	r1, #0
 800ce44:	208b      	movs	r0, #139	; 0x8b
 800ce46:	f002 fcc8 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 800ce4a:	208b      	movs	r0, #139	; 0x8b
 800ce4c:	f002 fcdf 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800ce50:	bf00      	nop
 800ce52:	37d0      	adds	r7, #208	; 0xd0
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	40002400 	.word	0x40002400
 800ce5c:	58024400 	.word	0x58024400
 800ce60:	58002400 	.word	0x58002400
 800ce64:	58002800 	.word	0x58002800

0800ce68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b089      	sub	sp, #36	; 0x24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a35      	ldr	r2, [pc, #212]	; (800cf4c <HAL_TIM_PWM_MspInit+0xe4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d10f      	bne.n	800ce9a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ce7a:	4b35      	ldr	r3, [pc, #212]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ce7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce80:	4a33      	ldr	r2, [pc, #204]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ce8a:	4b31      	ldr	r3, [pc, #196]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ce8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	61fb      	str	r3, [r7, #28]
 800ce96:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800ce98:	e052      	b.n	800cf40 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM3)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a2d      	ldr	r2, [pc, #180]	; (800cf54 <HAL_TIM_PWM_MspInit+0xec>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d10f      	bne.n	800cec4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cea4:	4b2a      	ldr	r3, [pc, #168]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ceaa:	4a29      	ldr	r2, [pc, #164]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ceac:	f043 0302 	orr.w	r3, r3, #2
 800ceb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ceb4:	4b26      	ldr	r3, [pc, #152]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ceb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ceba:	f003 0302 	and.w	r3, r3, #2
 800cebe:	61bb      	str	r3, [r7, #24]
 800cec0:	69bb      	ldr	r3, [r7, #24]
}
 800cec2:	e03d      	b.n	800cf40 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM4)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a23      	ldr	r2, [pc, #140]	; (800cf58 <HAL_TIM_PWM_MspInit+0xf0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d10f      	bne.n	800ceee <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800cece:	4b20      	ldr	r3, [pc, #128]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ced0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ced4:	4a1e      	ldr	r2, [pc, #120]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800ced6:	f043 0304 	orr.w	r3, r3, #4
 800ceda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cede:	4b1c      	ldr	r3, [pc, #112]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cee4:	f003 0304 	and.w	r3, r3, #4
 800cee8:	617b      	str	r3, [r7, #20]
 800ceea:	697b      	ldr	r3, [r7, #20]
}
 800ceec:	e028      	b.n	800cf40 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM12)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a1a      	ldr	r2, [pc, #104]	; (800cf5c <HAL_TIM_PWM_MspInit+0xf4>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d10f      	bne.n	800cf18 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800cef8:	4b15      	ldr	r3, [pc, #84]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cefa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cefe:	4a14      	ldr	r2, [pc, #80]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cf00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cf08:	4b11      	ldr	r3, [pc, #68]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cf0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf12:	613b      	str	r3, [r7, #16]
 800cf14:	693b      	ldr	r3, [r7, #16]
}
 800cf16:	e013      	b.n	800cf40 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM15)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a10      	ldr	r2, [pc, #64]	; (800cf60 <HAL_TIM_PWM_MspInit+0xf8>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d10e      	bne.n	800cf40 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800cf22:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cf24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf28:	4a09      	ldr	r2, [pc, #36]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cf2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800cf32:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <HAL_TIM_PWM_MspInit+0xe8>)
 800cf34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
}
 800cf40:	bf00      	nop
 800cf42:	3724      	adds	r7, #36	; 0x24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	40010000 	.word	0x40010000
 800cf50:	58024400 	.word	0x58024400
 800cf54:	40000400 	.word	0x40000400
 800cf58:	40000800 	.word	0x40000800
 800cf5c:	40001800 	.word	0x40001800
 800cf60:	40014000 	.word	0x40014000

0800cf64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf74:	d117      	bne.n	800cfa6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cf76:	4b4e      	ldr	r3, [pc, #312]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cf78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf7c:	4a4c      	ldr	r2, [pc, #304]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cf7e:	f043 0301 	orr.w	r3, r3, #1
 800cf82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cf86:	4b4a      	ldr	r3, [pc, #296]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cf88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	61fb      	str	r3, [r7, #28]
 800cf92:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cf94:	2200      	movs	r2, #0
 800cf96:	2100      	movs	r1, #0
 800cf98:	201c      	movs	r0, #28
 800cf9a:	f002 fc1e 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cf9e:	201c      	movs	r0, #28
 800cfa0:	f002 fc35 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800cfa4:	e07f      	b.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM5)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a42      	ldr	r2, [pc, #264]	; (800d0b4 <HAL_TIM_Base_MspInit+0x150>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d117      	bne.n	800cfe0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cfb0:	4b3f      	ldr	r3, [pc, #252]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cfb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cfb6:	4a3e      	ldr	r2, [pc, #248]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cfb8:	f043 0308 	orr.w	r3, r3, #8
 800cfbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cfc0:	4b3b      	ldr	r3, [pc, #236]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cfc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cfc6:	f003 0308 	and.w	r3, r3, #8
 800cfca:	61bb      	str	r3, [r7, #24]
 800cfcc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	2032      	movs	r0, #50	; 0x32
 800cfd4:	f002 fc01 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800cfd8:	2032      	movs	r0, #50	; 0x32
 800cfda:	f002 fc18 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800cfde:	e062      	b.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a34      	ldr	r2, [pc, #208]	; (800d0b8 <HAL_TIM_Base_MspInit+0x154>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d117      	bne.n	800d01a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cfea:	4b31      	ldr	r3, [pc, #196]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cfec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cff0:	4a2f      	ldr	r2, [pc, #188]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cff2:	f043 0310 	orr.w	r3, r3, #16
 800cff6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cffa:	4b2d      	ldr	r3, [pc, #180]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800cffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d008:	2200      	movs	r2, #0
 800d00a:	2100      	movs	r1, #0
 800d00c:	2036      	movs	r0, #54	; 0x36
 800d00e:	f002 fbe4 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d012:	2036      	movs	r0, #54	; 0x36
 800d014:	f002 fbfb 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800d018:	e045      	b.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a27      	ldr	r2, [pc, #156]	; (800d0bc <HAL_TIM_Base_MspInit+0x158>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d10f      	bne.n	800d044 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800d024:	4b22      	ldr	r3, [pc, #136]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d02a:	4a21      	ldr	r2, [pc, #132]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d030:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d034:	4b1e      	ldr	r3, [pc, #120]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d03a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d03e:	613b      	str	r3, [r7, #16]
 800d040:	693b      	ldr	r3, [r7, #16]
}
 800d042:	e030      	b.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM17)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a1d      	ldr	r2, [pc, #116]	; (800d0c0 <HAL_TIM_Base_MspInit+0x15c>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d10f      	bne.n	800d06e <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800d04e:	4b18      	ldr	r3, [pc, #96]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d054:	4a16      	ldr	r2, [pc, #88]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d05a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d05e:	4b14      	ldr	r3, [pc, #80]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
}
 800d06c:	e01b      	b.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM24)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a14      	ldr	r2, [pc, #80]	; (800d0c4 <HAL_TIM_Base_MspInit+0x160>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d116      	bne.n	800d0a6 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800d078:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d07a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d07e:	4a0c      	ldr	r2, [pc, #48]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d084:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800d088:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <HAL_TIM_Base_MspInit+0x14c>)
 800d08a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d092:	60bb      	str	r3, [r7, #8]
 800d094:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 800d096:	2200      	movs	r2, #0
 800d098:	2100      	movs	r1, #0
 800d09a:	20a2      	movs	r0, #162	; 0xa2
 800d09c:	f002 fb9d 	bl	800f7da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 800d0a0:	20a2      	movs	r0, #162	; 0xa2
 800d0a2:	f002 fbb4 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800d0a6:	bf00      	nop
 800d0a8:	3720      	adds	r7, #32
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	40000c00 	.word	0x40000c00
 800d0b8:	40001000 	.word	0x40001000
 800d0bc:	40014400 	.word	0x40014400
 800d0c0:	40014800 	.word	0x40014800
 800d0c4:	4000e400 	.word	0x4000e400

0800d0c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08a      	sub	sp, #40	; 0x28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	605a      	str	r2, [r3, #4]
 800d0da:	609a      	str	r2, [r3, #8]
 800d0dc:	60da      	str	r2, [r3, #12]
 800d0de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a1a      	ldr	r2, [pc, #104]	; (800d150 <HAL_TIM_Encoder_MspInit+0x88>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d12d      	bne.n	800d146 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d0ea:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d0ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d0f0:	4a18      	ldr	r2, [pc, #96]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d0f2:	f043 0302 	orr.w	r3, r3, #2
 800d0f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d0fa:	4b16      	ldr	r3, [pc, #88]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d0fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d100:	f003 0302 	and.w	r3, r3, #2
 800d104:	613b      	str	r3, [r7, #16]
 800d106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d108:	4b12      	ldr	r3, [pc, #72]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d10a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d10e:	4a11      	ldr	r2, [pc, #68]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d110:	f043 0304 	orr.w	r3, r3, #4
 800d114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d118:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <HAL_TIM_Encoder_MspInit+0x8c>)
 800d11a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d11e:	f003 0304 	and.w	r3, r3, #4
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 800d126:	23c0      	movs	r3, #192	; 0xc0
 800d128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d12a:	2302      	movs	r3, #2
 800d12c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d132:	2300      	movs	r3, #0
 800d134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d136:	2303      	movs	r3, #3
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d13a:	f107 0314 	add.w	r3, r7, #20
 800d13e:	4619      	mov	r1, r3
 800d140:	4805      	ldr	r0, [pc, #20]	; (800d158 <HAL_TIM_Encoder_MspInit+0x90>)
 800d142:	f005 fefb 	bl	8012f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d146:	bf00      	nop
 800d148:	3728      	adds	r7, #40	; 0x28
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	40010400 	.word	0x40010400
 800d154:	58024400 	.word	0x58024400
 800d158:	58020800 	.word	0x58020800

0800d15c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08a      	sub	sp, #40	; 0x28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d164:	f107 0314 	add.w	r3, r7, #20
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	605a      	str	r2, [r3, #4]
 800d16e:	609a      	str	r2, [r3, #8]
 800d170:	60da      	str	r2, [r3, #12]
 800d172:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM23)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1a      	ldr	r2, [pc, #104]	; (800d1e4 <HAL_TIM_IC_MspInit+0x88>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d12d      	bne.n	800d1da <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 800d17e:	4b1a      	ldr	r3, [pc, #104]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d180:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d184:	4a18      	ldr	r2, [pc, #96]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d18a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800d18e:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d190:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d198:	613b      	str	r3, [r7, #16]
 800d19a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800d19c:	4b12      	ldr	r3, [pc, #72]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d19e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1a2:	4a11      	ldr	r2, [pc, #68]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d1a4:	f043 0320 	orr.w	r3, r3, #32
 800d1a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <HAL_TIM_IC_MspInit+0x8c>)
 800d1ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1b2:	f003 0320 	and.w	r3, r3, #32
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1be:	2302      	movs	r3, #2
 800d1c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800d1ca:	230d      	movs	r3, #13
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4805      	ldr	r0, [pc, #20]	; (800d1ec <HAL_TIM_IC_MspInit+0x90>)
 800d1d6:	f005 feb1 	bl	8012f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800d1da:	bf00      	nop
 800d1dc:	3728      	adds	r7, #40	; 0x28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	4000e000 	.word	0x4000e000
 800d1e8:	58024400 	.word	0x58024400
 800d1ec:	58021400 	.word	0x58021400

0800d1f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b090      	sub	sp, #64	; 0x40
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	609a      	str	r2, [r3, #8]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4aa6      	ldr	r2, [pc, #664]	; (800d4a8 <HAL_TIM_MspPostInit+0x2b8>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d120      	bne.n	800d254 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d212:	4ba6      	ldr	r3, [pc, #664]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d218:	4aa4      	ldr	r2, [pc, #656]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d21a:	f043 0310 	orr.w	r3, r3, #16
 800d21e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d222:	4ba2      	ldr	r3, [pc, #648]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d228:	f003 0310 	and.w	r3, r3, #16
 800d22c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 800d230:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d236:	2302      	movs	r3, #2
 800d238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d23e:	2300      	movs	r3, #0
 800d240:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d242:	2301      	movs	r3, #1
 800d244:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d24a:	4619      	mov	r1, r3
 800d24c:	4898      	ldr	r0, [pc, #608]	; (800d4b0 <HAL_TIM_MspPostInit+0x2c0>)
 800d24e:	f005 fe75 	bl	8012f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 800d252:	e125      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM3)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a96      	ldr	r2, [pc, #600]	; (800d4b4 <HAL_TIM_MspPostInit+0x2c4>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d13f      	bne.n	800d2de <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d25e:	4b93      	ldr	r3, [pc, #588]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d264:	4a91      	ldr	r2, [pc, #580]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d266:	f043 0304 	orr.w	r3, r3, #4
 800d26a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d26e:	4b8f      	ldr	r3, [pc, #572]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d274:	f003 0304 	and.w	r3, r3, #4
 800d278:	627b      	str	r3, [r7, #36]	; 0x24
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d27c:	4b8b      	ldr	r3, [pc, #556]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d27e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d282:	4a8a      	ldr	r2, [pc, #552]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d284:	f043 0302 	orr.w	r3, r3, #2
 800d288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d28c:	4b87      	ldr	r3, [pc, #540]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d28e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	623b      	str	r3, [r7, #32]
 800d298:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 800d29a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4880      	ldr	r0, [pc, #512]	; (800d4b8 <HAL_TIM_MspPostInit+0x2c8>)
 800d2b8:	f005 fe40 	bl	8012f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 800d2bc:	2330      	movs	r3, #48	; 0x30
 800d2be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4879      	ldr	r0, [pc, #484]	; (800d4bc <HAL_TIM_MspPostInit+0x2cc>)
 800d2d8:	f005 fe30 	bl	8012f3c <HAL_GPIO_Init>
}
 800d2dc:	e0e0      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM4)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a77      	ldr	r2, [pc, #476]	; (800d4c0 <HAL_TIM_MspPostInit+0x2d0>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d120      	bne.n	800d32a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d2e8:	4b70      	ldr	r3, [pc, #448]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2ee:	4a6f      	ldr	r2, [pc, #444]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d2f0:	f043 0308 	orr.w	r3, r3, #8
 800d2f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d2f8:	4b6c      	ldr	r3, [pc, #432]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d2fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d2fe:	f003 0308 	and.w	r3, r3, #8
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 800d306:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d30c:	2302      	movs	r3, #2
 800d30e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d310:	2300      	movs	r3, #0
 800d312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d314:	2300      	movs	r3, #0
 800d316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d318:	2302      	movs	r3, #2
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d320:	4619      	mov	r1, r3
 800d322:	4868      	ldr	r0, [pc, #416]	; (800d4c4 <HAL_TIM_MspPostInit+0x2d4>)
 800d324:	f005 fe0a 	bl	8012f3c <HAL_GPIO_Init>
}
 800d328:	e0ba      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM12)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a66      	ldr	r2, [pc, #408]	; (800d4c8 <HAL_TIM_MspPostInit+0x2d8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d120      	bne.n	800d376 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d334:	4b5d      	ldr	r3, [pc, #372]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d33a:	4a5c      	ldr	r2, [pc, #368]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d33c:	f043 0302 	orr.w	r3, r3, #2
 800d340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d344:	4b59      	ldr	r3, [pc, #356]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	61bb      	str	r3, [r7, #24]
 800d350:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 800d352:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d358:	2302      	movs	r3, #2
 800d35a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d360:	2300      	movs	r3, #0
 800d362:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800d364:	2302      	movs	r3, #2
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d36c:	4619      	mov	r1, r3
 800d36e:	4853      	ldr	r0, [pc, #332]	; (800d4bc <HAL_TIM_MspPostInit+0x2cc>)
 800d370:	f005 fde4 	bl	8012f3c <HAL_GPIO_Init>
}
 800d374:	e094      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM15)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a54      	ldr	r2, [pc, #336]	; (800d4cc <HAL_TIM_MspPostInit+0x2dc>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d11f      	bne.n	800d3c0 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d380:	4b4a      	ldr	r3, [pc, #296]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d386:	4a49      	ldr	r2, [pc, #292]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d388:	f043 0310 	orr.w	r3, r3, #16
 800d38c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d390:	4b46      	ldr	r3, [pc, #280]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d396:	f003 0310 	and.w	r3, r3, #16
 800d39a:	617b      	str	r3, [r7, #20]
 800d39c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 800d39e:	2370      	movs	r3, #112	; 0x70
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800d3ae:	2304      	movs	r3, #4
 800d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d3b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	483d      	ldr	r0, [pc, #244]	; (800d4b0 <HAL_TIM_MspPostInit+0x2c0>)
 800d3ba:	f005 fdbf 	bl	8012f3c <HAL_GPIO_Init>
}
 800d3be:	e06f      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM16)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a42      	ldr	r2, [pc, #264]	; (800d4d0 <HAL_TIM_MspPostInit+0x2e0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d120      	bne.n	800d40c <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3ca:	4b38      	ldr	r3, [pc, #224]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d3cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3d0:	4a36      	ldr	r2, [pc, #216]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d3d2:	f043 0302 	orr.w	r3, r3, #2
 800d3d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d3da:	4b34      	ldr	r3, [pc, #208]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d3dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3e0:	f003 0302 	and.w	r3, r3, #2
 800d3e4:	613b      	str	r3, [r7, #16]
 800d3e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 800d3e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800d3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d402:	4619      	mov	r1, r3
 800d404:	482d      	ldr	r0, [pc, #180]	; (800d4bc <HAL_TIM_MspPostInit+0x2cc>)
 800d406:	f005 fd99 	bl	8012f3c <HAL_GPIO_Init>
}
 800d40a:	e049      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM17)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a30      	ldr	r2, [pc, #192]	; (800d4d4 <HAL_TIM_MspPostInit+0x2e4>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d120      	bne.n	800d458 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d416:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d41c:	4a23      	ldr	r2, [pc, #140]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d41e:	f043 0302 	orr.w	r3, r3, #2
 800d422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d426:	4b21      	ldr	r3, [pc, #132]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d42c:	f003 0302 	and.w	r3, r3, #2
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 800d434:	f44f 7320 	mov.w	r3, #640	; 0x280
 800d438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d43a:	2302      	movs	r3, #2
 800d43c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d442:	2300      	movs	r3, #0
 800d444:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800d446:	2301      	movs	r3, #1
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d44a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d44e:	4619      	mov	r1, r3
 800d450:	481a      	ldr	r0, [pc, #104]	; (800d4bc <HAL_TIM_MspPostInit+0x2cc>)
 800d452:	f005 fd73 	bl	8012f3c <HAL_GPIO_Init>
}
 800d456:	e023      	b.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
  else if(htim->Instance==TIM23)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <HAL_TIM_MspPostInit+0x2e8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d11e      	bne.n	800d4a0 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800d462:	4b12      	ldr	r3, [pc, #72]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d468:	4a10      	ldr	r2, [pc, #64]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d46a:	f043 0320 	orr.w	r3, r3, #32
 800d46e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d472:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <HAL_TIM_MspPostInit+0x2bc>)
 800d474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d478:	f003 0320 	and.w	r3, r3, #32
 800d47c:	60bb      	str	r3, [r7, #8]
 800d47e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 800d480:	230e      	movs	r3, #14
 800d482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d484:	2302      	movs	r3, #2
 800d486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d488:	2300      	movs	r3, #0
 800d48a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d48c:	2300      	movs	r3, #0
 800d48e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800d490:	230d      	movs	r3, #13
 800d492:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d498:	4619      	mov	r1, r3
 800d49a:	4810      	ldr	r0, [pc, #64]	; (800d4dc <HAL_TIM_MspPostInit+0x2ec>)
 800d49c:	f005 fd4e 	bl	8012f3c <HAL_GPIO_Init>
}
 800d4a0:	bf00      	nop
 800d4a2:	3740      	adds	r7, #64	; 0x40
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	40010000 	.word	0x40010000
 800d4ac:	58024400 	.word	0x58024400
 800d4b0:	58021000 	.word	0x58021000
 800d4b4:	40000400 	.word	0x40000400
 800d4b8:	58020800 	.word	0x58020800
 800d4bc:	58020400 	.word	0x58020400
 800d4c0:	40000800 	.word	0x40000800
 800d4c4:	58020c00 	.word	0x58020c00
 800d4c8:	40001800 	.word	0x40001800
 800d4cc:	40014000 	.word	0x40014000
 800d4d0:	40014400 	.word	0x40014400
 800d4d4:	40014800 	.word	0x40014800
 800d4d8:	4000e000 	.word	0x4000e000
 800d4dc:	58021400 	.word	0x58021400

0800d4e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d4e4:	e7fe      	b.n	800d4e4 <NMI_Handler+0x4>

0800d4e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d4ea:	e7fe      	b.n	800d4ea <HardFault_Handler+0x4>

0800d4ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d4f0:	e7fe      	b.n	800d4f0 <MemManage_Handler+0x4>

0800d4f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d4f6:	e7fe      	b.n	800d4f6 <BusFault_Handler+0x4>

0800d4f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d4fc:	e7fe      	b.n	800d4fc <UsageFault_Handler+0x4>

0800d4fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d4fe:	b480      	push	{r7}
 800d500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d502:	bf00      	nop
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d510:	bf00      	nop
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d51a:	b480      	push	{r7}
 800d51c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d51e:	bf00      	nop
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d52c:	f000 fa12 	bl	800d954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d530:	bf00      	nop
 800d532:	bd80      	pop	{r7, pc}

0800d534 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d538:	2001      	movs	r0, #1
 800d53a:	f005 fed8 	bl	80132ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d53e:	bf00      	nop
 800d540:	bd80      	pop	{r7, pc}

0800d542 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800d546:	2002      	movs	r0, #2
 800d548:	f005 fed1 	bl	80132ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800d54c:	bf00      	nop
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d554:	4802      	ldr	r0, [pc, #8]	; (800d560 <DMA1_Stream0_IRQHandler+0x10>)
 800d556:	f002 ff39 	bl	80103cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800d55a:	bf00      	nop
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	24000648 	.word	0x24000648

0800d564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d568:	4802      	ldr	r0, [pc, #8]	; (800d574 <DMA1_Stream1_IRQHandler+0x10>)
 800d56a:	f002 ff2f 	bl	80103cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d56e:	bf00      	nop
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	240006c0 	.word	0x240006c0

0800d578 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d57c:	4802      	ldr	r0, [pc, #8]	; (800d588 <DMA1_Stream2_IRQHandler+0x10>)
 800d57e:	f002 ff25 	bl	80103cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800d582:	bf00      	nop
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	24000738 	.word	0x24000738

0800d58c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800d590:	4802      	ldr	r0, [pc, #8]	; (800d59c <FDCAN1_IT0_IRQHandler+0x10>)
 800d592:	f004 ffc5 	bl	8012520 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800d596:	bf00      	nop
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	240007b0 	.word	0x240007b0

0800d5a0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800d5a4:	4802      	ldr	r0, [pc, #8]	; (800d5b0 <FDCAN1_IT1_IRQHandler+0x10>)
 800d5a6:	f004 ffbb 	bl	8012520 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800d5aa:	bf00      	nop
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	240007b0 	.word	0x240007b0

0800d5b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d5b8:	4802      	ldr	r0, [pc, #8]	; (800d5c4 <TIM2_IRQHandler+0x10>)
 800d5ba:	f00a f8f7 	bl	80177ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d5be:	bf00      	nop
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	240009cc 	.word	0x240009cc

0800d5c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d5cc:	4802      	ldr	r0, [pc, #8]	; (800d5d8 <TIM5_IRQHandler+0x10>)
 800d5ce:	f00a f8ed 	bl	80177ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d5d2:	bf00      	nop
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	24000ab0 	.word	0x24000ab0

0800d5dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d5e0:	4802      	ldr	r0, [pc, #8]	; (800d5ec <TIM6_DAC_IRQHandler+0x10>)
 800d5e2:	f00a f8e3 	bl	80177ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d5e6:	bf00      	nop
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	24000afc 	.word	0x24000afc

0800d5f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800d5f4:	4802      	ldr	r0, [pc, #8]	; (800d600 <ETH_IRQHandler+0x10>)
 800d5f6:	f004 f9fb 	bl	80119f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800d5fa:	bf00      	nop
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	24000f30 	.word	0x24000f30

0800d604 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800d608:	4802      	ldr	r0, [pc, #8]	; (800d614 <LPTIM1_IRQHandler+0x10>)
 800d60a:	f005 ffa3 	bl	8013554 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800d60e:	bf00      	nop
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	24000850 	.word	0x24000850

0800d618 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800d61c:	4802      	ldr	r0, [pc, #8]	; (800d628 <LPTIM2_IRQHandler+0x10>)
 800d61e:	f005 ff99 	bl	8013554 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800d622:	bf00      	nop
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	24000888 	.word	0x24000888

0800d62c <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 800d630:	4802      	ldr	r0, [pc, #8]	; (800d63c <LPTIM3_IRQHandler+0x10>)
 800d632:	f005 ff8f 	bl	8013554 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 800d636:	bf00      	nop
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	240008c0 	.word	0x240008c0

0800d640 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 800d644:	4802      	ldr	r0, [pc, #8]	; (800d650 <TIM24_IRQHandler+0x10>)
 800d646:	f00a f8b1 	bl	80177ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800d64a:	bf00      	nop
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	24000d10 	.word	0x24000d10

0800d654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d654:	b480      	push	{r7}
 800d656:	af00      	add	r7, sp, #0
	return 1;
 800d658:	2301      	movs	r3, #1
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <_kill>:

int _kill(int pid, int sig)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <_kill+0x20>)
 800d670:	2216      	movs	r2, #22
 800d672:	601a      	str	r2, [r3, #0]
	return -1;
 800d674:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	240018ec 	.word	0x240018ec

0800d688 <_exit>:

void _exit (int status)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d690:	f04f 31ff 	mov.w	r1, #4294967295
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ffe5 	bl	800d664 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d69a:	e7fe      	b.n	800d69a <_exit+0x12>

0800d69c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d6a4:	4a14      	ldr	r2, [pc, #80]	; (800d6f8 <_sbrk+0x5c>)
 800d6a6:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <_sbrk+0x60>)
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d6b0:	4b13      	ldr	r3, [pc, #76]	; (800d700 <_sbrk+0x64>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d102      	bne.n	800d6be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d6b8:	4b11      	ldr	r3, [pc, #68]	; (800d700 <_sbrk+0x64>)
 800d6ba:	4a12      	ldr	r2, [pc, #72]	; (800d704 <_sbrk+0x68>)
 800d6bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d6be:	4b10      	ldr	r3, [pc, #64]	; (800d700 <_sbrk+0x64>)
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d205      	bcs.n	800d6d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	; (800d708 <_sbrk+0x6c>)
 800d6ce:	220c      	movs	r2, #12
 800d6d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d6:	e009      	b.n	800d6ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800d6d8:	4b09      	ldr	r3, [pc, #36]	; (800d700 <_sbrk+0x64>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d6de:	4b08      	ldr	r3, [pc, #32]	; (800d700 <_sbrk+0x64>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	4a06      	ldr	r2, [pc, #24]	; (800d700 <_sbrk+0x64>)
 800d6e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	371c      	adds	r7, #28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	24050000 	.word	0x24050000
 800d6fc:	00000400 	.word	0x00000400
 800d700:	24000f28 	.word	0x24000f28
 800d704:	240018f8 	.word	0x240018f8
 800d708:	240018ec 	.word	0x240018ec

0800d70c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d712:	4b3a      	ldr	r3, [pc, #232]	; (800d7fc <SystemInit+0xf0>)
 800d714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d718:	4a38      	ldr	r2, [pc, #224]	; (800d7fc <SystemInit+0xf0>)
 800d71a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d71e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d722:	4b37      	ldr	r3, [pc, #220]	; (800d800 <SystemInit+0xf4>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 030f 	and.w	r3, r3, #15
 800d72a:	2b06      	cmp	r3, #6
 800d72c:	d807      	bhi.n	800d73e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d72e:	4b34      	ldr	r3, [pc, #208]	; (800d800 <SystemInit+0xf4>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f023 030f 	bic.w	r3, r3, #15
 800d736:	4a32      	ldr	r2, [pc, #200]	; (800d800 <SystemInit+0xf4>)
 800d738:	f043 0307 	orr.w	r3, r3, #7
 800d73c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d73e:	4b31      	ldr	r3, [pc, #196]	; (800d804 <SystemInit+0xf8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a30      	ldr	r2, [pc, #192]	; (800d804 <SystemInit+0xf8>)
 800d744:	f043 0301 	orr.w	r3, r3, #1
 800d748:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d74a:	4b2e      	ldr	r3, [pc, #184]	; (800d804 <SystemInit+0xf8>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d750:	4b2c      	ldr	r3, [pc, #176]	; (800d804 <SystemInit+0xf8>)
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	492b      	ldr	r1, [pc, #172]	; (800d804 <SystemInit+0xf8>)
 800d756:	4b2c      	ldr	r3, [pc, #176]	; (800d808 <SystemInit+0xfc>)
 800d758:	4013      	ands	r3, r2
 800d75a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d75c:	4b28      	ldr	r3, [pc, #160]	; (800d800 <SystemInit+0xf4>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b00      	cmp	r3, #0
 800d766:	d007      	beq.n	800d778 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d768:	4b25      	ldr	r3, [pc, #148]	; (800d800 <SystemInit+0xf4>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f023 030f 	bic.w	r3, r3, #15
 800d770:	4a23      	ldr	r2, [pc, #140]	; (800d800 <SystemInit+0xf4>)
 800d772:	f043 0307 	orr.w	r3, r3, #7
 800d776:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d778:	4b22      	ldr	r3, [pc, #136]	; (800d804 <SystemInit+0xf8>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d77e:	4b21      	ldr	r3, [pc, #132]	; (800d804 <SystemInit+0xf8>)
 800d780:	2200      	movs	r2, #0
 800d782:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d784:	4b1f      	ldr	r3, [pc, #124]	; (800d804 <SystemInit+0xf8>)
 800d786:	2200      	movs	r2, #0
 800d788:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800d78a:	4b1e      	ldr	r3, [pc, #120]	; (800d804 <SystemInit+0xf8>)
 800d78c:	4a1f      	ldr	r2, [pc, #124]	; (800d80c <SystemInit+0x100>)
 800d78e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800d790:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <SystemInit+0xf8>)
 800d792:	4a1f      	ldr	r2, [pc, #124]	; (800d810 <SystemInit+0x104>)
 800d794:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d796:	4b1b      	ldr	r3, [pc, #108]	; (800d804 <SystemInit+0xf8>)
 800d798:	4a1e      	ldr	r2, [pc, #120]	; (800d814 <SystemInit+0x108>)
 800d79a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d79c:	4b19      	ldr	r3, [pc, #100]	; (800d804 <SystemInit+0xf8>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d7a2:	4b18      	ldr	r3, [pc, #96]	; (800d804 <SystemInit+0xf8>)
 800d7a4:	4a1b      	ldr	r2, [pc, #108]	; (800d814 <SystemInit+0x108>)
 800d7a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d7a8:	4b16      	ldr	r3, [pc, #88]	; (800d804 <SystemInit+0xf8>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d7ae:	4b15      	ldr	r3, [pc, #84]	; (800d804 <SystemInit+0xf8>)
 800d7b0:	4a18      	ldr	r2, [pc, #96]	; (800d814 <SystemInit+0x108>)
 800d7b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d7b4:	4b13      	ldr	r3, [pc, #76]	; (800d804 <SystemInit+0xf8>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d7ba:	4b12      	ldr	r3, [pc, #72]	; (800d804 <SystemInit+0xf8>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a11      	ldr	r2, [pc, #68]	; (800d804 <SystemInit+0xf8>)
 800d7c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d7c6:	4b0f      	ldr	r3, [pc, #60]	; (800d804 <SystemInit+0xf8>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 800d7cc:	4b0d      	ldr	r3, [pc, #52]	; (800d804 <SystemInit+0xf8>)
 800d7ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d7d2:	4a0c      	ldr	r2, [pc, #48]	; (800d804 <SystemInit+0xf8>)
 800d7d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d7d8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <SystemInit+0xf8>)
 800d7de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d7e2:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800d7e4:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d7e6:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <SystemInit+0x10c>)
 800d7e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800d7ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800d7ee:	bf00      	nop
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	e000ed00 	.word	0xe000ed00
 800d800:	52002000 	.word	0x52002000
 800d804:	58024400 	.word	0x58024400
 800d808:	eaf6ed7f 	.word	0xeaf6ed7f
 800d80c:	02020200 	.word	0x02020200
 800d810:	01ff0000 	.word	0x01ff0000
 800d814:	01010280 	.word	0x01010280
 800d818:	52004000 	.word	0x52004000

0800d81c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d81c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d820:	f7ff ff74 	bl	800d70c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d824:	480c      	ldr	r0, [pc, #48]	; (800d858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d826:	490d      	ldr	r1, [pc, #52]	; (800d85c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d828:	4a0d      	ldr	r2, [pc, #52]	; (800d860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d82a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d82c:	e002      	b.n	800d834 <LoopCopyDataInit>

0800d82e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d82e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d832:	3304      	adds	r3, #4

0800d834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d838:	d3f9      	bcc.n	800d82e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d83a:	4a0a      	ldr	r2, [pc, #40]	; (800d864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d83c:	4c0a      	ldr	r4, [pc, #40]	; (800d868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d83e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d840:	e001      	b.n	800d846 <LoopFillZerobss>

0800d842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d844:	3204      	adds	r2, #4

0800d846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d848:	d3fb      	bcc.n	800d842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d84a:	f015 fdfd 	bl	8023448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d84e:	f7f3 fe07 	bl	8001460 <main>
  bx  lr
 800d852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d854:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800d858:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800d85c:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 800d860:	08024014 	.word	0x08024014
  ldr r2, =_sbss
 800d864:	240000cc 	.word	0x240000cc
  ldr r4, =_ebss
 800d868:	240018f4 	.word	0x240018f4

0800d86c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d86c:	e7fe      	b.n	800d86c <ADC3_IRQHandler>
	...

0800d870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d876:	2003      	movs	r0, #3
 800d878:	f001 ffa4 	bl	800f7c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d87c:	f006 ff28 	bl	80146d0 <HAL_RCC_GetSysClockFreq>
 800d880:	4602      	mov	r2, r0
 800d882:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <HAL_Init+0x68>)
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	0a1b      	lsrs	r3, r3, #8
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	4913      	ldr	r1, [pc, #76]	; (800d8dc <HAL_Init+0x6c>)
 800d88e:	5ccb      	ldrb	r3, [r1, r3]
 800d890:	f003 031f 	and.w	r3, r3, #31
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
 800d898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d89a:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <HAL_Init+0x68>)
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	f003 030f 	and.w	r3, r3, #15
 800d8a2:	4a0e      	ldr	r2, [pc, #56]	; (800d8dc <HAL_Init+0x6c>)
 800d8a4:	5cd3      	ldrb	r3, [r2, r3]
 800d8a6:	f003 031f 	and.w	r3, r3, #31
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d8b0:	4a0b      	ldr	r2, [pc, #44]	; (800d8e0 <HAL_Init+0x70>)
 800d8b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d8b4:	4a0b      	ldr	r2, [pc, #44]	; (800d8e4 <HAL_Init+0x74>)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f000 f814 	bl	800d8e8 <HAL_InitTick>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d001      	beq.n	800d8ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e002      	b.n	800d8d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800d8ca:	f7fe ffdf 	bl	800c88c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	58024400 	.word	0x58024400
 800d8dc:	08023b0c 	.word	0x08023b0c
 800d8e0:	2400005c 	.word	0x2400005c
 800d8e4:	24000058 	.word	0x24000058

0800d8e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800d8f0:	4b15      	ldr	r3, [pc, #84]	; (800d948 <HAL_InitTick+0x60>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e021      	b.n	800d940 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800d8fc:	4b13      	ldr	r3, [pc, #76]	; (800d94c <HAL_InitTick+0x64>)
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	4b11      	ldr	r3, [pc, #68]	; (800d948 <HAL_InitTick+0x60>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4619      	mov	r1, r3
 800d906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d90a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d912:	4618      	mov	r0, r3
 800d914:	f001 ff89 	bl	800f82a <HAL_SYSTICK_Config>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e00e      	b.n	800d940 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b0f      	cmp	r3, #15
 800d926:	d80a      	bhi.n	800d93e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d928:	2200      	movs	r2, #0
 800d92a:	6879      	ldr	r1, [r7, #4]
 800d92c:	f04f 30ff 	mov.w	r0, #4294967295
 800d930:	f001 ff53 	bl	800f7da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d934:	4a06      	ldr	r2, [pc, #24]	; (800d950 <HAL_InitTick+0x68>)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e000      	b.n	800d940 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
}
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	24000064 	.word	0x24000064
 800d94c:	24000058 	.word	0x24000058
 800d950:	24000060 	.word	0x24000060

0800d954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d958:	4b06      	ldr	r3, [pc, #24]	; (800d974 <HAL_IncTick+0x20>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	4b06      	ldr	r3, [pc, #24]	; (800d978 <HAL_IncTick+0x24>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4413      	add	r3, r2
 800d964:	4a04      	ldr	r2, [pc, #16]	; (800d978 <HAL_IncTick+0x24>)
 800d966:	6013      	str	r3, [r2, #0]
}
 800d968:	bf00      	nop
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	24000064 	.word	0x24000064
 800d978:	24000f2c 	.word	0x24000f2c

0800d97c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
  return uwTick;
 800d980:	4b03      	ldr	r3, [pc, #12]	; (800d990 <HAL_GetTick+0x14>)
 800d982:	681b      	ldr	r3, [r3, #0]
}
 800d984:	4618      	mov	r0, r3
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	24000f2c 	.word	0x24000f2c

0800d994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d99c:	f7ff ffee 	bl	800d97c <HAL_GetTick>
 800d9a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ac:	d005      	beq.n	800d9ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <HAL_Delay+0x44>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d9ba:	bf00      	nop
 800d9bc:	f7ff ffde 	bl	800d97c <HAL_GetTick>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d8f7      	bhi.n	800d9bc <HAL_Delay+0x28>
  {
  }
}
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	24000064 	.word	0x24000064

0800d9dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800d9e6:	4b07      	ldr	r3, [pc, #28]	; (800da04 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	401a      	ands	r2, r3
 800d9f0:	4904      	ldr	r1, [pc, #16]	; (800da04 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	604b      	str	r3, [r1, #4]
}
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	58000400 	.word	0x58000400

0800da08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	431a      	orrs	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	609a      	str	r2, [r3, #8]
}
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	431a      	orrs	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	609a      	str	r2, [r3, #8]
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800da70:	b480      	push	{r7}
 800da72:	b087      	sub	sp, #28
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3360      	adds	r3, #96	; 0x60
 800da82:	461a      	mov	r2, r3
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4a10      	ldr	r2, [pc, #64]	; (800dad0 <LL_ADC_SetOffset+0x60>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d10b      	bne.n	800daac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800daaa:	e00b      	b.n	800dac4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	430b      	orrs	r3, r1
 800dabe:	431a      	orrs	r2, r3
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	601a      	str	r2, [r3, #0]
}
 800dac4:	bf00      	nop
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	58026000 	.word	0x58026000

0800dad4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	3360      	adds	r3, #96	; 0x60
 800dae2:	461a      	mov	r2, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4413      	add	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f003 031f 	and.w	r3, r3, #31
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	fa01 f303 	lsl.w	r3, r1, r3
 800db20:	431a      	orrs	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	611a      	str	r2, [r3, #16]
}
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
	...

0800db34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a0c      	ldr	r2, [pc, #48]	; (800db74 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d00e      	beq.n	800db66 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3360      	adds	r3, #96	; 0x60
 800db4c:	461a      	mov	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	431a      	orrs	r2, r3
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	601a      	str	r2, [r3, #0]
  }
}
 800db66:	bf00      	nop
 800db68:	371c      	adds	r7, #28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	58026000 	.word	0x58026000

0800db78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <LL_ADC_SetOffsetSaturation+0x40>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d10e      	bne.n	800dbaa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3360      	adds	r3, #96	; 0x60
 800db90:	461a      	mov	r2, r3
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	431a      	orrs	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800dbaa:	bf00      	nop
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	58026000 	.word	0x58026000

0800dbbc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	4a0c      	ldr	r2, [pc, #48]	; (800dbfc <LL_ADC_SetOffsetSign+0x40>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10e      	bne.n	800dbee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3360      	adds	r3, #96	; 0x60
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800dbee:	bf00      	nop
 800dbf0:	371c      	adds	r7, #28
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	58026000 	.word	0x58026000

0800dc00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3360      	adds	r3, #96	; 0x60
 800dc10:	461a      	mov	r2, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	4a0c      	ldr	r2, [pc, #48]	; (800dc50 <LL_ADC_SetOffsetState+0x50>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d108      	bne.n	800dc34 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800dc32:	e007      	b.n	800dc44 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	601a      	str	r2, [r3, #0]
}
 800dc44:	bf00      	nop
 800dc46:	371c      	adds	r7, #28
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	58026000 	.word	0x58026000

0800dc54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e000      	b.n	800dc6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b087      	sub	sp, #28
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3330      	adds	r3, #48	; 0x30
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	f003 030c 	and.w	r3, r3, #12
 800dc96:	4413      	add	r3, r2
 800dc98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f003 031f 	and.w	r3, r3, #31
 800dca4:	211f      	movs	r1, #31
 800dca6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcaa:	43db      	mvns	r3, r3
 800dcac:	401a      	ands	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	0e9b      	lsrs	r3, r3, #26
 800dcb2:	f003 011f 	and.w	r1, r3, #31
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	f003 031f 	and.w	r3, r3, #31
 800dcbc:	fa01 f303 	lsl.w	r3, r1, r3
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800dcc6:	bf00      	nop
 800dcc8:	371c      	adds	r7, #28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b083      	sub	sp, #12
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	f023 0203 	bic.w	r2, r3, #3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	431a      	orrs	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60da      	str	r2, [r3, #12]
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f043 0201 	orr.w	r2, r3, #1
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	60da      	str	r2, [r3, #12]
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a08      	ldr	r2, [pc, #32]	; (800dd48 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d107      	bne.n	800dd3a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	f023 0203 	bic.w	r2, r3, #3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	431a      	orrs	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	60da      	str	r2, [r3, #12]
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	58026000 	.word	0x58026000

0800dd4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b087      	sub	sp, #28
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3314      	adds	r3, #20
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	0e5b      	lsrs	r3, r3, #25
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	f003 0304 	and.w	r3, r3, #4
 800dd68:	4413      	add	r3, r2
 800dd6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	0d1b      	lsrs	r3, r3, #20
 800dd74:	f003 031f 	and.w	r3, r3, #31
 800dd78:	2107      	movs	r1, #7
 800dd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd7e:	43db      	mvns	r3, r3
 800dd80:	401a      	ands	r2, r3
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	0d1b      	lsrs	r3, r3, #20
 800dd86:	f003 031f 	and.w	r3, r3, #31
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd90:	431a      	orrs	r2, r3
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800dd96:	bf00      	nop
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
	...

0800dda4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4a1a      	ldr	r2, [pc, #104]	; (800de1c <LL_ADC_SetChannelSingleDiff+0x78>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d115      	bne.n	800dde4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddc4:	43db      	mvns	r3, r3
 800ddc6:	401a      	ands	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f003 0318 	and.w	r3, r3, #24
 800ddce:	4914      	ldr	r1, [pc, #80]	; (800de20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800ddd0:	40d9      	lsrs	r1, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	400b      	ands	r3, r1
 800ddd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddda:	431a      	orrs	r2, r3
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800dde2:	e014      	b.n	800de0e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddf0:	43db      	mvns	r3, r3
 800ddf2:	401a      	ands	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f003 0318 	and.w	r3, r3, #24
 800ddfa:	4909      	ldr	r1, [pc, #36]	; (800de20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800ddfc:	40d9      	lsrs	r1, r3
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	400b      	ands	r3, r1
 800de02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de06:	431a      	orrs	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800de0e:	bf00      	nop
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	58026000 	.word	0x58026000
 800de20:	000fffff 	.word	0x000fffff

0800de24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f003 031f 	and.w	r3, r3, #31
}
 800de34:	4618      	mov	r0, r3
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689a      	ldr	r2, [r3, #8]
 800de4c:	4b04      	ldr	r3, [pc, #16]	; (800de60 <LL_ADC_DisableDeepPowerDown+0x20>)
 800de4e:	4013      	ands	r3, r2
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	6093      	str	r3, [r2, #8]
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	5fffffc0 	.word	0x5fffffc0

0800de64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de78:	d101      	bne.n	800de7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e000      	b.n	800de80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	689a      	ldr	r2, [r3, #8]
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <LL_ADC_EnableInternalRegulator+0x24>)
 800de9a:	4013      	ands	r3, r2
 800de9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	6fffffc0 	.word	0x6fffffc0

0800deb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dec8:	d101      	bne.n	800dece <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800deca:	2301      	movs	r3, #1
 800decc:	e000      	b.n	800ded0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800dece:	2300      	movs	r3, #0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689a      	ldr	r2, [r3, #8]
 800dee8:	4b05      	ldr	r3, [pc, #20]	; (800df00 <LL_ADC_Enable+0x24>)
 800deea:	4013      	ands	r3, r2
 800deec:	f043 0201 	orr.w	r2, r3, #1
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	7fffffc0 	.word	0x7fffffc0

0800df04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b01      	cmp	r3, #1
 800df16:	d101      	bne.n	800df1c <LL_ADC_IsEnabled+0x18>
 800df18:	2301      	movs	r3, #1
 800df1a:	e000      	b.n	800df1e <LL_ADC_IsEnabled+0x1a>
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
	...

0800df2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	689a      	ldr	r2, [r3, #8]
 800df38:	4b05      	ldr	r3, [pc, #20]	; (800df50 <LL_ADC_REG_StartConversion+0x24>)
 800df3a:	4013      	ands	r3, r2
 800df3c:	f043 0204 	orr.w	r2, r3, #4
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	7fffffc0 	.word	0x7fffffc0

0800df54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	f003 0304 	and.w	r3, r3, #4
 800df64:	2b04      	cmp	r3, #4
 800df66:	d101      	bne.n	800df6c <LL_ADC_REG_IsConversionOngoing+0x18>
 800df68:	2301      	movs	r3, #1
 800df6a:	e000      	b.n	800df6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f003 0308 	and.w	r3, r3, #8
 800df8a:	2b08      	cmp	r3, #8
 800df8c:	d101      	bne.n	800df92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800df8e:	2301      	movs	r3, #1
 800df90:	e000      	b.n	800df94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dfa0:	b590      	push	{r4, r7, lr}
 800dfa2:	b089      	sub	sp, #36	; 0x24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e1ee      	b.n	800e398 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7fe fc79 	bl	800c8c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff ff3f 	bl	800de64 <LL_ADC_IsDeepPowerDownEnabled>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff ff25 	bl	800de40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff ff5a 	bl	800deb4 <LL_ADC_IsInternalRegulatorEnabled>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d114      	bne.n	800e030 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff ff3e 	bl	800de8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e010:	4b8e      	ldr	r3, [pc, #568]	; (800e24c <HAL_ADC_Init+0x2ac>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	099b      	lsrs	r3, r3, #6
 800e016:	4a8e      	ldr	r2, [pc, #568]	; (800e250 <HAL_ADC_Init+0x2b0>)
 800e018:	fba2 2303 	umull	r2, r3, r2, r3
 800e01c:	099b      	lsrs	r3, r3, #6
 800e01e:	3301      	adds	r3, #1
 800e020:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800e022:	e002      	b.n	800e02a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	3b01      	subs	r3, #1
 800e028:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f9      	bne.n	800e024 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff ff3d 	bl	800deb4 <LL_ADC_IsInternalRegulatorEnabled>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10d      	bne.n	800e05c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e044:	f043 0210 	orr.w	r2, r3, #16
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e050:	f043 0201 	orr.w	r2, r3, #1
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff ff77 	bl	800df54 <LL_ADC_REG_IsConversionOngoing>
 800e066:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e06c:	f003 0310 	and.w	r3, r3, #16
 800e070:	2b00      	cmp	r3, #0
 800e072:	f040 8188 	bne.w	800e386 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f040 8184 	bne.w	800e386 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e082:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e086:	f043 0202 	orr.w	r2, r3, #2
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff ff36 	bl	800df04 <LL_ADC_IsEnabled>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d136      	bne.n	800e10c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a6c      	ldr	r2, [pc, #432]	; (800e254 <HAL_ADC_Init+0x2b4>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d004      	beq.n	800e0b2 <HAL_ADC_Init+0x112>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a6a      	ldr	r2, [pc, #424]	; (800e258 <HAL_ADC_Init+0x2b8>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d10e      	bne.n	800e0d0 <HAL_ADC_Init+0x130>
 800e0b2:	4868      	ldr	r0, [pc, #416]	; (800e254 <HAL_ADC_Init+0x2b4>)
 800e0b4:	f7ff ff26 	bl	800df04 <LL_ADC_IsEnabled>
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	4867      	ldr	r0, [pc, #412]	; (800e258 <HAL_ADC_Init+0x2b8>)
 800e0bc:	f7ff ff22 	bl	800df04 <LL_ADC_IsEnabled>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	4323      	orrs	r3, r4
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bf0c      	ite	eq
 800e0c8:	2301      	moveq	r3, #1
 800e0ca:	2300      	movne	r3, #0
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	e008      	b.n	800e0e2 <HAL_ADC_Init+0x142>
 800e0d0:	4862      	ldr	r0, [pc, #392]	; (800e25c <HAL_ADC_Init+0x2bc>)
 800e0d2:	f7ff ff17 	bl	800df04 <LL_ADC_IsEnabled>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bf0c      	ite	eq
 800e0dc:	2301      	moveq	r3, #1
 800e0de:	2300      	movne	r3, #0
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d012      	beq.n	800e10c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a5a      	ldr	r2, [pc, #360]	; (800e254 <HAL_ADC_Init+0x2b4>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d004      	beq.n	800e0fa <HAL_ADC_Init+0x15a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a58      	ldr	r2, [pc, #352]	; (800e258 <HAL_ADC_Init+0x2b8>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d101      	bne.n	800e0fe <HAL_ADC_Init+0x15e>
 800e0fa:	4a59      	ldr	r2, [pc, #356]	; (800e260 <HAL_ADC_Init+0x2c0>)
 800e0fc:	e000      	b.n	800e100 <HAL_ADC_Init+0x160>
 800e0fe:	4a59      	ldr	r2, [pc, #356]	; (800e264 <HAL_ADC_Init+0x2c4>)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	4619      	mov	r1, r3
 800e106:	4610      	mov	r0, r2
 800e108:	f7ff fc7e 	bl	800da08 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a52      	ldr	r2, [pc, #328]	; (800e25c <HAL_ADC_Init+0x2bc>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d129      	bne.n	800e16a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7e5b      	ldrb	r3, [r3, #25]
 800e11a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800e120:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800e126:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2b08      	cmp	r3, #8
 800e12e:	d013      	beq.n	800e158 <HAL_ADC_Init+0x1b8>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	2b0c      	cmp	r3, #12
 800e136:	d00d      	beq.n	800e154 <HAL_ADC_Init+0x1b4>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	2b1c      	cmp	r3, #28
 800e13e:	d007      	beq.n	800e150 <HAL_ADC_Init+0x1b0>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	2b18      	cmp	r3, #24
 800e146:	d101      	bne.n	800e14c <HAL_ADC_Init+0x1ac>
 800e148:	2318      	movs	r3, #24
 800e14a:	e006      	b.n	800e15a <HAL_ADC_Init+0x1ba>
 800e14c:	2300      	movs	r3, #0
 800e14e:	e004      	b.n	800e15a <HAL_ADC_Init+0x1ba>
 800e150:	2310      	movs	r3, #16
 800e152:	e002      	b.n	800e15a <HAL_ADC_Init+0x1ba>
 800e154:	2308      	movs	r3, #8
 800e156:	e000      	b.n	800e15a <HAL_ADC_Init+0x1ba>
 800e158:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800e15a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e162:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800e164:	4313      	orrs	r3, r2
 800e166:	61bb      	str	r3, [r7, #24]
 800e168:	e00e      	b.n	800e188 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	7e5b      	ldrb	r3, [r3, #25]
 800e16e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800e174:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800e17a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e182:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800e184:	4313      	orrs	r3, r2
 800e186:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d106      	bne.n	800e1a0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	3b01      	subs	r3, #1
 800e198:	045b      	lsls	r3, r3, #17
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d009      	beq.n	800e1bc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a26      	ldr	r2, [pc, #152]	; (800e25c <HAL_ADC_Init+0x2bc>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d115      	bne.n	800e1f2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	68da      	ldr	r2, [r3, #12]
 800e1cc:	4b26      	ldr	r3, [pc, #152]	; (800e268 <HAL_ADC_Init+0x2c8>)
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	6812      	ldr	r2, [r2, #0]
 800e1d4:	69b9      	ldr	r1, [r7, #24]
 800e1d6:	430b      	orrs	r3, r1
 800e1d8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	611a      	str	r2, [r3, #16]
 800e1f0:	e009      	b.n	800e206 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68da      	ldr	r2, [r3, #12]
 800e1f8:	4b1c      	ldr	r3, [pc, #112]	; (800e26c <HAL_ADC_Init+0x2cc>)
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6812      	ldr	r2, [r2, #0]
 800e200:	69b9      	ldr	r1, [r7, #24]
 800e202:	430b      	orrs	r3, r1
 800e204:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff fea2 	bl	800df54 <LL_ADC_REG_IsConversionOngoing>
 800e210:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff feaf 	bl	800df7a <LL_ADC_INJ_IsConversionOngoing>
 800e21c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	f040 808e 	bne.w	800e342 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f040 808a 	bne.w	800e342 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <HAL_ADC_Init+0x2bc>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d11b      	bne.n	800e270 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7e1b      	ldrb	r3, [r3, #24]
 800e23c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e244:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800e246:	4313      	orrs	r3, r2
 800e248:	61bb      	str	r3, [r7, #24]
 800e24a:	e018      	b.n	800e27e <HAL_ADC_Init+0x2de>
 800e24c:	24000058 	.word	0x24000058
 800e250:	053e2d63 	.word	0x053e2d63
 800e254:	40022000 	.word	0x40022000
 800e258:	40022100 	.word	0x40022100
 800e25c:	58026000 	.word	0x58026000
 800e260:	40022300 	.word	0x40022300
 800e264:	58026300 	.word	0x58026300
 800e268:	fff04007 	.word	0xfff04007
 800e26c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	7e1b      	ldrb	r3, [r3, #24]
 800e274:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800e27a:	4313      	orrs	r3, r2
 800e27c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68da      	ldr	r2, [r3, #12]
 800e284:	4b46      	ldr	r3, [pc, #280]	; (800e3a0 <HAL_ADC_Init+0x400>)
 800e286:	4013      	ands	r3, r2
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	6812      	ldr	r2, [r2, #0]
 800e28c:	69b9      	ldr	r1, [r7, #24]
 800e28e:	430b      	orrs	r3, r1
 800e290:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d137      	bne.n	800e30c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a3f      	ldr	r2, [pc, #252]	; (800e3a4 <HAL_ADC_Init+0x404>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d116      	bne.n	800e2da <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	691a      	ldr	r2, [r3, #16]
 800e2b2:	4b3d      	ldr	r3, [pc, #244]	; (800e3a8 <HAL_ADC_Init+0x408>)
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e2be:	4311      	orrs	r1, r2
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2c4:	4311      	orrs	r1, r2
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	431a      	orrs	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f042 0201 	orr.w	r2, r2, #1
 800e2d6:	611a      	str	r2, [r3, #16]
 800e2d8:	e020      	b.n	800e31c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	691a      	ldr	r2, [r3, #16]
 800e2e0:	4b32      	ldr	r3, [pc, #200]	; (800e3ac <HAL_ADC_Init+0x40c>)
 800e2e2:	4013      	ands	r3, r2
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e2e8:	3a01      	subs	r2, #1
 800e2ea:	0411      	lsls	r1, r2, #16
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e2f0:	4311      	orrs	r1, r2
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2f6:	4311      	orrs	r1, r2
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	431a      	orrs	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f042 0201 	orr.w	r2, r2, #1
 800e308:	611a      	str	r2, [r3, #16]
 800e30a:	e007      	b.n	800e31c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	691a      	ldr	r2, [r3, #16]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f022 0201 	bic.w	r2, r2, #1
 800e31a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	430a      	orrs	r2, r1
 800e330:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a1b      	ldr	r2, [pc, #108]	; (800e3a4 <HAL_ADC_Init+0x404>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d002      	beq.n	800e342 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 ff7b 	bl	800f238 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d10c      	bne.n	800e364 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e350:	f023 010f 	bic.w	r1, r3, #15
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	1e5a      	subs	r2, r3, #1
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	430a      	orrs	r2, r1
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
 800e362:	e007      	b.n	800e374 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f022 020f 	bic.w	r2, r2, #15
 800e372:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e378:	f023 0303 	bic.w	r3, r3, #3
 800e37c:	f043 0201 	orr.w	r2, r3, #1
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	661a      	str	r2, [r3, #96]	; 0x60
 800e384:	e007      	b.n	800e396 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38a:	f043 0210 	orr.w	r2, r3, #16
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800e396:	7ffb      	ldrb	r3, [r7, #31]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3724      	adds	r7, #36	; 0x24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd90      	pop	{r4, r7, pc}
 800e3a0:	ffffbffc 	.word	0xffffbffc
 800e3a4:	58026000 	.word	0x58026000
 800e3a8:	fc00f81f 	.word	0xfc00f81f
 800e3ac:	fc00f81e 	.word	0xfc00f81e

0800e3b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a60      	ldr	r2, [pc, #384]	; (800e544 <HAL_ADC_Start_DMA+0x194>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d004      	beq.n	800e3d0 <HAL_ADC_Start_DMA+0x20>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a5f      	ldr	r2, [pc, #380]	; (800e548 <HAL_ADC_Start_DMA+0x198>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d101      	bne.n	800e3d4 <HAL_ADC_Start_DMA+0x24>
 800e3d0:	4b5e      	ldr	r3, [pc, #376]	; (800e54c <HAL_ADC_Start_DMA+0x19c>)
 800e3d2:	e000      	b.n	800e3d6 <HAL_ADC_Start_DMA+0x26>
 800e3d4:	4b5e      	ldr	r3, [pc, #376]	; (800e550 <HAL_ADC_Start_DMA+0x1a0>)
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fd24 	bl	800de24 <LL_ADC_GetMultimode>
 800e3dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fdb6 	bl	800df54 <LL_ADC_REG_IsConversionOngoing>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f040 80a2 	bne.w	800e534 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d101      	bne.n	800e3fe <HAL_ADC_Start_DMA+0x4e>
 800e3fa:	2302      	movs	r3, #2
 800e3fc:	e09d      	b.n	800e53a <HAL_ADC_Start_DMA+0x18a>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d006      	beq.n	800e41a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	2b05      	cmp	r3, #5
 800e410:	d003      	beq.n	800e41a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b09      	cmp	r3, #9
 800e416:	f040 8086 	bne.w	800e526 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 fdee 	bl	800effc <ADC_Enable>
 800e420:	4603      	mov	r3, r0
 800e422:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d178      	bne.n	800e51c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e42e:	4b49      	ldr	r3, [pc, #292]	; (800e554 <HAL_ADC_Start_DMA+0x1a4>)
 800e430:	4013      	ands	r3, r2
 800e432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a42      	ldr	r2, [pc, #264]	; (800e548 <HAL_ADC_Start_DMA+0x198>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d002      	beq.n	800e44a <HAL_ADC_Start_DMA+0x9a>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	e000      	b.n	800e44c <HAL_ADC_Start_DMA+0x9c>
 800e44a:	4b3e      	ldr	r3, [pc, #248]	; (800e544 <HAL_ADC_Start_DMA+0x194>)
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	6812      	ldr	r2, [r2, #0]
 800e450:	4293      	cmp	r3, r2
 800e452:	d002      	beq.n	800e45a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e45e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e46a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d006      	beq.n	800e480 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e476:	f023 0206 	bic.w	r2, r3, #6
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	665a      	str	r2, [r3, #100]	; 0x64
 800e47e:	e002      	b.n	800e486 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48a:	4a33      	ldr	r2, [pc, #204]	; (800e558 <HAL_ADC_Start_DMA+0x1a8>)
 800e48c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e492:	4a32      	ldr	r2, [pc, #200]	; (800e55c <HAL_ADC_Start_DMA+0x1ac>)
 800e494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e49a:	4a31      	ldr	r2, [pc, #196]	; (800e560 <HAL_ADC_Start_DMA+0x1b0>)
 800e49c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	221c      	movs	r2, #28
 800e4a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f042 0210 	orr.w	r2, r2, #16
 800e4bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a28      	ldr	r2, [pc, #160]	; (800e564 <HAL_ADC_Start_DMA+0x1b4>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d10f      	bne.n	800e4e8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	f7ff fc1e 	bl	800dd18 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fc09 	bl	800dcf8 <LL_ADC_EnableDMAReq>
 800e4e6:	e007      	b.n	800e4f8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	f7ff fbed 	bl	800dcd2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3340      	adds	r3, #64	; 0x40
 800e502:	4619      	mov	r1, r3
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f001 fcf6 	bl	800fef8 <HAL_DMA_Start_IT>
 800e50c:	4603      	mov	r3, r0
 800e50e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff fd09 	bl	800df2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800e51a:	e00d      	b.n	800e538 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 800e524:	e008      	b.n	800e538 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e532:	e001      	b.n	800e538 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e534:	2302      	movs	r3, #2
 800e536:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	40022000 	.word	0x40022000
 800e548:	40022100 	.word	0x40022100
 800e54c:	40022300 	.word	0x40022300
 800e550:	58026300 	.word	0x58026300
 800e554:	fffff0fe 	.word	0xfffff0fe
 800e558:	0800f111 	.word	0x0800f111
 800e55c:	0800f1e9 	.word	0x0800f1e9
 800e560:	0800f205 	.word	0x0800f205
 800e564:	58026000 	.word	0x58026000

0800e568 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800e584:	bf00      	nop
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e5a4:	b590      	push	{r4, r7, lr}
 800e5a6:	b0b9      	sub	sp, #228	; 0xe4
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5be:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	4aa9      	ldr	r2, [pc, #676]	; (800e86c <HAL_ADC_ConfigChannel+0x2c8>)
 800e5c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d102      	bne.n	800e5d8 <HAL_ADC_ConfigChannel+0x34>
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	f000 bcfa 	b.w	800efcc <HAL_ADC_ConfigChannel+0xa28>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff fcb5 	bl	800df54 <LL_ADC_REG_IsConversionOngoing>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f040 84de 	bne.w	800efae <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a9e      	ldr	r2, [pc, #632]	; (800e870 <HAL_ADC_ConfigChannel+0x2cc>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d033      	beq.n	800e664 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e604:	2b00      	cmp	r3, #0
 800e606:	d108      	bne.n	800e61a <HAL_ADC_ConfigChannel+0x76>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	0e9b      	lsrs	r3, r3, #26
 800e60e:	f003 031f 	and.w	r3, r3, #31
 800e612:	2201      	movs	r2, #1
 800e614:	fa02 f303 	lsl.w	r3, r2, r3
 800e618:	e01d      	b.n	800e656 <HAL_ADC_ConfigChannel+0xb2>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e626:	fa93 f3a3 	rbit	r3, r3
 800e62a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800e62e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800e636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d101      	bne.n	800e642 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800e63e:	2320      	movs	r3, #32
 800e640:	e004      	b.n	800e64c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800e642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e646:	fab3 f383 	clz	r3, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 031f 	and.w	r3, r3, #31
 800e650:	2201      	movs	r2, #1
 800e652:	fa02 f303 	lsl.w	r3, r2, r3
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	6812      	ldr	r2, [r2, #0]
 800e65a:	69d1      	ldr	r1, [r2, #28]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	6812      	ldr	r2, [r2, #0]
 800e660:	430b      	orrs	r3, r1
 800e662:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6818      	ldr	r0, [r3, #0]
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	6859      	ldr	r1, [r3, #4]
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	461a      	mov	r2, r3
 800e672:	f7ff fb02 	bl	800dc7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff fc6a 	bl	800df54 <LL_ADC_REG_IsConversionOngoing>
 800e680:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff fc76 	bl	800df7a <LL_ADC_INJ_IsConversionOngoing>
 800e68e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800e692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e696:	2b00      	cmp	r3, #0
 800e698:	f040 8270 	bne.w	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800e69c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f040 826b 	bne.w	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6818      	ldr	r0, [r3, #0]
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	6819      	ldr	r1, [r3, #0]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	f7ff fb4a 	bl	800dd4c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a6c      	ldr	r2, [pc, #432]	; (800e870 <HAL_ADC_ConfigChannel+0x2cc>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d10d      	bne.n	800e6de <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	695a      	ldr	r2, [r3, #20]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	08db      	lsrs	r3, r3, #3
 800e6ce:	f003 0303 	and.w	r3, r3, #3
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e6dc:	e032      	b.n	800e744 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800e6de:	4b65      	ldr	r3, [pc, #404]	; (800e874 <HAL_ADC_ConfigChannel+0x2d0>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e6e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e6ea:	d10b      	bne.n	800e704 <HAL_ADC_ConfigChannel+0x160>
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	695a      	ldr	r2, [r3, #20]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	089b      	lsrs	r3, r3, #2
 800e6f8:	f003 0307 	and.w	r3, r3, #7
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e702:	e01d      	b.n	800e740 <HAL_ADC_ConfigChannel+0x19c>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	f003 0310 	and.w	r3, r3, #16
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10b      	bne.n	800e72a <HAL_ADC_ConfigChannel+0x186>
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	695a      	ldr	r2, [r3, #20]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	089b      	lsrs	r3, r3, #2
 800e71e:	f003 0307 	and.w	r3, r3, #7
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	fa02 f303 	lsl.w	r3, r2, r3
 800e728:	e00a      	b.n	800e740 <HAL_ADC_ConfigChannel+0x19c>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	695a      	ldr	r2, [r3, #20]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	089b      	lsrs	r3, r3, #2
 800e736:	f003 0304 	and.w	r3, r3, #4
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	fa02 f303 	lsl.w	r3, r2, r3
 800e740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	691b      	ldr	r3, [r3, #16]
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d048      	beq.n	800e7de <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	6919      	ldr	r1, [r3, #16]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e75c:	f7ff f988 	bl	800da70 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a42      	ldr	r2, [pc, #264]	; (800e870 <HAL_ADC_ConfigChannel+0x2cc>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d119      	bne.n	800e79e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	6919      	ldr	r1, [r3, #16]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	461a      	mov	r2, r3
 800e778:	f7ff fa20 	bl	800dbbc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	6919      	ldr	r1, [r3, #16]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d102      	bne.n	800e794 <HAL_ADC_ConfigChannel+0x1f0>
 800e78e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e792:	e000      	b.n	800e796 <HAL_ADC_ConfigChannel+0x1f2>
 800e794:	2300      	movs	r3, #0
 800e796:	461a      	mov	r2, r3
 800e798:	f7ff f9ee 	bl	800db78 <LL_ADC_SetOffsetSaturation>
 800e79c:	e1ee      	b.n	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	6919      	ldr	r1, [r3, #16]
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d102      	bne.n	800e7b6 <HAL_ADC_ConfigChannel+0x212>
 800e7b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7b4:	e000      	b.n	800e7b8 <HAL_ADC_ConfigChannel+0x214>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	f7ff f9bb 	bl	800db34 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6818      	ldr	r0, [r3, #0]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	6919      	ldr	r1, [r3, #16]
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	7e1b      	ldrb	r3, [r3, #24]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d102      	bne.n	800e7d4 <HAL_ADC_ConfigChannel+0x230>
 800e7ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7d2:	e000      	b.n	800e7d6 <HAL_ADC_ConfigChannel+0x232>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7ff f992 	bl	800db00 <LL_ADC_SetDataRightShift>
 800e7dc:	e1ce      	b.n	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a23      	ldr	r2, [pc, #140]	; (800e870 <HAL_ADC_ConfigChannel+0x2cc>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	f040 8181 	bne.w	800eaec <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff f96f 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <HAL_ADC_ConfigChannel+0x272>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2100      	movs	r1, #0
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff f964 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e80c:	4603      	mov	r3, r0
 800e80e:	0e9b      	lsrs	r3, r3, #26
 800e810:	f003 021f 	and.w	r2, r3, #31
 800e814:	e01e      	b.n	800e854 <HAL_ADC_ConfigChannel+0x2b0>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2100      	movs	r1, #0
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff f959 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e822:	4603      	mov	r3, r0
 800e824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e82c:	fa93 f3a3 	rbit	r3, r3
 800e830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800e834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800e83c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e840:	2b00      	cmp	r3, #0
 800e842:	d101      	bne.n	800e848 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800e844:	2320      	movs	r3, #32
 800e846:	e004      	b.n	800e852 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800e848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e84c:	fab3 f383 	clz	r3, r3
 800e850:	b2db      	uxtb	r3, r3
 800e852:	461a      	mov	r2, r3
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10b      	bne.n	800e878 <HAL_ADC_ConfigChannel+0x2d4>
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	0e9b      	lsrs	r3, r3, #26
 800e866:	f003 031f 	and.w	r3, r3, #31
 800e86a:	e01e      	b.n	800e8aa <HAL_ADC_ConfigChannel+0x306>
 800e86c:	47ff0000 	.word	0x47ff0000
 800e870:	58026000 	.word	0x58026000
 800e874:	5c001000 	.word	0x5c001000
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e884:	fa93 f3a3 	rbit	r3, r3
 800e888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800e88c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800e894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d101      	bne.n	800e8a0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800e89c:	2320      	movs	r3, #32
 800e89e:	e004      	b.n	800e8aa <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800e8a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e8a4:	fab3 f383 	clz	r3, r3
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d106      	bne.n	800e8bc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff f9a2 	bl	800dc00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff f906 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d10a      	bne.n	800e8e8 <HAL_ADC_ConfigChannel+0x344>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff f8fb 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	0e9b      	lsrs	r3, r3, #26
 800e8e2:	f003 021f 	and.w	r2, r3, #31
 800e8e6:	e01e      	b.n	800e926 <HAL_ADC_ConfigChannel+0x382>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2101      	movs	r1, #1
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff f8f0 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e8fe:	fa93 f3a3 	rbit	r3, r3
 800e902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800e906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e90a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800e90e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e912:	2b00      	cmp	r3, #0
 800e914:	d101      	bne.n	800e91a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800e916:	2320      	movs	r3, #32
 800e918:	e004      	b.n	800e924 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800e91a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e91e:	fab3 f383 	clz	r3, r3
 800e922:	b2db      	uxtb	r3, r3
 800e924:	461a      	mov	r2, r3
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d105      	bne.n	800e93e <HAL_ADC_ConfigChannel+0x39a>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	0e9b      	lsrs	r3, r3, #26
 800e938:	f003 031f 	and.w	r3, r3, #31
 800e93c:	e018      	b.n	800e970 <HAL_ADC_ConfigChannel+0x3cc>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e94a:	fa93 f3a3 	rbit	r3, r3
 800e94e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800e952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800e95a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800e962:	2320      	movs	r3, #32
 800e964:	e004      	b.n	800e970 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800e966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e96a:	fab3 f383 	clz	r3, r3
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	429a      	cmp	r2, r3
 800e972:	d106      	bne.n	800e982 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2200      	movs	r2, #0
 800e97a:	2101      	movs	r1, #1
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7ff f93f 	bl	800dc00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2102      	movs	r1, #2
 800e988:	4618      	mov	r0, r3
 800e98a:	f7ff f8a3 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e98e:	4603      	mov	r3, r0
 800e990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <HAL_ADC_ConfigChannel+0x40a>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2102      	movs	r1, #2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff f898 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	0e9b      	lsrs	r3, r3, #26
 800e9a8:	f003 021f 	and.w	r2, r3, #31
 800e9ac:	e01e      	b.n	800e9ec <HAL_ADC_ConfigChannel+0x448>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2102      	movs	r1, #2
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff f88d 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9c4:	fa93 f3a3 	rbit	r3, r3
 800e9c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800e9cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e9d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800e9d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800e9dc:	2320      	movs	r3, #32
 800e9de:	e004      	b.n	800e9ea <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800e9e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9e4:	fab3 f383 	clz	r3, r3
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d105      	bne.n	800ea04 <HAL_ADC_ConfigChannel+0x460>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	0e9b      	lsrs	r3, r3, #26
 800e9fe:	f003 031f 	and.w	r3, r3, #31
 800ea02:	e014      	b.n	800ea2e <HAL_ADC_ConfigChannel+0x48a>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea0c:	fa93 f3a3 	rbit	r3, r3
 800ea10:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800ea12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800ea18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800ea20:	2320      	movs	r3, #32
 800ea22:	e004      	b.n	800ea2e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800ea24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea28:	fab3 f383 	clz	r3, r3
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d106      	bne.n	800ea40 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2200      	movs	r2, #0
 800ea38:	2102      	movs	r1, #2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff f8e0 	bl	800dc00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2103      	movs	r1, #3
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7ff f844 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10a      	bne.n	800ea6c <HAL_ADC_ConfigChannel+0x4c8>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2103      	movs	r1, #3
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff f839 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800ea62:	4603      	mov	r3, r0
 800ea64:	0e9b      	lsrs	r3, r3, #26
 800ea66:	f003 021f 	and.w	r2, r3, #31
 800ea6a:	e017      	b.n	800ea9c <HAL_ADC_ConfigChannel+0x4f8>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2103      	movs	r1, #3
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff f82e 	bl	800dad4 <LL_ADC_GetOffsetChannel>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea7e:	fa93 f3a3 	rbit	r3, r3
 800ea82:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800ea84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea86:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800ea88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800ea8e:	2320      	movs	r3, #32
 800ea90:	e003      	b.n	800ea9a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800ea92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea94:	fab3 f383 	clz	r3, r3
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d105      	bne.n	800eab4 <HAL_ADC_ConfigChannel+0x510>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	0e9b      	lsrs	r3, r3, #26
 800eaae:	f003 031f 	and.w	r3, r3, #31
 800eab2:	e011      	b.n	800ead8 <HAL_ADC_ConfigChannel+0x534>
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eaba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eabc:	fa93 f3a3 	rbit	r3, r3
 800eac0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800eac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eac4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800eac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d101      	bne.n	800ead0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800eacc:	2320      	movs	r3, #32
 800eace:	e003      	b.n	800ead8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800ead0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ead2:	fab3 f383 	clz	r3, r3
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	429a      	cmp	r2, r3
 800eada:	d14f      	bne.n	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2200      	movs	r2, #0
 800eae2:	2103      	movs	r1, #3
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff f88b 	bl	800dc00 <LL_ADC_SetOffsetState>
 800eaea:	e047      	b.n	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	069b      	lsls	r3, r3, #26
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d107      	bne.n	800eb10 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800eb0e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	069b      	lsls	r3, r3, #26
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d107      	bne.n	800eb34 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800eb32:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	069b      	lsls	r3, r3, #26
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d107      	bne.n	800eb58 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800eb56:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	069b      	lsls	r3, r3, #26
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d107      	bne.n	800eb7c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800eb7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff f9bf 	bl	800df04 <LL_ADC_IsEnabled>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f040 8219 	bne.w	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6818      	ldr	r0, [r3, #0]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	6819      	ldr	r1, [r3, #0]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	f7ff f902 	bl	800dda4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	4aa1      	ldr	r2, [pc, #644]	; (800ee2c <HAL_ADC_ConfigChannel+0x888>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	f040 812e 	bne.w	800ee08 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10b      	bne.n	800ebd4 <HAL_ADC_ConfigChannel+0x630>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	0e9b      	lsrs	r3, r3, #26
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	f003 031f 	and.w	r3, r3, #31
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	bf94      	ite	ls
 800ebcc:	2301      	movls	r3, #1
 800ebce:	2300      	movhi	r3, #0
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	e019      	b.n	800ec08 <HAL_ADC_ConfigChannel+0x664>
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ebda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebdc:	fa93 f3a3 	rbit	r3, r3
 800ebe0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800ebe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800ebe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d101      	bne.n	800ebf0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800ebec:	2320      	movs	r3, #32
 800ebee:	e003      	b.n	800ebf8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800ebf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebf2:	fab3 f383 	clz	r3, r3
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	f003 031f 	and.w	r3, r3, #31
 800ebfe:	2b09      	cmp	r3, #9
 800ec00:	bf94      	ite	ls
 800ec02:	2301      	movls	r3, #1
 800ec04:	2300      	movhi	r3, #0
 800ec06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d079      	beq.n	800ed00 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d107      	bne.n	800ec28 <HAL_ADC_ConfigChannel+0x684>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	0e9b      	lsrs	r3, r3, #26
 800ec1e:	3301      	adds	r3, #1
 800ec20:	069b      	lsls	r3, r3, #26
 800ec22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ec26:	e015      	b.n	800ec54 <HAL_ADC_ConfigChannel+0x6b0>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec30:	fa93 f3a3 	rbit	r3, r3
 800ec34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800ec36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800ec3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800ec40:	2320      	movs	r3, #32
 800ec42:	e003      	b.n	800ec4c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800ec44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec46:	fab3 f383 	clz	r3, r3
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	069b      	lsls	r3, r3, #26
 800ec50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d109      	bne.n	800ec74 <HAL_ADC_ConfigChannel+0x6d0>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	0e9b      	lsrs	r3, r3, #26
 800ec66:	3301      	adds	r3, #1
 800ec68:	f003 031f 	and.w	r3, r3, #31
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec72:	e017      	b.n	800eca4 <HAL_ADC_ConfigChannel+0x700>
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7c:	fa93 f3a3 	rbit	r3, r3
 800ec80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800ec82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800ec86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800ec8c:	2320      	movs	r3, #32
 800ec8e:	e003      	b.n	800ec98 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800ec90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec92:	fab3 f383 	clz	r3, r3
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	3301      	adds	r3, #1
 800ec9a:	f003 031f 	and.w	r3, r3, #31
 800ec9e:	2101      	movs	r1, #1
 800eca0:	fa01 f303 	lsl.w	r3, r1, r3
 800eca4:	ea42 0103 	orr.w	r1, r2, r3
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d10a      	bne.n	800ecca <HAL_ADC_ConfigChannel+0x726>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	0e9b      	lsrs	r3, r3, #26
 800ecba:	3301      	adds	r3, #1
 800ecbc:	f003 021f 	and.w	r2, r3, #31
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	005b      	lsls	r3, r3, #1
 800ecc4:	4413      	add	r3, r2
 800ecc6:	051b      	lsls	r3, r3, #20
 800ecc8:	e018      	b.n	800ecfc <HAL_ADC_ConfigChannel+0x758>
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd2:	fa93 f3a3 	rbit	r3, r3
 800ecd6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800ecdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800ece2:	2320      	movs	r3, #32
 800ece4:	e003      	b.n	800ecee <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800ece6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece8:	fab3 f383 	clz	r3, r3
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	3301      	adds	r3, #1
 800ecf0:	f003 021f 	and.w	r2, r3, #31
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	e07e      	b.n	800edfe <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d107      	bne.n	800ed1c <HAL_ADC_ConfigChannel+0x778>
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	0e9b      	lsrs	r3, r3, #26
 800ed12:	3301      	adds	r3, #1
 800ed14:	069b      	lsls	r3, r3, #26
 800ed16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ed1a:	e015      	b.n	800ed48 <HAL_ADC_ConfigChannel+0x7a4>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed24:	fa93 f3a3 	rbit	r3, r3
 800ed28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d101      	bne.n	800ed38 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800ed34:	2320      	movs	r3, #32
 800ed36:	e003      	b.n	800ed40 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	fab3 f383 	clz	r3, r3
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	3301      	adds	r3, #1
 800ed42:	069b      	lsls	r3, r3, #26
 800ed44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d109      	bne.n	800ed68 <HAL_ADC_ConfigChannel+0x7c4>
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	0e9b      	lsrs	r3, r3, #26
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	f003 031f 	and.w	r3, r3, #31
 800ed60:	2101      	movs	r1, #1
 800ed62:	fa01 f303 	lsl.w	r3, r1, r3
 800ed66:	e017      	b.n	800ed98 <HAL_ADC_ConfigChannel+0x7f4>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	fa93 f3a3 	rbit	r3, r3
 800ed74:	61bb      	str	r3, [r7, #24]
  return result;
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800ed80:	2320      	movs	r3, #32
 800ed82:	e003      	b.n	800ed8c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	fab3 f383 	clz	r3, r3
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	f003 031f 	and.w	r3, r3, #31
 800ed92:	2101      	movs	r1, #1
 800ed94:	fa01 f303 	lsl.w	r3, r1, r3
 800ed98:	ea42 0103 	orr.w	r1, r2, r3
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10d      	bne.n	800edc4 <HAL_ADC_ConfigChannel+0x820>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	0e9b      	lsrs	r3, r3, #26
 800edae:	3301      	adds	r3, #1
 800edb0:	f003 021f 	and.w	r2, r3, #31
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	3b1e      	subs	r3, #30
 800edbc:	051b      	lsls	r3, r3, #20
 800edbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800edc2:	e01b      	b.n	800edfc <HAL_ADC_ConfigChannel+0x858>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	fa93 f3a3 	rbit	r3, r3
 800edd0:	60fb      	str	r3, [r7, #12]
  return result;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d101      	bne.n	800ede0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800eddc:	2320      	movs	r3, #32
 800edde:	e003      	b.n	800ede8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	fab3 f383 	clz	r3, r3
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	3301      	adds	r3, #1
 800edea:	f003 021f 	and.w	r2, r3, #31
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	3b1e      	subs	r3, #30
 800edf6:	051b      	lsls	r3, r3, #20
 800edf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800edfc:	430b      	orrs	r3, r1
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	6892      	ldr	r2, [r2, #8]
 800ee02:	4619      	mov	r1, r3
 800ee04:	f7fe ffa2 	bl	800dd4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f280 80d7 	bge.w	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a06      	ldr	r2, [pc, #24]	; (800ee30 <HAL_ADC_ConfigChannel+0x88c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d004      	beq.n	800ee26 <HAL_ADC_ConfigChannel+0x882>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a04      	ldr	r2, [pc, #16]	; (800ee34 <HAL_ADC_ConfigChannel+0x890>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d10a      	bne.n	800ee3c <HAL_ADC_ConfigChannel+0x898>
 800ee26:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <HAL_ADC_ConfigChannel+0x894>)
 800ee28:	e009      	b.n	800ee3e <HAL_ADC_ConfigChannel+0x89a>
 800ee2a:	bf00      	nop
 800ee2c:	47ff0000 	.word	0x47ff0000
 800ee30:	40022000 	.word	0x40022000
 800ee34:	40022100 	.word	0x40022100
 800ee38:	40022300 	.word	0x40022300
 800ee3c:	4b65      	ldr	r3, [pc, #404]	; (800efd4 <HAL_ADC_ConfigChannel+0xa30>)
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe fe08 	bl	800da54 <LL_ADC_GetCommonPathInternalCh>
 800ee44:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a62      	ldr	r2, [pc, #392]	; (800efd8 <HAL_ADC_ConfigChannel+0xa34>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d004      	beq.n	800ee5c <HAL_ADC_ConfigChannel+0x8b8>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a61      	ldr	r2, [pc, #388]	; (800efdc <HAL_ADC_ConfigChannel+0xa38>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d10e      	bne.n	800ee7a <HAL_ADC_ConfigChannel+0x8d6>
 800ee5c:	485e      	ldr	r0, [pc, #376]	; (800efd8 <HAL_ADC_ConfigChannel+0xa34>)
 800ee5e:	f7ff f851 	bl	800df04 <LL_ADC_IsEnabled>
 800ee62:	4604      	mov	r4, r0
 800ee64:	485d      	ldr	r0, [pc, #372]	; (800efdc <HAL_ADC_ConfigChannel+0xa38>)
 800ee66:	f7ff f84d 	bl	800df04 <LL_ADC_IsEnabled>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	4323      	orrs	r3, r4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	bf0c      	ite	eq
 800ee72:	2301      	moveq	r3, #1
 800ee74:	2300      	movne	r3, #0
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	e008      	b.n	800ee8c <HAL_ADC_ConfigChannel+0x8e8>
 800ee7a:	4859      	ldr	r0, [pc, #356]	; (800efe0 <HAL_ADC_ConfigChannel+0xa3c>)
 800ee7c:	f7ff f842 	bl	800df04 <LL_ADC_IsEnabled>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	bf0c      	ite	eq
 800ee86:	2301      	moveq	r3, #1
 800ee88:	2300      	movne	r3, #0
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 8084 	beq.w	800ef9a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a53      	ldr	r2, [pc, #332]	; (800efe4 <HAL_ADC_ConfigChannel+0xa40>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d132      	bne.n	800ef02 <HAL_ADC_ConfigChannel+0x95e>
 800ee9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d12c      	bne.n	800ef02 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a4c      	ldr	r2, [pc, #304]	; (800efe0 <HAL_ADC_ConfigChannel+0xa3c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	f040 8086 	bne.w	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a47      	ldr	r2, [pc, #284]	; (800efd8 <HAL_ADC_ConfigChannel+0xa34>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <HAL_ADC_ConfigChannel+0x924>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a46      	ldr	r2, [pc, #280]	; (800efdc <HAL_ADC_ConfigChannel+0xa38>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d101      	bne.n	800eecc <HAL_ADC_ConfigChannel+0x928>
 800eec8:	4a47      	ldr	r2, [pc, #284]	; (800efe8 <HAL_ADC_ConfigChannel+0xa44>)
 800eeca:	e000      	b.n	800eece <HAL_ADC_ConfigChannel+0x92a>
 800eecc:	4a41      	ldr	r2, [pc, #260]	; (800efd4 <HAL_ADC_ConfigChannel+0xa30>)
 800eece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eed6:	4619      	mov	r1, r3
 800eed8:	4610      	mov	r0, r2
 800eeda:	f7fe fda8 	bl	800da2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800eede:	4b43      	ldr	r3, [pc, #268]	; (800efec <HAL_ADC_ConfigChannel+0xa48>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	099b      	lsrs	r3, r3, #6
 800eee4:	4a42      	ldr	r2, [pc, #264]	; (800eff0 <HAL_ADC_ConfigChannel+0xa4c>)
 800eee6:	fba2 2303 	umull	r2, r3, r2, r3
 800eeea:	099b      	lsrs	r3, r3, #6
 800eeec:	3301      	adds	r3, #1
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800eef2:	e002      	b.n	800eefa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1f9      	bne.n	800eef4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ef00:	e05e      	b.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a3b      	ldr	r2, [pc, #236]	; (800eff4 <HAL_ADC_ConfigChannel+0xa50>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d120      	bne.n	800ef4e <HAL_ADC_ConfigChannel+0x9aa>
 800ef0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ef10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d11a      	bne.n	800ef4e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a30      	ldr	r2, [pc, #192]	; (800efe0 <HAL_ADC_ConfigChannel+0xa3c>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d14e      	bne.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a2c      	ldr	r2, [pc, #176]	; (800efd8 <HAL_ADC_ConfigChannel+0xa34>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d004      	beq.n	800ef36 <HAL_ADC_ConfigChannel+0x992>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a2a      	ldr	r2, [pc, #168]	; (800efdc <HAL_ADC_ConfigChannel+0xa38>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d101      	bne.n	800ef3a <HAL_ADC_ConfigChannel+0x996>
 800ef36:	4a2c      	ldr	r2, [pc, #176]	; (800efe8 <HAL_ADC_ConfigChannel+0xa44>)
 800ef38:	e000      	b.n	800ef3c <HAL_ADC_ConfigChannel+0x998>
 800ef3a:	4a26      	ldr	r2, [pc, #152]	; (800efd4 <HAL_ADC_ConfigChannel+0xa30>)
 800ef3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ef40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f7fe fd71 	bl	800da2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ef4c:	e038      	b.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4a29      	ldr	r2, [pc, #164]	; (800eff8 <HAL_ADC_ConfigChannel+0xa54>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d133      	bne.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
 800ef58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ef5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d12d      	bne.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a1d      	ldr	r2, [pc, #116]	; (800efe0 <HAL_ADC_ConfigChannel+0xa3c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d128      	bne.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a19      	ldr	r2, [pc, #100]	; (800efd8 <HAL_ADC_ConfigChannel+0xa34>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d004      	beq.n	800ef82 <HAL_ADC_ConfigChannel+0x9de>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a17      	ldr	r2, [pc, #92]	; (800efdc <HAL_ADC_ConfigChannel+0xa38>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d101      	bne.n	800ef86 <HAL_ADC_ConfigChannel+0x9e2>
 800ef82:	4a19      	ldr	r2, [pc, #100]	; (800efe8 <HAL_ADC_ConfigChannel+0xa44>)
 800ef84:	e000      	b.n	800ef88 <HAL_ADC_ConfigChannel+0x9e4>
 800ef86:	4a13      	ldr	r2, [pc, #76]	; (800efd4 <HAL_ADC_ConfigChannel+0xa30>)
 800ef88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ef8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ef90:	4619      	mov	r1, r3
 800ef92:	4610      	mov	r0, r2
 800ef94:	f7fe fd4b 	bl	800da2e <LL_ADC_SetCommonPathInternalCh>
 800ef98:	e012      	b.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef9e:	f043 0220 	orr.w	r2, r3, #32
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800efa6:	2301      	movs	r3, #1
 800efa8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800efac:	e008      	b.n	800efc0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efb2:	f043 0220 	orr.w	r2, r3, #32
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800efc8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800efcc:	4618      	mov	r0, r3
 800efce:	37e4      	adds	r7, #228	; 0xe4
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd90      	pop	{r4, r7, pc}
 800efd4:	58026300 	.word	0x58026300
 800efd8:	40022000 	.word	0x40022000
 800efdc:	40022100 	.word	0x40022100
 800efe0:	58026000 	.word	0x58026000
 800efe4:	c7520000 	.word	0xc7520000
 800efe8:	40022300 	.word	0x40022300
 800efec:	24000058 	.word	0x24000058
 800eff0:	053e2d63 	.word	0x053e2d63
 800eff4:	c3210000 	.word	0xc3210000
 800eff8:	cb840000 	.word	0xcb840000

0800effc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fe ff7b 	bl	800df04 <LL_ADC_IsEnabled>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d16e      	bne.n	800f0f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689a      	ldr	r2, [r3, #8]
 800f01a:	4b38      	ldr	r3, [pc, #224]	; (800f0fc <ADC_Enable+0x100>)
 800f01c:	4013      	ands	r3, r2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00d      	beq.n	800f03e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f026:	f043 0210 	orr.w	r2, r3, #16
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f032:	f043 0201 	orr.w	r2, r3, #1
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800f03a:	2301      	movs	r3, #1
 800f03c:	e05a      	b.n	800f0f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe ff4a 	bl	800dedc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800f048:	f7fe fc98 	bl	800d97c <HAL_GetTick>
 800f04c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a2b      	ldr	r2, [pc, #172]	; (800f100 <ADC_Enable+0x104>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d004      	beq.n	800f062 <ADC_Enable+0x66>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a29      	ldr	r2, [pc, #164]	; (800f104 <ADC_Enable+0x108>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d101      	bne.n	800f066 <ADC_Enable+0x6a>
 800f062:	4b29      	ldr	r3, [pc, #164]	; (800f108 <ADC_Enable+0x10c>)
 800f064:	e000      	b.n	800f068 <ADC_Enable+0x6c>
 800f066:	4b29      	ldr	r3, [pc, #164]	; (800f10c <ADC_Enable+0x110>)
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe fedb 	bl	800de24 <LL_ADC_GetMultimode>
 800f06e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a23      	ldr	r2, [pc, #140]	; (800f104 <ADC_Enable+0x108>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d002      	beq.n	800f080 <ADC_Enable+0x84>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	e000      	b.n	800f082 <ADC_Enable+0x86>
 800f080:	4b1f      	ldr	r3, [pc, #124]	; (800f100 <ADC_Enable+0x104>)
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	6812      	ldr	r2, [r2, #0]
 800f086:	4293      	cmp	r3, r2
 800f088:	d02c      	beq.n	800f0e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d130      	bne.n	800f0f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f090:	e028      	b.n	800f0e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe ff34 	bl	800df04 <LL_ADC_IsEnabled>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d104      	bne.n	800f0ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fe ff18 	bl	800dedc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f0ac:	f7fe fc66 	bl	800d97c <HAL_GetTick>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	1ad3      	subs	r3, r2, r3
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	d914      	bls.n	800f0e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 0301 	and.w	r3, r3, #1
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d00d      	beq.n	800f0e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0cc:	f043 0210 	orr.w	r2, r3, #16
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d8:	f043 0201 	orr.w	r2, r3, #1
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e007      	b.n	800f0f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d1cf      	bne.n	800f092 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	8000003f 	.word	0x8000003f
 800f100:	40022000 	.word	0x40022000
 800f104:	40022100 	.word	0x40022100
 800f108:	40022300 	.word	0x40022300
 800f10c:	58026300 	.word	0x58026300

0800f110 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f11c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f126:	2b00      	cmp	r3, #0
 800f128:	d14b      	bne.n	800f1c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f12e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f003 0308 	and.w	r3, r3, #8
 800f140:	2b00      	cmp	r3, #0
 800f142:	d021      	beq.n	800f188 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fe fd83 	bl	800dc54 <LL_ADC_REG_IsTriggerSourceSWStart>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d032      	beq.n	800f1ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d12b      	bne.n	800f1ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f176:	2b00      	cmp	r3, #0
 800f178:	d11f      	bne.n	800f1ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f17e:	f043 0201 	orr.w	r2, r3, #1
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	661a      	str	r2, [r3, #96]	; 0x60
 800f186:	e018      	b.n	800f1ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	f003 0303 	and.w	r3, r3, #3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d111      	bne.n	800f1ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f19a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d105      	bne.n	800f1ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1b2:	f043 0201 	orr.w	r2, r3, #1
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f7ff f9d4 	bl	800e568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f1c0:	e00e      	b.n	800f1e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1c6:	f003 0310 	and.w	r3, r3, #16
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f7ff f9de 	bl	800e590 <HAL_ADC_ErrorCallback>
}
 800f1d4:	e004      	b.n	800f1e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	4798      	blx	r3
}
 800f1e0:	bf00      	nop
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7ff f9c0 	bl	800e57c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f1fc:	bf00      	nop
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f210:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f222:	f043 0204 	orr.w	r2, r3, #4
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f7ff f9b0 	bl	800e590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f230:	bf00      	nop
 800f232:	3710      	adds	r7, #16
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a6c      	ldr	r2, [pc, #432]	; (800f3f8 <ADC_ConfigureBoostMode+0x1c0>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d004      	beq.n	800f254 <ADC_ConfigureBoostMode+0x1c>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a6b      	ldr	r2, [pc, #428]	; (800f3fc <ADC_ConfigureBoostMode+0x1c4>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d109      	bne.n	800f268 <ADC_ConfigureBoostMode+0x30>
 800f254:	4b6a      	ldr	r3, [pc, #424]	; (800f400 <ADC_ConfigureBoostMode+0x1c8>)
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bf14      	ite	ne
 800f260:	2301      	movne	r3, #1
 800f262:	2300      	moveq	r3, #0
 800f264:	b2db      	uxtb	r3, r3
 800f266:	e008      	b.n	800f27a <ADC_ConfigureBoostMode+0x42>
 800f268:	4b66      	ldr	r3, [pc, #408]	; (800f404 <ADC_ConfigureBoostMode+0x1cc>)
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f270:	2b00      	cmp	r3, #0
 800f272:	bf14      	ite	ne
 800f274:	2301      	movne	r3, #1
 800f276:	2300      	moveq	r3, #0
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d01c      	beq.n	800f2b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800f27e:	f005 fba1 	bl	80149c4 <HAL_RCC_GetHCLKFreq>
 800f282:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f28c:	d010      	beq.n	800f2b0 <ADC_ConfigureBoostMode+0x78>
 800f28e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f292:	d873      	bhi.n	800f37c <ADC_ConfigureBoostMode+0x144>
 800f294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f298:	d002      	beq.n	800f2a0 <ADC_ConfigureBoostMode+0x68>
 800f29a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f29e:	d16d      	bne.n	800f37c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	0c1b      	lsrs	r3, r3, #16
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2ac:	60fb      	str	r3, [r7, #12]
        break;
 800f2ae:	e068      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	089b      	lsrs	r3, r3, #2
 800f2b4:	60fb      	str	r3, [r7, #12]
        break;
 800f2b6:	e064      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800f2b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f2bc:	f04f 0100 	mov.w	r1, #0
 800f2c0:	f006 fd66 	bl	8015d90 <HAL_RCCEx_GetPeriphCLKFreq>
 800f2c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800f2ce:	d051      	beq.n	800f374 <ADC_ConfigureBoostMode+0x13c>
 800f2d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800f2d4:	d854      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f2d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800f2da:	d047      	beq.n	800f36c <ADC_ConfigureBoostMode+0x134>
 800f2dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800f2e0:	d84e      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f2e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800f2e6:	d03d      	beq.n	800f364 <ADC_ConfigureBoostMode+0x12c>
 800f2e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800f2ec:	d848      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f2ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2f2:	d033      	beq.n	800f35c <ADC_ConfigureBoostMode+0x124>
 800f2f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2f8:	d842      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f2fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800f2fe:	d029      	beq.n	800f354 <ADC_ConfigureBoostMode+0x11c>
 800f300:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800f304:	d83c      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f306:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800f30a:	d01a      	beq.n	800f342 <ADC_ConfigureBoostMode+0x10a>
 800f30c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800f310:	d836      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f312:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800f316:	d014      	beq.n	800f342 <ADC_ConfigureBoostMode+0x10a>
 800f318:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800f31c:	d830      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f322:	d00e      	beq.n	800f342 <ADC_ConfigureBoostMode+0x10a>
 800f324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f328:	d82a      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f32a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f32e:	d008      	beq.n	800f342 <ADC_ConfigureBoostMode+0x10a>
 800f330:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f334:	d824      	bhi.n	800f380 <ADC_ConfigureBoostMode+0x148>
 800f336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f33a:	d002      	beq.n	800f342 <ADC_ConfigureBoostMode+0x10a>
 800f33c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f340:	d11e      	bne.n	800f380 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	0c9b      	lsrs	r3, r3, #18
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f350:	60fb      	str	r3, [r7, #12]
        break;
 800f352:	e016      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	091b      	lsrs	r3, r3, #4
 800f358:	60fb      	str	r3, [r7, #12]
        break;
 800f35a:	e012      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	095b      	lsrs	r3, r3, #5
 800f360:	60fb      	str	r3, [r7, #12]
        break;
 800f362:	e00e      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	099b      	lsrs	r3, r3, #6
 800f368:	60fb      	str	r3, [r7, #12]
        break;
 800f36a:	e00a      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	09db      	lsrs	r3, r3, #7
 800f370:	60fb      	str	r3, [r7, #12]
        break;
 800f372:	e006      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	0a1b      	lsrs	r3, r3, #8
 800f378:	60fb      	str	r3, [r7, #12]
        break;
 800f37a:	e002      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
        break;
 800f37c:	bf00      	nop
 800f37e:	e000      	b.n	800f382 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800f380:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	085b      	lsrs	r3, r3, #1
 800f386:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4a1f      	ldr	r2, [pc, #124]	; (800f408 <ADC_ConfigureBoostMode+0x1d0>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d808      	bhi.n	800f3a2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	689a      	ldr	r2, [r3, #8]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f39e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800f3a0:	e025      	b.n	800f3ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	4a19      	ldr	r2, [pc, #100]	; (800f40c <ADC_ConfigureBoostMode+0x1d4>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d80a      	bhi.n	800f3c0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3bc:	609a      	str	r2, [r3, #8]
}
 800f3be:	e016      	b.n	800f3ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	4a13      	ldr	r2, [pc, #76]	; (800f410 <ADC_ConfigureBoostMode+0x1d8>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d80a      	bhi.n	800f3de <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3da:	609a      	str	r2, [r3, #8]
}
 800f3dc:	e007      	b.n	800f3ee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	689a      	ldr	r2, [r3, #8]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f3ec:	609a      	str	r2, [r3, #8]
}
 800f3ee:	bf00      	nop
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	40022000 	.word	0x40022000
 800f3fc:	40022100 	.word	0x40022100
 800f400:	40022300 	.word	0x40022300
 800f404:	58026300 	.word	0x58026300
 800f408:	005f5e10 	.word	0x005f5e10
 800f40c:	00bebc20 	.word	0x00bebc20
 800f410:	017d7840 	.word	0x017d7840

0800f414 <LL_ADC_IsEnabled>:
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	2b01      	cmp	r3, #1
 800f426:	d101      	bne.n	800f42c <LL_ADC_IsEnabled+0x18>
 800f428:	2301      	movs	r3, #1
 800f42a:	e000      	b.n	800f42e <LL_ADC_IsEnabled+0x1a>
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr

0800f43a <LL_ADC_REG_IsConversionOngoing>:
{
 800f43a:	b480      	push	{r7}
 800f43c:	b083      	sub	sp, #12
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b04      	cmp	r3, #4
 800f44c:	d101      	bne.n	800f452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800f44e:	2301      	movs	r3, #1
 800f450:	e000      	b.n	800f454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800f460:	b590      	push	{r4, r7, lr}
 800f462:	b0a3      	sub	sp, #140	; 0x8c
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f46a:	2300      	movs	r3, #0
 800f46c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f476:	2b01      	cmp	r3, #1
 800f478:	d101      	bne.n	800f47e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800f47a:	2302      	movs	r3, #2
 800f47c:	e0c1      	b.n	800f602 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2201      	movs	r2, #1
 800f482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800f486:	2300      	movs	r3, #0
 800f488:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a5e      	ldr	r2, [pc, #376]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d102      	bne.n	800f49e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800f498:	4b5d      	ldr	r3, [pc, #372]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	e001      	b.n	800f4a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10b      	bne.n	800f4c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4ac:	f043 0220 	orr.w	r2, r3, #32
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0a0      	b.n	800f602 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff ffb9 	bl	800f43a <LL_ADC_REG_IsConversionOngoing>
 800f4c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff ffb2 	bl	800f43a <LL_ADC_REG_IsConversionOngoing>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f040 8081 	bne.w	800f5e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800f4de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d17c      	bne.n	800f5e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a48      	ldr	r2, [pc, #288]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d004      	beq.n	800f4fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4a46      	ldr	r2, [pc, #280]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d101      	bne.n	800f4fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800f4fa:	4b46      	ldr	r3, [pc, #280]	; (800f614 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800f4fc:	e000      	b.n	800f500 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800f4fe:	4b46      	ldr	r3, [pc, #280]	; (800f618 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800f500:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d039      	beq.n	800f57e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800f50a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	431a      	orrs	r2, r3
 800f518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f51a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a3a      	ldr	r2, [pc, #232]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d004      	beq.n	800f530 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a39      	ldr	r2, [pc, #228]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d10e      	bne.n	800f54e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800f530:	4836      	ldr	r0, [pc, #216]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f532:	f7ff ff6f 	bl	800f414 <LL_ADC_IsEnabled>
 800f536:	4604      	mov	r4, r0
 800f538:	4835      	ldr	r0, [pc, #212]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f53a:	f7ff ff6b 	bl	800f414 <LL_ADC_IsEnabled>
 800f53e:	4603      	mov	r3, r0
 800f540:	4323      	orrs	r3, r4
 800f542:	2b00      	cmp	r3, #0
 800f544:	bf0c      	ite	eq
 800f546:	2301      	moveq	r3, #1
 800f548:	2300      	movne	r3, #0
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	e008      	b.n	800f560 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800f54e:	4833      	ldr	r0, [pc, #204]	; (800f61c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800f550:	f7ff ff60 	bl	800f414 <LL_ADC_IsEnabled>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	bf0c      	ite	eq
 800f55a:	2301      	moveq	r3, #1
 800f55c:	2300      	movne	r3, #0
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	2b00      	cmp	r3, #0
 800f562:	d047      	beq.n	800f5f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800f564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f566:	689a      	ldr	r2, [r3, #8]
 800f568:	4b2d      	ldr	r3, [pc, #180]	; (800f620 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800f56a:	4013      	ands	r3, r2
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	6811      	ldr	r1, [r2, #0]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	6892      	ldr	r2, [r2, #8]
 800f574:	430a      	orrs	r2, r1
 800f576:	431a      	orrs	r2, r3
 800f578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f57a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800f57c:	e03a      	b.n	800f5f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800f57e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f588:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a1f      	ldr	r2, [pc, #124]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d004      	beq.n	800f59e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4a1d      	ldr	r2, [pc, #116]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d10e      	bne.n	800f5bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800f59e:	481b      	ldr	r0, [pc, #108]	; (800f60c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800f5a0:	f7ff ff38 	bl	800f414 <LL_ADC_IsEnabled>
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	481a      	ldr	r0, [pc, #104]	; (800f610 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800f5a8:	f7ff ff34 	bl	800f414 <LL_ADC_IsEnabled>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	4323      	orrs	r3, r4
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	bf0c      	ite	eq
 800f5b4:	2301      	moveq	r3, #1
 800f5b6:	2300      	movne	r3, #0
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	e008      	b.n	800f5ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800f5bc:	4817      	ldr	r0, [pc, #92]	; (800f61c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800f5be:	f7ff ff29 	bl	800f414 <LL_ADC_IsEnabled>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	bf0c      	ite	eq
 800f5c8:	2301      	moveq	r3, #1
 800f5ca:	2300      	movne	r3, #0
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d010      	beq.n	800f5f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800f5d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5d4:	689a      	ldr	r2, [r3, #8]
 800f5d6:	4b12      	ldr	r3, [pc, #72]	; (800f620 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800f5d8:	4013      	ands	r3, r2
 800f5da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f5dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800f5de:	e009      	b.n	800f5f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5e4:	f043 0220 	orr.w	r2, r3, #32
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800f5f2:	e000      	b.n	800f5f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800f5f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800f5fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800f602:	4618      	mov	r0, r3
 800f604:	378c      	adds	r7, #140	; 0x8c
 800f606:	46bd      	mov	sp, r7
 800f608:	bd90      	pop	{r4, r7, pc}
 800f60a:	bf00      	nop
 800f60c:	40022000 	.word	0x40022000
 800f610:	40022100 	.word	0x40022100
 800f614:	40022300 	.word	0x40022300
 800f618:	58026300 	.word	0x58026300
 800f61c:	58026000 	.word	0x58026000
 800f620:	fffff0e0 	.word	0xfffff0e0

0800f624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f003 0307 	and.w	r3, r3, #7
 800f632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f634:	4b0b      	ldr	r3, [pc, #44]	; (800f664 <__NVIC_SetPriorityGrouping+0x40>)
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f640:	4013      	ands	r3, r2
 800f642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800f64c:	4b06      	ldr	r3, [pc, #24]	; (800f668 <__NVIC_SetPriorityGrouping+0x44>)
 800f64e:	4313      	orrs	r3, r2
 800f650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f652:	4a04      	ldr	r2, [pc, #16]	; (800f664 <__NVIC_SetPriorityGrouping+0x40>)
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	60d3      	str	r3, [r2, #12]
}
 800f658:	bf00      	nop
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	e000ed00 	.word	0xe000ed00
 800f668:	05fa0000 	.word	0x05fa0000

0800f66c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f670:	4b04      	ldr	r3, [pc, #16]	; (800f684 <__NVIC_GetPriorityGrouping+0x18>)
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	0a1b      	lsrs	r3, r3, #8
 800f676:	f003 0307 	and.w	r3, r3, #7
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	e000ed00 	.word	0xe000ed00

0800f688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f696:	2b00      	cmp	r3, #0
 800f698:	db0b      	blt.n	800f6b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f69a:	88fb      	ldrh	r3, [r7, #6]
 800f69c:	f003 021f 	and.w	r2, r3, #31
 800f6a0:	4907      	ldr	r1, [pc, #28]	; (800f6c0 <__NVIC_EnableIRQ+0x38>)
 800f6a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6a6:	095b      	lsrs	r3, r3, #5
 800f6a8:	2001      	movs	r0, #1
 800f6aa:	fa00 f202 	lsl.w	r2, r0, r2
 800f6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	e000e100 	.word	0xe000e100

0800f6c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	6039      	str	r1, [r7, #0]
 800f6ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f6d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	db0a      	blt.n	800f6ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	490c      	ldr	r1, [pc, #48]	; (800f710 <__NVIC_SetPriority+0x4c>)
 800f6de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6e2:	0112      	lsls	r2, r2, #4
 800f6e4:	b2d2      	uxtb	r2, r2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f6ec:	e00a      	b.n	800f704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	b2da      	uxtb	r2, r3
 800f6f2:	4908      	ldr	r1, [pc, #32]	; (800f714 <__NVIC_SetPriority+0x50>)
 800f6f4:	88fb      	ldrh	r3, [r7, #6]
 800f6f6:	f003 030f 	and.w	r3, r3, #15
 800f6fa:	3b04      	subs	r3, #4
 800f6fc:	0112      	lsls	r2, r2, #4
 800f6fe:	b2d2      	uxtb	r2, r2
 800f700:	440b      	add	r3, r1
 800f702:	761a      	strb	r2, [r3, #24]
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr
 800f710:	e000e100 	.word	0xe000e100
 800f714:	e000ed00 	.word	0xe000ed00

0800f718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f718:	b480      	push	{r7}
 800f71a:	b089      	sub	sp, #36	; 0x24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f003 0307 	and.w	r3, r3, #7
 800f72a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	f1c3 0307 	rsb	r3, r3, #7
 800f732:	2b04      	cmp	r3, #4
 800f734:	bf28      	it	cs
 800f736:	2304      	movcs	r3, #4
 800f738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	3304      	adds	r3, #4
 800f73e:	2b06      	cmp	r3, #6
 800f740:	d902      	bls.n	800f748 <NVIC_EncodePriority+0x30>
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	3b03      	subs	r3, #3
 800f746:	e000      	b.n	800f74a <NVIC_EncodePriority+0x32>
 800f748:	2300      	movs	r3, #0
 800f74a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f74c:	f04f 32ff 	mov.w	r2, #4294967295
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	fa02 f303 	lsl.w	r3, r2, r3
 800f756:	43da      	mvns	r2, r3
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	401a      	ands	r2, r3
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f760:	f04f 31ff 	mov.w	r1, #4294967295
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	fa01 f303 	lsl.w	r3, r1, r3
 800f76a:	43d9      	mvns	r1, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f770:	4313      	orrs	r3, r2
         );
}
 800f772:	4618      	mov	r0, r3
 800f774:	3724      	adds	r7, #36	; 0x24
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr
	...

0800f780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3b01      	subs	r3, #1
 800f78c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f790:	d301      	bcc.n	800f796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f792:	2301      	movs	r3, #1
 800f794:	e00f      	b.n	800f7b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f796:	4a0a      	ldr	r2, [pc, #40]	; (800f7c0 <SysTick_Config+0x40>)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f79e:	210f      	movs	r1, #15
 800f7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a4:	f7ff ff8e 	bl	800f6c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f7a8:	4b05      	ldr	r3, [pc, #20]	; (800f7c0 <SysTick_Config+0x40>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f7ae:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <SysTick_Config+0x40>)
 800f7b0:	2207      	movs	r2, #7
 800f7b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	e000e010 	.word	0xe000e010

0800f7c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f7ff ff29 	bl	800f624 <__NVIC_SetPriorityGrouping>
}
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b086      	sub	sp, #24
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	60b9      	str	r1, [r7, #8]
 800f7e4:	607a      	str	r2, [r7, #4]
 800f7e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800f7e8:	f7ff ff40 	bl	800f66c <__NVIC_GetPriorityGrouping>
 800f7ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	68b9      	ldr	r1, [r7, #8]
 800f7f2:	6978      	ldr	r0, [r7, #20]
 800f7f4:	f7ff ff90 	bl	800f718 <NVIC_EncodePriority>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7fe:	4611      	mov	r1, r2
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff ff5f 	bl	800f6c4 <__NVIC_SetPriority>
}
 800f806:	bf00      	nop
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	4603      	mov	r3, r0
 800f816:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff ff33 	bl	800f688 <__NVIC_EnableIRQ>
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b082      	sub	sp, #8
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7ff ffa4 	bl	800f780 <SysTick_Config>
 800f838:	4603      	mov	r3, r0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800f84c:	f7fe f896 	bl	800d97c <HAL_GetTick>
 800f850:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800f858:	2301      	movs	r3, #1
 800f85a:	e314      	b.n	800fe86 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a66      	ldr	r2, [pc, #408]	; (800f9fc <HAL_DMA_Init+0x1b8>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d04a      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a65      	ldr	r2, [pc, #404]	; (800fa00 <HAL_DMA_Init+0x1bc>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d045      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a63      	ldr	r2, [pc, #396]	; (800fa04 <HAL_DMA_Init+0x1c0>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d040      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	4a62      	ldr	r2, [pc, #392]	; (800fa08 <HAL_DMA_Init+0x1c4>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d03b      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4a60      	ldr	r2, [pc, #384]	; (800fa0c <HAL_DMA_Init+0x1c8>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d036      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4a5f      	ldr	r2, [pc, #380]	; (800fa10 <HAL_DMA_Init+0x1cc>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d031      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4a5d      	ldr	r2, [pc, #372]	; (800fa14 <HAL_DMA_Init+0x1d0>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d02c      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a5c      	ldr	r2, [pc, #368]	; (800fa18 <HAL_DMA_Init+0x1d4>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d027      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a5a      	ldr	r2, [pc, #360]	; (800fa1c <HAL_DMA_Init+0x1d8>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d022      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a59      	ldr	r2, [pc, #356]	; (800fa20 <HAL_DMA_Init+0x1dc>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d01d      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a57      	ldr	r2, [pc, #348]	; (800fa24 <HAL_DMA_Init+0x1e0>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d018      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a56      	ldr	r2, [pc, #344]	; (800fa28 <HAL_DMA_Init+0x1e4>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d013      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a54      	ldr	r2, [pc, #336]	; (800fa2c <HAL_DMA_Init+0x1e8>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d00e      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a53      	ldr	r2, [pc, #332]	; (800fa30 <HAL_DMA_Init+0x1ec>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d009      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a51      	ldr	r2, [pc, #324]	; (800fa34 <HAL_DMA_Init+0x1f0>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d004      	beq.n	800f8fc <HAL_DMA_Init+0xb8>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a50      	ldr	r2, [pc, #320]	; (800fa38 <HAL_DMA_Init+0x1f4>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d101      	bne.n	800f900 <HAL_DMA_Init+0xbc>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e000      	b.n	800f902 <HAL_DMA_Init+0xbe>
 800f900:	2300      	movs	r3, #0
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 813c 	beq.w	800fb80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2202      	movs	r2, #2
 800f90c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a37      	ldr	r2, [pc, #220]	; (800f9fc <HAL_DMA_Init+0x1b8>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d04a      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a36      	ldr	r2, [pc, #216]	; (800fa00 <HAL_DMA_Init+0x1bc>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d045      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a34      	ldr	r2, [pc, #208]	; (800fa04 <HAL_DMA_Init+0x1c0>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d040      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a33      	ldr	r2, [pc, #204]	; (800fa08 <HAL_DMA_Init+0x1c4>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d03b      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a31      	ldr	r2, [pc, #196]	; (800fa0c <HAL_DMA_Init+0x1c8>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d036      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a30      	ldr	r2, [pc, #192]	; (800fa10 <HAL_DMA_Init+0x1cc>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d031      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a2e      	ldr	r2, [pc, #184]	; (800fa14 <HAL_DMA_Init+0x1d0>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d02c      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a2d      	ldr	r2, [pc, #180]	; (800fa18 <HAL_DMA_Init+0x1d4>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d027      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a2b      	ldr	r2, [pc, #172]	; (800fa1c <HAL_DMA_Init+0x1d8>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d022      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a2a      	ldr	r2, [pc, #168]	; (800fa20 <HAL_DMA_Init+0x1dc>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d01d      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a28      	ldr	r2, [pc, #160]	; (800fa24 <HAL_DMA_Init+0x1e0>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d018      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a27      	ldr	r2, [pc, #156]	; (800fa28 <HAL_DMA_Init+0x1e4>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d013      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a25      	ldr	r2, [pc, #148]	; (800fa2c <HAL_DMA_Init+0x1e8>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d00e      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a24      	ldr	r2, [pc, #144]	; (800fa30 <HAL_DMA_Init+0x1ec>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d009      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a22      	ldr	r2, [pc, #136]	; (800fa34 <HAL_DMA_Init+0x1f0>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d004      	beq.n	800f9b8 <HAL_DMA_Init+0x174>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	4a21      	ldr	r2, [pc, #132]	; (800fa38 <HAL_DMA_Init+0x1f4>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d108      	bne.n	800f9ca <HAL_DMA_Init+0x186>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f022 0201 	bic.w	r2, r2, #1
 800f9c6:	601a      	str	r2, [r3, #0]
 800f9c8:	e007      	b.n	800f9da <HAL_DMA_Init+0x196>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f022 0201 	bic.w	r2, r2, #1
 800f9d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800f9da:	e02f      	b.n	800fa3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f9dc:	f7fd ffce 	bl	800d97c <HAL_GetTick>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	1ad3      	subs	r3, r2, r3
 800f9e6:	2b05      	cmp	r3, #5
 800f9e8:	d928      	bls.n	800fa3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2220      	movs	r2, #32
 800f9ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2203      	movs	r2, #3
 800f9f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	e244      	b.n	800fe86 <HAL_DMA_Init+0x642>
 800f9fc:	40020010 	.word	0x40020010
 800fa00:	40020028 	.word	0x40020028
 800fa04:	40020040 	.word	0x40020040
 800fa08:	40020058 	.word	0x40020058
 800fa0c:	40020070 	.word	0x40020070
 800fa10:	40020088 	.word	0x40020088
 800fa14:	400200a0 	.word	0x400200a0
 800fa18:	400200b8 	.word	0x400200b8
 800fa1c:	40020410 	.word	0x40020410
 800fa20:	40020428 	.word	0x40020428
 800fa24:	40020440 	.word	0x40020440
 800fa28:	40020458 	.word	0x40020458
 800fa2c:	40020470 	.word	0x40020470
 800fa30:	40020488 	.word	0x40020488
 800fa34:	400204a0 	.word	0x400204a0
 800fa38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1c8      	bne.n	800f9dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800fa52:	697a      	ldr	r2, [r7, #20]
 800fa54:	4b84      	ldr	r3, [pc, #528]	; (800fc68 <HAL_DMA_Init+0x424>)
 800fa56:	4013      	ands	r3, r2
 800fa58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800fa62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fa6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fa7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a1b      	ldr	r3, [r3, #32]
 800fa80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	4313      	orrs	r3, r2
 800fa86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	d107      	bne.n	800faa0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	697a      	ldr	r2, [r7, #20]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	2b28      	cmp	r3, #40	; 0x28
 800faa6:	d903      	bls.n	800fab0 <HAL_DMA_Init+0x26c>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	2b2e      	cmp	r3, #46	; 0x2e
 800faae:	d91f      	bls.n	800faf0 <HAL_DMA_Init+0x2ac>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	2b3e      	cmp	r3, #62	; 0x3e
 800fab6:	d903      	bls.n	800fac0 <HAL_DMA_Init+0x27c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	2b42      	cmp	r3, #66	; 0x42
 800fabe:	d917      	bls.n	800faf0 <HAL_DMA_Init+0x2ac>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	2b46      	cmp	r3, #70	; 0x46
 800fac6:	d903      	bls.n	800fad0 <HAL_DMA_Init+0x28c>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	2b48      	cmp	r3, #72	; 0x48
 800face:	d90f      	bls.n	800faf0 <HAL_DMA_Init+0x2ac>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	2b4e      	cmp	r3, #78	; 0x4e
 800fad6:	d903      	bls.n	800fae0 <HAL_DMA_Init+0x29c>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	2b52      	cmp	r3, #82	; 0x52
 800fade:	d907      	bls.n	800faf0 <HAL_DMA_Init+0x2ac>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	2b73      	cmp	r3, #115	; 0x73
 800fae6:	d905      	bls.n	800faf4 <HAL_DMA_Init+0x2b0>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	2b77      	cmp	r3, #119	; 0x77
 800faee:	d801      	bhi.n	800faf4 <HAL_DMA_Init+0x2b0>
 800faf0:	2301      	movs	r3, #1
 800faf2:	e000      	b.n	800faf6 <HAL_DMA_Init+0x2b2>
 800faf4:	2300      	movs	r3, #0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	695b      	ldr	r3, [r3, #20]
 800fb10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f023 0307 	bic.w	r3, r3, #7
 800fb18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d117      	bne.n	800fb5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00e      	beq.n	800fb5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f001 fdcc 	bl	80116dc <DMA_CheckFifoParam>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d008      	beq.n	800fb5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2240      	movs	r2, #64	; 0x40
 800fb4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e194      	b.n	800fe86 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f001 fd07 	bl	8011578 <DMA_CalcBaseAndBitshift>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb72:	f003 031f 	and.w	r3, r3, #31
 800fb76:	223f      	movs	r2, #63	; 0x3f
 800fb78:	409a      	lsls	r2, r3
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	609a      	str	r2, [r3, #8]
 800fb7e:	e0ca      	b.n	800fd16 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a39      	ldr	r2, [pc, #228]	; (800fc6c <HAL_DMA_Init+0x428>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d022      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a38      	ldr	r2, [pc, #224]	; (800fc70 <HAL_DMA_Init+0x42c>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d01d      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a36      	ldr	r2, [pc, #216]	; (800fc74 <HAL_DMA_Init+0x430>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d018      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a35      	ldr	r2, [pc, #212]	; (800fc78 <HAL_DMA_Init+0x434>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d013      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a33      	ldr	r2, [pc, #204]	; (800fc7c <HAL_DMA_Init+0x438>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d00e      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a32      	ldr	r2, [pc, #200]	; (800fc80 <HAL_DMA_Init+0x43c>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d009      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a30      	ldr	r2, [pc, #192]	; (800fc84 <HAL_DMA_Init+0x440>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d004      	beq.n	800fbd0 <HAL_DMA_Init+0x38c>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a2f      	ldr	r2, [pc, #188]	; (800fc88 <HAL_DMA_Init+0x444>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d101      	bne.n	800fbd4 <HAL_DMA_Init+0x390>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e000      	b.n	800fbd6 <HAL_DMA_Init+0x392>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 8094 	beq.w	800fd04 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a22      	ldr	r2, [pc, #136]	; (800fc6c <HAL_DMA_Init+0x428>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d021      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <HAL_DMA_Init+0x42c>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d01c      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a1f      	ldr	r2, [pc, #124]	; (800fc74 <HAL_DMA_Init+0x430>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d017      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a1e      	ldr	r2, [pc, #120]	; (800fc78 <HAL_DMA_Init+0x434>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d012      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a1c      	ldr	r2, [pc, #112]	; (800fc7c <HAL_DMA_Init+0x438>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d00d      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a1b      	ldr	r2, [pc, #108]	; (800fc80 <HAL_DMA_Init+0x43c>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d008      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a19      	ldr	r2, [pc, #100]	; (800fc84 <HAL_DMA_Init+0x440>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d003      	beq.n	800fc2a <HAL_DMA_Init+0x3e6>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4a18      	ldr	r2, [pc, #96]	; (800fc88 <HAL_DMA_Init+0x444>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2202      	movs	r2, #2
 800fc30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800fc44:	697a      	ldr	r2, [r7, #20]
 800fc46:	4b11      	ldr	r3, [pc, #68]	; (800fc8c <HAL_DMA_Init+0x448>)
 800fc48:	4013      	ands	r3, r2
 800fc4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	2b40      	cmp	r3, #64	; 0x40
 800fc52:	d01d      	beq.n	800fc90 <HAL_DMA_Init+0x44c>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	2b80      	cmp	r3, #128	; 0x80
 800fc5a:	d102      	bne.n	800fc62 <HAL_DMA_Init+0x41e>
 800fc5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc60:	e017      	b.n	800fc92 <HAL_DMA_Init+0x44e>
 800fc62:	2300      	movs	r3, #0
 800fc64:	e015      	b.n	800fc92 <HAL_DMA_Init+0x44e>
 800fc66:	bf00      	nop
 800fc68:	fe10803f 	.word	0xfe10803f
 800fc6c:	58025408 	.word	0x58025408
 800fc70:	5802541c 	.word	0x5802541c
 800fc74:	58025430 	.word	0x58025430
 800fc78:	58025444 	.word	0x58025444
 800fc7c:	58025458 	.word	0x58025458
 800fc80:	5802546c 	.word	0x5802546c
 800fc84:	58025480 	.word	0x58025480
 800fc88:	58025494 	.word	0x58025494
 800fc8c:	fffe000f 	.word	0xfffe000f
 800fc90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	68d2      	ldr	r2, [r2, #12]
 800fc96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800fc98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	691b      	ldr	r3, [r3, #16]
 800fc9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800fca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800fca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800fcb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	69db      	ldr	r3, [r3, #28]
 800fcb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800fcb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800fcc0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800fcc2:	697a      	ldr	r2, [r7, #20]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	4b6e      	ldr	r3, [pc, #440]	; (800fe90 <HAL_DMA_Init+0x64c>)
 800fcd8:	4413      	add	r3, r2
 800fcda:	4a6e      	ldr	r2, [pc, #440]	; (800fe94 <HAL_DMA_Init+0x650>)
 800fcdc:	fba2 2303 	umull	r2, r3, r2, r3
 800fce0:	091b      	lsrs	r3, r3, #4
 800fce2:	009a      	lsls	r2, r3, #2
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f001 fc45 	bl	8011578 <DMA_CalcBaseAndBitshift>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcf6:	f003 031f 	and.w	r3, r3, #31
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	409a      	lsls	r2, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	605a      	str	r2, [r3, #4]
 800fd02:	e008      	b.n	800fd16 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2240      	movs	r2, #64	; 0x40
 800fd08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2203      	movs	r2, #3
 800fd0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800fd12:	2301      	movs	r3, #1
 800fd14:	e0b7      	b.n	800fe86 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a5f      	ldr	r2, [pc, #380]	; (800fe98 <HAL_DMA_Init+0x654>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d072      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a5d      	ldr	r2, [pc, #372]	; (800fe9c <HAL_DMA_Init+0x658>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d06d      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a5c      	ldr	r2, [pc, #368]	; (800fea0 <HAL_DMA_Init+0x65c>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d068      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a5a      	ldr	r2, [pc, #360]	; (800fea4 <HAL_DMA_Init+0x660>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d063      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a59      	ldr	r2, [pc, #356]	; (800fea8 <HAL_DMA_Init+0x664>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d05e      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a57      	ldr	r2, [pc, #348]	; (800feac <HAL_DMA_Init+0x668>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d059      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a56      	ldr	r2, [pc, #344]	; (800feb0 <HAL_DMA_Init+0x66c>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d054      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a54      	ldr	r2, [pc, #336]	; (800feb4 <HAL_DMA_Init+0x670>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d04f      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a53      	ldr	r2, [pc, #332]	; (800feb8 <HAL_DMA_Init+0x674>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d04a      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a51      	ldr	r2, [pc, #324]	; (800febc <HAL_DMA_Init+0x678>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d045      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a50      	ldr	r2, [pc, #320]	; (800fec0 <HAL_DMA_Init+0x67c>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d040      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a4e      	ldr	r2, [pc, #312]	; (800fec4 <HAL_DMA_Init+0x680>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d03b      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4a4d      	ldr	r2, [pc, #308]	; (800fec8 <HAL_DMA_Init+0x684>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d036      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a4b      	ldr	r2, [pc, #300]	; (800fecc <HAL_DMA_Init+0x688>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d031      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a4a      	ldr	r2, [pc, #296]	; (800fed0 <HAL_DMA_Init+0x68c>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d02c      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a48      	ldr	r2, [pc, #288]	; (800fed4 <HAL_DMA_Init+0x690>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d027      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a47      	ldr	r2, [pc, #284]	; (800fed8 <HAL_DMA_Init+0x694>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d022      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a45      	ldr	r2, [pc, #276]	; (800fedc <HAL_DMA_Init+0x698>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d01d      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a44      	ldr	r2, [pc, #272]	; (800fee0 <HAL_DMA_Init+0x69c>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d018      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a42      	ldr	r2, [pc, #264]	; (800fee4 <HAL_DMA_Init+0x6a0>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d013      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a41      	ldr	r2, [pc, #260]	; (800fee8 <HAL_DMA_Init+0x6a4>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d00e      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a3f      	ldr	r2, [pc, #252]	; (800feec <HAL_DMA_Init+0x6a8>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d009      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a3e      	ldr	r2, [pc, #248]	; (800fef0 <HAL_DMA_Init+0x6ac>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d004      	beq.n	800fe06 <HAL_DMA_Init+0x5c2>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a3c      	ldr	r2, [pc, #240]	; (800fef4 <HAL_DMA_Init+0x6b0>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d101      	bne.n	800fe0a <HAL_DMA_Init+0x5c6>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e000      	b.n	800fe0c <HAL_DMA_Init+0x5c8>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d032      	beq.n	800fe76 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f001 fcdf 	bl	80117d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	2b80      	cmp	r3, #128	; 0x80
 800fe1c:	d102      	bne.n	800fe24 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685a      	ldr	r2, [r3, #4]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe2c:	b2d2      	uxtb	r2, r2
 800fe2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800fe38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d010      	beq.n	800fe64 <HAL_DMA_Init+0x620>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	2b08      	cmp	r3, #8
 800fe48:	d80c      	bhi.n	800fe64 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f001 fd5c 	bl	8011908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe54:	2200      	movs	r2, #0
 800fe56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800fe60:	605a      	str	r2, [r3, #4]
 800fe62:	e008      	b.n	800fe76 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	a7fdabf8 	.word	0xa7fdabf8
 800fe94:	cccccccd 	.word	0xcccccccd
 800fe98:	40020010 	.word	0x40020010
 800fe9c:	40020028 	.word	0x40020028
 800fea0:	40020040 	.word	0x40020040
 800fea4:	40020058 	.word	0x40020058
 800fea8:	40020070 	.word	0x40020070
 800feac:	40020088 	.word	0x40020088
 800feb0:	400200a0 	.word	0x400200a0
 800feb4:	400200b8 	.word	0x400200b8
 800feb8:	40020410 	.word	0x40020410
 800febc:	40020428 	.word	0x40020428
 800fec0:	40020440 	.word	0x40020440
 800fec4:	40020458 	.word	0x40020458
 800fec8:	40020470 	.word	0x40020470
 800fecc:	40020488 	.word	0x40020488
 800fed0:	400204a0 	.word	0x400204a0
 800fed4:	400204b8 	.word	0x400204b8
 800fed8:	58025408 	.word	0x58025408
 800fedc:	5802541c 	.word	0x5802541c
 800fee0:	58025430 	.word	0x58025430
 800fee4:	58025444 	.word	0x58025444
 800fee8:	58025458 	.word	0x58025458
 800feec:	5802546c 	.word	0x5802546c
 800fef0:	58025480 	.word	0x58025480
 800fef4:	58025494 	.word	0x58025494

0800fef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
 800ff04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d101      	bne.n	800ff14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	e226      	b.n	8010362 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d101      	bne.n	800ff22 <HAL_DMA_Start_IT+0x2a>
 800ff1e:	2302      	movs	r3, #2
 800ff20:	e21f      	b.n	8010362 <HAL_DMA_Start_IT+0x46a>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	f040 820a 	bne.w	801034c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2200      	movs	r2, #0
 800ff44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a68      	ldr	r2, [pc, #416]	; (80100ec <HAL_DMA_Start_IT+0x1f4>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d04a      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a66      	ldr	r2, [pc, #408]	; (80100f0 <HAL_DMA_Start_IT+0x1f8>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d045      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a65      	ldr	r2, [pc, #404]	; (80100f4 <HAL_DMA_Start_IT+0x1fc>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d040      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4a63      	ldr	r2, [pc, #396]	; (80100f8 <HAL_DMA_Start_IT+0x200>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d03b      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a62      	ldr	r2, [pc, #392]	; (80100fc <HAL_DMA_Start_IT+0x204>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d036      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a60      	ldr	r2, [pc, #384]	; (8010100 <HAL_DMA_Start_IT+0x208>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d031      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a5f      	ldr	r2, [pc, #380]	; (8010104 <HAL_DMA_Start_IT+0x20c>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d02c      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4a5d      	ldr	r2, [pc, #372]	; (8010108 <HAL_DMA_Start_IT+0x210>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d027      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4a5c      	ldr	r2, [pc, #368]	; (801010c <HAL_DMA_Start_IT+0x214>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d022      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a5a      	ldr	r2, [pc, #360]	; (8010110 <HAL_DMA_Start_IT+0x218>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d01d      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a59      	ldr	r2, [pc, #356]	; (8010114 <HAL_DMA_Start_IT+0x21c>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d018      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a57      	ldr	r2, [pc, #348]	; (8010118 <HAL_DMA_Start_IT+0x220>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d013      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a56      	ldr	r2, [pc, #344]	; (801011c <HAL_DMA_Start_IT+0x224>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d00e      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a54      	ldr	r2, [pc, #336]	; (8010120 <HAL_DMA_Start_IT+0x228>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d009      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a53      	ldr	r2, [pc, #332]	; (8010124 <HAL_DMA_Start_IT+0x22c>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d004      	beq.n	800ffe6 <HAL_DMA_Start_IT+0xee>
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a51      	ldr	r2, [pc, #324]	; (8010128 <HAL_DMA_Start_IT+0x230>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d108      	bne.n	800fff8 <HAL_DMA_Start_IT+0x100>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f022 0201 	bic.w	r2, r2, #1
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	e007      	b.n	8010008 <HAL_DMA_Start_IT+0x110>
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f022 0201 	bic.w	r2, r2, #1
 8010006:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	68b9      	ldr	r1, [r7, #8]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f001 f906 	bl	8011220 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a34      	ldr	r2, [pc, #208]	; (80100ec <HAL_DMA_Start_IT+0x1f4>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d04a      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a33      	ldr	r2, [pc, #204]	; (80100f0 <HAL_DMA_Start_IT+0x1f8>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d045      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a31      	ldr	r2, [pc, #196]	; (80100f4 <HAL_DMA_Start_IT+0x1fc>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d040      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a30      	ldr	r2, [pc, #192]	; (80100f8 <HAL_DMA_Start_IT+0x200>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d03b      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a2e      	ldr	r2, [pc, #184]	; (80100fc <HAL_DMA_Start_IT+0x204>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d036      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a2d      	ldr	r2, [pc, #180]	; (8010100 <HAL_DMA_Start_IT+0x208>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d031      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a2b      	ldr	r2, [pc, #172]	; (8010104 <HAL_DMA_Start_IT+0x20c>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d02c      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a2a      	ldr	r2, [pc, #168]	; (8010108 <HAL_DMA_Start_IT+0x210>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d027      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a28      	ldr	r2, [pc, #160]	; (801010c <HAL_DMA_Start_IT+0x214>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d022      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4a27      	ldr	r2, [pc, #156]	; (8010110 <HAL_DMA_Start_IT+0x218>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d01d      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a25      	ldr	r2, [pc, #148]	; (8010114 <HAL_DMA_Start_IT+0x21c>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d018      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a24      	ldr	r2, [pc, #144]	; (8010118 <HAL_DMA_Start_IT+0x220>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d013      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a22      	ldr	r2, [pc, #136]	; (801011c <HAL_DMA_Start_IT+0x224>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d00e      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a21      	ldr	r2, [pc, #132]	; (8010120 <HAL_DMA_Start_IT+0x228>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d009      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a1f      	ldr	r2, [pc, #124]	; (8010124 <HAL_DMA_Start_IT+0x22c>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d004      	beq.n	80100b4 <HAL_DMA_Start_IT+0x1bc>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a1e      	ldr	r2, [pc, #120]	; (8010128 <HAL_DMA_Start_IT+0x230>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d101      	bne.n	80100b8 <HAL_DMA_Start_IT+0x1c0>
 80100b4:	2301      	movs	r3, #1
 80100b6:	e000      	b.n	80100ba <HAL_DMA_Start_IT+0x1c2>
 80100b8:	2300      	movs	r3, #0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d036      	beq.n	801012c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f023 021e 	bic.w	r2, r3, #30
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f042 0216 	orr.w	r2, r2, #22
 80100d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d03e      	beq.n	8010158 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f042 0208 	orr.w	r2, r2, #8
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	e035      	b.n	8010158 <HAL_DMA_Start_IT+0x260>
 80100ec:	40020010 	.word	0x40020010
 80100f0:	40020028 	.word	0x40020028
 80100f4:	40020040 	.word	0x40020040
 80100f8:	40020058 	.word	0x40020058
 80100fc:	40020070 	.word	0x40020070
 8010100:	40020088 	.word	0x40020088
 8010104:	400200a0 	.word	0x400200a0
 8010108:	400200b8 	.word	0x400200b8
 801010c:	40020410 	.word	0x40020410
 8010110:	40020428 	.word	0x40020428
 8010114:	40020440 	.word	0x40020440
 8010118:	40020458 	.word	0x40020458
 801011c:	40020470 	.word	0x40020470
 8010120:	40020488 	.word	0x40020488
 8010124:	400204a0 	.word	0x400204a0
 8010128:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f023 020e 	bic.w	r2, r3, #14
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f042 020a 	orr.w	r2, r2, #10
 801013e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010144:	2b00      	cmp	r3, #0
 8010146:	d007      	beq.n	8010158 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f042 0204 	orr.w	r2, r2, #4
 8010156:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a83      	ldr	r2, [pc, #524]	; (801036c <HAL_DMA_Start_IT+0x474>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d072      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a82      	ldr	r2, [pc, #520]	; (8010370 <HAL_DMA_Start_IT+0x478>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d06d      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a80      	ldr	r2, [pc, #512]	; (8010374 <HAL_DMA_Start_IT+0x47c>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d068      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a7f      	ldr	r2, [pc, #508]	; (8010378 <HAL_DMA_Start_IT+0x480>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d063      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a7d      	ldr	r2, [pc, #500]	; (801037c <HAL_DMA_Start_IT+0x484>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d05e      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4a7c      	ldr	r2, [pc, #496]	; (8010380 <HAL_DMA_Start_IT+0x488>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d059      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a7a      	ldr	r2, [pc, #488]	; (8010384 <HAL_DMA_Start_IT+0x48c>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d054      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a79      	ldr	r2, [pc, #484]	; (8010388 <HAL_DMA_Start_IT+0x490>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d04f      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a77      	ldr	r2, [pc, #476]	; (801038c <HAL_DMA_Start_IT+0x494>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d04a      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4a76      	ldr	r2, [pc, #472]	; (8010390 <HAL_DMA_Start_IT+0x498>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d045      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a74      	ldr	r2, [pc, #464]	; (8010394 <HAL_DMA_Start_IT+0x49c>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d040      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a73      	ldr	r2, [pc, #460]	; (8010398 <HAL_DMA_Start_IT+0x4a0>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d03b      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a71      	ldr	r2, [pc, #452]	; (801039c <HAL_DMA_Start_IT+0x4a4>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d036      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a70      	ldr	r2, [pc, #448]	; (80103a0 <HAL_DMA_Start_IT+0x4a8>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d031      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a6e      	ldr	r2, [pc, #440]	; (80103a4 <HAL_DMA_Start_IT+0x4ac>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d02c      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a6d      	ldr	r2, [pc, #436]	; (80103a8 <HAL_DMA_Start_IT+0x4b0>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d027      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a6b      	ldr	r2, [pc, #428]	; (80103ac <HAL_DMA_Start_IT+0x4b4>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d022      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a6a      	ldr	r2, [pc, #424]	; (80103b0 <HAL_DMA_Start_IT+0x4b8>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d01d      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a68      	ldr	r2, [pc, #416]	; (80103b4 <HAL_DMA_Start_IT+0x4bc>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d018      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a67      	ldr	r2, [pc, #412]	; (80103b8 <HAL_DMA_Start_IT+0x4c0>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d013      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a65      	ldr	r2, [pc, #404]	; (80103bc <HAL_DMA_Start_IT+0x4c4>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d00e      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4a64      	ldr	r2, [pc, #400]	; (80103c0 <HAL_DMA_Start_IT+0x4c8>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d009      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a62      	ldr	r2, [pc, #392]	; (80103c4 <HAL_DMA_Start_IT+0x4cc>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d004      	beq.n	8010248 <HAL_DMA_Start_IT+0x350>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4a61      	ldr	r2, [pc, #388]	; (80103c8 <HAL_DMA_Start_IT+0x4d0>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d101      	bne.n	801024c <HAL_DMA_Start_IT+0x354>
 8010248:	2301      	movs	r3, #1
 801024a:	e000      	b.n	801024e <HAL_DMA_Start_IT+0x356>
 801024c:	2300      	movs	r3, #0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d01a      	beq.n	8010288 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801025c:	2b00      	cmp	r3, #0
 801025e:	d007      	beq.n	8010270 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801026a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801026e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010274:	2b00      	cmp	r3, #0
 8010276:	d007      	beq.n	8010288 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010286:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4a37      	ldr	r2, [pc, #220]	; (801036c <HAL_DMA_Start_IT+0x474>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d04a      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a36      	ldr	r2, [pc, #216]	; (8010370 <HAL_DMA_Start_IT+0x478>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d045      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a34      	ldr	r2, [pc, #208]	; (8010374 <HAL_DMA_Start_IT+0x47c>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d040      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4a33      	ldr	r2, [pc, #204]	; (8010378 <HAL_DMA_Start_IT+0x480>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d03b      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a31      	ldr	r2, [pc, #196]	; (801037c <HAL_DMA_Start_IT+0x484>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d036      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a30      	ldr	r2, [pc, #192]	; (8010380 <HAL_DMA_Start_IT+0x488>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d031      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a2e      	ldr	r2, [pc, #184]	; (8010384 <HAL_DMA_Start_IT+0x48c>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d02c      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a2d      	ldr	r2, [pc, #180]	; (8010388 <HAL_DMA_Start_IT+0x490>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d027      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a2b      	ldr	r2, [pc, #172]	; (801038c <HAL_DMA_Start_IT+0x494>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d022      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a2a      	ldr	r2, [pc, #168]	; (8010390 <HAL_DMA_Start_IT+0x498>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d01d      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a28      	ldr	r2, [pc, #160]	; (8010394 <HAL_DMA_Start_IT+0x49c>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d018      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a27      	ldr	r2, [pc, #156]	; (8010398 <HAL_DMA_Start_IT+0x4a0>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d013      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a25      	ldr	r2, [pc, #148]	; (801039c <HAL_DMA_Start_IT+0x4a4>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d00e      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a24      	ldr	r2, [pc, #144]	; (80103a0 <HAL_DMA_Start_IT+0x4a8>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d009      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4a22      	ldr	r2, [pc, #136]	; (80103a4 <HAL_DMA_Start_IT+0x4ac>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d004      	beq.n	8010328 <HAL_DMA_Start_IT+0x430>
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a21      	ldr	r2, [pc, #132]	; (80103a8 <HAL_DMA_Start_IT+0x4b0>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d108      	bne.n	801033a <HAL_DMA_Start_IT+0x442>
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f042 0201 	orr.w	r2, r2, #1
 8010336:	601a      	str	r2, [r3, #0]
 8010338:	e012      	b.n	8010360 <HAL_DMA_Start_IT+0x468>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f042 0201 	orr.w	r2, r2, #1
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	e009      	b.n	8010360 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010352:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010360:	7dfb      	ldrb	r3, [r7, #23]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	40020010 	.word	0x40020010
 8010370:	40020028 	.word	0x40020028
 8010374:	40020040 	.word	0x40020040
 8010378:	40020058 	.word	0x40020058
 801037c:	40020070 	.word	0x40020070
 8010380:	40020088 	.word	0x40020088
 8010384:	400200a0 	.word	0x400200a0
 8010388:	400200b8 	.word	0x400200b8
 801038c:	40020410 	.word	0x40020410
 8010390:	40020428 	.word	0x40020428
 8010394:	40020440 	.word	0x40020440
 8010398:	40020458 	.word	0x40020458
 801039c:	40020470 	.word	0x40020470
 80103a0:	40020488 	.word	0x40020488
 80103a4:	400204a0 	.word	0x400204a0
 80103a8:	400204b8 	.word	0x400204b8
 80103ac:	58025408 	.word	0x58025408
 80103b0:	5802541c 	.word	0x5802541c
 80103b4:	58025430 	.word	0x58025430
 80103b8:	58025444 	.word	0x58025444
 80103bc:	58025458 	.word	0x58025458
 80103c0:	5802546c 	.word	0x5802546c
 80103c4:	58025480 	.word	0x58025480
 80103c8:	58025494 	.word	0x58025494

080103cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08a      	sub	sp, #40	; 0x28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80103d4:	2300      	movs	r3, #0
 80103d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80103d8:	4b67      	ldr	r3, [pc, #412]	; (8010578 <HAL_DMA_IRQHandler+0x1ac>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4a67      	ldr	r2, [pc, #412]	; (801057c <HAL_DMA_IRQHandler+0x1b0>)
 80103de:	fba2 2303 	umull	r2, r3, r2, r3
 80103e2:	0a9b      	lsrs	r3, r3, #10
 80103e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80103f2:	6a3b      	ldr	r3, [r7, #32]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a5f      	ldr	r2, [pc, #380]	; (8010580 <HAL_DMA_IRQHandler+0x1b4>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d04a      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a5d      	ldr	r2, [pc, #372]	; (8010584 <HAL_DMA_IRQHandler+0x1b8>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d045      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a5c      	ldr	r2, [pc, #368]	; (8010588 <HAL_DMA_IRQHandler+0x1bc>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d040      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a5a      	ldr	r2, [pc, #360]	; (801058c <HAL_DMA_IRQHandler+0x1c0>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d03b      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a59      	ldr	r2, [pc, #356]	; (8010590 <HAL_DMA_IRQHandler+0x1c4>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d036      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a57      	ldr	r2, [pc, #348]	; (8010594 <HAL_DMA_IRQHandler+0x1c8>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d031      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a56      	ldr	r2, [pc, #344]	; (8010598 <HAL_DMA_IRQHandler+0x1cc>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d02c      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a54      	ldr	r2, [pc, #336]	; (801059c <HAL_DMA_IRQHandler+0x1d0>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d027      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4a53      	ldr	r2, [pc, #332]	; (80105a0 <HAL_DMA_IRQHandler+0x1d4>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d022      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a51      	ldr	r2, [pc, #324]	; (80105a4 <HAL_DMA_IRQHandler+0x1d8>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d01d      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a50      	ldr	r2, [pc, #320]	; (80105a8 <HAL_DMA_IRQHandler+0x1dc>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d018      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a4e      	ldr	r2, [pc, #312]	; (80105ac <HAL_DMA_IRQHandler+0x1e0>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d013      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a4d      	ldr	r2, [pc, #308]	; (80105b0 <HAL_DMA_IRQHandler+0x1e4>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d00e      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a4b      	ldr	r2, [pc, #300]	; (80105b4 <HAL_DMA_IRQHandler+0x1e8>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d009      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4a4a      	ldr	r2, [pc, #296]	; (80105b8 <HAL_DMA_IRQHandler+0x1ec>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d004      	beq.n	801049e <HAL_DMA_IRQHandler+0xd2>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a48      	ldr	r2, [pc, #288]	; (80105bc <HAL_DMA_IRQHandler+0x1f0>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d101      	bne.n	80104a2 <HAL_DMA_IRQHandler+0xd6>
 801049e:	2301      	movs	r3, #1
 80104a0:	e000      	b.n	80104a4 <HAL_DMA_IRQHandler+0xd8>
 80104a2:	2300      	movs	r3, #0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f000 842b 	beq.w	8010d00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104ae:	f003 031f 	and.w	r3, r3, #31
 80104b2:	2208      	movs	r2, #8
 80104b4:	409a      	lsls	r2, r3
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	4013      	ands	r3, r2
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f000 80a2 	beq.w	8010604 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a2e      	ldr	r2, [pc, #184]	; (8010580 <HAL_DMA_IRQHandler+0x1b4>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d04a      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a2d      	ldr	r2, [pc, #180]	; (8010584 <HAL_DMA_IRQHandler+0x1b8>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d045      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a2b      	ldr	r2, [pc, #172]	; (8010588 <HAL_DMA_IRQHandler+0x1bc>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d040      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a2a      	ldr	r2, [pc, #168]	; (801058c <HAL_DMA_IRQHandler+0x1c0>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d03b      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a28      	ldr	r2, [pc, #160]	; (8010590 <HAL_DMA_IRQHandler+0x1c4>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d036      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a27      	ldr	r2, [pc, #156]	; (8010594 <HAL_DMA_IRQHandler+0x1c8>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d031      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a25      	ldr	r2, [pc, #148]	; (8010598 <HAL_DMA_IRQHandler+0x1cc>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d02c      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a24      	ldr	r2, [pc, #144]	; (801059c <HAL_DMA_IRQHandler+0x1d0>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d027      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a22      	ldr	r2, [pc, #136]	; (80105a0 <HAL_DMA_IRQHandler+0x1d4>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d022      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a21      	ldr	r2, [pc, #132]	; (80105a4 <HAL_DMA_IRQHandler+0x1d8>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d01d      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a1f      	ldr	r2, [pc, #124]	; (80105a8 <HAL_DMA_IRQHandler+0x1dc>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d018      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a1e      	ldr	r2, [pc, #120]	; (80105ac <HAL_DMA_IRQHandler+0x1e0>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d013      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a1c      	ldr	r2, [pc, #112]	; (80105b0 <HAL_DMA_IRQHandler+0x1e4>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d00e      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a1b      	ldr	r2, [pc, #108]	; (80105b4 <HAL_DMA_IRQHandler+0x1e8>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d009      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a19      	ldr	r2, [pc, #100]	; (80105b8 <HAL_DMA_IRQHandler+0x1ec>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d004      	beq.n	8010560 <HAL_DMA_IRQHandler+0x194>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a18      	ldr	r2, [pc, #96]	; (80105bc <HAL_DMA_IRQHandler+0x1f0>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d12f      	bne.n	80105c0 <HAL_DMA_IRQHandler+0x1f4>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f003 0304 	and.w	r3, r3, #4
 801056a:	2b00      	cmp	r3, #0
 801056c:	bf14      	ite	ne
 801056e:	2301      	movne	r3, #1
 8010570:	2300      	moveq	r3, #0
 8010572:	b2db      	uxtb	r3, r3
 8010574:	e02e      	b.n	80105d4 <HAL_DMA_IRQHandler+0x208>
 8010576:	bf00      	nop
 8010578:	24000058 	.word	0x24000058
 801057c:	1b4e81b5 	.word	0x1b4e81b5
 8010580:	40020010 	.word	0x40020010
 8010584:	40020028 	.word	0x40020028
 8010588:	40020040 	.word	0x40020040
 801058c:	40020058 	.word	0x40020058
 8010590:	40020070 	.word	0x40020070
 8010594:	40020088 	.word	0x40020088
 8010598:	400200a0 	.word	0x400200a0
 801059c:	400200b8 	.word	0x400200b8
 80105a0:	40020410 	.word	0x40020410
 80105a4:	40020428 	.word	0x40020428
 80105a8:	40020440 	.word	0x40020440
 80105ac:	40020458 	.word	0x40020458
 80105b0:	40020470 	.word	0x40020470
 80105b4:	40020488 	.word	0x40020488
 80105b8:	400204a0 	.word	0x400204a0
 80105bc:	400204b8 	.word	0x400204b8
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f003 0308 	and.w	r3, r3, #8
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	bf14      	ite	ne
 80105ce:	2301      	movne	r3, #1
 80105d0:	2300      	moveq	r3, #0
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d015      	beq.n	8010604 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f022 0204 	bic.w	r2, r2, #4
 80105e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ec:	f003 031f 	and.w	r3, r3, #31
 80105f0:	2208      	movs	r2, #8
 80105f2:	409a      	lsls	r2, r3
 80105f4:	6a3b      	ldr	r3, [r7, #32]
 80105f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105fc:	f043 0201 	orr.w	r2, r3, #1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010608:	f003 031f 	and.w	r3, r3, #31
 801060c:	69ba      	ldr	r2, [r7, #24]
 801060e:	fa22 f303 	lsr.w	r3, r2, r3
 8010612:	f003 0301 	and.w	r3, r3, #1
 8010616:	2b00      	cmp	r3, #0
 8010618:	d06e      	beq.n	80106f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a69      	ldr	r2, [pc, #420]	; (80107c4 <HAL_DMA_IRQHandler+0x3f8>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d04a      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a67      	ldr	r2, [pc, #412]	; (80107c8 <HAL_DMA_IRQHandler+0x3fc>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d045      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a66      	ldr	r2, [pc, #408]	; (80107cc <HAL_DMA_IRQHandler+0x400>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d040      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a64      	ldr	r2, [pc, #400]	; (80107d0 <HAL_DMA_IRQHandler+0x404>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d03b      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a63      	ldr	r2, [pc, #396]	; (80107d4 <HAL_DMA_IRQHandler+0x408>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d036      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a61      	ldr	r2, [pc, #388]	; (80107d8 <HAL_DMA_IRQHandler+0x40c>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d031      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a60      	ldr	r2, [pc, #384]	; (80107dc <HAL_DMA_IRQHandler+0x410>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d02c      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a5e      	ldr	r2, [pc, #376]	; (80107e0 <HAL_DMA_IRQHandler+0x414>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d027      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a5d      	ldr	r2, [pc, #372]	; (80107e4 <HAL_DMA_IRQHandler+0x418>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d022      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a5b      	ldr	r2, [pc, #364]	; (80107e8 <HAL_DMA_IRQHandler+0x41c>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d01d      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4a5a      	ldr	r2, [pc, #360]	; (80107ec <HAL_DMA_IRQHandler+0x420>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d018      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a58      	ldr	r2, [pc, #352]	; (80107f0 <HAL_DMA_IRQHandler+0x424>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d013      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a57      	ldr	r2, [pc, #348]	; (80107f4 <HAL_DMA_IRQHandler+0x428>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d00e      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a55      	ldr	r2, [pc, #340]	; (80107f8 <HAL_DMA_IRQHandler+0x42c>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d009      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4a54      	ldr	r2, [pc, #336]	; (80107fc <HAL_DMA_IRQHandler+0x430>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d004      	beq.n	80106ba <HAL_DMA_IRQHandler+0x2ee>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4a52      	ldr	r2, [pc, #328]	; (8010800 <HAL_DMA_IRQHandler+0x434>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d10a      	bne.n	80106d0 <HAL_DMA_IRQHandler+0x304>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	695b      	ldr	r3, [r3, #20]
 80106c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bf14      	ite	ne
 80106c8:	2301      	movne	r3, #1
 80106ca:	2300      	moveq	r3, #0
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	e003      	b.n	80106d8 <HAL_DMA_IRQHandler+0x30c>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2300      	movs	r3, #0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00d      	beq.n	80106f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106e0:	f003 031f 	and.w	r3, r3, #31
 80106e4:	2201      	movs	r2, #1
 80106e6:	409a      	lsls	r2, r3
 80106e8:	6a3b      	ldr	r3, [r7, #32]
 80106ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106f0:	f043 0202 	orr.w	r2, r3, #2
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106fc:	f003 031f 	and.w	r3, r3, #31
 8010700:	2204      	movs	r2, #4
 8010702:	409a      	lsls	r2, r3
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	4013      	ands	r3, r2
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 808f 	beq.w	801082c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a2c      	ldr	r2, [pc, #176]	; (80107c4 <HAL_DMA_IRQHandler+0x3f8>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d04a      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4a2a      	ldr	r2, [pc, #168]	; (80107c8 <HAL_DMA_IRQHandler+0x3fc>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d045      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a29      	ldr	r2, [pc, #164]	; (80107cc <HAL_DMA_IRQHandler+0x400>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d040      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a27      	ldr	r2, [pc, #156]	; (80107d0 <HAL_DMA_IRQHandler+0x404>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d03b      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a26      	ldr	r2, [pc, #152]	; (80107d4 <HAL_DMA_IRQHandler+0x408>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d036      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4a24      	ldr	r2, [pc, #144]	; (80107d8 <HAL_DMA_IRQHandler+0x40c>)
 8010746:	4293      	cmp	r3, r2
 8010748:	d031      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4a23      	ldr	r2, [pc, #140]	; (80107dc <HAL_DMA_IRQHandler+0x410>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d02c      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4a21      	ldr	r2, [pc, #132]	; (80107e0 <HAL_DMA_IRQHandler+0x414>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d027      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4a20      	ldr	r2, [pc, #128]	; (80107e4 <HAL_DMA_IRQHandler+0x418>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d022      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a1e      	ldr	r2, [pc, #120]	; (80107e8 <HAL_DMA_IRQHandler+0x41c>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d01d      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a1d      	ldr	r2, [pc, #116]	; (80107ec <HAL_DMA_IRQHandler+0x420>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d018      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a1b      	ldr	r2, [pc, #108]	; (80107f0 <HAL_DMA_IRQHandler+0x424>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d013      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a1a      	ldr	r2, [pc, #104]	; (80107f4 <HAL_DMA_IRQHandler+0x428>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d00e      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a18      	ldr	r2, [pc, #96]	; (80107f8 <HAL_DMA_IRQHandler+0x42c>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d009      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a17      	ldr	r2, [pc, #92]	; (80107fc <HAL_DMA_IRQHandler+0x430>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d004      	beq.n	80107ae <HAL_DMA_IRQHandler+0x3e2>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a15      	ldr	r2, [pc, #84]	; (8010800 <HAL_DMA_IRQHandler+0x434>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d12a      	bne.n	8010804 <HAL_DMA_IRQHandler+0x438>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f003 0302 	and.w	r3, r3, #2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	bf14      	ite	ne
 80107bc:	2301      	movne	r3, #1
 80107be:	2300      	moveq	r3, #0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	e023      	b.n	801080c <HAL_DMA_IRQHandler+0x440>
 80107c4:	40020010 	.word	0x40020010
 80107c8:	40020028 	.word	0x40020028
 80107cc:	40020040 	.word	0x40020040
 80107d0:	40020058 	.word	0x40020058
 80107d4:	40020070 	.word	0x40020070
 80107d8:	40020088 	.word	0x40020088
 80107dc:	400200a0 	.word	0x400200a0
 80107e0:	400200b8 	.word	0x400200b8
 80107e4:	40020410 	.word	0x40020410
 80107e8:	40020428 	.word	0x40020428
 80107ec:	40020440 	.word	0x40020440
 80107f0:	40020458 	.word	0x40020458
 80107f4:	40020470 	.word	0x40020470
 80107f8:	40020488 	.word	0x40020488
 80107fc:	400204a0 	.word	0x400204a0
 8010800:	400204b8 	.word	0x400204b8
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2300      	movs	r3, #0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d00d      	beq.n	801082c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010814:	f003 031f 	and.w	r3, r3, #31
 8010818:	2204      	movs	r2, #4
 801081a:	409a      	lsls	r2, r3
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010824:	f043 0204 	orr.w	r2, r3, #4
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010830:	f003 031f 	and.w	r3, r3, #31
 8010834:	2210      	movs	r2, #16
 8010836:	409a      	lsls	r2, r3
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	4013      	ands	r3, r2
 801083c:	2b00      	cmp	r3, #0
 801083e:	f000 80a6 	beq.w	801098e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4a85      	ldr	r2, [pc, #532]	; (8010a5c <HAL_DMA_IRQHandler+0x690>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d04a      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a83      	ldr	r2, [pc, #524]	; (8010a60 <HAL_DMA_IRQHandler+0x694>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d045      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a82      	ldr	r2, [pc, #520]	; (8010a64 <HAL_DMA_IRQHandler+0x698>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d040      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a80      	ldr	r2, [pc, #512]	; (8010a68 <HAL_DMA_IRQHandler+0x69c>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d03b      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a7f      	ldr	r2, [pc, #508]	; (8010a6c <HAL_DMA_IRQHandler+0x6a0>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d036      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4a7d      	ldr	r2, [pc, #500]	; (8010a70 <HAL_DMA_IRQHandler+0x6a4>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d031      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a7c      	ldr	r2, [pc, #496]	; (8010a74 <HAL_DMA_IRQHandler+0x6a8>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d02c      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a7a      	ldr	r2, [pc, #488]	; (8010a78 <HAL_DMA_IRQHandler+0x6ac>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d027      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a79      	ldr	r2, [pc, #484]	; (8010a7c <HAL_DMA_IRQHandler+0x6b0>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d022      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a77      	ldr	r2, [pc, #476]	; (8010a80 <HAL_DMA_IRQHandler+0x6b4>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d01d      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a76      	ldr	r2, [pc, #472]	; (8010a84 <HAL_DMA_IRQHandler+0x6b8>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d018      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a74      	ldr	r2, [pc, #464]	; (8010a88 <HAL_DMA_IRQHandler+0x6bc>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d013      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a73      	ldr	r2, [pc, #460]	; (8010a8c <HAL_DMA_IRQHandler+0x6c0>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d00e      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a71      	ldr	r2, [pc, #452]	; (8010a90 <HAL_DMA_IRQHandler+0x6c4>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d009      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a70      	ldr	r2, [pc, #448]	; (8010a94 <HAL_DMA_IRQHandler+0x6c8>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d004      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x516>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a6e      	ldr	r2, [pc, #440]	; (8010a98 <HAL_DMA_IRQHandler+0x6cc>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d10a      	bne.n	80108f8 <HAL_DMA_IRQHandler+0x52c>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f003 0308 	and.w	r3, r3, #8
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	bf14      	ite	ne
 80108f0:	2301      	movne	r3, #1
 80108f2:	2300      	moveq	r3, #0
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	e009      	b.n	801090c <HAL_DMA_IRQHandler+0x540>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	2b00      	cmp	r3, #0
 8010904:	bf14      	ite	ne
 8010906:	2301      	movne	r3, #1
 8010908:	2300      	moveq	r3, #0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d03e      	beq.n	801098e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010914:	f003 031f 	and.w	r3, r3, #31
 8010918:	2210      	movs	r2, #16
 801091a:	409a      	lsls	r2, r3
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801092a:	2b00      	cmp	r3, #0
 801092c:	d018      	beq.n	8010960 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d108      	bne.n	801094e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010940:	2b00      	cmp	r3, #0
 8010942:	d024      	beq.n	801098e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	4798      	blx	r3
 801094c:	e01f      	b.n	801098e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01b      	beq.n	801098e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	4798      	blx	r3
 801095e:	e016      	b.n	801098e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801096a:	2b00      	cmp	r3, #0
 801096c:	d107      	bne.n	801097e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f022 0208 	bic.w	r2, r2, #8
 801097c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010982:	2b00      	cmp	r3, #0
 8010984:	d003      	beq.n	801098e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010992:	f003 031f 	and.w	r3, r3, #31
 8010996:	2220      	movs	r2, #32
 8010998:	409a      	lsls	r2, r3
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	4013      	ands	r3, r2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f000 8110 	beq.w	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a2c      	ldr	r2, [pc, #176]	; (8010a5c <HAL_DMA_IRQHandler+0x690>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d04a      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4a2b      	ldr	r2, [pc, #172]	; (8010a60 <HAL_DMA_IRQHandler+0x694>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d045      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a29      	ldr	r2, [pc, #164]	; (8010a64 <HAL_DMA_IRQHandler+0x698>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d040      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a28      	ldr	r2, [pc, #160]	; (8010a68 <HAL_DMA_IRQHandler+0x69c>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d03b      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a26      	ldr	r2, [pc, #152]	; (8010a6c <HAL_DMA_IRQHandler+0x6a0>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d036      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a25      	ldr	r2, [pc, #148]	; (8010a70 <HAL_DMA_IRQHandler+0x6a4>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d031      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a23      	ldr	r2, [pc, #140]	; (8010a74 <HAL_DMA_IRQHandler+0x6a8>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d02c      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4a22      	ldr	r2, [pc, #136]	; (8010a78 <HAL_DMA_IRQHandler+0x6ac>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d027      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a20      	ldr	r2, [pc, #128]	; (8010a7c <HAL_DMA_IRQHandler+0x6b0>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d022      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a1f      	ldr	r2, [pc, #124]	; (8010a80 <HAL_DMA_IRQHandler+0x6b4>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d01d      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a1d      	ldr	r2, [pc, #116]	; (8010a84 <HAL_DMA_IRQHandler+0x6b8>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d018      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a1c      	ldr	r2, [pc, #112]	; (8010a88 <HAL_DMA_IRQHandler+0x6bc>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d013      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a1a      	ldr	r2, [pc, #104]	; (8010a8c <HAL_DMA_IRQHandler+0x6c0>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d00e      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a19      	ldr	r2, [pc, #100]	; (8010a90 <HAL_DMA_IRQHandler+0x6c4>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d009      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a17      	ldr	r2, [pc, #92]	; (8010a94 <HAL_DMA_IRQHandler+0x6c8>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d004      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x678>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a16      	ldr	r2, [pc, #88]	; (8010a98 <HAL_DMA_IRQHandler+0x6cc>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d12b      	bne.n	8010a9c <HAL_DMA_IRQHandler+0x6d0>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f003 0310 	and.w	r3, r3, #16
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bf14      	ite	ne
 8010a52:	2301      	movne	r3, #1
 8010a54:	2300      	moveq	r3, #0
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	e02a      	b.n	8010ab0 <HAL_DMA_IRQHandler+0x6e4>
 8010a5a:	bf00      	nop
 8010a5c:	40020010 	.word	0x40020010
 8010a60:	40020028 	.word	0x40020028
 8010a64:	40020040 	.word	0x40020040
 8010a68:	40020058 	.word	0x40020058
 8010a6c:	40020070 	.word	0x40020070
 8010a70:	40020088 	.word	0x40020088
 8010a74:	400200a0 	.word	0x400200a0
 8010a78:	400200b8 	.word	0x400200b8
 8010a7c:	40020410 	.word	0x40020410
 8010a80:	40020428 	.word	0x40020428
 8010a84:	40020440 	.word	0x40020440
 8010a88:	40020458 	.word	0x40020458
 8010a8c:	40020470 	.word	0x40020470
 8010a90:	40020488 	.word	0x40020488
 8010a94:	400204a0 	.word	0x400204a0
 8010a98:	400204b8 	.word	0x400204b8
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f003 0302 	and.w	r3, r3, #2
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	bf14      	ite	ne
 8010aaa:	2301      	movne	r3, #1
 8010aac:	2300      	moveq	r3, #0
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f000 8087 	beq.w	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010aba:	f003 031f 	and.w	r3, r3, #31
 8010abe:	2220      	movs	r2, #32
 8010ac0:	409a      	lsls	r2, r3
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b04      	cmp	r3, #4
 8010ad0:	d139      	bne.n	8010b46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f022 0216 	bic.w	r2, r2, #22
 8010ae0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	695a      	ldr	r2, [r3, #20]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010af0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d103      	bne.n	8010b02 <HAL_DMA_IRQHandler+0x736>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d007      	beq.n	8010b12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f022 0208 	bic.w	r2, r2, #8
 8010b10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b16:	f003 031f 	and.w	r3, r3, #31
 8010b1a:	223f      	movs	r2, #63	; 0x3f
 8010b1c:	409a      	lsls	r2, r3
 8010b1e:	6a3b      	ldr	r3, [r7, #32]
 8010b20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f000 834a 	beq.w	80111d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	4798      	blx	r3
          }
          return;
 8010b44:	e344      	b.n	80111d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d018      	beq.n	8010b86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d108      	bne.n	8010b74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d02c      	beq.n	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	4798      	blx	r3
 8010b72:	e027      	b.n	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d023      	beq.n	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	4798      	blx	r3
 8010b84:	e01e      	b.n	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10f      	bne.n	8010bb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f022 0210 	bic.w	r2, r2, #16
 8010ba2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d003      	beq.n	8010bc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 8306 	beq.w	80111da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bd2:	f003 0301 	and.w	r3, r3, #1
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 8088 	beq.w	8010cec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2204      	movs	r2, #4
 8010be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a7a      	ldr	r2, [pc, #488]	; (8010dd4 <HAL_DMA_IRQHandler+0xa08>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d04a      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a79      	ldr	r2, [pc, #484]	; (8010dd8 <HAL_DMA_IRQHandler+0xa0c>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d045      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4a77      	ldr	r2, [pc, #476]	; (8010ddc <HAL_DMA_IRQHandler+0xa10>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d040      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4a76      	ldr	r2, [pc, #472]	; (8010de0 <HAL_DMA_IRQHandler+0xa14>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d03b      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4a74      	ldr	r2, [pc, #464]	; (8010de4 <HAL_DMA_IRQHandler+0xa18>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d036      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4a73      	ldr	r2, [pc, #460]	; (8010de8 <HAL_DMA_IRQHandler+0xa1c>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d031      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a71      	ldr	r2, [pc, #452]	; (8010dec <HAL_DMA_IRQHandler+0xa20>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d02c      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4a70      	ldr	r2, [pc, #448]	; (8010df0 <HAL_DMA_IRQHandler+0xa24>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d027      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a6e      	ldr	r2, [pc, #440]	; (8010df4 <HAL_DMA_IRQHandler+0xa28>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d022      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	4a6d      	ldr	r2, [pc, #436]	; (8010df8 <HAL_DMA_IRQHandler+0xa2c>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d01d      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a6b      	ldr	r2, [pc, #428]	; (8010dfc <HAL_DMA_IRQHandler+0xa30>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d018      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a6a      	ldr	r2, [pc, #424]	; (8010e00 <HAL_DMA_IRQHandler+0xa34>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d013      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4a68      	ldr	r2, [pc, #416]	; (8010e04 <HAL_DMA_IRQHandler+0xa38>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d00e      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a67      	ldr	r2, [pc, #412]	; (8010e08 <HAL_DMA_IRQHandler+0xa3c>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d009      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4a65      	ldr	r2, [pc, #404]	; (8010e0c <HAL_DMA_IRQHandler+0xa40>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d004      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x8b8>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a64      	ldr	r2, [pc, #400]	; (8010e10 <HAL_DMA_IRQHandler+0xa44>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d108      	bne.n	8010c96 <HAL_DMA_IRQHandler+0x8ca>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f022 0201 	bic.w	r2, r2, #1
 8010c92:	601a      	str	r2, [r3, #0]
 8010c94:	e007      	b.n	8010ca6 <HAL_DMA_IRQHandler+0x8da>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	681a      	ldr	r2, [r3, #0]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f022 0201 	bic.w	r2, r2, #1
 8010ca4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	60fb      	str	r3, [r7, #12]
 8010cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d307      	bcc.n	8010cc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1f2      	bne.n	8010ca6 <HAL_DMA_IRQHandler+0x8da>
 8010cc0:	e000      	b.n	8010cc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8010cc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f003 0301 	and.w	r3, r3, #1
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d004      	beq.n	8010cdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2203      	movs	r2, #3
 8010cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010cda:	e003      	b.n	8010ce4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 8272 	beq.w	80111da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	4798      	blx	r3
 8010cfe:	e26c      	b.n	80111da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a43      	ldr	r2, [pc, #268]	; (8010e14 <HAL_DMA_IRQHandler+0xa48>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d022      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a42      	ldr	r2, [pc, #264]	; (8010e18 <HAL_DMA_IRQHandler+0xa4c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d01d      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a40      	ldr	r2, [pc, #256]	; (8010e1c <HAL_DMA_IRQHandler+0xa50>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d018      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a3f      	ldr	r2, [pc, #252]	; (8010e20 <HAL_DMA_IRQHandler+0xa54>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d013      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a3d      	ldr	r2, [pc, #244]	; (8010e24 <HAL_DMA_IRQHandler+0xa58>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d00e      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4a3c      	ldr	r2, [pc, #240]	; (8010e28 <HAL_DMA_IRQHandler+0xa5c>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d009      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a3a      	ldr	r2, [pc, #232]	; (8010e2c <HAL_DMA_IRQHandler+0xa60>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d004      	beq.n	8010d50 <HAL_DMA_IRQHandler+0x984>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a39      	ldr	r2, [pc, #228]	; (8010e30 <HAL_DMA_IRQHandler+0xa64>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d101      	bne.n	8010d54 <HAL_DMA_IRQHandler+0x988>
 8010d50:	2301      	movs	r3, #1
 8010d52:	e000      	b.n	8010d56 <HAL_DMA_IRQHandler+0x98a>
 8010d54:	2300      	movs	r3, #0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	f000 823f 	beq.w	80111da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d68:	f003 031f 	and.w	r3, r3, #31
 8010d6c:	2204      	movs	r2, #4
 8010d6e:	409a      	lsls	r2, r3
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	4013      	ands	r3, r2
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f000 80cd 	beq.w	8010f14 <HAL_DMA_IRQHandler+0xb48>
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f000 80c7 	beq.w	8010f14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d8a:	f003 031f 	and.w	r3, r3, #31
 8010d8e:	2204      	movs	r2, #4
 8010d90:	409a      	lsls	r2, r3
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d049      	beq.n	8010e34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d109      	bne.n	8010dbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 8210 	beq.w	80111d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010dbc:	e20a      	b.n	80111d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 8206 	beq.w	80111d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010dd0:	e200      	b.n	80111d4 <HAL_DMA_IRQHandler+0xe08>
 8010dd2:	bf00      	nop
 8010dd4:	40020010 	.word	0x40020010
 8010dd8:	40020028 	.word	0x40020028
 8010ddc:	40020040 	.word	0x40020040
 8010de0:	40020058 	.word	0x40020058
 8010de4:	40020070 	.word	0x40020070
 8010de8:	40020088 	.word	0x40020088
 8010dec:	400200a0 	.word	0x400200a0
 8010df0:	400200b8 	.word	0x400200b8
 8010df4:	40020410 	.word	0x40020410
 8010df8:	40020428 	.word	0x40020428
 8010dfc:	40020440 	.word	0x40020440
 8010e00:	40020458 	.word	0x40020458
 8010e04:	40020470 	.word	0x40020470
 8010e08:	40020488 	.word	0x40020488
 8010e0c:	400204a0 	.word	0x400204a0
 8010e10:	400204b8 	.word	0x400204b8
 8010e14:	58025408 	.word	0x58025408
 8010e18:	5802541c 	.word	0x5802541c
 8010e1c:	58025430 	.word	0x58025430
 8010e20:	58025444 	.word	0x58025444
 8010e24:	58025458 	.word	0x58025458
 8010e28:	5802546c 	.word	0x5802546c
 8010e2c:	58025480 	.word	0x58025480
 8010e30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	f003 0320 	and.w	r3, r3, #32
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d160      	bne.n	8010f00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a7f      	ldr	r2, [pc, #508]	; (8011040 <HAL_DMA_IRQHandler+0xc74>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d04a      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a7d      	ldr	r2, [pc, #500]	; (8011044 <HAL_DMA_IRQHandler+0xc78>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d045      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a7c      	ldr	r2, [pc, #496]	; (8011048 <HAL_DMA_IRQHandler+0xc7c>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d040      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4a7a      	ldr	r2, [pc, #488]	; (801104c <HAL_DMA_IRQHandler+0xc80>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d03b      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a79      	ldr	r2, [pc, #484]	; (8011050 <HAL_DMA_IRQHandler+0xc84>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d036      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a77      	ldr	r2, [pc, #476]	; (8011054 <HAL_DMA_IRQHandler+0xc88>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d031      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4a76      	ldr	r2, [pc, #472]	; (8011058 <HAL_DMA_IRQHandler+0xc8c>)
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d02c      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a74      	ldr	r2, [pc, #464]	; (801105c <HAL_DMA_IRQHandler+0xc90>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d027      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a73      	ldr	r2, [pc, #460]	; (8011060 <HAL_DMA_IRQHandler+0xc94>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d022      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a71      	ldr	r2, [pc, #452]	; (8011064 <HAL_DMA_IRQHandler+0xc98>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d01d      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	4a70      	ldr	r2, [pc, #448]	; (8011068 <HAL_DMA_IRQHandler+0xc9c>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d018      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a6e      	ldr	r2, [pc, #440]	; (801106c <HAL_DMA_IRQHandler+0xca0>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d013      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a6d      	ldr	r2, [pc, #436]	; (8011070 <HAL_DMA_IRQHandler+0xca4>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d00e      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a6b      	ldr	r2, [pc, #428]	; (8011074 <HAL_DMA_IRQHandler+0xca8>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d009      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a6a      	ldr	r2, [pc, #424]	; (8011078 <HAL_DMA_IRQHandler+0xcac>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d004      	beq.n	8010ede <HAL_DMA_IRQHandler+0xb12>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a68      	ldr	r2, [pc, #416]	; (801107c <HAL_DMA_IRQHandler+0xcb0>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d108      	bne.n	8010ef0 <HAL_DMA_IRQHandler+0xb24>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f022 0208 	bic.w	r2, r2, #8
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	e007      	b.n	8010f00 <HAL_DMA_IRQHandler+0xb34>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f022 0204 	bic.w	r2, r2, #4
 8010efe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f000 8165 	beq.w	80111d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010f12:	e15f      	b.n	80111d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f18:	f003 031f 	and.w	r3, r3, #31
 8010f1c:	2202      	movs	r2, #2
 8010f1e:	409a      	lsls	r2, r3
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	4013      	ands	r3, r2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 80c5 	beq.w	80110b4 <HAL_DMA_IRQHandler+0xce8>
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 80bf 	beq.w	80110b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f3a:	f003 031f 	and.w	r3, r3, #31
 8010f3e:	2202      	movs	r2, #2
 8010f40:	409a      	lsls	r2, r3
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d018      	beq.n	8010f82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d109      	bne.n	8010f6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f000 813a 	beq.w	80111d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010f6c:	e134      	b.n	80111d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	f000 8130 	beq.w	80111d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010f80:	e12a      	b.n	80111d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f040 8089 	bne.w	80110a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4a2b      	ldr	r2, [pc, #172]	; (8011040 <HAL_DMA_IRQHandler+0xc74>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d04a      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a29      	ldr	r2, [pc, #164]	; (8011044 <HAL_DMA_IRQHandler+0xc78>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d045      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a28      	ldr	r2, [pc, #160]	; (8011048 <HAL_DMA_IRQHandler+0xc7c>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d040      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a26      	ldr	r2, [pc, #152]	; (801104c <HAL_DMA_IRQHandler+0xc80>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d03b      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a25      	ldr	r2, [pc, #148]	; (8011050 <HAL_DMA_IRQHandler+0xc84>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d036      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4a23      	ldr	r2, [pc, #140]	; (8011054 <HAL_DMA_IRQHandler+0xc88>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d031      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a22      	ldr	r2, [pc, #136]	; (8011058 <HAL_DMA_IRQHandler+0xc8c>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d02c      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a20      	ldr	r2, [pc, #128]	; (801105c <HAL_DMA_IRQHandler+0xc90>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d027      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4a1f      	ldr	r2, [pc, #124]	; (8011060 <HAL_DMA_IRQHandler+0xc94>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d022      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a1d      	ldr	r2, [pc, #116]	; (8011064 <HAL_DMA_IRQHandler+0xc98>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d01d      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4a1c      	ldr	r2, [pc, #112]	; (8011068 <HAL_DMA_IRQHandler+0xc9c>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d018      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4a1a      	ldr	r2, [pc, #104]	; (801106c <HAL_DMA_IRQHandler+0xca0>)
 8011002:	4293      	cmp	r3, r2
 8011004:	d013      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4a19      	ldr	r2, [pc, #100]	; (8011070 <HAL_DMA_IRQHandler+0xca4>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d00e      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a17      	ldr	r2, [pc, #92]	; (8011074 <HAL_DMA_IRQHandler+0xca8>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d009      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4a16      	ldr	r2, [pc, #88]	; (8011078 <HAL_DMA_IRQHandler+0xcac>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d004      	beq.n	801102e <HAL_DMA_IRQHandler+0xc62>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a14      	ldr	r2, [pc, #80]	; (801107c <HAL_DMA_IRQHandler+0xcb0>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d128      	bne.n	8011080 <HAL_DMA_IRQHandler+0xcb4>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f022 0214 	bic.w	r2, r2, #20
 801103c:	601a      	str	r2, [r3, #0]
 801103e:	e027      	b.n	8011090 <HAL_DMA_IRQHandler+0xcc4>
 8011040:	40020010 	.word	0x40020010
 8011044:	40020028 	.word	0x40020028
 8011048:	40020040 	.word	0x40020040
 801104c:	40020058 	.word	0x40020058
 8011050:	40020070 	.word	0x40020070
 8011054:	40020088 	.word	0x40020088
 8011058:	400200a0 	.word	0x400200a0
 801105c:	400200b8 	.word	0x400200b8
 8011060:	40020410 	.word	0x40020410
 8011064:	40020428 	.word	0x40020428
 8011068:	40020440 	.word	0x40020440
 801106c:	40020458 	.word	0x40020458
 8011070:	40020470 	.word	0x40020470
 8011074:	40020488 	.word	0x40020488
 8011078:	400204a0 	.word	0x400204a0
 801107c:	400204b8 	.word	0x400204b8
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f022 020a 	bic.w	r2, r2, #10
 801108e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2201      	movs	r2, #1
 8011094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 8097 	beq.w	80111d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80110b2:	e091      	b.n	80111d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110b8:	f003 031f 	and.w	r3, r3, #31
 80110bc:	2208      	movs	r2, #8
 80110be:	409a      	lsls	r2, r3
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	4013      	ands	r3, r2
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f000 8088 	beq.w	80111da <HAL_DMA_IRQHandler+0xe0e>
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	f003 0308 	and.w	r3, r3, #8
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f000 8082 	beq.w	80111da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a41      	ldr	r2, [pc, #260]	; (80111e0 <HAL_DMA_IRQHandler+0xe14>)
 80110dc:	4293      	cmp	r3, r2
 80110de:	d04a      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4a3f      	ldr	r2, [pc, #252]	; (80111e4 <HAL_DMA_IRQHandler+0xe18>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d045      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4a3e      	ldr	r2, [pc, #248]	; (80111e8 <HAL_DMA_IRQHandler+0xe1c>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d040      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4a3c      	ldr	r2, [pc, #240]	; (80111ec <HAL_DMA_IRQHandler+0xe20>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d03b      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	4a3b      	ldr	r2, [pc, #236]	; (80111f0 <HAL_DMA_IRQHandler+0xe24>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d036      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a39      	ldr	r2, [pc, #228]	; (80111f4 <HAL_DMA_IRQHandler+0xe28>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d031      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a38      	ldr	r2, [pc, #224]	; (80111f8 <HAL_DMA_IRQHandler+0xe2c>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d02c      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a36      	ldr	r2, [pc, #216]	; (80111fc <HAL_DMA_IRQHandler+0xe30>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d027      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a35      	ldr	r2, [pc, #212]	; (8011200 <HAL_DMA_IRQHandler+0xe34>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d022      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a33      	ldr	r2, [pc, #204]	; (8011204 <HAL_DMA_IRQHandler+0xe38>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d01d      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a32      	ldr	r2, [pc, #200]	; (8011208 <HAL_DMA_IRQHandler+0xe3c>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d018      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a30      	ldr	r2, [pc, #192]	; (801120c <HAL_DMA_IRQHandler+0xe40>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d013      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a2f      	ldr	r2, [pc, #188]	; (8011210 <HAL_DMA_IRQHandler+0xe44>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d00e      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a2d      	ldr	r2, [pc, #180]	; (8011214 <HAL_DMA_IRQHandler+0xe48>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d009      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a2c      	ldr	r2, [pc, #176]	; (8011218 <HAL_DMA_IRQHandler+0xe4c>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d004      	beq.n	8011176 <HAL_DMA_IRQHandler+0xdaa>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a2a      	ldr	r2, [pc, #168]	; (801121c <HAL_DMA_IRQHandler+0xe50>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d108      	bne.n	8011188 <HAL_DMA_IRQHandler+0xdbc>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f022 021c 	bic.w	r2, r2, #28
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	e007      	b.n	8011198 <HAL_DMA_IRQHandler+0xdcc>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f022 020e 	bic.w	r2, r2, #14
 8011196:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801119c:	f003 031f 	and.w	r3, r3, #31
 80111a0:	2201      	movs	r2, #1
 80111a2:	409a      	lsls	r2, r3
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2201      	movs	r2, #1
 80111ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2201      	movs	r2, #1
 80111b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2200      	movs	r2, #0
 80111ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d009      	beq.n	80111da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	4798      	blx	r3
 80111ce:	e004      	b.n	80111da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80111d0:	bf00      	nop
 80111d2:	e002      	b.n	80111da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80111d4:	bf00      	nop
 80111d6:	e000      	b.n	80111da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80111d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80111da:	3728      	adds	r7, #40	; 0x28
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	40020010 	.word	0x40020010
 80111e4:	40020028 	.word	0x40020028
 80111e8:	40020040 	.word	0x40020040
 80111ec:	40020058 	.word	0x40020058
 80111f0:	40020070 	.word	0x40020070
 80111f4:	40020088 	.word	0x40020088
 80111f8:	400200a0 	.word	0x400200a0
 80111fc:	400200b8 	.word	0x400200b8
 8011200:	40020410 	.word	0x40020410
 8011204:	40020428 	.word	0x40020428
 8011208:	40020440 	.word	0x40020440
 801120c:	40020458 	.word	0x40020458
 8011210:	40020470 	.word	0x40020470
 8011214:	40020488 	.word	0x40020488
 8011218:	400204a0 	.word	0x400204a0
 801121c:	400204b8 	.word	0x400204b8

08011220 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011220:	b480      	push	{r7}
 8011222:	b087      	sub	sp, #28
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011232:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011238:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a7f      	ldr	r2, [pc, #508]	; (801143c <DMA_SetConfig+0x21c>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d072      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a7d      	ldr	r2, [pc, #500]	; (8011440 <DMA_SetConfig+0x220>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d06d      	beq.n	801132a <DMA_SetConfig+0x10a>
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4a7c      	ldr	r2, [pc, #496]	; (8011444 <DMA_SetConfig+0x224>)
 8011254:	4293      	cmp	r3, r2
 8011256:	d068      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a7a      	ldr	r2, [pc, #488]	; (8011448 <DMA_SetConfig+0x228>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d063      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a79      	ldr	r2, [pc, #484]	; (801144c <DMA_SetConfig+0x22c>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d05e      	beq.n	801132a <DMA_SetConfig+0x10a>
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a77      	ldr	r2, [pc, #476]	; (8011450 <DMA_SetConfig+0x230>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d059      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a76      	ldr	r2, [pc, #472]	; (8011454 <DMA_SetConfig+0x234>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d054      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	4a74      	ldr	r2, [pc, #464]	; (8011458 <DMA_SetConfig+0x238>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d04f      	beq.n	801132a <DMA_SetConfig+0x10a>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4a73      	ldr	r2, [pc, #460]	; (801145c <DMA_SetConfig+0x23c>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d04a      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a71      	ldr	r2, [pc, #452]	; (8011460 <DMA_SetConfig+0x240>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d045      	beq.n	801132a <DMA_SetConfig+0x10a>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4a70      	ldr	r2, [pc, #448]	; (8011464 <DMA_SetConfig+0x244>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d040      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a6e      	ldr	r2, [pc, #440]	; (8011468 <DMA_SetConfig+0x248>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d03b      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a6d      	ldr	r2, [pc, #436]	; (801146c <DMA_SetConfig+0x24c>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d036      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a6b      	ldr	r2, [pc, #428]	; (8011470 <DMA_SetConfig+0x250>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d031      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4a6a      	ldr	r2, [pc, #424]	; (8011474 <DMA_SetConfig+0x254>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d02c      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4a68      	ldr	r2, [pc, #416]	; (8011478 <DMA_SetConfig+0x258>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d027      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4a67      	ldr	r2, [pc, #412]	; (801147c <DMA_SetConfig+0x25c>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d022      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a65      	ldr	r2, [pc, #404]	; (8011480 <DMA_SetConfig+0x260>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d01d      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	4a64      	ldr	r2, [pc, #400]	; (8011484 <DMA_SetConfig+0x264>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d018      	beq.n	801132a <DMA_SetConfig+0x10a>
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a62      	ldr	r2, [pc, #392]	; (8011488 <DMA_SetConfig+0x268>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d013      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	4a61      	ldr	r2, [pc, #388]	; (801148c <DMA_SetConfig+0x26c>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d00e      	beq.n	801132a <DMA_SetConfig+0x10a>
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a5f      	ldr	r2, [pc, #380]	; (8011490 <DMA_SetConfig+0x270>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d009      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a5e      	ldr	r2, [pc, #376]	; (8011494 <DMA_SetConfig+0x274>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d004      	beq.n	801132a <DMA_SetConfig+0x10a>
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a5c      	ldr	r2, [pc, #368]	; (8011498 <DMA_SetConfig+0x278>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d101      	bne.n	801132e <DMA_SetConfig+0x10e>
 801132a:	2301      	movs	r3, #1
 801132c:	e000      	b.n	8011330 <DMA_SetConfig+0x110>
 801132e:	2300      	movs	r3, #0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00d      	beq.n	8011350 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011338:	68fa      	ldr	r2, [r7, #12]
 801133a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801133c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011342:	2b00      	cmp	r3, #0
 8011344:	d004      	beq.n	8011350 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801134e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a39      	ldr	r2, [pc, #228]	; (801143c <DMA_SetConfig+0x21c>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d04a      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4a38      	ldr	r2, [pc, #224]	; (8011440 <DMA_SetConfig+0x220>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d045      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4a36      	ldr	r2, [pc, #216]	; (8011444 <DMA_SetConfig+0x224>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d040      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4a35      	ldr	r2, [pc, #212]	; (8011448 <DMA_SetConfig+0x228>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d03b      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a33      	ldr	r2, [pc, #204]	; (801144c <DMA_SetConfig+0x22c>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d036      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4a32      	ldr	r2, [pc, #200]	; (8011450 <DMA_SetConfig+0x230>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d031      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4a30      	ldr	r2, [pc, #192]	; (8011454 <DMA_SetConfig+0x234>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d02c      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a2f      	ldr	r2, [pc, #188]	; (8011458 <DMA_SetConfig+0x238>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d027      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4a2d      	ldr	r2, [pc, #180]	; (801145c <DMA_SetConfig+0x23c>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d022      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a2c      	ldr	r2, [pc, #176]	; (8011460 <DMA_SetConfig+0x240>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d01d      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4a2a      	ldr	r2, [pc, #168]	; (8011464 <DMA_SetConfig+0x244>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d018      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4a29      	ldr	r2, [pc, #164]	; (8011468 <DMA_SetConfig+0x248>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d013      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a27      	ldr	r2, [pc, #156]	; (801146c <DMA_SetConfig+0x24c>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d00e      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4a26      	ldr	r2, [pc, #152]	; (8011470 <DMA_SetConfig+0x250>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d009      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a24      	ldr	r2, [pc, #144]	; (8011474 <DMA_SetConfig+0x254>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d004      	beq.n	80113f0 <DMA_SetConfig+0x1d0>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a23      	ldr	r2, [pc, #140]	; (8011478 <DMA_SetConfig+0x258>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d101      	bne.n	80113f4 <DMA_SetConfig+0x1d4>
 80113f0:	2301      	movs	r3, #1
 80113f2:	e000      	b.n	80113f6 <DMA_SetConfig+0x1d6>
 80113f4:	2300      	movs	r3, #0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d059      	beq.n	80114ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113fe:	f003 031f 	and.w	r3, r3, #31
 8011402:	223f      	movs	r2, #63	; 0x3f
 8011404:	409a      	lsls	r2, r3
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011418:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	2b40      	cmp	r3, #64	; 0x40
 8011428:	d138      	bne.n	801149c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	68ba      	ldr	r2, [r7, #8]
 8011438:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801143a:	e086      	b.n	801154a <DMA_SetConfig+0x32a>
 801143c:	40020010 	.word	0x40020010
 8011440:	40020028 	.word	0x40020028
 8011444:	40020040 	.word	0x40020040
 8011448:	40020058 	.word	0x40020058
 801144c:	40020070 	.word	0x40020070
 8011450:	40020088 	.word	0x40020088
 8011454:	400200a0 	.word	0x400200a0
 8011458:	400200b8 	.word	0x400200b8
 801145c:	40020410 	.word	0x40020410
 8011460:	40020428 	.word	0x40020428
 8011464:	40020440 	.word	0x40020440
 8011468:	40020458 	.word	0x40020458
 801146c:	40020470 	.word	0x40020470
 8011470:	40020488 	.word	0x40020488
 8011474:	400204a0 	.word	0x400204a0
 8011478:	400204b8 	.word	0x400204b8
 801147c:	58025408 	.word	0x58025408
 8011480:	5802541c 	.word	0x5802541c
 8011484:	58025430 	.word	0x58025430
 8011488:	58025444 	.word	0x58025444
 801148c:	58025458 	.word	0x58025458
 8011490:	5802546c 	.word	0x5802546c
 8011494:	58025480 	.word	0x58025480
 8011498:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68ba      	ldr	r2, [r7, #8]
 80114a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	60da      	str	r2, [r3, #12]
}
 80114ac:	e04d      	b.n	801154a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	4a29      	ldr	r2, [pc, #164]	; (8011558 <DMA_SetConfig+0x338>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d022      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a27      	ldr	r2, [pc, #156]	; (801155c <DMA_SetConfig+0x33c>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d01d      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4a26      	ldr	r2, [pc, #152]	; (8011560 <DMA_SetConfig+0x340>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d018      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a24      	ldr	r2, [pc, #144]	; (8011564 <DMA_SetConfig+0x344>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d013      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4a23      	ldr	r2, [pc, #140]	; (8011568 <DMA_SetConfig+0x348>)
 80114dc:	4293      	cmp	r3, r2
 80114de:	d00e      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4a21      	ldr	r2, [pc, #132]	; (801156c <DMA_SetConfig+0x34c>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d009      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4a20      	ldr	r2, [pc, #128]	; (8011570 <DMA_SetConfig+0x350>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d004      	beq.n	80114fe <DMA_SetConfig+0x2de>
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a1e      	ldr	r2, [pc, #120]	; (8011574 <DMA_SetConfig+0x354>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d101      	bne.n	8011502 <DMA_SetConfig+0x2e2>
 80114fe:	2301      	movs	r3, #1
 8011500:	e000      	b.n	8011504 <DMA_SetConfig+0x2e4>
 8011502:	2300      	movs	r3, #0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d020      	beq.n	801154a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801150c:	f003 031f 	and.w	r3, r3, #31
 8011510:	2201      	movs	r2, #1
 8011512:	409a      	lsls	r2, r3
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	2b40      	cmp	r3, #64	; 0x40
 8011526:	d108      	bne.n	801153a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	60da      	str	r2, [r3, #12]
}
 8011538:	e007      	b.n	801154a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	60da      	str	r2, [r3, #12]
}
 801154a:	bf00      	nop
 801154c:	371c      	adds	r7, #28
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	58025408 	.word	0x58025408
 801155c:	5802541c 	.word	0x5802541c
 8011560:	58025430 	.word	0x58025430
 8011564:	58025444 	.word	0x58025444
 8011568:	58025458 	.word	0x58025458
 801156c:	5802546c 	.word	0x5802546c
 8011570:	58025480 	.word	0x58025480
 8011574:	58025494 	.word	0x58025494

08011578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4a42      	ldr	r2, [pc, #264]	; (8011690 <DMA_CalcBaseAndBitshift+0x118>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d04a      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4a41      	ldr	r2, [pc, #260]	; (8011694 <DMA_CalcBaseAndBitshift+0x11c>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d045      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4a3f      	ldr	r2, [pc, #252]	; (8011698 <DMA_CalcBaseAndBitshift+0x120>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d040      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4a3e      	ldr	r2, [pc, #248]	; (801169c <DMA_CalcBaseAndBitshift+0x124>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d03b      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a3c      	ldr	r2, [pc, #240]	; (80116a0 <DMA_CalcBaseAndBitshift+0x128>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d036      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a3b      	ldr	r2, [pc, #236]	; (80116a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d031      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4a39      	ldr	r2, [pc, #228]	; (80116a8 <DMA_CalcBaseAndBitshift+0x130>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d02c      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a38      	ldr	r2, [pc, #224]	; (80116ac <DMA_CalcBaseAndBitshift+0x134>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d027      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a36      	ldr	r2, [pc, #216]	; (80116b0 <DMA_CalcBaseAndBitshift+0x138>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d022      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4a35      	ldr	r2, [pc, #212]	; (80116b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d01d      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a33      	ldr	r2, [pc, #204]	; (80116b8 <DMA_CalcBaseAndBitshift+0x140>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d018      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4a32      	ldr	r2, [pc, #200]	; (80116bc <DMA_CalcBaseAndBitshift+0x144>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d013      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	4a30      	ldr	r2, [pc, #192]	; (80116c0 <DMA_CalcBaseAndBitshift+0x148>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d00e      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	4a2f      	ldr	r2, [pc, #188]	; (80116c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d009      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a2d      	ldr	r2, [pc, #180]	; (80116c8 <DMA_CalcBaseAndBitshift+0x150>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d004      	beq.n	8011620 <DMA_CalcBaseAndBitshift+0xa8>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a2c      	ldr	r2, [pc, #176]	; (80116cc <DMA_CalcBaseAndBitshift+0x154>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d101      	bne.n	8011624 <DMA_CalcBaseAndBitshift+0xac>
 8011620:	2301      	movs	r3, #1
 8011622:	e000      	b.n	8011626 <DMA_CalcBaseAndBitshift+0xae>
 8011624:	2300      	movs	r3, #0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d024      	beq.n	8011674 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	b2db      	uxtb	r3, r3
 8011630:	3b10      	subs	r3, #16
 8011632:	4a27      	ldr	r2, [pc, #156]	; (80116d0 <DMA_CalcBaseAndBitshift+0x158>)
 8011634:	fba2 2303 	umull	r2, r3, r2, r3
 8011638:	091b      	lsrs	r3, r3, #4
 801163a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f003 0307 	and.w	r3, r3, #7
 8011642:	4a24      	ldr	r2, [pc, #144]	; (80116d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8011644:	5cd3      	ldrb	r3, [r2, r3]
 8011646:	461a      	mov	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2b03      	cmp	r3, #3
 8011650:	d908      	bls.n	8011664 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	461a      	mov	r2, r3
 8011658:	4b1f      	ldr	r3, [pc, #124]	; (80116d8 <DMA_CalcBaseAndBitshift+0x160>)
 801165a:	4013      	ands	r3, r2
 801165c:	1d1a      	adds	r2, r3, #4
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	659a      	str	r2, [r3, #88]	; 0x58
 8011662:	e00d      	b.n	8011680 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	461a      	mov	r2, r3
 801166a:	4b1b      	ldr	r3, [pc, #108]	; (80116d8 <DMA_CalcBaseAndBitshift+0x160>)
 801166c:	4013      	ands	r3, r2
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	6593      	str	r3, [r2, #88]	; 0x58
 8011672:	e005      	b.n	8011680 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011684:	4618      	mov	r0, r3
 8011686:	3714      	adds	r7, #20
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	40020010 	.word	0x40020010
 8011694:	40020028 	.word	0x40020028
 8011698:	40020040 	.word	0x40020040
 801169c:	40020058 	.word	0x40020058
 80116a0:	40020070 	.word	0x40020070
 80116a4:	40020088 	.word	0x40020088
 80116a8:	400200a0 	.word	0x400200a0
 80116ac:	400200b8 	.word	0x400200b8
 80116b0:	40020410 	.word	0x40020410
 80116b4:	40020428 	.word	0x40020428
 80116b8:	40020440 	.word	0x40020440
 80116bc:	40020458 	.word	0x40020458
 80116c0:	40020470 	.word	0x40020470
 80116c4:	40020488 	.word	0x40020488
 80116c8:	400204a0 	.word	0x400204a0
 80116cc:	400204b8 	.word	0x400204b8
 80116d0:	aaaaaaab 	.word	0xaaaaaaab
 80116d4:	08023b1c 	.word	0x08023b1c
 80116d8:	fffffc00 	.word	0xfffffc00

080116dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80116e4:	2300      	movs	r3, #0
 80116e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	699b      	ldr	r3, [r3, #24]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d120      	bne.n	8011732 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d858      	bhi.n	80117aa <DMA_CheckFifoParam+0xce>
 80116f8:	a201      	add	r2, pc, #4	; (adr r2, 8011700 <DMA_CheckFifoParam+0x24>)
 80116fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fe:	bf00      	nop
 8011700:	08011711 	.word	0x08011711
 8011704:	08011723 	.word	0x08011723
 8011708:	08011711 	.word	0x08011711
 801170c:	080117ab 	.word	0x080117ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011718:	2b00      	cmp	r3, #0
 801171a:	d048      	beq.n	80117ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801171c:	2301      	movs	r3, #1
 801171e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011720:	e045      	b.n	80117ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801172a:	d142      	bne.n	80117b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801172c:	2301      	movs	r3, #1
 801172e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011730:	e03f      	b.n	80117b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	699b      	ldr	r3, [r3, #24]
 8011736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801173a:	d123      	bne.n	8011784 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011740:	2b03      	cmp	r3, #3
 8011742:	d838      	bhi.n	80117b6 <DMA_CheckFifoParam+0xda>
 8011744:	a201      	add	r2, pc, #4	; (adr r2, 801174c <DMA_CheckFifoParam+0x70>)
 8011746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174a:	bf00      	nop
 801174c:	0801175d 	.word	0x0801175d
 8011750:	08011763 	.word	0x08011763
 8011754:	0801175d 	.word	0x0801175d
 8011758:	08011775 	.word	0x08011775
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	73fb      	strb	r3, [r7, #15]
        break;
 8011760:	e030      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801176a:	2b00      	cmp	r3, #0
 801176c:	d025      	beq.n	80117ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011772:	e022      	b.n	80117ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801177c:	d11f      	bne.n	80117be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011782:	e01c      	b.n	80117be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011788:	2b02      	cmp	r3, #2
 801178a:	d902      	bls.n	8011792 <DMA_CheckFifoParam+0xb6>
 801178c:	2b03      	cmp	r3, #3
 801178e:	d003      	beq.n	8011798 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8011790:	e018      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	73fb      	strb	r3, [r7, #15]
        break;
 8011796:	e015      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801179c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00e      	beq.n	80117c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80117a4:	2301      	movs	r3, #1
 80117a6:	73fb      	strb	r3, [r7, #15]
    break;
 80117a8:	e00b      	b.n	80117c2 <DMA_CheckFifoParam+0xe6>
        break;
 80117aa:	bf00      	nop
 80117ac:	e00a      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        break;
 80117ae:	bf00      	nop
 80117b0:	e008      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        break;
 80117b2:	bf00      	nop
 80117b4:	e006      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        break;
 80117b6:	bf00      	nop
 80117b8:	e004      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        break;
 80117ba:	bf00      	nop
 80117bc:	e002      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
        break;
 80117be:	bf00      	nop
 80117c0:	e000      	b.n	80117c4 <DMA_CheckFifoParam+0xe8>
    break;
 80117c2:	bf00      	nop
    }
  }

  return status;
 80117c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3714      	adds	r7, #20
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop

080117d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	4a38      	ldr	r2, [pc, #224]	; (80118c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d022      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a36      	ldr	r2, [pc, #216]	; (80118cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d01d      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4a35      	ldr	r2, [pc, #212]	; (80118d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d018      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4a33      	ldr	r2, [pc, #204]	; (80118d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d013      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	4a32      	ldr	r2, [pc, #200]	; (80118d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d00e      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a30      	ldr	r2, [pc, #192]	; (80118dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d009      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4a2f      	ldr	r2, [pc, #188]	; (80118e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d004      	beq.n	8011832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a2d      	ldr	r2, [pc, #180]	; (80118e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d101      	bne.n	8011836 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8011832:	2301      	movs	r3, #1
 8011834:	e000      	b.n	8011838 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8011836:	2300      	movs	r3, #0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d01a      	beq.n	8011872 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	b2db      	uxtb	r3, r3
 8011842:	3b08      	subs	r3, #8
 8011844:	4a28      	ldr	r2, [pc, #160]	; (80118e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8011846:	fba2 2303 	umull	r2, r3, r2, r3
 801184a:	091b      	lsrs	r3, r3, #4
 801184c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	4b26      	ldr	r3, [pc, #152]	; (80118ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8011852:	4413      	add	r3, r2
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	461a      	mov	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	4a24      	ldr	r2, [pc, #144]	; (80118f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8011860:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f003 031f 	and.w	r3, r3, #31
 8011868:	2201      	movs	r2, #1
 801186a:	409a      	lsls	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8011870:	e024      	b.n	80118bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	b2db      	uxtb	r3, r3
 8011878:	3b10      	subs	r3, #16
 801187a:	4a1e      	ldr	r2, [pc, #120]	; (80118f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801187c:	fba2 2303 	umull	r2, r3, r2, r3
 8011880:	091b      	lsrs	r3, r3, #4
 8011882:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	4a1c      	ldr	r2, [pc, #112]	; (80118f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d806      	bhi.n	801189a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	4a1b      	ldr	r2, [pc, #108]	; (80118fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d902      	bls.n	801189a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	3308      	adds	r3, #8
 8011898:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	4b18      	ldr	r3, [pc, #96]	; (8011900 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801189e:	4413      	add	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	461a      	mov	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4a16      	ldr	r2, [pc, #88]	; (8011904 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80118ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f003 031f 	and.w	r3, r3, #31
 80118b4:	2201      	movs	r2, #1
 80118b6:	409a      	lsls	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80118bc:	bf00      	nop
 80118be:	3714      	adds	r7, #20
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	58025408 	.word	0x58025408
 80118cc:	5802541c 	.word	0x5802541c
 80118d0:	58025430 	.word	0x58025430
 80118d4:	58025444 	.word	0x58025444
 80118d8:	58025458 	.word	0x58025458
 80118dc:	5802546c 	.word	0x5802546c
 80118e0:	58025480 	.word	0x58025480
 80118e4:	58025494 	.word	0x58025494
 80118e8:	cccccccd 	.word	0xcccccccd
 80118ec:	16009600 	.word	0x16009600
 80118f0:	58025880 	.word	0x58025880
 80118f4:	aaaaaaab 	.word	0xaaaaaaab
 80118f8:	400204b8 	.word	0x400204b8
 80118fc:	4002040f 	.word	0x4002040f
 8011900:	10008200 	.word	0x10008200
 8011904:	40020880 	.word	0x40020880

08011908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011908:	b480      	push	{r7}
 801190a:	b085      	sub	sp, #20
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	b2db      	uxtb	r3, r3
 8011916:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d04a      	beq.n	80119b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b08      	cmp	r3, #8
 8011922:	d847      	bhi.n	80119b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a25      	ldr	r2, [pc, #148]	; (80119c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d022      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a24      	ldr	r2, [pc, #144]	; (80119c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d01d      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a22      	ldr	r2, [pc, #136]	; (80119c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d018      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a21      	ldr	r2, [pc, #132]	; (80119cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d013      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a1f      	ldr	r2, [pc, #124]	; (80119d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d00e      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a1e      	ldr	r2, [pc, #120]	; (80119d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d009      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a1c      	ldr	r2, [pc, #112]	; (80119d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8011966:	4293      	cmp	r3, r2
 8011968:	d004      	beq.n	8011974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a1b      	ldr	r2, [pc, #108]	; (80119dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d101      	bne.n	8011978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8011974:	2301      	movs	r3, #1
 8011976:	e000      	b.n	801197a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8011978:	2300      	movs	r3, #0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00a      	beq.n	8011994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8011982:	4413      	add	r3, r2
 8011984:	009b      	lsls	r3, r3, #2
 8011986:	461a      	mov	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4a15      	ldr	r2, [pc, #84]	; (80119e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8011990:	671a      	str	r2, [r3, #112]	; 0x70
 8011992:	e009      	b.n	80119a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	4b14      	ldr	r3, [pc, #80]	; (80119e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8011998:	4413      	add	r3, r2
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	461a      	mov	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4a11      	ldr	r2, [pc, #68]	; (80119ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80119a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	2201      	movs	r2, #1
 80119ae:	409a      	lsls	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80119b4:	bf00      	nop
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	58025408 	.word	0x58025408
 80119c4:	5802541c 	.word	0x5802541c
 80119c8:	58025430 	.word	0x58025430
 80119cc:	58025444 	.word	0x58025444
 80119d0:	58025458 	.word	0x58025458
 80119d4:	5802546c 	.word	0x5802546c
 80119d8:	58025480 	.word	0x58025480
 80119dc:	58025494 	.word	0x58025494
 80119e0:	1600963f 	.word	0x1600963f
 80119e4:	58025940 	.word	0x58025940
 80119e8:	1000823f 	.word	0x1000823f
 80119ec:	40020940 	.word	0x40020940

080119f0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a00:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8011a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a08:	2b40      	cmp	r3, #64	; 0x40
 8011a0a:	d115      	bne.n	8011a38 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a14:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a1c:	2b40      	cmp	r3, #64	; 0x40
 8011a1e:	d10b      	bne.n	8011a38 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a28:	461a      	mov	r2, r3
 8011a2a:	f248 0340 	movw	r3, #32832	; 0x8040
 8011a2e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 f8f6 	bl	8011c24 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a40:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8011a44:	f003 0301 	and.w	r3, r3, #1
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d115      	bne.n	8011a78 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011a58:	f003 0301 	and.w	r3, r3, #1
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d10b      	bne.n	8011a78 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a68:	461a      	mov	r2, r3
 8011a6a:	f248 0301 	movw	r3, #32769	; 0x8001
 8011a6e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 f8cc 	bl	8011c10 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a80:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8011a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a8c:	d153      	bne.n	8011b36 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011aa2:	d148      	bne.n	8011b36 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011aaa:	f043 0208 	orr.w	r2, r3, #8
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011abc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8011ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ac8:	d11e      	bne.n	8011b08 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ad2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8011ad6:	f241 1302 	movw	r3, #4354	; 0x1102
 8011ada:	4013      	ands	r3, r2
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011aea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	6812      	ldr	r2, [r2, #0]
 8011af2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011afa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	22e0      	movs	r2, #224	; 0xe0
 8011b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8011b06:	e013      	b.n	8011b30 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b10:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8011b14:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b26:	461a      	mov	r2, r3
 8011b28:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8011b2c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f000 f881 	bl	8011c38 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011b3e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d104      	bne.n	8011b54 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d019      	beq.n	8011b88 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b5a:	f043 0210 	orr.w	r2, r3, #16
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	22e0      	movs	r2, #224	; 0xe0
 8011b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 f85c 	bl	8011c38 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011b90:	f003 0310 	and.w	r3, r3, #16
 8011b94:	2b10      	cmp	r3, #16
 8011b96:	d10f      	bne.n	8011bb8 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011ba0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f000 f84e 	bl	8011c4c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011bc0:	f003 0320 	and.w	r3, r3, #32
 8011bc4:	2b20      	cmp	r3, #32
 8011bc6:	d10f      	bne.n	8011be8 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011bd0:	f003 020f 	and.w	r2, r3, #15
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 f840 	bl	8011c60 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8011be8:	4b08      	ldr	r3, [pc, #32]	; (8011c0c <HAL_ETH_IRQHandler+0x21c>)
 8011bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d006      	beq.n	8011c02 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8011bf4:	4b05      	ldr	r3, [pc, #20]	; (8011c0c <HAL_ETH_IRQHandler+0x21c>)
 8011bf6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8011bfa:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f000 f839 	bl	8011c74 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8011c02:	bf00      	nop
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	58000080 	.word	0x58000080

08011c10 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8011c2c:	bf00      	nop
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8011c40:	bf00      	nop
 8011c42:	370c      	adds	r7, #12
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8011c68:	bf00      	nop
 8011c6a:	370c      	adds	r7, #12
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8011c7c:	bf00      	nop
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b098      	sub	sp, #96	; 0x60
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8011c90:	4a84      	ldr	r2, [pc, #528]	; (8011ea4 <HAL_FDCAN_Init+0x21c>)
 8011c92:	f107 030c 	add.w	r3, r7, #12
 8011c96:	4611      	mov	r1, r2
 8011c98:	224c      	movs	r2, #76	; 0x4c
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f011 fc08 	bl	80234b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d101      	bne.n	8011caa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e1c6      	b.n	8012038 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4a7e      	ldr	r2, [pc, #504]	; (8011ea8 <HAL_FDCAN_Init+0x220>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d106      	bne.n	8011cc2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7fa ffc6 	bl	800cc68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	699a      	ldr	r2, [r3, #24]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f022 0210 	bic.w	r2, r2, #16
 8011cea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011cec:	f7fb fe46 	bl	800d97c <HAL_GetTick>
 8011cf0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8011cf2:	e014      	b.n	8011d1e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8011cf4:	f7fb fe42 	bl	800d97c <HAL_GetTick>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	2b0a      	cmp	r3, #10
 8011d00:	d90d      	bls.n	8011d1e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d08:	f043 0201 	orr.w	r2, r3, #1
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2203      	movs	r2, #3
 8011d16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e18c      	b.n	8012038 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	699b      	ldr	r3, [r3, #24]
 8011d24:	f003 0308 	and.w	r3, r3, #8
 8011d28:	2b08      	cmp	r3, #8
 8011d2a:	d0e3      	beq.n	8011cf4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	699a      	ldr	r2, [r3, #24]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f042 0201 	orr.w	r2, r2, #1
 8011d3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011d3c:	f7fb fe1e 	bl	800d97c <HAL_GetTick>
 8011d40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8011d42:	e014      	b.n	8011d6e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8011d44:	f7fb fe1a 	bl	800d97c <HAL_GetTick>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	2b0a      	cmp	r3, #10
 8011d50:	d90d      	bls.n	8011d6e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d58:	f043 0201 	orr.w	r2, r3, #1
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2203      	movs	r2, #3
 8011d66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e164      	b.n	8012038 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	699b      	ldr	r3, [r3, #24]
 8011d74:	f003 0301 	and.w	r3, r3, #1
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d0e3      	beq.n	8011d44 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	699a      	ldr	r2, [r3, #24]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f042 0202 	orr.w	r2, r2, #2
 8011d8a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7c1b      	ldrb	r3, [r3, #16]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d108      	bne.n	8011da6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	699a      	ldr	r2, [r3, #24]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011da2:	619a      	str	r2, [r3, #24]
 8011da4:	e007      	b.n	8011db6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	699a      	ldr	r2, [r3, #24]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011db4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	7c5b      	ldrb	r3, [r3, #17]
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d108      	bne.n	8011dd0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	699a      	ldr	r2, [r3, #24]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011dcc:	619a      	str	r2, [r3, #24]
 8011dce:	e007      	b.n	8011de0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	699a      	ldr	r2, [r3, #24]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011dde:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	7c9b      	ldrb	r3, [r3, #18]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d108      	bne.n	8011dfa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	699a      	ldr	r2, [r3, #24]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011df6:	619a      	str	r2, [r3, #24]
 8011df8:	e007      	b.n	8011e0a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	699a      	ldr	r2, [r3, #24]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e08:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	699b      	ldr	r3, [r3, #24]
 8011e10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	689a      	ldr	r2, [r3, #8]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	430a      	orrs	r2, r1
 8011e1e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	699a      	ldr	r2, [r3, #24]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8011e2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	691a      	ldr	r2, [r3, #16]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f022 0210 	bic.w	r2, r2, #16
 8011e3e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d108      	bne.n	8011e5a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	699a      	ldr	r2, [r3, #24]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f042 0204 	orr.w	r2, r2, #4
 8011e56:	619a      	str	r2, [r3, #24]
 8011e58:	e030      	b.n	8011ebc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d02c      	beq.n	8011ebc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	2b02      	cmp	r3, #2
 8011e68:	d020      	beq.n	8011eac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	699a      	ldr	r2, [r3, #24]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011e78:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	691a      	ldr	r2, [r3, #16]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f042 0210 	orr.w	r2, r2, #16
 8011e88:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	2b03      	cmp	r3, #3
 8011e90:	d114      	bne.n	8011ebc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	699a      	ldr	r2, [r3, #24]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f042 0220 	orr.w	r2, r2, #32
 8011ea0:	619a      	str	r2, [r3, #24]
 8011ea2:	e00b      	b.n	8011ebc <HAL_FDCAN_Init+0x234>
 8011ea4:	08023880 	.word	0x08023880
 8011ea8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	699a      	ldr	r2, [r3, #24]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f042 0220 	orr.w	r2, r2, #32
 8011eba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	69db      	ldr	r3, [r3, #28]
 8011ec8:	3b01      	subs	r3, #1
 8011eca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8011ecc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a1b      	ldr	r3, [r3, #32]
 8011ed2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8011ed4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	695b      	ldr	r3, [r3, #20]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8011ee4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8011ee6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	689b      	ldr	r3, [r3, #8]
 8011eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ef0:	d115      	bne.n	8011f1e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efc:	3b01      	subs	r3, #1
 8011efe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8011f00:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f06:	3b01      	subs	r3, #1
 8011f08:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8011f0a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f12:	3b01      	subs	r3, #1
 8011f14:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8011f1a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8011f1c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00a      	beq.n	8011f3c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	430a      	orrs	r2, r1
 8011f38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f44:	4413      	add	r3, r2
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d011      	beq.n	8011f6e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011f52:	f023 0107 	bic.w	r1, r3, #7
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	3360      	adds	r3, #96	; 0x60
 8011f5e:	443b      	add	r3, r7
 8011f60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	430a      	orrs	r2, r1
 8011f6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d011      	beq.n	8011f9a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011f7e:	f023 0107 	bic.w	r1, r3, #7
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	3360      	adds	r3, #96	; 0x60
 8011f8a:	443b      	add	r3, r7
 8011f8c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	430a      	orrs	r2, r1
 8011f96:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d012      	beq.n	8011fc8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011faa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	3360      	adds	r3, #96	; 0x60
 8011fb6:	443b      	add	r3, r7
 8011fb8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8011fbc:	011a      	lsls	r2, r3, #4
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	430a      	orrs	r2, r1
 8011fc4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d012      	beq.n	8011ff6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011fd8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	3360      	adds	r3, #96	; 0x60
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8011fea:	021a      	lsls	r2, r3, #8
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	430a      	orrs	r2, r1
 8011ff2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a11      	ldr	r2, [pc, #68]	; (8012040 <HAL_FDCAN_Init+0x3b8>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d107      	bne.n	8012010 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	689a      	ldr	r2, [r3, #8]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	f022 0203 	bic.w	r2, r2, #3
 801200e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2200      	movs	r2, #0
 8012014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2201      	movs	r2, #1
 8012024:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 fd83 	bl	8012b34 <FDCAN_CalcultateRamBlockAddresses>
 801202e:	4603      	mov	r3, r0
 8012030:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8012034:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8012038:	4618      	mov	r0, r3
 801203a:	3760      	adds	r7, #96	; 0x60
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	4000a000 	.word	0x4000a000

08012044 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012052:	b2db      	uxtb	r3, r3
 8012054:	2b01      	cmp	r3, #1
 8012056:	d111      	bne.n	801207c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2202      	movs	r2, #2
 801205c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	699a      	ldr	r2, [r3, #24]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f022 0201 	bic.w	r2, r2, #1
 801206e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8012078:	2300      	movs	r3, #0
 801207a:	e008      	b.n	801208e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012082:	f043 0204 	orr.w	r2, r3, #4
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801208c:	2301      	movs	r3, #1
  }
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b086      	sub	sp, #24
 801209e:	af00      	add	r7, sp, #0
 80120a0:	60f8      	str	r0, [r7, #12]
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b02      	cmp	r3, #2
 80120b0:	d141      	bne.n	8012136 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80120ba:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d109      	bne.n	80120d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80120c8:	f043 0220 	orr.w	r2, r3, #32
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80120d2:	2301      	movs	r3, #1
 80120d4:	e038      	b.n	8012148 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80120de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d009      	beq.n	80120fa <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80120ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80120f6:	2301      	movs	r3, #1
 80120f8:	e026      	b.n	8012148 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012102:	0c1b      	lsrs	r3, r3, #16
 8012104:	f003 031f 	and.w	r3, r3, #31
 8012108:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f000 fe95 	bl	8012e40 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2101      	movs	r1, #1
 801211c:	697a      	ldr	r2, [r7, #20]
 801211e:	fa01 f202 	lsl.w	r2, r1, r2
 8012122:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8012126:	2201      	movs	r2, #1
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	409a      	lsls	r2, r3
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	e008      	b.n	8012148 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801213c:	f043 0208 	orr.w	r2, r3, #8
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8012146:	2301      	movs	r3, #1
  }
}
 8012148:	4618      	mov	r0, r3
 801214a:	3718      	adds	r7, #24
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8012150:	b480      	push	{r7}
 8012152:	b08b      	sub	sp, #44	; 0x2c
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	607a      	str	r2, [r7, #4]
 801215c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012168:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 801216a:	7efb      	ldrb	r3, [r7, #27]
 801216c:	2b02      	cmp	r3, #2
 801216e:	f040 814b 	bne.w	8012408 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	2b40      	cmp	r3, #64	; 0x40
 8012176:	d14d      	bne.n	8012214 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012180:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012184:	2b00      	cmp	r3, #0
 8012186:	d109      	bne.n	801219c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801218e:	f043 0220 	orr.w	r2, r3, #32
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8012198:	2301      	movs	r3, #1
 801219a:	e13e      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80121a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d109      	bne.n	80121c0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80121b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80121bc:	2301      	movs	r3, #1
 80121be:	e12c      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80121c8:	0e1b      	lsrs	r3, r3, #24
 80121ca:	f003 0301 	and.w	r3, r3, #1
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d10b      	bne.n	80121ea <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80121da:	0fdb      	lsrs	r3, r3, #31
 80121dc:	f003 0301 	and.w	r3, r3, #1
 80121e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80121e4:	d101      	bne.n	80121ea <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80121e6:	2301      	movs	r3, #1
 80121e8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80121f2:	0a1b      	lsrs	r3, r3, #8
 80121f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121f8:	69fa      	ldr	r2, [r7, #28]
 80121fa:	4413      	add	r3, r2
 80121fc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012206:	69f9      	ldr	r1, [r7, #28]
 8012208:	fb01 f303 	mul.w	r3, r1, r3
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	4413      	add	r3, r2
 8012210:	627b      	str	r3, [r7, #36]	; 0x24
 8012212:	e069      	b.n	80122e8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	2b41      	cmp	r3, #65	; 0x41
 8012218:	d14d      	bne.n	80122b6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012222:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012226:	2b00      	cmp	r3, #0
 8012228:	d109      	bne.n	801223e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012230:	f043 0220 	orr.w	r2, r3, #32
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801223a:	2301      	movs	r3, #1
 801223c:	e0ed      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801224a:	2b00      	cmp	r3, #0
 801224c:	d109      	bne.n	8012262 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	e0db      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801226a:	0e1b      	lsrs	r3, r3, #24
 801226c:	f003 0301 	and.w	r3, r3, #1
 8012270:	2b01      	cmp	r3, #1
 8012272:	d10b      	bne.n	801228c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801227c:	0fdb      	lsrs	r3, r3, #31
 801227e:	f003 0301 	and.w	r3, r3, #1
 8012282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012286:	d101      	bne.n	801228c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8012288:	2301      	movs	r3, #1
 801228a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012294:	0a1b      	lsrs	r3, r3, #8
 8012296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801229a:	69fa      	ldr	r2, [r7, #28]
 801229c:	4413      	add	r3, r2
 801229e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122a8:	69f9      	ldr	r1, [r7, #28]
 80122aa:	fb01 f303 	mul.w	r3, r1, r3
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	4413      	add	r3, r2
 80122b2:	627b      	str	r3, [r7, #36]	; 0x24
 80122b4:	e018      	b.n	80122e8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d309      	bcc.n	80122d4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80122c6:	f043 0220 	orr.w	r2, r3, #32
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80122d0:	2301      	movs	r3, #1
 80122d2:	e0a2      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	fb01 f303 	mul.w	r3, r1, r3
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	4413      	add	r3, r2
 80122e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80122e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d107      	bne.n	801230c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	0c9b      	lsrs	r3, r3, #18
 8012302:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	601a      	str	r2, [r3, #0]
 801230a:	e005      	b.n	8012318 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	3304      	adds	r3, #4
 8012334:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8012364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	0e1b      	lsrs	r3, r3, #24
 801236a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	0fda      	lsrs	r2, r3, #31
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 801237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237e:	3304      	adds	r3, #4
 8012380:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8012382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012384:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8012386:	2300      	movs	r3, #0
 8012388:	623b      	str	r3, [r7, #32]
 801238a:	e00a      	b.n	80123a2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 801238c:	697a      	ldr	r2, [r7, #20]
 801238e:	6a3b      	ldr	r3, [r7, #32]
 8012390:	441a      	add	r2, r3
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6a3b      	ldr	r3, [r7, #32]
 8012396:	440b      	add	r3, r1
 8012398:	7812      	ldrb	r2, [r2, #0]
 801239a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 801239c:	6a3b      	ldr	r3, [r7, #32]
 801239e:	3301      	adds	r3, #1
 80123a0:	623b      	str	r3, [r7, #32]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	0c1b      	lsrs	r3, r3, #16
 80123a8:	4a1f      	ldr	r2, [pc, #124]	; (8012428 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80123aa:	5cd3      	ldrb	r3, [r2, r3]
 80123ac:	461a      	mov	r2, r3
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	4293      	cmp	r3, r2
 80123b2:	d3eb      	bcc.n	801238c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2b40      	cmp	r3, #64	; 0x40
 80123b8:	d105      	bne.n	80123c6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	69fa      	ldr	r2, [r7, #28]
 80123c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80123c4:	e01e      	b.n	8012404 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	2b41      	cmp	r3, #65	; 0x41
 80123ca:	d105      	bne.n	80123d8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	69fa      	ldr	r2, [r7, #28]
 80123d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80123d6:	e015      	b.n	8012404 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2b1f      	cmp	r3, #31
 80123dc:	d808      	bhi.n	80123f0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2101      	movs	r1, #1
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	fa01 f202 	lsl.w	r2, r1, r2
 80123ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80123ee:	e009      	b.n	8012404 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	f003 021f 	and.w	r2, r3, #31
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2101      	movs	r1, #1
 80123fc:	fa01 f202 	lsl.w	r2, r1, r2
 8012400:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	e008      	b.n	801241a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801240e:	f043 0208 	orr.w	r2, r3, #8
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8012418:	2301      	movs	r3, #1
  }
}
 801241a:	4618      	mov	r0, r3
 801241c:	372c      	adds	r7, #44	; 0x2c
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	08023b24 	.word	0x08023b24

0801242c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 801242c:	b480      	push	{r7}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801243e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8012440:	7dfb      	ldrb	r3, [r7, #23]
 8012442:	2b01      	cmp	r3, #1
 8012444:	d002      	beq.n	801244c <HAL_FDCAN_ActivateNotification+0x20>
 8012446:	7dfb      	ldrb	r3, [r7, #23]
 8012448:	2b02      	cmp	r3, #2
 801244a:	d155      	bne.n	80124f8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	4013      	ands	r3, r2
 8012456:	2b00      	cmp	r3, #0
 8012458:	d108      	bne.n	801246c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f042 0201 	orr.w	r2, r2, #1
 8012468:	65da      	str	r2, [r3, #92]	; 0x5c
 801246a:	e014      	b.n	8012496 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	4013      	ands	r3, r2
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	429a      	cmp	r2, r3
 801247a:	d108      	bne.n	801248e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f042 0202 	orr.w	r2, r2, #2
 801248a:	65da      	str	r2, [r3, #92]	; 0x5c
 801248c:	e003      	b.n	8012496 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2203      	movs	r2, #3
 8012494:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801249c:	2b00      	cmp	r3, #0
 801249e:	d009      	beq.n	80124b4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	430a      	orrs	r2, r1
 80124b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d009      	beq.n	80124d2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	430a      	orrs	r2, r1
 80124ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124d8:	68ba      	ldr	r2, [r7, #8]
 80124da:	4b0f      	ldr	r3, [pc, #60]	; (8012518 <HAL_FDCAN_ActivateNotification+0xec>)
 80124dc:	4013      	ands	r3, r2
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	6812      	ldr	r2, [r2, #0]
 80124e2:	430b      	orrs	r3, r1
 80124e4:	6553      	str	r3, [r2, #84]	; 0x54
 80124e6:	4b0d      	ldr	r3, [pc, #52]	; (801251c <HAL_FDCAN_ActivateNotification+0xf0>)
 80124e8:	695a      	ldr	r2, [r3, #20]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	0f9b      	lsrs	r3, r3, #30
 80124ee:	490b      	ldr	r1, [pc, #44]	; (801251c <HAL_FDCAN_ActivateNotification+0xf0>)
 80124f0:	4313      	orrs	r3, r2
 80124f2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80124f4:	2300      	movs	r3, #0
 80124f6:	e008      	b.n	801250a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80124fe:	f043 0202 	orr.w	r2, r3, #2
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8012508:	2301      	movs	r3, #1
  }
}
 801250a:	4618      	mov	r0, r3
 801250c:	371c      	adds	r7, #28
 801250e:	46bd      	mov	sp, r7
 8012510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop
 8012518:	3fcfffff 	.word	0x3fcfffff
 801251c:	4000a800 	.word	0x4000a800

08012520 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b096      	sub	sp, #88	; 0x58
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8012528:	4b9a      	ldr	r3, [pc, #616]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	079b      	lsls	r3, r3, #30
 801252e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8012530:	4b98      	ldr	r3, [pc, #608]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 8012532:	695b      	ldr	r3, [r3, #20]
 8012534:	079b      	lsls	r3, r3, #30
 8012536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012538:	4013      	ands	r3, r2
 801253a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012542:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012546:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801254e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012550:	4013      	ands	r3, r2
 8012552:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801255a:	f003 030f 	and.w	r3, r3, #15
 801255e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012568:	4013      	ands	r3, r2
 801256a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012576:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801257e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012580:	4013      	ands	r3, r2
 8012582:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801258a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801258e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012598:	4013      	ands	r3, r2
 801259a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125a2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80125a6:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125b0:	4013      	ands	r3, r2
 80125b2:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80125c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c6:	0a1b      	lsrs	r3, r3, #8
 80125c8:	f003 0301 	and.w	r3, r3, #1
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d010      	beq.n	80125f2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80125d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d2:	0a1b      	lsrs	r3, r3, #8
 80125d4:	f003 0301 	and.w	r3, r3, #1
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00a      	beq.n	80125f2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80125e4:	651a      	str	r2, [r3, #80]	; 0x50
 80125e6:	4b6b      	ldr	r3, [pc, #428]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 fa54 	bl	8012a9a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80125f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f4:	0a9b      	lsrs	r3, r3, #10
 80125f6:	f003 0301 	and.w	r3, r3, #1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d01d      	beq.n	801263a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80125fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012600:	0a9b      	lsrs	r3, r3, #10
 8012602:	f003 0301 	and.w	r3, r3, #1
 8012606:	2b00      	cmp	r3, #0
 8012608:	d017      	beq.n	801263a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8012612:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801261c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801261e:	4013      	ands	r3, r2
 8012620:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801262a:	651a      	str	r2, [r3, #80]	; 0x50
 801262c:	4b59      	ldr	r3, [pc, #356]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801262e:	2200      	movs	r2, #0
 8012630:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8012632:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 fa07 	bl	8012a48 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00d      	beq.n	801265c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012646:	4b54      	ldr	r3, [pc, #336]	; (8012798 <HAL_FDCAN_IRQHandler+0x278>)
 8012648:	400b      	ands	r3, r1
 801264a:	6513      	str	r3, [r2, #80]	; 0x50
 801264c:	4a51      	ldr	r2, [pc, #324]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801264e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012650:	0f9b      	lsrs	r3, r3, #30
 8012652:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8012654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 f9c0 	bl	80129dc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00d      	beq.n	801267e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012668:	4b4b      	ldr	r3, [pc, #300]	; (8012798 <HAL_FDCAN_IRQHandler+0x278>)
 801266a:	400b      	ands	r3, r1
 801266c:	6513      	str	r3, [r2, #80]	; 0x50
 801266e:	4a49      	ldr	r2, [pc, #292]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 8012670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012672:	0f9b      	lsrs	r3, r3, #30
 8012674:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8012676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 f9ba 	bl	80129f2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801267e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00d      	beq.n	80126a0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801268a:	4b43      	ldr	r3, [pc, #268]	; (8012798 <HAL_FDCAN_IRQHandler+0x278>)
 801268c:	400b      	ands	r3, r1
 801268e:	6513      	str	r3, [r2, #80]	; 0x50
 8012690:	4a40      	ldr	r2, [pc, #256]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 8012692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012694:	0f9b      	lsrs	r3, r3, #30
 8012696:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8012698:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7ee fec6 	bl	800142c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80126a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00d      	beq.n	80126c2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80126ac:	4b3a      	ldr	r3, [pc, #232]	; (8012798 <HAL_FDCAN_IRQHandler+0x278>)
 80126ae:	400b      	ands	r3, r1
 80126b0:	6513      	str	r3, [r2, #80]	; 0x50
 80126b2:	4a38      	ldr	r2, [pc, #224]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 80126b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126b6:	0f9b      	lsrs	r3, r3, #30
 80126b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80126ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f9a3 	bl	8012a08 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80126c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c4:	0adb      	lsrs	r3, r3, #11
 80126c6:	f003 0301 	and.w	r3, r3, #1
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d010      	beq.n	80126f0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	0adb      	lsrs	r3, r3, #11
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00a      	beq.n	80126f0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80126e2:	651a      	str	r2, [r3, #80]	; 0x50
 80126e4:	4b2b      	ldr	r3, [pc, #172]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 80126e6:	2200      	movs	r2, #0
 80126e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 f997 	bl	8012a1e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80126f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f2:	0a5b      	lsrs	r3, r3, #9
 80126f4:	f003 0301 	and.w	r3, r3, #1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d01d      	beq.n	8012738 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80126fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fe:	0a5b      	lsrs	r3, r3, #9
 8012700:	f003 0301 	and.w	r3, r3, #1
 8012704:	2b00      	cmp	r3, #0
 8012706:	d017      	beq.n	8012738 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012710:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801271a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801271c:	4013      	ands	r3, r2
 801271e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012728:	651a      	str	r2, [r3, #80]	; 0x50
 801272a:	4b1a      	ldr	r3, [pc, #104]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801272c:	2200      	movs	r2, #0
 801272e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8012730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 f97d 	bl	8012a32 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8012738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273a:	0cdb      	lsrs	r3, r3, #19
 801273c:	f003 0301 	and.w	r3, r3, #1
 8012740:	2b00      	cmp	r3, #0
 8012742:	d010      	beq.n	8012766 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8012744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012746:	0cdb      	lsrs	r3, r3, #19
 8012748:	f003 0301 	and.w	r3, r3, #1
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00a      	beq.n	8012766 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012758:	651a      	str	r2, [r3, #80]	; 0x50
 801275a:	4b0e      	ldr	r3, [pc, #56]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801275c:	2200      	movs	r2, #0
 801275e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 f97c 	bl	8012a5e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8012766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012768:	0c1b      	lsrs	r3, r3, #16
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	d016      	beq.n	80127a0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8012772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012774:	0c1b      	lsrs	r3, r3, #16
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	2b00      	cmp	r3, #0
 801277c:	d010      	beq.n	80127a0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012786:	651a      	str	r2, [r3, #80]	; 0x50
 8012788:	4b02      	ldr	r3, [pc, #8]	; (8012794 <HAL_FDCAN_IRQHandler+0x274>)
 801278a:	2200      	movs	r2, #0
 801278c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	e004      	b.n	801279c <HAL_FDCAN_IRQHandler+0x27c>
 8012792:	bf00      	nop
 8012794:	4000a800 	.word	0x4000a800
 8012798:	3fcfffff 	.word	0x3fcfffff
 801279c:	f000 f969 	bl	8012a72 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80127a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a2:	0c9b      	lsrs	r3, r3, #18
 80127a4:	f003 0301 	and.w	r3, r3, #1
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d010      	beq.n	80127ce <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	0c9b      	lsrs	r3, r3, #18
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d00a      	beq.n	80127ce <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80127c0:	651a      	str	r2, [r3, #80]	; 0x50
 80127c2:	4b83      	ldr	r3, [pc, #524]	; (80129d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f000 f95c 	bl	8012a86 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80127ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127d0:	0c5b      	lsrs	r3, r3, #17
 80127d2:	f003 0301 	and.w	r3, r3, #1
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d015      	beq.n	8012806 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80127da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127dc:	0c5b      	lsrs	r3, r3, #17
 80127de:	f003 0301 	and.w	r3, r3, #1
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d00f      	beq.n	8012806 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80127ee:	651a      	str	r2, [r3, #80]	; 0x50
 80127f0:	4b77      	ldr	r3, [pc, #476]	; (80129d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80127fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8012806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00d      	beq.n	8012828 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012812:	4b70      	ldr	r3, [pc, #448]	; (80129d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8012814:	400b      	ands	r3, r1
 8012816:	6513      	str	r3, [r2, #80]	; 0x50
 8012818:	4a6d      	ldr	r2, [pc, #436]	; (80129d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 801281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801281c:	0f9b      	lsrs	r3, r3, #30
 801281e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8012820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f000 f94d 	bl	8012ac2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8012828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801282a:	2b00      	cmp	r3, #0
 801282c:	d011      	beq.n	8012852 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012834:	4b67      	ldr	r3, [pc, #412]	; (80129d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8012836:	400b      	ands	r3, r1
 8012838:	6513      	str	r3, [r2, #80]	; 0x50
 801283a:	4a65      	ldr	r2, [pc, #404]	; (80129d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 801283c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801283e:	0f9b      	lsrs	r3, r3, #30
 8012840:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8012848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801284a:	431a      	orrs	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a60      	ldr	r2, [pc, #384]	; (80129d8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8012858:	4293      	cmp	r3, r2
 801285a:	f040 80ac 	bne.w	80129b6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	f003 0303 	and.w	r3, r3, #3
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 80a4 	beq.w	80129b6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	6a1b      	ldr	r3, [r3, #32]
 8012874:	f003 030f 	and.w	r3, r3, #15
 8012878:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012882:	4013      	ands	r3, r2
 8012884:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012890:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801289a:	4013      	ands	r3, r2
 801289c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	6a1b      	ldr	r3, [r3, #32]
 80128a4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80128a8:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	685b      	ldr	r3, [r3, #4]
 80128ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128b2:	4013      	ands	r3, r2
 80128b4:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	6a1b      	ldr	r3, [r3, #32]
 80128bc:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80128c0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c8:	6a3a      	ldr	r2, [r7, #32]
 80128ca:	4013      	ands	r3, r2
 80128cc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	6a1b      	ldr	r3, [r3, #32]
 80128d4:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80128d8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e0:	69fa      	ldr	r2, [r7, #28]
 80128e2:	4013      	ands	r3, r2
 80128e4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	6a1b      	ldr	r3, [r3, #32]
 80128f4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d007      	beq.n	801290c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012902:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8012904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 f8e6 	bl	8012ad8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290e:	2b00      	cmp	r3, #0
 8012910:	d007      	beq.n	8012922 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012918:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801291a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f8e6 	bl	8012aee <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	099b      	lsrs	r3, r3, #6
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	2b00      	cmp	r3, #0
 801292c:	d01a      	beq.n	8012964 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	099b      	lsrs	r3, r3, #6
 8012932:	f003 0301 	and.w	r3, r3, #1
 8012936:	2b00      	cmp	r3, #0
 8012938:	d014      	beq.n	8012964 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012940:	0c1b      	lsrs	r3, r3, #16
 8012942:	b29b      	uxth	r3, r3
 8012944:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012950:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	2240      	movs	r2, #64	; 0x40
 8012958:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	6939      	ldr	r1, [r7, #16]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f8d0 	bl	8012b04 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8012964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012966:	2b00      	cmp	r3, #0
 8012968:	d007      	beq.n	801297a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012970:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8012972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 f8d1 	bl	8012b1c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801297a:	6a3b      	ldr	r3, [r7, #32]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d00b      	beq.n	8012998 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	6a3a      	ldr	r2, [r7, #32]
 8012986:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801298e:	6a3b      	ldr	r3, [r7, #32]
 8012990:	431a      	orrs	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00b      	beq.n	80129b6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	69fa      	ldr	r2, [r7, #28]
 80129a4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	431a      	orrs	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d002      	beq.n	80129c6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 f874 	bl	8012aae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80129c6:	bf00      	nop
 80129c8:	3758      	adds	r7, #88	; 0x58
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	4000a800 	.word	0x4000a800
 80129d4:	3fcfffff 	.word	0x3fcfffff
 80129d8:	4000a000 	.word	0x4000a000

080129dc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80129e6:	bf00      	nop
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80129fc:	bf00      	nop
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8012a12:	bf00      	nop
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr

08012a1e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012a1e:	b480      	push	{r7}
 8012a20:	b083      	sub	sp, #12
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8012a26:	bf00      	nop
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr

08012a32 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8012a3c:	bf00      	nop
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8012a52:	bf00      	nop
 8012a54:	370c      	adds	r7, #12
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr

08012a5e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012a5e:	b480      	push	{r7}
 8012a60:	b083      	sub	sp, #12
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8012a66:	bf00      	nop
 8012a68:	370c      	adds	r7, #12
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr

08012a72 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012a72:	b480      	push	{r7}
 8012a74:	b083      	sub	sp, #12
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8012a7a:	bf00      	nop
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012a86:	b480      	push	{r7}
 8012a88:	b083      	sub	sp, #12
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8012a8e:	bf00      	nop
 8012a90:	370c      	adds	r7, #12
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b083      	sub	sp, #12
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8012aa2:	bf00      	nop
 8012aa4:	370c      	adds	r7, #12
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b083      	sub	sp, #12
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8012ab6:	bf00      	nop
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr

08012ac2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8012ac2:	b480      	push	{r7}
 8012ac4:	b083      	sub	sp, #12
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
 8012aca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8012ae2:	bf00      	nop
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr

08012aee <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8012aee:	b480      	push	{r7}
 8012af0:	b083      	sub	sp, #12
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
 8012af6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b085      	sub	sp, #20
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8012b10:	bf00      	nop
 8012b12:	3714      	adds	r7, #20
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8012b26:	bf00      	nop
 8012b28:	370c      	adds	r7, #12
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
	...

08012b34 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b40:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012b4a:	4ba7      	ldr	r3, [pc, #668]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012b4c:	4013      	ands	r3, r2
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	0091      	lsls	r1, r2, #2
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	6812      	ldr	r2, [r2, #0]
 8012b56:	430b      	orrs	r3, r1
 8012b58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b64:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b6c:	041a      	lsls	r2, r3, #16
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	430a      	orrs	r2, r1
 8012b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b7c:	68ba      	ldr	r2, [r7, #8]
 8012b7e:	4413      	add	r3, r2
 8012b80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012b8a:	4b97      	ldr	r3, [pc, #604]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012b8c:	4013      	ands	r3, r2
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	0091      	lsls	r1, r2, #2
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	6812      	ldr	r2, [r2, #0]
 8012b96:	430b      	orrs	r3, r1
 8012b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ba4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bac:	041a      	lsls	r2, r3, #16
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	430a      	orrs	r2, r1
 8012bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8012bcc:	4b86      	ldr	r3, [pc, #536]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012bce:	4013      	ands	r3, r2
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	0091      	lsls	r1, r2, #2
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	6812      	ldr	r2, [r2, #0]
 8012bd8:	430b      	orrs	r3, r1
 8012bda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012be6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bee:	041a      	lsls	r2, r3, #16
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	430a      	orrs	r2, r1
 8012bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012c02:	fb02 f303 	mul.w	r3, r2, r3
 8012c06:	68ba      	ldr	r2, [r7, #8]
 8012c08:	4413      	add	r3, r2
 8012c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8012c14:	4b74      	ldr	r3, [pc, #464]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012c16:	4013      	ands	r3, r2
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	0091      	lsls	r1, r2, #2
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	6812      	ldr	r2, [r2, #0]
 8012c20:	430b      	orrs	r3, r1
 8012c22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012c2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c36:	041a      	lsls	r2, r3, #16
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	430a      	orrs	r2, r1
 8012c3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8012c4a:	fb02 f303 	mul.w	r3, r2, r3
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	4413      	add	r3, r2
 8012c52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8012c5c:	4b62      	ldr	r3, [pc, #392]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012c5e:	4013      	ands	r3, r2
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	0091      	lsls	r1, r2, #2
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	6812      	ldr	r2, [r2, #0]
 8012c68:	430b      	orrs	r3, r1
 8012c6a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012c76:	fb02 f303 	mul.w	r3, r2, r3
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8012c88:	4b57      	ldr	r3, [pc, #348]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	68ba      	ldr	r2, [r7, #8]
 8012c8e:	0091      	lsls	r1, r2, #2
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	6812      	ldr	r2, [r2, #0]
 8012c94:	430b      	orrs	r3, r1
 8012c96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012ca2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012caa:	041a      	lsls	r2, r3, #16
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	430a      	orrs	r2, r1
 8012cb2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	68ba      	ldr	r2, [r7, #8]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8012cca:	4b47      	ldr	r3, [pc, #284]	; (8012de8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8012ccc:	4013      	ands	r3, r2
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	0091      	lsls	r1, r2, #2
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	6812      	ldr	r2, [r2, #0]
 8012cd6:	430b      	orrs	r3, r1
 8012cd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012ce4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012cec:	041a      	lsls	r2, r3, #16
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012d00:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d08:	061a      	lsls	r2, r3, #24
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	430a      	orrs	r2, r1
 8012d10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d18:	4b34      	ldr	r3, [pc, #208]	; (8012dec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009a      	lsls	r2, r3, #2
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	441a      	add	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	441a      	add	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8012d4e:	fb01 f303 	mul.w	r3, r1, r3
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	441a      	add	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d62:	6879      	ldr	r1, [r7, #4]
 8012d64:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8012d66:	fb01 f303 	mul.w	r3, r1, r3
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	441a      	add	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d7a:	6879      	ldr	r1, [r7, #4]
 8012d7c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012d7e:	fb01 f303 	mul.w	r3, r1, r3
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	441a      	add	r2, r3
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d96:	00db      	lsls	r3, r3, #3
 8012d98:	441a      	add	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012daa:	6879      	ldr	r1, [r7, #4]
 8012dac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8012dae:	fb01 f303 	mul.w	r3, r1, r3
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	441a      	add	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dc6:	6879      	ldr	r1, [r7, #4]
 8012dc8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8012dca:	fb01 f303 	mul.w	r3, r1, r3
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	441a      	add	r2, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dde:	4a04      	ldr	r2, [pc, #16]	; (8012df0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d915      	bls.n	8012e10 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8012de4:	e006      	b.n	8012df4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8012de6:	bf00      	nop
 8012de8:	ffff0003 	.word	0xffff0003
 8012dec:	10002b00 	.word	0x10002b00
 8012df0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012dfa:	f043 0220 	orr.w	r2, r3, #32
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2203      	movs	r2, #3
 8012e08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e010      	b.n	8012e32 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e14:	60fb      	str	r3, [r7, #12]
 8012e16:	e005      	b.n	8012e24 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	3304      	adds	r3, #4
 8012e22:	60fb      	str	r3, [r7, #12]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d3f3      	bcc.n	8012e18 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop

08012e40 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b089      	sub	sp, #36	; 0x24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
 8012e4c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10a      	bne.n	8012e6c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8012e5e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8012e66:	4313      	orrs	r3, r2
 8012e68:	61fb      	str	r3, [r7, #28]
 8012e6a:	e00a      	b.n	8012e82 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8012e74:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8012e7a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8012e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e80:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	6a1b      	ldr	r3, [r3, #32]
 8012e86:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8012e8c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8012e92:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8012e98:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012eac:	6839      	ldr	r1, [r7, #0]
 8012eae:	fb01 f303 	mul.w	r3, r1, r3
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	4413      	add	r3, r2
 8012eb6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	69fa      	ldr	r2, [r7, #28]
 8012ebc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	3304      	adds	r3, #4
 8012ec2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	693a      	ldr	r2, [r7, #16]
 8012ec8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	617b      	str	r3, [r7, #20]
 8012ed4:	e020      	b.n	8012f18 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	3303      	adds	r3, #3
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	4413      	add	r3, r2
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	3302      	adds	r3, #2
 8012ee6:	6879      	ldr	r1, [r7, #4]
 8012ee8:	440b      	add	r3, r1
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8012eee:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	6879      	ldr	r1, [r7, #4]
 8012ef6:	440b      	add	r3, r1
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8012efc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8012efe:	6879      	ldr	r1, [r7, #4]
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	440a      	add	r2, r1
 8012f04:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8012f06:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	3304      	adds	r3, #4
 8012f10:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	3304      	adds	r3, #4
 8012f16:	617b      	str	r3, [r7, #20]
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	0c1b      	lsrs	r3, r3, #16
 8012f1e:	4a06      	ldr	r2, [pc, #24]	; (8012f38 <FDCAN_CopyMessageToRAM+0xf8>)
 8012f20:	5cd3      	ldrb	r3, [r2, r3]
 8012f22:	461a      	mov	r2, r3
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d3d5      	bcc.n	8012ed6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8012f2a:	bf00      	nop
 8012f2c:	bf00      	nop
 8012f2e:	3724      	adds	r7, #36	; 0x24
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	08023b24 	.word	0x08023b24

08012f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b089      	sub	sp, #36	; 0x24
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8012f46:	2300      	movs	r3, #0
 8012f48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8012f4a:	4b86      	ldr	r3, [pc, #536]	; (8013164 <HAL_GPIO_Init+0x228>)
 8012f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8012f4e:	e18c      	b.n	801326a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	2101      	movs	r1, #1
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	fa01 f303 	lsl.w	r3, r1, r3
 8012f5c:	4013      	ands	r3, r2
 8012f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f000 817e 	beq.w	8013264 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	f003 0303 	and.w	r3, r3, #3
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d005      	beq.n	8012f80 <HAL_GPIO_Init+0x44>
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	f003 0303 	and.w	r3, r3, #3
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d130      	bne.n	8012fe2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	2203      	movs	r2, #3
 8012f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f90:	43db      	mvns	r3, r3
 8012f92:	69ba      	ldr	r2, [r7, #24]
 8012f94:	4013      	ands	r3, r2
 8012f96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	68da      	ldr	r2, [r3, #12]
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	005b      	lsls	r3, r3, #1
 8012fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8012fa4:	69ba      	ldr	r2, [r7, #24]
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	69ba      	ldr	r2, [r7, #24]
 8012fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	fa02 f303 	lsl.w	r3, r2, r3
 8012fbe:	43db      	mvns	r3, r3
 8012fc0:	69ba      	ldr	r2, [r7, #24]
 8012fc2:	4013      	ands	r3, r2
 8012fc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	685b      	ldr	r3, [r3, #4]
 8012fca:	091b      	lsrs	r3, r3, #4
 8012fcc:	f003 0201 	and.w	r2, r3, #1
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8012fd6:	69ba      	ldr	r2, [r7, #24]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	69ba      	ldr	r2, [r7, #24]
 8012fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	f003 0303 	and.w	r3, r3, #3
 8012fea:	2b03      	cmp	r3, #3
 8012fec:	d017      	beq.n	801301e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	68db      	ldr	r3, [r3, #12]
 8012ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	2203      	movs	r2, #3
 8012ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8012ffe:	43db      	mvns	r3, r3
 8013000:	69ba      	ldr	r2, [r7, #24]
 8013002:	4013      	ands	r3, r2
 8013004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	689a      	ldr	r2, [r3, #8]
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	fa02 f303 	lsl.w	r3, r2, r3
 8013012:	69ba      	ldr	r2, [r7, #24]
 8013014:	4313      	orrs	r3, r2
 8013016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	69ba      	ldr	r2, [r7, #24]
 801301c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	f003 0303 	and.w	r3, r3, #3
 8013026:	2b02      	cmp	r3, #2
 8013028:	d123      	bne.n	8013072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	08da      	lsrs	r2, r3, #3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	3208      	adds	r2, #8
 8013032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	f003 0307 	and.w	r3, r3, #7
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	220f      	movs	r2, #15
 8013042:	fa02 f303 	lsl.w	r3, r2, r3
 8013046:	43db      	mvns	r3, r3
 8013048:	69ba      	ldr	r2, [r7, #24]
 801304a:	4013      	ands	r3, r2
 801304c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	691a      	ldr	r2, [r3, #16]
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	f003 0307 	and.w	r3, r3, #7
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	fa02 f303 	lsl.w	r3, r2, r3
 801305e:	69ba      	ldr	r2, [r7, #24]
 8013060:	4313      	orrs	r3, r2
 8013062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	08da      	lsrs	r2, r3, #3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	3208      	adds	r2, #8
 801306c:	69b9      	ldr	r1, [r7, #24]
 801306e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	2203      	movs	r2, #3
 801307e:	fa02 f303 	lsl.w	r3, r2, r3
 8013082:	43db      	mvns	r3, r3
 8013084:	69ba      	ldr	r2, [r7, #24]
 8013086:	4013      	ands	r3, r2
 8013088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	f003 0203 	and.w	r2, r3, #3
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	005b      	lsls	r3, r3, #1
 8013096:	fa02 f303 	lsl.w	r3, r2, r3
 801309a:	69ba      	ldr	r2, [r7, #24]
 801309c:	4313      	orrs	r3, r2
 801309e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	69ba      	ldr	r2, [r7, #24]
 80130a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 80d8 	beq.w	8013264 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80130b4:	4b2c      	ldr	r3, [pc, #176]	; (8013168 <HAL_GPIO_Init+0x22c>)
 80130b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80130ba:	4a2b      	ldr	r2, [pc, #172]	; (8013168 <HAL_GPIO_Init+0x22c>)
 80130bc:	f043 0302 	orr.w	r3, r3, #2
 80130c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80130c4:	4b28      	ldr	r3, [pc, #160]	; (8013168 <HAL_GPIO_Init+0x22c>)
 80130c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80130ca:	f003 0302 	and.w	r3, r3, #2
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80130d2:	4a26      	ldr	r2, [pc, #152]	; (801316c <HAL_GPIO_Init+0x230>)
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	089b      	lsrs	r3, r3, #2
 80130d8:	3302      	adds	r3, #2
 80130da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	f003 0303 	and.w	r3, r3, #3
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	220f      	movs	r2, #15
 80130ea:	fa02 f303 	lsl.w	r3, r2, r3
 80130ee:	43db      	mvns	r3, r3
 80130f0:	69ba      	ldr	r2, [r7, #24]
 80130f2:	4013      	ands	r3, r2
 80130f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	4a1d      	ldr	r2, [pc, #116]	; (8013170 <HAL_GPIO_Init+0x234>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d04a      	beq.n	8013194 <HAL_GPIO_Init+0x258>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	4a1c      	ldr	r2, [pc, #112]	; (8013174 <HAL_GPIO_Init+0x238>)
 8013102:	4293      	cmp	r3, r2
 8013104:	d02b      	beq.n	801315e <HAL_GPIO_Init+0x222>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4a1b      	ldr	r2, [pc, #108]	; (8013178 <HAL_GPIO_Init+0x23c>)
 801310a:	4293      	cmp	r3, r2
 801310c:	d025      	beq.n	801315a <HAL_GPIO_Init+0x21e>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4a1a      	ldr	r2, [pc, #104]	; (801317c <HAL_GPIO_Init+0x240>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d01f      	beq.n	8013156 <HAL_GPIO_Init+0x21a>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4a19      	ldr	r2, [pc, #100]	; (8013180 <HAL_GPIO_Init+0x244>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d019      	beq.n	8013152 <HAL_GPIO_Init+0x216>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4a18      	ldr	r2, [pc, #96]	; (8013184 <HAL_GPIO_Init+0x248>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d013      	beq.n	801314e <HAL_GPIO_Init+0x212>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4a17      	ldr	r2, [pc, #92]	; (8013188 <HAL_GPIO_Init+0x24c>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d00d      	beq.n	801314a <HAL_GPIO_Init+0x20e>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	4a16      	ldr	r2, [pc, #88]	; (801318c <HAL_GPIO_Init+0x250>)
 8013132:	4293      	cmp	r3, r2
 8013134:	d007      	beq.n	8013146 <HAL_GPIO_Init+0x20a>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	4a15      	ldr	r2, [pc, #84]	; (8013190 <HAL_GPIO_Init+0x254>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d101      	bne.n	8013142 <HAL_GPIO_Init+0x206>
 801313e:	2309      	movs	r3, #9
 8013140:	e029      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 8013142:	230a      	movs	r3, #10
 8013144:	e027      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 8013146:	2307      	movs	r3, #7
 8013148:	e025      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 801314a:	2306      	movs	r3, #6
 801314c:	e023      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 801314e:	2305      	movs	r3, #5
 8013150:	e021      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 8013152:	2304      	movs	r3, #4
 8013154:	e01f      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 8013156:	2303      	movs	r3, #3
 8013158:	e01d      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 801315a:	2302      	movs	r3, #2
 801315c:	e01b      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 801315e:	2301      	movs	r3, #1
 8013160:	e019      	b.n	8013196 <HAL_GPIO_Init+0x25a>
 8013162:	bf00      	nop
 8013164:	58000080 	.word	0x58000080
 8013168:	58024400 	.word	0x58024400
 801316c:	58000400 	.word	0x58000400
 8013170:	58020000 	.word	0x58020000
 8013174:	58020400 	.word	0x58020400
 8013178:	58020800 	.word	0x58020800
 801317c:	58020c00 	.word	0x58020c00
 8013180:	58021000 	.word	0x58021000
 8013184:	58021400 	.word	0x58021400
 8013188:	58021800 	.word	0x58021800
 801318c:	58021c00 	.word	0x58021c00
 8013190:	58022400 	.word	0x58022400
 8013194:	2300      	movs	r3, #0
 8013196:	69fa      	ldr	r2, [r7, #28]
 8013198:	f002 0203 	and.w	r2, r2, #3
 801319c:	0092      	lsls	r2, r2, #2
 801319e:	4093      	lsls	r3, r2
 80131a0:	69ba      	ldr	r2, [r7, #24]
 80131a2:	4313      	orrs	r3, r2
 80131a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80131a6:	4938      	ldr	r1, [pc, #224]	; (8013288 <HAL_GPIO_Init+0x34c>)
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	089b      	lsrs	r3, r3, #2
 80131ac:	3302      	adds	r3, #2
 80131ae:	69ba      	ldr	r2, [r7, #24]
 80131b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80131b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	43db      	mvns	r3, r3
 80131c0:	69ba      	ldr	r2, [r7, #24]
 80131c2:	4013      	ands	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d003      	beq.n	80131da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80131d2:	69ba      	ldr	r2, [r7, #24]
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	4313      	orrs	r3, r2
 80131d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80131da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80131e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	43db      	mvns	r3, r3
 80131ee:	69ba      	ldr	r2, [r7, #24]
 80131f0:	4013      	ands	r3, r2
 80131f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d003      	beq.n	8013208 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8013200:	69ba      	ldr	r2, [r7, #24]
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	4313      	orrs	r3, r2
 8013206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	43db      	mvns	r3, r3
 801321a:	69ba      	ldr	r2, [r7, #24]
 801321c:	4013      	ands	r3, r2
 801321e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013228:	2b00      	cmp	r3, #0
 801322a:	d003      	beq.n	8013234 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801322c:	69ba      	ldr	r2, [r7, #24]
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	4313      	orrs	r3, r2
 8013232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	69ba      	ldr	r2, [r7, #24]
 8013238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	43db      	mvns	r3, r3
 8013244:	69ba      	ldr	r2, [r7, #24]
 8013246:	4013      	ands	r3, r2
 8013248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013252:	2b00      	cmp	r3, #0
 8013254:	d003      	beq.n	801325e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8013256:	69ba      	ldr	r2, [r7, #24]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	4313      	orrs	r3, r2
 801325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	69ba      	ldr	r2, [r7, #24]
 8013262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	3301      	adds	r3, #1
 8013268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	69fb      	ldr	r3, [r7, #28]
 8013270:	fa22 f303 	lsr.w	r3, r2, r3
 8013274:	2b00      	cmp	r3, #0
 8013276:	f47f ae6b 	bne.w	8012f50 <HAL_GPIO_Init+0x14>
  }
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	3724      	adds	r7, #36	; 0x24
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr
 8013288:	58000400 	.word	0x58000400

0801328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801328c:	b480      	push	{r7}
 801328e:	b085      	sub	sp, #20
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	460b      	mov	r3, r1
 8013296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	691a      	ldr	r2, [r3, #16]
 801329c:	887b      	ldrh	r3, [r7, #2]
 801329e:	4013      	ands	r3, r2
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d002      	beq.n	80132aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80132a4:	2301      	movs	r3, #1
 80132a6:	73fb      	strb	r3, [r7, #15]
 80132a8:	e001      	b.n	80132ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80132aa:	2300      	movs	r3, #0
 80132ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80132ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3714      	adds	r7, #20
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	460b      	mov	r3, r1
 80132c6:	807b      	strh	r3, [r7, #2]
 80132c8:	4613      	mov	r3, r2
 80132ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80132cc:	787b      	ldrb	r3, [r7, #1]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80132d2:	887a      	ldrh	r2, [r7, #2]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80132d8:	e003      	b.n	80132e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80132da:	887b      	ldrh	r3, [r7, #2]
 80132dc:	041a      	lsls	r2, r3, #16
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	619a      	str	r2, [r3, #24]
}
 80132e2:	bf00      	nop
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b082      	sub	sp, #8
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	4603      	mov	r3, r0
 80132f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80132f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013300:	88fb      	ldrh	r3, [r7, #6]
 8013302:	4013      	ands	r3, r2
 8013304:	2b00      	cmp	r3, #0
 8013306:	d008      	beq.n	801331a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013312:	88fb      	ldrh	r3, [r7, #6]
 8013314:	4618      	mov	r0, r3
 8013316:	f00c f99b 	bl	801f650 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 801331a:	bf00      	nop
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
	...

08013324 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d101      	bne.n	8013336 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8013332:	2301      	movs	r3, #1
 8013334:	e097      	b.n	8013466 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013342:	b2db      	uxtb	r3, r3
 8013344:	2b00      	cmp	r3, #0
 8013346:	d106      	bne.n	8013356 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2200      	movs	r2, #0
 801334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7f9 fce3 	bl	800cd1c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2202      	movs	r2, #2
 801335a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d004      	beq.n	8013378 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013376:	d103      	bne.n	8013380 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f023 031e 	bic.w	r3, r3, #30
 801337e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	695b      	ldr	r3, [r3, #20]
 8013384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013388:	4293      	cmp	r3, r2
 801338a:	d003      	beq.n	8013394 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	4b38      	ldr	r3, [pc, #224]	; (8013470 <HAL_LPTIM_Init+0x14c>)
 8013390:	4013      	ands	r3, r2
 8013392:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	4b37      	ldr	r3, [pc, #220]	; (8013474 <HAL_LPTIM_Init+0x150>)
 8013398:	4013      	ands	r3, r2
 801339a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80133a4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80133aa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80133b0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80133b6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	4313      	orrs	r3, r2
 80133bc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d107      	bne.n	80133d6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80133ce:	4313      	orrs	r3, r2
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	4313      	orrs	r3, r2
 80133d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	d004      	beq.n	80133e8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80133e6:	d107      	bne.n	80133f8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80133f0:	4313      	orrs	r3, r2
 80133f2:	68fa      	ldr	r2, [r7, #12]
 80133f4:	4313      	orrs	r3, r2
 80133f6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	695b      	ldr	r3, [r3, #20]
 80133fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013400:	4293      	cmp	r3, r2
 8013402:	d00a      	beq.n	801341a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801340c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8013412:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8013414:	68fa      	ldr	r2, [r7, #12]
 8013416:	4313      	orrs	r3, r2
 8013418:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4a14      	ldr	r2, [pc, #80]	; (8013478 <HAL_LPTIM_Init+0x154>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d004      	beq.n	8013436 <HAL_LPTIM_Init+0x112>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a12      	ldr	r2, [pc, #72]	; (801347c <HAL_LPTIM_Init+0x158>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d108      	bne.n	8013448 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	430a      	orrs	r2, r1
 8013444:	625a      	str	r2, [r3, #36]	; 0x24
 8013446:	e009      	b.n	801345c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4a0c      	ldr	r2, [pc, #48]	; (8013480 <HAL_LPTIM_Init+0x15c>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d104      	bne.n	801345c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801345a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2201      	movs	r2, #1
 8013460:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8013464:	2300      	movs	r3, #0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	ffff1f3f 	.word	0xffff1f3f
 8013474:	ff19f1fe 	.word	0xff19f1fe
 8013478:	40002400 	.word	0x40002400
 801347c:	58002400 	.word	0x58002400
 8013480:	58002800 	.word	0x58002800

08013484 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2202      	movs	r2, #2
 8013494:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	68da      	ldr	r2, [r3, #12]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80134a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	691a      	ldr	r2, [r3, #16]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f042 0201 	orr.w	r2, r2, #1
 80134b6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2210      	movs	r2, #16
 80134be:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80134c8:	2110      	movs	r1, #16
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f000 f932 	bl	8013734 <LPTIM_WaitForFlag>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b03      	cmp	r3, #3
 80134d4:	d101      	bne.n	80134da <HAL_LPTIM_TimeOut_Start_IT+0x56>
  {
    return HAL_TIMEOUT;
 80134d6:	2303      	movs	r3, #3
 80134d8:	e038      	b.n	801354c <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2208      	movs	r2, #8
 80134e0:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80134ea:	2108      	movs	r1, #8
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f000 f921 	bl	8013734 <LPTIM_WaitForFlag>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b03      	cmp	r3, #3
 80134f6:	d101      	bne.n	80134fc <HAL_LPTIM_TimeOut_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 80134f8:	2303      	movs	r3, #3
 80134fa:	e027      	b.n	801354c <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f000 f949 	bl	8013794 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f000 f907 	bl	8013716 <HAL_LPTIM_GetState>
 8013508:	4603      	mov	r3, r0
 801350a:	2b03      	cmp	r3, #3
 801350c:	d101      	bne.n	8013512 <HAL_LPTIM_TimeOut_Start_IT+0x8e>
  {
    return HAL_TIMEOUT;
 801350e:	2303      	movs	r3, #3
 8013510:	e01c      	b.n	801354c <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	689a      	ldr	r2, [r3, #8]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f042 0201 	orr.w	r2, r2, #1
 8013520:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	691a      	ldr	r2, [r3, #16]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f042 0201 	orr.w	r2, r2, #1
 8013530:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	691a      	ldr	r2, [r3, #16]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f042 0204 	orr.w	r2, r2, #4
 8013540:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2201      	movs	r2, #1
 8013546:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f003 0301 	and.w	r3, r3, #1
 8013566:	2b01      	cmp	r3, #1
 8013568:	d10d      	bne.n	8013586 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	f003 0301 	and.w	r3, r3, #1
 8013574:	2b01      	cmp	r3, #1
 8013576:	d106      	bne.n	8013586 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2201      	movs	r2, #1
 801357e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 f882 	bl	801368a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f003 0302 	and.w	r3, r3, #2
 8013590:	2b02      	cmp	r3, #2
 8013592:	d10d      	bne.n	80135b0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	f003 0302 	and.w	r3, r3, #2
 801359e:	2b02      	cmp	r3, #2
 80135a0:	d106      	bne.n	80135b0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2202      	movs	r2, #2
 80135a8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 f877 	bl	801369e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f003 0304 	and.w	r3, r3, #4
 80135ba:	2b04      	cmp	r3, #4
 80135bc:	d10d      	bne.n	80135da <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	689b      	ldr	r3, [r3, #8]
 80135c4:	f003 0304 	and.w	r3, r3, #4
 80135c8:	2b04      	cmp	r3, #4
 80135ca:	d106      	bne.n	80135da <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2204      	movs	r2, #4
 80135d2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f000 f86c 	bl	80136b2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	f003 0308 	and.w	r3, r3, #8
 80135e4:	2b08      	cmp	r3, #8
 80135e6:	d10d      	bne.n	8013604 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	f003 0308 	and.w	r3, r3, #8
 80135f2:	2b08      	cmp	r3, #8
 80135f4:	d106      	bne.n	8013604 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2208      	movs	r2, #8
 80135fc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f000 f861 	bl	80136c6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f003 0310 	and.w	r3, r3, #16
 801360e:	2b10      	cmp	r3, #16
 8013610:	d10d      	bne.n	801362e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	f003 0310 	and.w	r3, r3, #16
 801361c:	2b10      	cmp	r3, #16
 801361e:	d106      	bne.n	801362e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2210      	movs	r2, #16
 8013626:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 f856 	bl	80136da <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f003 0320 	and.w	r3, r3, #32
 8013638:	2b20      	cmp	r3, #32
 801363a:	d10d      	bne.n	8013658 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	f003 0320 	and.w	r3, r3, #32
 8013646:	2b20      	cmp	r3, #32
 8013648:	d106      	bne.n	8013658 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2220      	movs	r2, #32
 8013650:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 f84b 	bl	80136ee <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013662:	2b40      	cmp	r3, #64	; 0x40
 8013664:	d10d      	bne.n	8013682 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013670:	2b40      	cmp	r3, #64	; 0x40
 8013672:	d106      	bne.n	8013682 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	2240      	movs	r2, #64	; 0x40
 801367a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f000 f840 	bl	8013702 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8013682:	bf00      	nop
 8013684:	3708      	adds	r7, #8
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801368a:	b480      	push	{r7}
 801368c:	b083      	sub	sp, #12
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8013692:	bf00      	nop
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801369e:	b480      	push	{r7}
 80136a0:	b083      	sub	sp, #12
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80136a6:	bf00      	nop
 80136a8:	370c      	adds	r7, #12
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr

080136b2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80136b2:	b480      	push	{r7}
 80136b4:	b083      	sub	sp, #12
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80136ba:	bf00      	nop
 80136bc:	370c      	adds	r7, #12
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr

080136c6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80136c6:	b480      	push	{r7}
 80136c8:	b083      	sub	sp, #12
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80136ce:	bf00      	nop
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr

080136da <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80136da:	b480      	push	{r7}
 80136dc:	b083      	sub	sp, #12
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80136e2:	bf00      	nop
 80136e4:	370c      	adds	r7, #12
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr

080136ee <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80136ee:	b480      	push	{r7}
 80136f0:	b083      	sub	sp, #12
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80136f6:	bf00      	nop
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8013702:	b480      	push	{r7}
 8013704:	b083      	sub	sp, #12
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801370a:	bf00      	nop
 801370c:	370c      	adds	r7, #12
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr

08013716 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8013716:	b480      	push	{r7}
 8013718:	b083      	sub	sp, #12
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013724:	b2db      	uxtb	r3, r3
}
 8013726:	4618      	mov	r0, r3
 8013728:	370c      	adds	r7, #12
 801372a:	46bd      	mov	sp, r7
 801372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013730:	4770      	bx	lr
	...

08013734 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8013734:	b480      	push	{r7}
 8013736:	b085      	sub	sp, #20
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801373e:	2300      	movs	r3, #0
 8013740:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8013742:	4b12      	ldr	r3, [pc, #72]	; (801378c <LPTIM_WaitForFlag+0x58>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	4a12      	ldr	r2, [pc, #72]	; (8013790 <LPTIM_WaitForFlag+0x5c>)
 8013748:	fba2 2303 	umull	r2, r3, r2, r3
 801374c:	0b9b      	lsrs	r3, r3, #14
 801374e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013752:	fb02 f303 	mul.w	r3, r2, r3
 8013756:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	3b01      	subs	r3, #1
 801375c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d101      	bne.n	8013768 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8013764:	2303      	movs	r3, #3
 8013766:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	4013      	ands	r3, r2
 8013772:	683a      	ldr	r2, [r7, #0]
 8013774:	429a      	cmp	r2, r3
 8013776:	d002      	beq.n	801377e <LPTIM_WaitForFlag+0x4a>
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d1ec      	bne.n	8013758 <LPTIM_WaitForFlag+0x24>

  return result;
 801377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013780:	4618      	mov	r0, r3
 8013782:	3714      	adds	r7, #20
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr
 801378c:	24000058 	.word	0x24000058
 8013790:	d1b71759 	.word	0xd1b71759

08013794 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b08c      	sub	sp, #48	; 0x30
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801379c:	2300      	movs	r3, #0
 801379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137a0:	f3ef 8310 	mrs	r3, PRIMASK
 80137a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80137a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80137a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80137aa:	2301      	movs	r3, #1
 80137ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	f383 8810 	msr	PRIMASK, r3
}
 80137b4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	4a81      	ldr	r2, [pc, #516]	; (80139c0 <LPTIM_Disable+0x22c>)
 80137bc:	4293      	cmp	r3, r2
 80137be:	d02d      	beq.n	801381c <LPTIM_Disable+0x88>
 80137c0:	4a7f      	ldr	r2, [pc, #508]	; (80139c0 <LPTIM_Disable+0x22c>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d830      	bhi.n	8013828 <LPTIM_Disable+0x94>
 80137c6:	4a7f      	ldr	r2, [pc, #508]	; (80139c4 <LPTIM_Disable+0x230>)
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d021      	beq.n	8013810 <LPTIM_Disable+0x7c>
 80137cc:	4a7d      	ldr	r2, [pc, #500]	; (80139c4 <LPTIM_Disable+0x230>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d82a      	bhi.n	8013828 <LPTIM_Disable+0x94>
 80137d2:	4a7d      	ldr	r2, [pc, #500]	; (80139c8 <LPTIM_Disable+0x234>)
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d015      	beq.n	8013804 <LPTIM_Disable+0x70>
 80137d8:	4a7b      	ldr	r2, [pc, #492]	; (80139c8 <LPTIM_Disable+0x234>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d824      	bhi.n	8013828 <LPTIM_Disable+0x94>
 80137de:	4a7b      	ldr	r2, [pc, #492]	; (80139cc <LPTIM_Disable+0x238>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d003      	beq.n	80137ec <LPTIM_Disable+0x58>
 80137e4:	4a7a      	ldr	r2, [pc, #488]	; (80139d0 <LPTIM_Disable+0x23c>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d006      	beq.n	80137f8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80137ea:	e01d      	b.n	8013828 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80137ec:	4b79      	ldr	r3, [pc, #484]	; (80139d4 <LPTIM_Disable+0x240>)
 80137ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80137f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80137f6:	e018      	b.n	801382a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80137f8:	4b76      	ldr	r3, [pc, #472]	; (80139d4 <LPTIM_Disable+0x240>)
 80137fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8013800:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8013802:	e012      	b.n	801382a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8013804:	4b73      	ldr	r3, [pc, #460]	; (80139d4 <LPTIM_Disable+0x240>)
 8013806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013808:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801380c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 801380e:	e00c      	b.n	801382a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8013810:	4b70      	ldr	r3, [pc, #448]	; (80139d4 <LPTIM_Disable+0x240>)
 8013812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013814:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013818:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 801381a:	e006      	b.n	801382a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 801381c:	4b6d      	ldr	r3, [pc, #436]	; (80139d4 <LPTIM_Disable+0x240>)
 801381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013820:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013824:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8013826:	e000      	b.n	801382a <LPTIM_Disable+0x96>
      break;
 8013828:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	699b      	ldr	r3, [r3, #24]
 8013848:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013850:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	4a5a      	ldr	r2, [pc, #360]	; (80139c0 <LPTIM_Disable+0x22c>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d059      	beq.n	8013910 <LPTIM_Disable+0x17c>
 801385c:	4a58      	ldr	r2, [pc, #352]	; (80139c0 <LPTIM_Disable+0x22c>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d867      	bhi.n	8013932 <LPTIM_Disable+0x19e>
 8013862:	4a58      	ldr	r2, [pc, #352]	; (80139c4 <LPTIM_Disable+0x230>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d042      	beq.n	80138ee <LPTIM_Disable+0x15a>
 8013868:	4a56      	ldr	r2, [pc, #344]	; (80139c4 <LPTIM_Disable+0x230>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d861      	bhi.n	8013932 <LPTIM_Disable+0x19e>
 801386e:	4a56      	ldr	r2, [pc, #344]	; (80139c8 <LPTIM_Disable+0x234>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d02b      	beq.n	80138cc <LPTIM_Disable+0x138>
 8013874:	4a54      	ldr	r2, [pc, #336]	; (80139c8 <LPTIM_Disable+0x234>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d85b      	bhi.n	8013932 <LPTIM_Disable+0x19e>
 801387a:	4a54      	ldr	r2, [pc, #336]	; (80139cc <LPTIM_Disable+0x238>)
 801387c:	4293      	cmp	r3, r2
 801387e:	d003      	beq.n	8013888 <LPTIM_Disable+0xf4>
 8013880:	4a53      	ldr	r2, [pc, #332]	; (80139d0 <LPTIM_Disable+0x23c>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d011      	beq.n	80138aa <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8013886:	e054      	b.n	8013932 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8013888:	4b52      	ldr	r3, [pc, #328]	; (80139d4 <LPTIM_Disable+0x240>)
 801388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801388e:	4a51      	ldr	r2, [pc, #324]	; (80139d4 <LPTIM_Disable+0x240>)
 8013890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8013898:	4b4e      	ldr	r3, [pc, #312]	; (80139d4 <LPTIM_Disable+0x240>)
 801389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801389e:	4a4d      	ldr	r2, [pc, #308]	; (80139d4 <LPTIM_Disable+0x240>)
 80138a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80138a8:	e044      	b.n	8013934 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80138aa:	4b4a      	ldr	r3, [pc, #296]	; (80139d4 <LPTIM_Disable+0x240>)
 80138ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138b0:	4a48      	ldr	r2, [pc, #288]	; (80139d4 <LPTIM_Disable+0x240>)
 80138b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80138b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80138ba:	4b46      	ldr	r3, [pc, #280]	; (80139d4 <LPTIM_Disable+0x240>)
 80138bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138c0:	4a44      	ldr	r2, [pc, #272]	; (80139d4 <LPTIM_Disable+0x240>)
 80138c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80138ca:	e033      	b.n	8013934 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80138cc:	4b41      	ldr	r3, [pc, #260]	; (80139d4 <LPTIM_Disable+0x240>)
 80138ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138d2:	4a40      	ldr	r2, [pc, #256]	; (80139d4 <LPTIM_Disable+0x240>)
 80138d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80138d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80138dc:	4b3d      	ldr	r3, [pc, #244]	; (80139d4 <LPTIM_Disable+0x240>)
 80138de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138e2:	4a3c      	ldr	r2, [pc, #240]	; (80139d4 <LPTIM_Disable+0x240>)
 80138e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80138e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80138ec:	e022      	b.n	8013934 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80138ee:	4b39      	ldr	r3, [pc, #228]	; (80139d4 <LPTIM_Disable+0x240>)
 80138f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138f4:	4a37      	ldr	r2, [pc, #220]	; (80139d4 <LPTIM_Disable+0x240>)
 80138f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80138fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 80138fe:	4b35      	ldr	r3, [pc, #212]	; (80139d4 <LPTIM_Disable+0x240>)
 8013900:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013904:	4a33      	ldr	r2, [pc, #204]	; (80139d4 <LPTIM_Disable+0x240>)
 8013906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801390a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 801390e:	e011      	b.n	8013934 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8013910:	4b30      	ldr	r3, [pc, #192]	; (80139d4 <LPTIM_Disable+0x240>)
 8013912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013916:	4a2f      	ldr	r2, [pc, #188]	; (80139d4 <LPTIM_Disable+0x240>)
 8013918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801391c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8013920:	4b2c      	ldr	r3, [pc, #176]	; (80139d4 <LPTIM_Disable+0x240>)
 8013922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013926:	4a2b      	ldr	r2, [pc, #172]	; (80139d4 <LPTIM_Disable+0x240>)
 8013928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801392c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8013930:	e000      	b.n	8013934 <LPTIM_Disable+0x1a0>
      break;
 8013932:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d103      	bne.n	8013942 <LPTIM_Disable+0x1ae>
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 80d0 	beq.w	8013ae2 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4a1e      	ldr	r2, [pc, #120]	; (80139c0 <LPTIM_Disable+0x22c>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d031      	beq.n	80139b0 <LPTIM_Disable+0x21c>
 801394c:	4a1c      	ldr	r2, [pc, #112]	; (80139c0 <LPTIM_Disable+0x22c>)
 801394e:	4293      	cmp	r3, r2
 8013950:	d842      	bhi.n	80139d8 <LPTIM_Disable+0x244>
 8013952:	4a1c      	ldr	r2, [pc, #112]	; (80139c4 <LPTIM_Disable+0x230>)
 8013954:	4293      	cmp	r3, r2
 8013956:	d024      	beq.n	80139a2 <LPTIM_Disable+0x20e>
 8013958:	4a1a      	ldr	r2, [pc, #104]	; (80139c4 <LPTIM_Disable+0x230>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d83c      	bhi.n	80139d8 <LPTIM_Disable+0x244>
 801395e:	4a1a      	ldr	r2, [pc, #104]	; (80139c8 <LPTIM_Disable+0x234>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d017      	beq.n	8013994 <LPTIM_Disable+0x200>
 8013964:	4a18      	ldr	r2, [pc, #96]	; (80139c8 <LPTIM_Disable+0x234>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d836      	bhi.n	80139d8 <LPTIM_Disable+0x244>
 801396a:	4a18      	ldr	r2, [pc, #96]	; (80139cc <LPTIM_Disable+0x238>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d003      	beq.n	8013978 <LPTIM_Disable+0x1e4>
 8013970:	4a17      	ldr	r2, [pc, #92]	; (80139d0 <LPTIM_Disable+0x23c>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d007      	beq.n	8013986 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8013976:	e02f      	b.n	80139d8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8013978:	4b16      	ldr	r3, [pc, #88]	; (80139d4 <LPTIM_Disable+0x240>)
 801397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801397c:	4a15      	ldr	r2, [pc, #84]	; (80139d4 <LPTIM_Disable+0x240>)
 801397e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8013982:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8013984:	e029      	b.n	80139da <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8013986:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <LPTIM_Disable+0x240>)
 8013988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801398a:	4a12      	ldr	r2, [pc, #72]	; (80139d4 <LPTIM_Disable+0x240>)
 801398c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8013990:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8013992:	e022      	b.n	80139da <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8013994:	4b0f      	ldr	r3, [pc, #60]	; (80139d4 <LPTIM_Disable+0x240>)
 8013996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013998:	4a0e      	ldr	r2, [pc, #56]	; (80139d4 <LPTIM_Disable+0x240>)
 801399a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801399e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80139a0:	e01b      	b.n	80139da <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80139a2:	4b0c      	ldr	r3, [pc, #48]	; (80139d4 <LPTIM_Disable+0x240>)
 80139a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a6:	4a0b      	ldr	r2, [pc, #44]	; (80139d4 <LPTIM_Disable+0x240>)
 80139a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80139ac:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80139ae:	e014      	b.n	80139da <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <LPTIM_Disable+0x240>)
 80139b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139b4:	4a07      	ldr	r2, [pc, #28]	; (80139d4 <LPTIM_Disable+0x240>)
 80139b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80139ba:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80139bc:	e00d      	b.n	80139da <LPTIM_Disable+0x246>
 80139be:	bf00      	nop
 80139c0:	58003000 	.word	0x58003000
 80139c4:	58002c00 	.word	0x58002c00
 80139c8:	58002800 	.word	0x58002800
 80139cc:	40002400 	.word	0x40002400
 80139d0:	58002400 	.word	0x58002400
 80139d4:	58024400 	.word	0x58024400
        break;
 80139d8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d01a      	beq.n	8013a16 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	691a      	ldr	r2, [r3, #16]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f042 0201 	orr.w	r2, r2, #1
 80139ee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	69fa      	ldr	r2, [r7, #28]
 80139f6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80139f8:	2108      	movs	r1, #8
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7ff fe9a 	bl	8013734 <LPTIM_WaitForFlag>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b03      	cmp	r3, #3
 8013a04:	d103      	bne.n	8013a0e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2203      	movs	r2, #3
 8013a0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2208      	movs	r2, #8
 8013a14:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d01a      	beq.n	8013a52 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	691a      	ldr	r2, [r3, #16]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f042 0201 	orr.w	r2, r2, #1
 8013a2a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	69ba      	ldr	r2, [r7, #24]
 8013a32:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8013a34:	2110      	movs	r1, #16
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	f7ff fe7c 	bl	8013734 <LPTIM_WaitForFlag>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	2b03      	cmp	r3, #3
 8013a40:	d103      	bne.n	8013a4a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2203      	movs	r2, #3
 8013a46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2210      	movs	r2, #16
 8013a50:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4a33      	ldr	r2, [pc, #204]	; (8013b24 <LPTIM_Disable+0x390>)
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d039      	beq.n	8013ad0 <LPTIM_Disable+0x33c>
 8013a5c:	4a31      	ldr	r2, [pc, #196]	; (8013b24 <LPTIM_Disable+0x390>)
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	d841      	bhi.n	8013ae6 <LPTIM_Disable+0x352>
 8013a62:	4a31      	ldr	r2, [pc, #196]	; (8013b28 <LPTIM_Disable+0x394>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d02a      	beq.n	8013abe <LPTIM_Disable+0x32a>
 8013a68:	4a2f      	ldr	r2, [pc, #188]	; (8013b28 <LPTIM_Disable+0x394>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d83b      	bhi.n	8013ae6 <LPTIM_Disable+0x352>
 8013a6e:	4a2f      	ldr	r2, [pc, #188]	; (8013b2c <LPTIM_Disable+0x398>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d01b      	beq.n	8013aac <LPTIM_Disable+0x318>
 8013a74:	4a2d      	ldr	r2, [pc, #180]	; (8013b2c <LPTIM_Disable+0x398>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d835      	bhi.n	8013ae6 <LPTIM_Disable+0x352>
 8013a7a:	4a2d      	ldr	r2, [pc, #180]	; (8013b30 <LPTIM_Disable+0x39c>)
 8013a7c:	4293      	cmp	r3, r2
 8013a7e:	d003      	beq.n	8013a88 <LPTIM_Disable+0x2f4>
 8013a80:	4a2c      	ldr	r2, [pc, #176]	; (8013b34 <LPTIM_Disable+0x3a0>)
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d009      	beq.n	8013a9a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8013a86:	e02e      	b.n	8013ae6 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8013a88:	4b2b      	ldr	r3, [pc, #172]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8013a90:	4929      	ldr	r1, [pc, #164]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a94:	4313      	orrs	r3, r2
 8013a96:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8013a98:	e026      	b.n	8013ae8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8013a9a:	4b27      	ldr	r3, [pc, #156]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013aa2:	4925      	ldr	r1, [pc, #148]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa6:	4313      	orrs	r3, r2
 8013aa8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8013aaa:	e01d      	b.n	8013ae8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8013aac:	4b22      	ldr	r3, [pc, #136]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013ab4:	4920      	ldr	r1, [pc, #128]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8013abc:	e014      	b.n	8013ae8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8013abe:	4b1e      	ldr	r3, [pc, #120]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013ac6:	491c      	ldr	r1, [pc, #112]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aca:	4313      	orrs	r3, r2
 8013acc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8013ace:	e00b      	b.n	8013ae8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8013ad0:	4b19      	ldr	r3, [pc, #100]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ad4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013ad8:	4917      	ldr	r1, [pc, #92]	; (8013b38 <LPTIM_Disable+0x3a4>)
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	4313      	orrs	r3, r2
 8013ade:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8013ae0:	e002      	b.n	8013ae8 <LPTIM_Disable+0x354>
    }
  }
 8013ae2:	bf00      	nop
 8013ae4:	e000      	b.n	8013ae8 <LPTIM_Disable+0x354>
        break;
 8013ae6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	691a      	ldr	r2, [r3, #16]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f022 0201 	bic.w	r2, r2, #1
 8013af6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013afe:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	6a3a      	ldr	r2, [r7, #32]
 8013b06:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	697a      	ldr	r2, [r7, #20]
 8013b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	f383 8810 	msr	PRIMASK, r3
}
 8013b1a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8013b1c:	bf00      	nop
 8013b1e:	3730      	adds	r7, #48	; 0x30
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	58003000 	.word	0x58003000
 8013b28:	58002c00 	.word	0x58002c00
 8013b2c:	58002800 	.word	0x58002800
 8013b30:	40002400 	.word	0x40002400
 8013b34:	58002400 	.word	0x58002400
 8013b38:	58024400 	.word	0x58024400

08013b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8013b44:	4b19      	ldr	r3, [pc, #100]	; (8013bac <HAL_PWREx_ConfigSupply+0x70>)
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	f003 0304 	and.w	r3, r3, #4
 8013b4c:	2b04      	cmp	r3, #4
 8013b4e:	d00a      	beq.n	8013b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8013b50:	4b16      	ldr	r3, [pc, #88]	; (8013bac <HAL_PWREx_ConfigSupply+0x70>)
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	f003 0307 	and.w	r3, r3, #7
 8013b58:	687a      	ldr	r2, [r7, #4]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d001      	beq.n	8013b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e01f      	b.n	8013ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e01d      	b.n	8013ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013b66:	4b11      	ldr	r3, [pc, #68]	; (8013bac <HAL_PWREx_ConfigSupply+0x70>)
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	f023 0207 	bic.w	r2, r3, #7
 8013b6e:	490f      	ldr	r1, [pc, #60]	; (8013bac <HAL_PWREx_ConfigSupply+0x70>)
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013b76:	f7f9 ff01 	bl	800d97c <HAL_GetTick>
 8013b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013b7c:	e009      	b.n	8013b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8013b7e:	f7f9 fefd 	bl	800d97c <HAL_GetTick>
 8013b82:	4602      	mov	r2, r0
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b8c:	d901      	bls.n	8013b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	e007      	b.n	8013ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013b92:	4b06      	ldr	r3, [pc, #24]	; (8013bac <HAL_PWREx_ConfigSupply+0x70>)
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b9e:	d1ee      	bne.n	8013b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8013ba0:	2300      	movs	r3, #0
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	58024800 	.word	0x58024800

08013bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08c      	sub	sp, #48	; 0x30
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	e3c8      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f003 0301 	and.w	r3, r3, #1
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	f000 8087 	beq.w	8013cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013bd0:	4b88      	ldr	r3, [pc, #544]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013bda:	4b86      	ldr	r3, [pc, #536]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	2b10      	cmp	r3, #16
 8013be4:	d007      	beq.n	8013bf6 <HAL_RCC_OscConfig+0x46>
 8013be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be8:	2b18      	cmp	r3, #24
 8013bea:	d110      	bne.n	8013c0e <HAL_RCC_OscConfig+0x5e>
 8013bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bee:	f003 0303 	and.w	r3, r3, #3
 8013bf2:	2b02      	cmp	r3, #2
 8013bf4:	d10b      	bne.n	8013c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013bf6:	4b7f      	ldr	r3, [pc, #508]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d06c      	beq.n	8013cdc <HAL_RCC_OscConfig+0x12c>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d168      	bne.n	8013cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	e3a2      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c16:	d106      	bne.n	8013c26 <HAL_RCC_OscConfig+0x76>
 8013c18:	4b76      	ldr	r3, [pc, #472]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	4a75      	ldr	r2, [pc, #468]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c22:	6013      	str	r3, [r2, #0]
 8013c24:	e02e      	b.n	8013c84 <HAL_RCC_OscConfig+0xd4>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d10c      	bne.n	8013c48 <HAL_RCC_OscConfig+0x98>
 8013c2e:	4b71      	ldr	r3, [pc, #452]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	4a70      	ldr	r2, [pc, #448]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013c38:	6013      	str	r3, [r2, #0]
 8013c3a:	4b6e      	ldr	r3, [pc, #440]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a6d      	ldr	r2, [pc, #436]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013c44:	6013      	str	r3, [r2, #0]
 8013c46:	e01d      	b.n	8013c84 <HAL_RCC_OscConfig+0xd4>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013c50:	d10c      	bne.n	8013c6c <HAL_RCC_OscConfig+0xbc>
 8013c52:	4b68      	ldr	r3, [pc, #416]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	4a67      	ldr	r2, [pc, #412]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013c5c:	6013      	str	r3, [r2, #0]
 8013c5e:	4b65      	ldr	r3, [pc, #404]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	4a64      	ldr	r2, [pc, #400]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c68:	6013      	str	r3, [r2, #0]
 8013c6a:	e00b      	b.n	8013c84 <HAL_RCC_OscConfig+0xd4>
 8013c6c:	4b61      	ldr	r3, [pc, #388]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4a60      	ldr	r2, [pc, #384]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013c76:	6013      	str	r3, [r2, #0]
 8013c78:	4b5e      	ldr	r3, [pc, #376]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4a5d      	ldr	r2, [pc, #372]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d013      	beq.n	8013cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c8c:	f7f9 fe76 	bl	800d97c <HAL_GetTick>
 8013c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013c92:	e008      	b.n	8013ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013c94:	f7f9 fe72 	bl	800d97c <HAL_GetTick>
 8013c98:	4602      	mov	r2, r0
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9c:	1ad3      	subs	r3, r2, r3
 8013c9e:	2b64      	cmp	r3, #100	; 0x64
 8013ca0:	d901      	bls.n	8013ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8013ca2:	2303      	movs	r3, #3
 8013ca4:	e356      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013ca6:	4b53      	ldr	r3, [pc, #332]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d0f0      	beq.n	8013c94 <HAL_RCC_OscConfig+0xe4>
 8013cb2:	e014      	b.n	8013cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013cb4:	f7f9 fe62 	bl	800d97c <HAL_GetTick>
 8013cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013cba:	e008      	b.n	8013cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013cbc:	f7f9 fe5e 	bl	800d97c <HAL_GetTick>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	2b64      	cmp	r3, #100	; 0x64
 8013cc8:	d901      	bls.n	8013cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8013cca:	2303      	movs	r3, #3
 8013ccc:	e342      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013cce:	4b49      	ldr	r3, [pc, #292]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d1f0      	bne.n	8013cbc <HAL_RCC_OscConfig+0x10c>
 8013cda:	e000      	b.n	8013cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f003 0302 	and.w	r3, r3, #2
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 808c 	beq.w	8013e04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013cec:	4b41      	ldr	r3, [pc, #260]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013cee:	691b      	ldr	r3, [r3, #16]
 8013cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013cf6:	4b3f      	ldr	r3, [pc, #252]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8013cfc:	6a3b      	ldr	r3, [r7, #32]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d007      	beq.n	8013d12 <HAL_RCC_OscConfig+0x162>
 8013d02:	6a3b      	ldr	r3, [r7, #32]
 8013d04:	2b18      	cmp	r3, #24
 8013d06:	d137      	bne.n	8013d78 <HAL_RCC_OscConfig+0x1c8>
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f003 0303 	and.w	r3, r3, #3
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d132      	bne.n	8013d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013d12:	4b38      	ldr	r3, [pc, #224]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	f003 0304 	and.w	r3, r3, #4
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d005      	beq.n	8013d2a <HAL_RCC_OscConfig+0x17a>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d101      	bne.n	8013d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8013d26:	2301      	movs	r3, #1
 8013d28:	e314      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013d2a:	4b32      	ldr	r3, [pc, #200]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f023 0219 	bic.w	r2, r3, #25
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	492f      	ldr	r1, [pc, #188]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d38:	4313      	orrs	r3, r2
 8013d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d3c:	f7f9 fe1e 	bl	800d97c <HAL_GetTick>
 8013d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013d42:	e008      	b.n	8013d56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013d44:	f7f9 fe1a 	bl	800d97c <HAL_GetTick>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	2b02      	cmp	r3, #2
 8013d50:	d901      	bls.n	8013d56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8013d52:	2303      	movs	r3, #3
 8013d54:	e2fe      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013d56:	4b27      	ldr	r3, [pc, #156]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f003 0304 	and.w	r3, r3, #4
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d0f0      	beq.n	8013d44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013d62:	4b24      	ldr	r3, [pc, #144]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	691b      	ldr	r3, [r3, #16]
 8013d6e:	061b      	lsls	r3, r3, #24
 8013d70:	4920      	ldr	r1, [pc, #128]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d72:	4313      	orrs	r3, r2
 8013d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013d76:	e045      	b.n	8013e04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d026      	beq.n	8013dce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013d80:	4b1c      	ldr	r3, [pc, #112]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f023 0219 	bic.w	r2, r3, #25
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	4919      	ldr	r1, [pc, #100]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d92:	f7f9 fdf3 	bl	800d97c <HAL_GetTick>
 8013d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013d98:	e008      	b.n	8013dac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013d9a:	f7f9 fdef 	bl	800d97c <HAL_GetTick>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da2:	1ad3      	subs	r3, r2, r3
 8013da4:	2b02      	cmp	r3, #2
 8013da6:	d901      	bls.n	8013dac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8013da8:	2303      	movs	r3, #3
 8013daa:	e2d3      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013dac:	4b11      	ldr	r3, [pc, #68]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f003 0304 	and.w	r3, r3, #4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d0f0      	beq.n	8013d9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013db8:	4b0e      	ldr	r3, [pc, #56]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	691b      	ldr	r3, [r3, #16]
 8013dc4:	061b      	lsls	r3, r3, #24
 8013dc6:	490b      	ldr	r1, [pc, #44]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013dc8:	4313      	orrs	r3, r2
 8013dca:	604b      	str	r3, [r1, #4]
 8013dcc:	e01a      	b.n	8013e04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013dce:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a08      	ldr	r2, [pc, #32]	; (8013df4 <HAL_RCC_OscConfig+0x244>)
 8013dd4:	f023 0301 	bic.w	r3, r3, #1
 8013dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013dda:	f7f9 fdcf 	bl	800d97c <HAL_GetTick>
 8013dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013de0:	e00a      	b.n	8013df8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013de2:	f7f9 fdcb 	bl	800d97c <HAL_GetTick>
 8013de6:	4602      	mov	r2, r0
 8013de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dea:	1ad3      	subs	r3, r2, r3
 8013dec:	2b02      	cmp	r3, #2
 8013dee:	d903      	bls.n	8013df8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8013df0:	2303      	movs	r3, #3
 8013df2:	e2af      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
 8013df4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013df8:	4b96      	ldr	r3, [pc, #600]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	f003 0304 	and.w	r3, r3, #4
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1ee      	bne.n	8013de2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f003 0310 	and.w	r3, r3, #16
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d06a      	beq.n	8013ee6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013e10:	4b90      	ldr	r3, [pc, #576]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e12:	691b      	ldr	r3, [r3, #16]
 8013e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013e18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013e1a:	4b8e      	ldr	r3, [pc, #568]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	2b08      	cmp	r3, #8
 8013e24:	d007      	beq.n	8013e36 <HAL_RCC_OscConfig+0x286>
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	2b18      	cmp	r3, #24
 8013e2a:	d11b      	bne.n	8013e64 <HAL_RCC_OscConfig+0x2b4>
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	f003 0303 	and.w	r3, r3, #3
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d116      	bne.n	8013e64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013e36:	4b87      	ldr	r3, [pc, #540]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d005      	beq.n	8013e4e <HAL_RCC_OscConfig+0x29e>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	69db      	ldr	r3, [r3, #28]
 8013e46:	2b80      	cmp	r3, #128	; 0x80
 8013e48:	d001      	beq.n	8013e4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e282      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013e4e:	4b81      	ldr	r3, [pc, #516]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6a1b      	ldr	r3, [r3, #32]
 8013e5a:	061b      	lsls	r3, r3, #24
 8013e5c:	497d      	ldr	r1, [pc, #500]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013e62:	e040      	b.n	8013ee6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	69db      	ldr	r3, [r3, #28]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d023      	beq.n	8013eb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8013e6c:	4b79      	ldr	r3, [pc, #484]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	4a78      	ldr	r2, [pc, #480]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e78:	f7f9 fd80 	bl	800d97c <HAL_GetTick>
 8013e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013e7e:	e008      	b.n	8013e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8013e80:	f7f9 fd7c 	bl	800d97c <HAL_GetTick>
 8013e84:	4602      	mov	r2, r0
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	d901      	bls.n	8013e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8013e8e:	2303      	movs	r3, #3
 8013e90:	e260      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013e92:	4b70      	ldr	r3, [pc, #448]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d0f0      	beq.n	8013e80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013e9e:	4b6d      	ldr	r3, [pc, #436]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a1b      	ldr	r3, [r3, #32]
 8013eaa:	061b      	lsls	r3, r3, #24
 8013eac:	4969      	ldr	r1, [pc, #420]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	60cb      	str	r3, [r1, #12]
 8013eb2:	e018      	b.n	8013ee6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8013eb4:	4b67      	ldr	r3, [pc, #412]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a66      	ldr	r2, [pc, #408]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ec0:	f7f9 fd5c 	bl	800d97c <HAL_GetTick>
 8013ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013ec6:	e008      	b.n	8013eda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8013ec8:	f7f9 fd58 	bl	800d97c <HAL_GetTick>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d901      	bls.n	8013eda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e23c      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013eda:	4b5e      	ldr	r3, [pc, #376]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1f0      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f003 0308 	and.w	r3, r3, #8
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d036      	beq.n	8013f60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	695b      	ldr	r3, [r3, #20]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d019      	beq.n	8013f2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013efa:	4b56      	ldr	r3, [pc, #344]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013efe:	4a55      	ldr	r2, [pc, #340]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f00:	f043 0301 	orr.w	r3, r3, #1
 8013f04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013f06:	f7f9 fd39 	bl	800d97c <HAL_GetTick>
 8013f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013f0c:	e008      	b.n	8013f20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013f0e:	f7f9 fd35 	bl	800d97c <HAL_GetTick>
 8013f12:	4602      	mov	r2, r0
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	2b02      	cmp	r3, #2
 8013f1a:	d901      	bls.n	8013f20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8013f1c:	2303      	movs	r3, #3
 8013f1e:	e219      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013f20:	4b4c      	ldr	r3, [pc, #304]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f24:	f003 0302 	and.w	r3, r3, #2
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d0f0      	beq.n	8013f0e <HAL_RCC_OscConfig+0x35e>
 8013f2c:	e018      	b.n	8013f60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013f2e:	4b49      	ldr	r3, [pc, #292]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f32:	4a48      	ldr	r2, [pc, #288]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f34:	f023 0301 	bic.w	r3, r3, #1
 8013f38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013f3a:	f7f9 fd1f 	bl	800d97c <HAL_GetTick>
 8013f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013f40:	e008      	b.n	8013f54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013f42:	f7f9 fd1b 	bl	800d97c <HAL_GetTick>
 8013f46:	4602      	mov	r2, r0
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	2b02      	cmp	r3, #2
 8013f4e:	d901      	bls.n	8013f54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8013f50:	2303      	movs	r3, #3
 8013f52:	e1ff      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013f54:	4b3f      	ldr	r3, [pc, #252]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f58:	f003 0302 	and.w	r3, r3, #2
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1f0      	bne.n	8013f42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f003 0320 	and.w	r3, r3, #32
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d036      	beq.n	8013fda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	699b      	ldr	r3, [r3, #24]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d019      	beq.n	8013fa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013f74:	4b37      	ldr	r3, [pc, #220]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a36      	ldr	r2, [pc, #216]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013f80:	f7f9 fcfc 	bl	800d97c <HAL_GetTick>
 8013f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013f86:	e008      	b.n	8013f9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013f88:	f7f9 fcf8 	bl	800d97c <HAL_GetTick>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	2b02      	cmp	r3, #2
 8013f94:	d901      	bls.n	8013f9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8013f96:	2303      	movs	r3, #3
 8013f98:	e1dc      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013f9a:	4b2e      	ldr	r3, [pc, #184]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d0f0      	beq.n	8013f88 <HAL_RCC_OscConfig+0x3d8>
 8013fa6:	e018      	b.n	8013fda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013fa8:	4b2a      	ldr	r3, [pc, #168]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4a29      	ldr	r2, [pc, #164]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013fb4:	f7f9 fce2 	bl	800d97c <HAL_GetTick>
 8013fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013fba:	e008      	b.n	8013fce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013fbc:	f7f9 fcde 	bl	800d97c <HAL_GetTick>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	1ad3      	subs	r3, r2, r3
 8013fc6:	2b02      	cmp	r3, #2
 8013fc8:	d901      	bls.n	8013fce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8013fca:	2303      	movs	r3, #3
 8013fcc:	e1c2      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013fce:	4b21      	ldr	r3, [pc, #132]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1f0      	bne.n	8013fbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	f003 0304 	and.w	r3, r3, #4
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	f000 8086 	beq.w	80140f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8013fe8:	4b1b      	ldr	r3, [pc, #108]	; (8014058 <HAL_RCC_OscConfig+0x4a8>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4a1a      	ldr	r2, [pc, #104]	; (8014058 <HAL_RCC_OscConfig+0x4a8>)
 8013fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013ff4:	f7f9 fcc2 	bl	800d97c <HAL_GetTick>
 8013ff8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013ffa:	e008      	b.n	801400e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013ffc:	f7f9 fcbe 	bl	800d97c <HAL_GetTick>
 8014000:	4602      	mov	r2, r0
 8014002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014004:	1ad3      	subs	r3, r2, r3
 8014006:	2b64      	cmp	r3, #100	; 0x64
 8014008:	d901      	bls.n	801400e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801400a:	2303      	movs	r3, #3
 801400c:	e1a2      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801400e:	4b12      	ldr	r3, [pc, #72]	; (8014058 <HAL_RCC_OscConfig+0x4a8>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014016:	2b00      	cmp	r3, #0
 8014018:	d0f0      	beq.n	8013ffc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	689b      	ldr	r3, [r3, #8]
 801401e:	2b01      	cmp	r3, #1
 8014020:	d106      	bne.n	8014030 <HAL_RCC_OscConfig+0x480>
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8014024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014026:	4a0b      	ldr	r2, [pc, #44]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8014028:	f043 0301 	orr.w	r3, r3, #1
 801402c:	6713      	str	r3, [r2, #112]	; 0x70
 801402e:	e032      	b.n	8014096 <HAL_RCC_OscConfig+0x4e6>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d111      	bne.n	801405c <HAL_RCC_OscConfig+0x4ac>
 8014038:	4b06      	ldr	r3, [pc, #24]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 801403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801403c:	4a05      	ldr	r2, [pc, #20]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 801403e:	f023 0301 	bic.w	r3, r3, #1
 8014042:	6713      	str	r3, [r2, #112]	; 0x70
 8014044:	4b03      	ldr	r3, [pc, #12]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 8014046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014048:	4a02      	ldr	r2, [pc, #8]	; (8014054 <HAL_RCC_OscConfig+0x4a4>)
 801404a:	f023 0304 	bic.w	r3, r3, #4
 801404e:	6713      	str	r3, [r2, #112]	; 0x70
 8014050:	e021      	b.n	8014096 <HAL_RCC_OscConfig+0x4e6>
 8014052:	bf00      	nop
 8014054:	58024400 	.word	0x58024400
 8014058:	58024800 	.word	0x58024800
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	689b      	ldr	r3, [r3, #8]
 8014060:	2b05      	cmp	r3, #5
 8014062:	d10c      	bne.n	801407e <HAL_RCC_OscConfig+0x4ce>
 8014064:	4b83      	ldr	r3, [pc, #524]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014068:	4a82      	ldr	r2, [pc, #520]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801406a:	f043 0304 	orr.w	r3, r3, #4
 801406e:	6713      	str	r3, [r2, #112]	; 0x70
 8014070:	4b80      	ldr	r3, [pc, #512]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014074:	4a7f      	ldr	r2, [pc, #508]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014076:	f043 0301 	orr.w	r3, r3, #1
 801407a:	6713      	str	r3, [r2, #112]	; 0x70
 801407c:	e00b      	b.n	8014096 <HAL_RCC_OscConfig+0x4e6>
 801407e:	4b7d      	ldr	r3, [pc, #500]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014082:	4a7c      	ldr	r2, [pc, #496]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014084:	f023 0301 	bic.w	r3, r3, #1
 8014088:	6713      	str	r3, [r2, #112]	; 0x70
 801408a:	4b7a      	ldr	r3, [pc, #488]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801408e:	4a79      	ldr	r2, [pc, #484]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014090:	f023 0304 	bic.w	r3, r3, #4
 8014094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d015      	beq.n	80140ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801409e:	f7f9 fc6d 	bl	800d97c <HAL_GetTick>
 80140a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80140a4:	e00a      	b.n	80140bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80140a6:	f7f9 fc69 	bl	800d97c <HAL_GetTick>
 80140aa:	4602      	mov	r2, r0
 80140ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d901      	bls.n	80140bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80140b8:	2303      	movs	r3, #3
 80140ba:	e14b      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80140bc:	4b6d      	ldr	r3, [pc, #436]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80140be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c0:	f003 0302 	and.w	r3, r3, #2
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d0ee      	beq.n	80140a6 <HAL_RCC_OscConfig+0x4f6>
 80140c8:	e014      	b.n	80140f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80140ca:	f7f9 fc57 	bl	800d97c <HAL_GetTick>
 80140ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80140d0:	e00a      	b.n	80140e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80140d2:	f7f9 fc53 	bl	800d97c <HAL_GetTick>
 80140d6:	4602      	mov	r2, r0
 80140d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140da:	1ad3      	subs	r3, r2, r3
 80140dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80140e0:	4293      	cmp	r3, r2
 80140e2:	d901      	bls.n	80140e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80140e4:	2303      	movs	r3, #3
 80140e6:	e135      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80140e8:	4b62      	ldr	r3, [pc, #392]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80140ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140ec:	f003 0302 	and.w	r3, r3, #2
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1ee      	bne.n	80140d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	f000 812a 	beq.w	8014352 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80140fe:	4b5d      	ldr	r3, [pc, #372]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014100:	691b      	ldr	r3, [r3, #16]
 8014102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014106:	2b18      	cmp	r3, #24
 8014108:	f000 80ba 	beq.w	8014280 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014110:	2b02      	cmp	r3, #2
 8014112:	f040 8095 	bne.w	8014240 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014116:	4b57      	ldr	r3, [pc, #348]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4a56      	ldr	r2, [pc, #344]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801411c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014122:	f7f9 fc2b 	bl	800d97c <HAL_GetTick>
 8014126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014128:	e008      	b.n	801413c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801412a:	f7f9 fc27 	bl	800d97c <HAL_GetTick>
 801412e:	4602      	mov	r2, r0
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	2b02      	cmp	r3, #2
 8014136:	d901      	bls.n	801413c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8014138:	2303      	movs	r3, #3
 801413a:	e10b      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801413c:	4b4d      	ldr	r3, [pc, #308]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1f0      	bne.n	801412a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014148:	4b4a      	ldr	r3, [pc, #296]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801414a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801414c:	4b4a      	ldr	r3, [pc, #296]	; (8014278 <HAL_RCC_OscConfig+0x6c8>)
 801414e:	4013      	ands	r3, r2
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014154:	687a      	ldr	r2, [r7, #4]
 8014156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014158:	0112      	lsls	r2, r2, #4
 801415a:	430a      	orrs	r2, r1
 801415c:	4945      	ldr	r1, [pc, #276]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801415e:	4313      	orrs	r3, r2
 8014160:	628b      	str	r3, [r1, #40]	; 0x28
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014166:	3b01      	subs	r3, #1
 8014168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014170:	3b01      	subs	r3, #1
 8014172:	025b      	lsls	r3, r3, #9
 8014174:	b29b      	uxth	r3, r3
 8014176:	431a      	orrs	r2, r3
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801417c:	3b01      	subs	r3, #1
 801417e:	041b      	lsls	r3, r3, #16
 8014180:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014184:	431a      	orrs	r2, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801418a:	3b01      	subs	r3, #1
 801418c:	061b      	lsls	r3, r3, #24
 801418e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014192:	4938      	ldr	r1, [pc, #224]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014194:	4313      	orrs	r3, r2
 8014196:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8014198:	4b36      	ldr	r3, [pc, #216]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801419c:	4a35      	ldr	r2, [pc, #212]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801419e:	f023 0301 	bic.w	r3, r3, #1
 80141a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80141a4:	4b33      	ldr	r3, [pc, #204]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141a8:	4b34      	ldr	r3, [pc, #208]	; (801427c <HAL_RCC_OscConfig+0x6cc>)
 80141aa:	4013      	ands	r3, r2
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80141b0:	00d2      	lsls	r2, r2, #3
 80141b2:	4930      	ldr	r1, [pc, #192]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141b4:	4313      	orrs	r3, r2
 80141b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80141b8:	4b2e      	ldr	r3, [pc, #184]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141bc:	f023 020c 	bic.w	r2, r3, #12
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141c4:	492b      	ldr	r1, [pc, #172]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141c6:	4313      	orrs	r3, r2
 80141c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80141ca:	4b2a      	ldr	r3, [pc, #168]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ce:	f023 0202 	bic.w	r2, r3, #2
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141d6:	4927      	ldr	r1, [pc, #156]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141d8:	4313      	orrs	r3, r2
 80141da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80141dc:	4b25      	ldr	r3, [pc, #148]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e0:	4a24      	ldr	r2, [pc, #144]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80141e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80141e8:	4b22      	ldr	r3, [pc, #136]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ec:	4a21      	ldr	r2, [pc, #132]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80141f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80141f4:	4b1f      	ldr	r3, [pc, #124]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f8:	4a1e      	ldr	r2, [pc, #120]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 80141fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80141fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8014200:	4b1c      	ldr	r3, [pc, #112]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014204:	4a1b      	ldr	r2, [pc, #108]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014206:	f043 0301 	orr.w	r3, r3, #1
 801420a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801420c:	4b19      	ldr	r3, [pc, #100]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4a18      	ldr	r2, [pc, #96]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014218:	f7f9 fbb0 	bl	800d97c <HAL_GetTick>
 801421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801421e:	e008      	b.n	8014232 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014220:	f7f9 fbac 	bl	800d97c <HAL_GetTick>
 8014224:	4602      	mov	r2, r0
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	2b02      	cmp	r3, #2
 801422c:	d901      	bls.n	8014232 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801422e:	2303      	movs	r3, #3
 8014230:	e090      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014232:	4b10      	ldr	r3, [pc, #64]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801423a:	2b00      	cmp	r3, #0
 801423c:	d0f0      	beq.n	8014220 <HAL_RCC_OscConfig+0x670>
 801423e:	e088      	b.n	8014352 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014240:	4b0c      	ldr	r3, [pc, #48]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4a0b      	ldr	r2, [pc, #44]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801424c:	f7f9 fb96 	bl	800d97c <HAL_GetTick>
 8014250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014252:	e008      	b.n	8014266 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014254:	f7f9 fb92 	bl	800d97c <HAL_GetTick>
 8014258:	4602      	mov	r2, r0
 801425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425c:	1ad3      	subs	r3, r2, r3
 801425e:	2b02      	cmp	r3, #2
 8014260:	d901      	bls.n	8014266 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8014262:	2303      	movs	r3, #3
 8014264:	e076      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014266:	4b03      	ldr	r3, [pc, #12]	; (8014274 <HAL_RCC_OscConfig+0x6c4>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1f0      	bne.n	8014254 <HAL_RCC_OscConfig+0x6a4>
 8014272:	e06e      	b.n	8014352 <HAL_RCC_OscConfig+0x7a2>
 8014274:	58024400 	.word	0x58024400
 8014278:	fffffc0c 	.word	0xfffffc0c
 801427c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014280:	4b36      	ldr	r3, [pc, #216]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014286:	4b35      	ldr	r3, [pc, #212]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801428a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014290:	2b01      	cmp	r3, #1
 8014292:	d031      	beq.n	80142f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	f003 0203 	and.w	r2, r3, #3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801429e:	429a      	cmp	r2, r3
 80142a0:	d12a      	bne.n	80142f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	091b      	lsrs	r3, r3, #4
 80142a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d122      	bne.n	80142f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80142be:	429a      	cmp	r2, r3
 80142c0:	d11a      	bne.n	80142f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	0a5b      	lsrs	r3, r3, #9
 80142c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d111      	bne.n	80142f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	0c1b      	lsrs	r3, r3, #16
 80142d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d108      	bne.n	80142f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	0e1b      	lsrs	r3, r3, #24
 80142ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d001      	beq.n	80142fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80142f8:	2301      	movs	r3, #1
 80142fa:	e02b      	b.n	8014354 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80142fc:	4b17      	ldr	r3, [pc, #92]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 80142fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014300:	08db      	lsrs	r3, r3, #3
 8014302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801430c:	693a      	ldr	r2, [r7, #16]
 801430e:	429a      	cmp	r2, r3
 8014310:	d01f      	beq.n	8014352 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8014312:	4b12      	ldr	r3, [pc, #72]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014316:	4a11      	ldr	r2, [pc, #68]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014318:	f023 0301 	bic.w	r3, r3, #1
 801431c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801431e:	f7f9 fb2d 	bl	800d97c <HAL_GetTick>
 8014322:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014324:	bf00      	nop
 8014326:	f7f9 fb29 	bl	800d97c <HAL_GetTick>
 801432a:	4602      	mov	r2, r0
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	4293      	cmp	r3, r2
 8014330:	d0f9      	beq.n	8014326 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014332:	4b0a      	ldr	r3, [pc, #40]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014336:	4b0a      	ldr	r3, [pc, #40]	; (8014360 <HAL_RCC_OscConfig+0x7b0>)
 8014338:	4013      	ands	r3, r2
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801433e:	00d2      	lsls	r2, r2, #3
 8014340:	4906      	ldr	r1, [pc, #24]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014342:	4313      	orrs	r3, r2
 8014344:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014346:	4b05      	ldr	r3, [pc, #20]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 8014348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801434a:	4a04      	ldr	r2, [pc, #16]	; (801435c <HAL_RCC_OscConfig+0x7ac>)
 801434c:	f043 0301 	orr.w	r3, r3, #1
 8014350:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014352:	2300      	movs	r3, #0
}
 8014354:	4618      	mov	r0, r3
 8014356:	3730      	adds	r7, #48	; 0x30
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	58024400 	.word	0x58024400
 8014360:	ffff0007 	.word	0xffff0007

08014364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b086      	sub	sp, #24
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d101      	bne.n	8014378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014374:	2301      	movs	r3, #1
 8014376:	e19c      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014378:	4b8a      	ldr	r3, [pc, #552]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f003 030f 	and.w	r3, r3, #15
 8014380:	683a      	ldr	r2, [r7, #0]
 8014382:	429a      	cmp	r2, r3
 8014384:	d910      	bls.n	80143a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014386:	4b87      	ldr	r3, [pc, #540]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f023 020f 	bic.w	r2, r3, #15
 801438e:	4985      	ldr	r1, [pc, #532]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	4313      	orrs	r3, r2
 8014394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014396:	4b83      	ldr	r3, [pc, #524]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	f003 030f 	and.w	r3, r3, #15
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d001      	beq.n	80143a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80143a4:	2301      	movs	r3, #1
 80143a6:	e184      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f003 0304 	and.w	r3, r3, #4
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d010      	beq.n	80143d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	691a      	ldr	r2, [r3, #16]
 80143b8:	4b7b      	ldr	r3, [pc, #492]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80143ba:	699b      	ldr	r3, [r3, #24]
 80143bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d908      	bls.n	80143d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80143c4:	4b78      	ldr	r3, [pc, #480]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80143c6:	699b      	ldr	r3, [r3, #24]
 80143c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	4975      	ldr	r1, [pc, #468]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80143d2:	4313      	orrs	r3, r2
 80143d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f003 0308 	and.w	r3, r3, #8
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d010      	beq.n	8014404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	695a      	ldr	r2, [r3, #20]
 80143e6:	4b70      	ldr	r3, [pc, #448]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80143e8:	69db      	ldr	r3, [r3, #28]
 80143ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d908      	bls.n	8014404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80143f2:	4b6d      	ldr	r3, [pc, #436]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80143f4:	69db      	ldr	r3, [r3, #28]
 80143f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	695b      	ldr	r3, [r3, #20]
 80143fe:	496a      	ldr	r1, [pc, #424]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014400:	4313      	orrs	r3, r2
 8014402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	f003 0310 	and.w	r3, r3, #16
 801440c:	2b00      	cmp	r3, #0
 801440e:	d010      	beq.n	8014432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	699a      	ldr	r2, [r3, #24]
 8014414:	4b64      	ldr	r3, [pc, #400]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014416:	69db      	ldr	r3, [r3, #28]
 8014418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801441c:	429a      	cmp	r2, r3
 801441e:	d908      	bls.n	8014432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014420:	4b61      	ldr	r3, [pc, #388]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014422:	69db      	ldr	r3, [r3, #28]
 8014424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	699b      	ldr	r3, [r3, #24]
 801442c:	495e      	ldr	r1, [pc, #376]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 801442e:	4313      	orrs	r3, r2
 8014430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f003 0320 	and.w	r3, r3, #32
 801443a:	2b00      	cmp	r3, #0
 801443c:	d010      	beq.n	8014460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	69da      	ldr	r2, [r3, #28]
 8014442:	4b59      	ldr	r3, [pc, #356]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014444:	6a1b      	ldr	r3, [r3, #32]
 8014446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801444a:	429a      	cmp	r2, r3
 801444c:	d908      	bls.n	8014460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801444e:	4b56      	ldr	r3, [pc, #344]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	69db      	ldr	r3, [r3, #28]
 801445a:	4953      	ldr	r1, [pc, #332]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 801445c:	4313      	orrs	r3, r2
 801445e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f003 0302 	and.w	r3, r3, #2
 8014468:	2b00      	cmp	r3, #0
 801446a:	d010      	beq.n	801448e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	68da      	ldr	r2, [r3, #12]
 8014470:	4b4d      	ldr	r3, [pc, #308]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	f003 030f 	and.w	r3, r3, #15
 8014478:	429a      	cmp	r2, r3
 801447a:	d908      	bls.n	801448e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801447c:	4b4a      	ldr	r3, [pc, #296]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 801447e:	699b      	ldr	r3, [r3, #24]
 8014480:	f023 020f 	bic.w	r2, r3, #15
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	68db      	ldr	r3, [r3, #12]
 8014488:	4947      	ldr	r1, [pc, #284]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 801448a:	4313      	orrs	r3, r2
 801448c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f003 0301 	and.w	r3, r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	d055      	beq.n	8014546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801449a:	4b43      	ldr	r3, [pc, #268]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 801449c:	699b      	ldr	r3, [r3, #24]
 801449e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	689b      	ldr	r3, [r3, #8]
 80144a6:	4940      	ldr	r1, [pc, #256]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80144a8:	4313      	orrs	r3, r2
 80144aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d107      	bne.n	80144c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80144b4:	4b3c      	ldr	r3, [pc, #240]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d121      	bne.n	8014504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80144c0:	2301      	movs	r3, #1
 80144c2:	e0f6      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	2b03      	cmp	r3, #3
 80144ca:	d107      	bne.n	80144dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80144cc:	4b36      	ldr	r3, [pc, #216]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d115      	bne.n	8014504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80144d8:	2301      	movs	r3, #1
 80144da:	e0ea      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d107      	bne.n	80144f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80144e4:	4b30      	ldr	r3, [pc, #192]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d109      	bne.n	8014504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80144f0:	2301      	movs	r3, #1
 80144f2:	e0de      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80144f4:	4b2c      	ldr	r3, [pc, #176]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f003 0304 	and.w	r3, r3, #4
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d101      	bne.n	8014504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014500:	2301      	movs	r3, #1
 8014502:	e0d6      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014504:	4b28      	ldr	r3, [pc, #160]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014506:	691b      	ldr	r3, [r3, #16]
 8014508:	f023 0207 	bic.w	r2, r3, #7
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	4925      	ldr	r1, [pc, #148]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014512:	4313      	orrs	r3, r2
 8014514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014516:	f7f9 fa31 	bl	800d97c <HAL_GetTick>
 801451a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801451c:	e00a      	b.n	8014534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801451e:	f7f9 fa2d 	bl	800d97c <HAL_GetTick>
 8014522:	4602      	mov	r2, r0
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	f241 3288 	movw	r2, #5000	; 0x1388
 801452c:	4293      	cmp	r3, r2
 801452e:	d901      	bls.n	8014534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014530:	2303      	movs	r3, #3
 8014532:	e0be      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014534:	4b1c      	ldr	r3, [pc, #112]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	00db      	lsls	r3, r3, #3
 8014542:	429a      	cmp	r2, r3
 8014544:	d1eb      	bne.n	801451e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f003 0302 	and.w	r3, r3, #2
 801454e:	2b00      	cmp	r3, #0
 8014550:	d010      	beq.n	8014574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	68da      	ldr	r2, [r3, #12]
 8014556:	4b14      	ldr	r3, [pc, #80]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014558:	699b      	ldr	r3, [r3, #24]
 801455a:	f003 030f 	and.w	r3, r3, #15
 801455e:	429a      	cmp	r2, r3
 8014560:	d208      	bcs.n	8014574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014562:	4b11      	ldr	r3, [pc, #68]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014564:	699b      	ldr	r3, [r3, #24]
 8014566:	f023 020f 	bic.w	r2, r3, #15
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	490e      	ldr	r1, [pc, #56]	; (80145a8 <HAL_RCC_ClockConfig+0x244>)
 8014570:	4313      	orrs	r3, r2
 8014572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014574:	4b0b      	ldr	r3, [pc, #44]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	f003 030f 	and.w	r3, r3, #15
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	429a      	cmp	r2, r3
 8014580:	d214      	bcs.n	80145ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014582:	4b08      	ldr	r3, [pc, #32]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f023 020f 	bic.w	r2, r3, #15
 801458a:	4906      	ldr	r1, [pc, #24]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	4313      	orrs	r3, r2
 8014590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014592:	4b04      	ldr	r3, [pc, #16]	; (80145a4 <HAL_RCC_ClockConfig+0x240>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f003 030f 	and.w	r3, r3, #15
 801459a:	683a      	ldr	r2, [r7, #0]
 801459c:	429a      	cmp	r2, r3
 801459e:	d005      	beq.n	80145ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80145a0:	2301      	movs	r3, #1
 80145a2:	e086      	b.n	80146b2 <HAL_RCC_ClockConfig+0x34e>
 80145a4:	52002000 	.word	0x52002000
 80145a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f003 0304 	and.w	r3, r3, #4
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d010      	beq.n	80145da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	691a      	ldr	r2, [r3, #16]
 80145bc:	4b3f      	ldr	r3, [pc, #252]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 80145be:	699b      	ldr	r3, [r3, #24]
 80145c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d208      	bcs.n	80145da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80145c8:	4b3c      	ldr	r3, [pc, #240]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 80145ca:	699b      	ldr	r3, [r3, #24]
 80145cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	691b      	ldr	r3, [r3, #16]
 80145d4:	4939      	ldr	r1, [pc, #228]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 80145d6:	4313      	orrs	r3, r2
 80145d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f003 0308 	and.w	r3, r3, #8
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d010      	beq.n	8014608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	695a      	ldr	r2, [r3, #20]
 80145ea:	4b34      	ldr	r3, [pc, #208]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 80145ec:	69db      	ldr	r3, [r3, #28]
 80145ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d208      	bcs.n	8014608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80145f6:	4b31      	ldr	r3, [pc, #196]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 80145f8:	69db      	ldr	r3, [r3, #28]
 80145fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	695b      	ldr	r3, [r3, #20]
 8014602:	492e      	ldr	r1, [pc, #184]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014604:	4313      	orrs	r3, r2
 8014606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f003 0310 	and.w	r3, r3, #16
 8014610:	2b00      	cmp	r3, #0
 8014612:	d010      	beq.n	8014636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	699a      	ldr	r2, [r3, #24]
 8014618:	4b28      	ldr	r3, [pc, #160]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 801461a:	69db      	ldr	r3, [r3, #28]
 801461c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014620:	429a      	cmp	r2, r3
 8014622:	d208      	bcs.n	8014636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014624:	4b25      	ldr	r3, [pc, #148]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014626:	69db      	ldr	r3, [r3, #28]
 8014628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	4922      	ldr	r1, [pc, #136]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014632:	4313      	orrs	r3, r2
 8014634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	f003 0320 	and.w	r3, r3, #32
 801463e:	2b00      	cmp	r3, #0
 8014640:	d010      	beq.n	8014664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	69da      	ldr	r2, [r3, #28]
 8014646:	4b1d      	ldr	r3, [pc, #116]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014648:	6a1b      	ldr	r3, [r3, #32]
 801464a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801464e:	429a      	cmp	r2, r3
 8014650:	d208      	bcs.n	8014664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014652:	4b1a      	ldr	r3, [pc, #104]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014654:	6a1b      	ldr	r3, [r3, #32]
 8014656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	69db      	ldr	r3, [r3, #28]
 801465e:	4917      	ldr	r1, [pc, #92]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014660:	4313      	orrs	r3, r2
 8014662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014664:	f000 f834 	bl	80146d0 <HAL_RCC_GetSysClockFreq>
 8014668:	4602      	mov	r2, r0
 801466a:	4b14      	ldr	r3, [pc, #80]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 801466c:	699b      	ldr	r3, [r3, #24]
 801466e:	0a1b      	lsrs	r3, r3, #8
 8014670:	f003 030f 	and.w	r3, r3, #15
 8014674:	4912      	ldr	r1, [pc, #72]	; (80146c0 <HAL_RCC_ClockConfig+0x35c>)
 8014676:	5ccb      	ldrb	r3, [r1, r3]
 8014678:	f003 031f 	and.w	r3, r3, #31
 801467c:	fa22 f303 	lsr.w	r3, r2, r3
 8014680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014682:	4b0e      	ldr	r3, [pc, #56]	; (80146bc <HAL_RCC_ClockConfig+0x358>)
 8014684:	699b      	ldr	r3, [r3, #24]
 8014686:	f003 030f 	and.w	r3, r3, #15
 801468a:	4a0d      	ldr	r2, [pc, #52]	; (80146c0 <HAL_RCC_ClockConfig+0x35c>)
 801468c:	5cd3      	ldrb	r3, [r2, r3]
 801468e:	f003 031f 	and.w	r3, r3, #31
 8014692:	693a      	ldr	r2, [r7, #16]
 8014694:	fa22 f303 	lsr.w	r3, r2, r3
 8014698:	4a0a      	ldr	r2, [pc, #40]	; (80146c4 <HAL_RCC_ClockConfig+0x360>)
 801469a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801469c:	4a0a      	ldr	r2, [pc, #40]	; (80146c8 <HAL_RCC_ClockConfig+0x364>)
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80146a2:	4b0a      	ldr	r3, [pc, #40]	; (80146cc <HAL_RCC_ClockConfig+0x368>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7f9 f91e 	bl	800d8e8 <HAL_InitTick>
 80146ac:	4603      	mov	r3, r0
 80146ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80146b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3718      	adds	r7, #24
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	58024400 	.word	0x58024400
 80146c0:	08023b0c 	.word	0x08023b0c
 80146c4:	2400005c 	.word	0x2400005c
 80146c8:	24000058 	.word	0x24000058
 80146cc:	24000060 	.word	0x24000060

080146d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b089      	sub	sp, #36	; 0x24
 80146d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80146d6:	4bb3      	ldr	r3, [pc, #716]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80146de:	2b18      	cmp	r3, #24
 80146e0:	f200 8155 	bhi.w	801498e <HAL_RCC_GetSysClockFreq+0x2be>
 80146e4:	a201      	add	r2, pc, #4	; (adr r2, 80146ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80146e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ea:	bf00      	nop
 80146ec:	08014751 	.word	0x08014751
 80146f0:	0801498f 	.word	0x0801498f
 80146f4:	0801498f 	.word	0x0801498f
 80146f8:	0801498f 	.word	0x0801498f
 80146fc:	0801498f 	.word	0x0801498f
 8014700:	0801498f 	.word	0x0801498f
 8014704:	0801498f 	.word	0x0801498f
 8014708:	0801498f 	.word	0x0801498f
 801470c:	08014777 	.word	0x08014777
 8014710:	0801498f 	.word	0x0801498f
 8014714:	0801498f 	.word	0x0801498f
 8014718:	0801498f 	.word	0x0801498f
 801471c:	0801498f 	.word	0x0801498f
 8014720:	0801498f 	.word	0x0801498f
 8014724:	0801498f 	.word	0x0801498f
 8014728:	0801498f 	.word	0x0801498f
 801472c:	0801477d 	.word	0x0801477d
 8014730:	0801498f 	.word	0x0801498f
 8014734:	0801498f 	.word	0x0801498f
 8014738:	0801498f 	.word	0x0801498f
 801473c:	0801498f 	.word	0x0801498f
 8014740:	0801498f 	.word	0x0801498f
 8014744:	0801498f 	.word	0x0801498f
 8014748:	0801498f 	.word	0x0801498f
 801474c:	08014783 	.word	0x08014783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014750:	4b94      	ldr	r3, [pc, #592]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f003 0320 	and.w	r3, r3, #32
 8014758:	2b00      	cmp	r3, #0
 801475a:	d009      	beq.n	8014770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801475c:	4b91      	ldr	r3, [pc, #580]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	08db      	lsrs	r3, r3, #3
 8014762:	f003 0303 	and.w	r3, r3, #3
 8014766:	4a90      	ldr	r2, [pc, #576]	; (80149a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014768:	fa22 f303 	lsr.w	r3, r2, r3
 801476c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801476e:	e111      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014770:	4b8d      	ldr	r3, [pc, #564]	; (80149a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014772:	61bb      	str	r3, [r7, #24]
      break;
 8014774:	e10e      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8014776:	4b8d      	ldr	r3, [pc, #564]	; (80149ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014778:	61bb      	str	r3, [r7, #24]
      break;
 801477a:	e10b      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801477c:	4b8c      	ldr	r3, [pc, #560]	; (80149b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801477e:	61bb      	str	r3, [r7, #24]
      break;
 8014780:	e108      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014782:	4b88      	ldr	r3, [pc, #544]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014786:	f003 0303 	and.w	r3, r3, #3
 801478a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801478c:	4b85      	ldr	r3, [pc, #532]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014790:	091b      	lsrs	r3, r3, #4
 8014792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014798:	4b82      	ldr	r3, [pc, #520]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801479c:	f003 0301 	and.w	r3, r3, #1
 80147a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80147a2:	4b80      	ldr	r3, [pc, #512]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80147a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147a6:	08db      	lsrs	r3, r3, #3
 80147a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147ac:	68fa      	ldr	r2, [r7, #12]
 80147ae:	fb02 f303 	mul.w	r3, r2, r3
 80147b2:	ee07 3a90 	vmov	s15, r3
 80147b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	f000 80e1 	beq.w	8014988 <HAL_RCC_GetSysClockFreq+0x2b8>
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	2b02      	cmp	r3, #2
 80147ca:	f000 8083 	beq.w	80148d4 <HAL_RCC_GetSysClockFreq+0x204>
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	2b02      	cmp	r3, #2
 80147d2:	f200 80a1 	bhi.w	8014918 <HAL_RCC_GetSysClockFreq+0x248>
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d003      	beq.n	80147e4 <HAL_RCC_GetSysClockFreq+0x114>
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d056      	beq.n	8014890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80147e2:	e099      	b.n	8014918 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80147e4:	4b6f      	ldr	r3, [pc, #444]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f003 0320 	and.w	r3, r3, #32
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d02d      	beq.n	801484c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80147f0:	4b6c      	ldr	r3, [pc, #432]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	08db      	lsrs	r3, r3, #3
 80147f6:	f003 0303 	and.w	r3, r3, #3
 80147fa:	4a6b      	ldr	r2, [pc, #428]	; (80149a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80147fc:	fa22 f303 	lsr.w	r3, r2, r3
 8014800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	ee07 3a90 	vmov	s15, r3
 8014808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	ee07 3a90 	vmov	s15, r3
 8014812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801481a:	4b62      	ldr	r3, [pc, #392]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014822:	ee07 3a90 	vmov	s15, r3
 8014826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801482a:	ed97 6a02 	vldr	s12, [r7, #8]
 801482e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80149b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801484a:	e087      	b.n	801495c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	ee07 3a90 	vmov	s15, r3
 8014852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014856:	eddf 6a58 	vldr	s13, [pc, #352]	; 80149b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 801485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801485e:	4b51      	ldr	r3, [pc, #324]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014866:	ee07 3a90 	vmov	s15, r3
 801486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801486e:	ed97 6a02 	vldr	s12, [r7, #8]
 8014872:	eddf 5a50 	vldr	s11, [pc, #320]	; 80149b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014886:	ee67 7a27 	vmul.f32	s15, s14, s15
 801488a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801488e:	e065      	b.n	801495c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	ee07 3a90 	vmov	s15, r3
 8014896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801489a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80149bc <HAL_RCC_GetSysClockFreq+0x2ec>
 801489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80148a2:	4b40      	ldr	r3, [pc, #256]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80148a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148aa:	ee07 3a90 	vmov	s15, r3
 80148ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80148b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80148b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80149b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80148ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80148be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80148c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80148c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80148d2:	e043      	b.n	801495c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	ee07 3a90 	vmov	s15, r3
 80148da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80149c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80148e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80148e6:	4b2f      	ldr	r3, [pc, #188]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80148e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148ee:	ee07 3a90 	vmov	s15, r3
 80148f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80148f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80148fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80149b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80148fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8014916:	e021      	b.n	801495c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	ee07 3a90 	vmov	s15, r3
 801491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014922:	eddf 6a26 	vldr	s13, [pc, #152]	; 80149bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8014926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801492a:	4b1e      	ldr	r3, [pc, #120]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014932:	ee07 3a90 	vmov	s15, r3
 8014936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801493a:	ed97 6a02 	vldr	s12, [r7, #8]
 801493e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80149b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801494a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801495a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801495c:	4b11      	ldr	r3, [pc, #68]	; (80149a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014960:	0a5b      	lsrs	r3, r3, #9
 8014962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014966:	3301      	adds	r3, #1
 8014968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	ee07 3a90 	vmov	s15, r3
 8014970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014974:	edd7 6a07 	vldr	s13, [r7, #28]
 8014978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801497c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014980:	ee17 3a90 	vmov	r3, s15
 8014984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8014986:	e005      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8014988:	2300      	movs	r3, #0
 801498a:	61bb      	str	r3, [r7, #24]
      break;
 801498c:	e002      	b.n	8014994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801498e:	4b07      	ldr	r3, [pc, #28]	; (80149ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014990:	61bb      	str	r3, [r7, #24]
      break;
 8014992:	bf00      	nop
  }

  return sysclockfreq;
 8014994:	69bb      	ldr	r3, [r7, #24]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3724      	adds	r7, #36	; 0x24
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	58024400 	.word	0x58024400
 80149a8:	03d09000 	.word	0x03d09000
 80149ac:	003d0900 	.word	0x003d0900
 80149b0:	017d7840 	.word	0x017d7840
 80149b4:	46000000 	.word	0x46000000
 80149b8:	4c742400 	.word	0x4c742400
 80149bc:	4a742400 	.word	0x4a742400
 80149c0:	4bbebc20 	.word	0x4bbebc20

080149c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80149ca:	f7ff fe81 	bl	80146d0 <HAL_RCC_GetSysClockFreq>
 80149ce:	4602      	mov	r2, r0
 80149d0:	4b10      	ldr	r3, [pc, #64]	; (8014a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	0a1b      	lsrs	r3, r3, #8
 80149d6:	f003 030f 	and.w	r3, r3, #15
 80149da:	490f      	ldr	r1, [pc, #60]	; (8014a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80149dc:	5ccb      	ldrb	r3, [r1, r3]
 80149de:	f003 031f 	and.w	r3, r3, #31
 80149e2:	fa22 f303 	lsr.w	r3, r2, r3
 80149e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80149e8:	4b0a      	ldr	r3, [pc, #40]	; (8014a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80149ea:	699b      	ldr	r3, [r3, #24]
 80149ec:	f003 030f 	and.w	r3, r3, #15
 80149f0:	4a09      	ldr	r2, [pc, #36]	; (8014a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80149f2:	5cd3      	ldrb	r3, [r2, r3]
 80149f4:	f003 031f 	and.w	r3, r3, #31
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	fa22 f303 	lsr.w	r3, r2, r3
 80149fe:	4a07      	ldr	r2, [pc, #28]	; (8014a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8014a00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014a02:	4a07      	ldr	r2, [pc, #28]	; (8014a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8014a08:	4b04      	ldr	r3, [pc, #16]	; (8014a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	58024400 	.word	0x58024400
 8014a18:	08023b0c 	.word	0x08023b0c
 8014a1c:	2400005c 	.word	0x2400005c
 8014a20:	24000058 	.word	0x24000058

08014a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8014a28:	f7ff ffcc 	bl	80149c4 <HAL_RCC_GetHCLKFreq>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	4b06      	ldr	r3, [pc, #24]	; (8014a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014a30:	69db      	ldr	r3, [r3, #28]
 8014a32:	091b      	lsrs	r3, r3, #4
 8014a34:	f003 0307 	and.w	r3, r3, #7
 8014a38:	4904      	ldr	r1, [pc, #16]	; (8014a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8014a3a:	5ccb      	ldrb	r3, [r1, r3]
 8014a3c:	f003 031f 	and.w	r3, r3, #31
 8014a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	bd80      	pop	{r7, pc}
 8014a48:	58024400 	.word	0x58024400
 8014a4c:	08023b0c 	.word	0x08023b0c

08014a50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014a54:	b0c6      	sub	sp, #280	; 0x118
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014a62:	2300      	movs	r3, #0
 8014a64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8014a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8014a74:	2500      	movs	r5, #0
 8014a76:	ea54 0305 	orrs.w	r3, r4, r5
 8014a7a:	d049      	beq.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8014a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8014a86:	d02f      	beq.n	8014ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8014a88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8014a8c:	d828      	bhi.n	8014ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8014a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014a92:	d01a      	beq.n	8014aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8014a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014a98:	d822      	bhi.n	8014ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d003      	beq.n	8014aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8014a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014aa2:	d007      	beq.n	8014ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8014aa4:	e01c      	b.n	8014ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014aa6:	4bab      	ldr	r3, [pc, #684]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aaa:	4aaa      	ldr	r2, [pc, #680]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8014ab2:	e01a      	b.n	8014aea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ab8:	3308      	adds	r3, #8
 8014aba:	2102      	movs	r1, #2
 8014abc:	4618      	mov	r0, r3
 8014abe:	f002 fa49 	bl	8016f54 <RCCEx_PLL2_Config>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8014ac8:	e00f      	b.n	8014aea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ace:	3328      	adds	r3, #40	; 0x28
 8014ad0:	2102      	movs	r1, #2
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f002 faf0 	bl	80170b8 <RCCEx_PLL3_Config>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8014ade:	e004      	b.n	8014aea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014ae6:	e000      	b.n	8014aea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8014ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d10a      	bne.n	8014b08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8014af2:	4b98      	ldr	r3, [pc, #608]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014af6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8014afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b00:	4a94      	ldr	r2, [pc, #592]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014b02:	430b      	orrs	r3, r1
 8014b04:	6513      	str	r3, [r2, #80]	; 0x50
 8014b06:	e003      	b.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014b0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8014b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8014b1c:	f04f 0900 	mov.w	r9, #0
 8014b20:	ea58 0309 	orrs.w	r3, r8, r9
 8014b24:	d047      	beq.n	8014bb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8014b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b2c:	2b04      	cmp	r3, #4
 8014b2e:	d82a      	bhi.n	8014b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8014b30:	a201      	add	r2, pc, #4	; (adr r2, 8014b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8014b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b36:	bf00      	nop
 8014b38:	08014b4d 	.word	0x08014b4d
 8014b3c:	08014b5b 	.word	0x08014b5b
 8014b40:	08014b71 	.word	0x08014b71
 8014b44:	08014b8f 	.word	0x08014b8f
 8014b48:	08014b8f 	.word	0x08014b8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014b4c:	4b81      	ldr	r3, [pc, #516]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b50:	4a80      	ldr	r2, [pc, #512]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014b58:	e01a      	b.n	8014b90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b5e:	3308      	adds	r3, #8
 8014b60:	2100      	movs	r1, #0
 8014b62:	4618      	mov	r0, r3
 8014b64:	f002 f9f6 	bl	8016f54 <RCCEx_PLL2_Config>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014b6e:	e00f      	b.n	8014b90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b74:	3328      	adds	r3, #40	; 0x28
 8014b76:	2100      	movs	r1, #0
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f002 fa9d 	bl	80170b8 <RCCEx_PLL3_Config>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014b84:	e004      	b.n	8014b90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014b86:	2301      	movs	r3, #1
 8014b88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014b8c:	e000      	b.n	8014b90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8014b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10a      	bne.n	8014bae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014b98:	4b6e      	ldr	r3, [pc, #440]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b9c:	f023 0107 	bic.w	r1, r3, #7
 8014ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ba6:	4a6b      	ldr	r2, [pc, #428]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014ba8:	430b      	orrs	r3, r1
 8014baa:	6513      	str	r3, [r2, #80]	; 0x50
 8014bac:	e003      	b.n	8014bb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014bae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014bb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8014bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8014bc2:	f04f 0b00 	mov.w	fp, #0
 8014bc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8014bca:	d05b      	beq.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8014bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014bd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8014bd8:	d03b      	beq.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8014bda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8014bde:	d834      	bhi.n	8014c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014be4:	d037      	beq.n	8014c56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8014be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014bea:	d82e      	bhi.n	8014c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014bec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8014bf0:	d033      	beq.n	8014c5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8014bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8014bf6:	d828      	bhi.n	8014c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014bfc:	d01a      	beq.n	8014c34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8014bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014c02:	d822      	bhi.n	8014c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d003      	beq.n	8014c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8014c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014c0c:	d007      	beq.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8014c0e:	e01c      	b.n	8014c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014c10:	4b50      	ldr	r3, [pc, #320]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c14:	4a4f      	ldr	r2, [pc, #316]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014c1c:	e01e      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c22:	3308      	adds	r3, #8
 8014c24:	2100      	movs	r1, #0
 8014c26:	4618      	mov	r0, r3
 8014c28:	f002 f994 	bl	8016f54 <RCCEx_PLL2_Config>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8014c32:	e013      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c38:	3328      	adds	r3, #40	; 0x28
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f002 fa3b 	bl	80170b8 <RCCEx_PLL3_Config>
 8014c42:	4603      	mov	r3, r0
 8014c44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014c48:	e008      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014c50:	e004      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8014c52:	bf00      	nop
 8014c54:	e002      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8014c56:	bf00      	nop
 8014c58:	e000      	b.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8014c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d10b      	bne.n	8014c7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8014c64:	4b3b      	ldr	r3, [pc, #236]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8014c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014c74:	4a37      	ldr	r2, [pc, #220]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014c76:	430b      	orrs	r3, r1
 8014c78:	6593      	str	r3, [r2, #88]	; 0x58
 8014c7a:	e003      	b.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014c80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8014c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8014c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014c94:	2300      	movs	r3, #0
 8014c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014c9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	4313      	orrs	r3, r2
 8014ca2:	d05d      	beq.n	8014d60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8014ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014cac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8014cb0:	d03b      	beq.n	8014d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8014cb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8014cb6:	d834      	bhi.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014cbc:	d037      	beq.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8014cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014cc2:	d82e      	bhi.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014cc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014cc8:	d033      	beq.n	8014d32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8014cca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014cce:	d828      	bhi.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014cd4:	d01a      	beq.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8014cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014cda:	d822      	bhi.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d003      	beq.n	8014ce8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8014ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014ce4:	d007      	beq.n	8014cf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8014ce6:	e01c      	b.n	8014d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014ce8:	4b1a      	ldr	r3, [pc, #104]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cec:	4a19      	ldr	r2, [pc, #100]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014cf4:	e01e      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f002 f928 	bl	8016f54 <RCCEx_PLL2_Config>
 8014d04:	4603      	mov	r3, r0
 8014d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8014d0a:	e013      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d10:	3328      	adds	r3, #40	; 0x28
 8014d12:	2100      	movs	r1, #0
 8014d14:	4618      	mov	r0, r3
 8014d16:	f002 f9cf 	bl	80170b8 <RCCEx_PLL3_Config>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014d20:	e008      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8014d22:	2301      	movs	r3, #1
 8014d24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014d28:	e004      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8014d2a:	bf00      	nop
 8014d2c:	e002      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8014d2e:	bf00      	nop
 8014d30:	e000      	b.n	8014d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8014d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d10d      	bne.n	8014d58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8014d3c:	4b05      	ldr	r3, [pc, #20]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8014d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014d4c:	4a01      	ldr	r2, [pc, #4]	; (8014d54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014d4e:	430b      	orrs	r3, r1
 8014d50:	6593      	str	r3, [r2, #88]	; 0x58
 8014d52:	e005      	b.n	8014d60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8014d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014d5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8014d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8014d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014d70:	2300      	movs	r3, #0
 8014d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014d76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	d03a      	beq.n	8014df6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8014d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d86:	2b30      	cmp	r3, #48	; 0x30
 8014d88:	d01f      	beq.n	8014dca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8014d8a:	2b30      	cmp	r3, #48	; 0x30
 8014d8c:	d819      	bhi.n	8014dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8014d8e:	2b20      	cmp	r3, #32
 8014d90:	d00c      	beq.n	8014dac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8014d92:	2b20      	cmp	r3, #32
 8014d94:	d815      	bhi.n	8014dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d019      	beq.n	8014dce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8014d9a:	2b10      	cmp	r3, #16
 8014d9c:	d111      	bne.n	8014dc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d9e:	4baa      	ldr	r3, [pc, #680]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014da2:	4aa9      	ldr	r2, [pc, #676]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8014daa:	e011      	b.n	8014dd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014db0:	3308      	adds	r3, #8
 8014db2:	2102      	movs	r1, #2
 8014db4:	4618      	mov	r0, r3
 8014db6:	f002 f8cd 	bl	8016f54 <RCCEx_PLL2_Config>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8014dc0:	e006      	b.n	8014dd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014dc8:	e002      	b.n	8014dd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8014dca:	bf00      	nop
 8014dcc:	e000      	b.n	8014dd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8014dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d10a      	bne.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8014dd8:	4b9b      	ldr	r3, [pc, #620]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ddc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8014de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014de6:	4a98      	ldr	r2, [pc, #608]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014de8:	430b      	orrs	r3, r1
 8014dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014dec:	e003      	b.n	8014df6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014dee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014df2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8014df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8014e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014e06:	2300      	movs	r3, #0
 8014e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014e0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8014e10:	460b      	mov	r3, r1
 8014e12:	4313      	orrs	r3, r2
 8014e14:	d051      	beq.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8014e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e20:	d035      	beq.n	8014e8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8014e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014e26:	d82e      	bhi.n	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8014e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014e2c:	d031      	beq.n	8014e92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8014e2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014e32:	d828      	bhi.n	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8014e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e38:	d01a      	beq.n	8014e70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8014e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e3e:	d822      	bhi.n	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d003      	beq.n	8014e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8014e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e48:	d007      	beq.n	8014e5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8014e4a:	e01c      	b.n	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014e4c:	4b7e      	ldr	r3, [pc, #504]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e50:	4a7d      	ldr	r2, [pc, #500]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014e58:	e01c      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e5e:	3308      	adds	r3, #8
 8014e60:	2100      	movs	r1, #0
 8014e62:	4618      	mov	r0, r3
 8014e64:	f002 f876 	bl	8016f54 <RCCEx_PLL2_Config>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014e6e:	e011      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e74:	3328      	adds	r3, #40	; 0x28
 8014e76:	2100      	movs	r1, #0
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f002 f91d 	bl	80170b8 <RCCEx_PLL3_Config>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014e84:	e006      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014e86:	2301      	movs	r3, #1
 8014e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014e8c:	e002      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8014e8e:	bf00      	nop
 8014e90:	e000      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8014e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10a      	bne.n	8014eb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8014e9c:	4b6a      	ldr	r3, [pc, #424]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ea0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8014ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014eaa:	4a67      	ldr	r2, [pc, #412]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014eac:	430b      	orrs	r3, r1
 8014eae:	6513      	str	r3, [r2, #80]	; 0x50
 8014eb0:	e003      	b.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014eb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8014eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8014ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014eca:	2300      	movs	r3, #0
 8014ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014ed0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	d053      	beq.n	8014f82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8014eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014ee4:	d033      	beq.n	8014f4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8014ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014eea:	d82c      	bhi.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014ef0:	d02f      	beq.n	8014f52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8014ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014ef6:	d826      	bhi.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014ef8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8014efc:	d02b      	beq.n	8014f56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8014efe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8014f02:	d820      	bhi.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014f08:	d012      	beq.n	8014f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8014f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014f0e:	d81a      	bhi.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d022      	beq.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8014f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f18:	d115      	bne.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f1e:	3308      	adds	r3, #8
 8014f20:	2101      	movs	r1, #1
 8014f22:	4618      	mov	r0, r3
 8014f24:	f002 f816 	bl	8016f54 <RCCEx_PLL2_Config>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8014f2e:	e015      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f34:	3328      	adds	r3, #40	; 0x28
 8014f36:	2101      	movs	r1, #1
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f002 f8bd 	bl	80170b8 <RCCEx_PLL3_Config>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8014f44:	e00a      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014f46:	2301      	movs	r3, #1
 8014f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8014f4c:	e006      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8014f4e:	bf00      	nop
 8014f50:	e004      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8014f52:	bf00      	nop
 8014f54:	e002      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8014f56:	bf00      	nop
 8014f58:	e000      	b.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8014f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d10a      	bne.n	8014f7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8014f64:	4b38      	ldr	r3, [pc, #224]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8014f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014f72:	4a35      	ldr	r2, [pc, #212]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014f74:	430b      	orrs	r3, r1
 8014f76:	6513      	str	r3, [r2, #80]	; 0x50
 8014f78:	e003      	b.n	8014f82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014f7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8014f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8014f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014f92:	2300      	movs	r3, #0
 8014f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014f98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	d058      	beq.n	8015054 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8014fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014fa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014fae:	d033      	beq.n	8015018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8014fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014fb4:	d82c      	bhi.n	8015010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fba:	d02f      	beq.n	801501c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8014fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fc0:	d826      	bhi.n	8015010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014fc6:	d02b      	beq.n	8015020 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8014fc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014fcc:	d820      	bhi.n	8015010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014fd2:	d012      	beq.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8014fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014fd8:	d81a      	bhi.n	8015010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d022      	beq.n	8015024 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8014fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014fe2:	d115      	bne.n	8015010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014fe8:	3308      	adds	r3, #8
 8014fea:	2101      	movs	r1, #1
 8014fec:	4618      	mov	r0, r3
 8014fee:	f001 ffb1 	bl	8016f54 <RCCEx_PLL2_Config>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8014ff8:	e015      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ffe:	3328      	adds	r3, #40	; 0x28
 8015000:	2101      	movs	r1, #1
 8015002:	4618      	mov	r0, r3
 8015004:	f002 f858 	bl	80170b8 <RCCEx_PLL3_Config>
 8015008:	4603      	mov	r3, r0
 801500a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801500e:	e00a      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8015010:	2301      	movs	r3, #1
 8015012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8015016:	e006      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8015018:	bf00      	nop
 801501a:	e004      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801501c:	bf00      	nop
 801501e:	e002      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8015020:	bf00      	nop
 8015022:	e000      	b.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8015024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015026:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801502a:	2b00      	cmp	r3, #0
 801502c:	d10e      	bne.n	801504c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801502e:	4b06      	ldr	r3, [pc, #24]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8015030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015032:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8015036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801503a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801503e:	4a02      	ldr	r2, [pc, #8]	; (8015048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8015040:	430b      	orrs	r3, r1
 8015042:	6593      	str	r3, [r2, #88]	; 0x58
 8015044:	e006      	b.n	8015054 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8015046:	bf00      	nop
 8015048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801504c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8015060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015064:	2300      	movs	r3, #0
 8015066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801506a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801506e:	460b      	mov	r3, r1
 8015070:	4313      	orrs	r3, r2
 8015072:	d037      	beq.n	80150e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8015074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801507a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801507e:	d00e      	beq.n	801509e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8015080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015084:	d816      	bhi.n	80150b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8015086:	2b00      	cmp	r3, #0
 8015088:	d018      	beq.n	80150bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801508a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801508e:	d111      	bne.n	80150b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015090:	4bc4      	ldr	r3, [pc, #784]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015094:	4ac3      	ldr	r2, [pc, #780]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801509a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801509c:	e00f      	b.n	80150be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150a2:	3308      	adds	r3, #8
 80150a4:	2101      	movs	r1, #1
 80150a6:	4618      	mov	r0, r3
 80150a8:	f001 ff54 	bl	8016f54 <RCCEx_PLL2_Config>
 80150ac:	4603      	mov	r3, r0
 80150ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80150b2:	e004      	b.n	80150be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80150b4:	2301      	movs	r3, #1
 80150b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80150ba:	e000      	b.n	80150be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80150bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80150be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d10a      	bne.n	80150dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80150c6:	4bb7      	ldr	r3, [pc, #732]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80150c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80150ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d4:	4ab3      	ldr	r2, [pc, #716]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80150d6:	430b      	orrs	r3, r1
 80150d8:	6513      	str	r3, [r2, #80]	; 0x50
 80150da:	e003      	b.n	80150e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80150e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80150e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80150f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80150f4:	2300      	movs	r3, #0
 80150f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80150fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80150fe:	460b      	mov	r3, r1
 8015100:	4313      	orrs	r3, r2
 8015102:	d039      	beq.n	8015178 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801510a:	2b03      	cmp	r3, #3
 801510c:	d81c      	bhi.n	8015148 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801510e:	a201      	add	r2, pc, #4	; (adr r2, 8015114 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8015110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015114:	08015151 	.word	0x08015151
 8015118:	08015125 	.word	0x08015125
 801511c:	08015133 	.word	0x08015133
 8015120:	08015151 	.word	0x08015151
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015124:	4b9f      	ldr	r3, [pc, #636]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015128:	4a9e      	ldr	r2, [pc, #632]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801512a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801512e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015130:	e00f      	b.n	8015152 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015136:	3308      	adds	r3, #8
 8015138:	2102      	movs	r1, #2
 801513a:	4618      	mov	r0, r3
 801513c:	f001 ff0a 	bl	8016f54 <RCCEx_PLL2_Config>
 8015140:	4603      	mov	r3, r0
 8015142:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015146:	e004      	b.n	8015152 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015148:	2301      	movs	r3, #1
 801514a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801514e:	e000      	b.n	8015152 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8015150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015156:	2b00      	cmp	r3, #0
 8015158:	d10a      	bne.n	8015170 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801515a:	4b92      	ldr	r3, [pc, #584]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801515e:	f023 0103 	bic.w	r1, r3, #3
 8015162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015168:	4a8e      	ldr	r2, [pc, #568]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801516a:	430b      	orrs	r3, r1
 801516c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801516e:	e003      	b.n	8015178 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015170:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015174:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015180:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8015184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015188:	2300      	movs	r3, #0
 801518a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801518e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015192:	460b      	mov	r3, r1
 8015194:	4313      	orrs	r3, r2
 8015196:	f000 8099 	beq.w	80152cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801519a:	4b83      	ldr	r3, [pc, #524]	; (80153a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	4a82      	ldr	r2, [pc, #520]	; (80153a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80151a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80151a6:	f7f8 fbe9 	bl	800d97c <HAL_GetTick>
 80151aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80151ae:	e00b      	b.n	80151c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80151b0:	f7f8 fbe4 	bl	800d97c <HAL_GetTick>
 80151b4:	4602      	mov	r2, r0
 80151b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80151ba:	1ad3      	subs	r3, r2, r3
 80151bc:	2b64      	cmp	r3, #100	; 0x64
 80151be:	d903      	bls.n	80151c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80151c0:	2303      	movs	r3, #3
 80151c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80151c6:	e005      	b.n	80151d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80151c8:	4b77      	ldr	r3, [pc, #476]	; (80153a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d0ed      	beq.n	80151b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80151d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d173      	bne.n	80152c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80151dc:	4b71      	ldr	r3, [pc, #452]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80151de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80151e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80151e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80151e8:	4053      	eors	r3, r2
 80151ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d015      	beq.n	801521e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80151f2:	4b6c      	ldr	r3, [pc, #432]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80151f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80151fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80151fe:	4b69      	ldr	r3, [pc, #420]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015202:	4a68      	ldr	r2, [pc, #416]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015208:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801520a:	4b66      	ldr	r3, [pc, #408]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801520e:	4a65      	ldr	r2, [pc, #404]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015214:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015216:	4a63      	ldr	r2, [pc, #396]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801521c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801522a:	d118      	bne.n	801525e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801522c:	f7f8 fba6 	bl	800d97c <HAL_GetTick>
 8015230:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015234:	e00d      	b.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015236:	f7f8 fba1 	bl	800d97c <HAL_GetTick>
 801523a:	4602      	mov	r2, r0
 801523c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015240:	1ad2      	subs	r2, r2, r3
 8015242:	f241 3388 	movw	r3, #5000	; 0x1388
 8015246:	429a      	cmp	r2, r3
 8015248:	d903      	bls.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801524a:	2303      	movs	r3, #3
 801524c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8015250:	e005      	b.n	801525e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015252:	4b54      	ldr	r3, [pc, #336]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015256:	f003 0302 	and.w	r3, r3, #2
 801525a:	2b00      	cmp	r3, #0
 801525c:	d0eb      	beq.n	8015236 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801525e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015262:	2b00      	cmp	r3, #0
 8015264:	d129      	bne.n	80152ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801526a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015276:	d10e      	bne.n	8015296 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8015278:	4b4a      	ldr	r3, [pc, #296]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8015280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015288:	091a      	lsrs	r2, r3, #4
 801528a:	4b48      	ldr	r3, [pc, #288]	; (80153ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801528c:	4013      	ands	r3, r2
 801528e:	4a45      	ldr	r2, [pc, #276]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015290:	430b      	orrs	r3, r1
 8015292:	6113      	str	r3, [r2, #16]
 8015294:	e005      	b.n	80152a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8015296:	4b43      	ldr	r3, [pc, #268]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8015298:	691b      	ldr	r3, [r3, #16]
 801529a:	4a42      	ldr	r2, [pc, #264]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801529c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80152a0:	6113      	str	r3, [r2, #16]
 80152a2:	4b40      	ldr	r3, [pc, #256]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80152a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80152a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80152ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80152b2:	4a3c      	ldr	r2, [pc, #240]	; (80153a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80152b4:	430b      	orrs	r3, r1
 80152b6:	6713      	str	r3, [r2, #112]	; 0x70
 80152b8:	e008      	b.n	80152cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80152ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80152be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80152c2:	e003      	b.n	80152cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80152c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80152c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80152cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d4:	f002 0301 	and.w	r3, r2, #1
 80152d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80152dc:	2300      	movs	r3, #0
 80152de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80152e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80152e6:	460b      	mov	r3, r1
 80152e8:	4313      	orrs	r3, r2
 80152ea:	f000 808f 	beq.w	801540c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80152ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80152f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152f4:	2b28      	cmp	r3, #40	; 0x28
 80152f6:	d871      	bhi.n	80153dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80152f8:	a201      	add	r2, pc, #4	; (adr r2, 8015300 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80152fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152fe:	bf00      	nop
 8015300:	080153e5 	.word	0x080153e5
 8015304:	080153dd 	.word	0x080153dd
 8015308:	080153dd 	.word	0x080153dd
 801530c:	080153dd 	.word	0x080153dd
 8015310:	080153dd 	.word	0x080153dd
 8015314:	080153dd 	.word	0x080153dd
 8015318:	080153dd 	.word	0x080153dd
 801531c:	080153dd 	.word	0x080153dd
 8015320:	080153b1 	.word	0x080153b1
 8015324:	080153dd 	.word	0x080153dd
 8015328:	080153dd 	.word	0x080153dd
 801532c:	080153dd 	.word	0x080153dd
 8015330:	080153dd 	.word	0x080153dd
 8015334:	080153dd 	.word	0x080153dd
 8015338:	080153dd 	.word	0x080153dd
 801533c:	080153dd 	.word	0x080153dd
 8015340:	080153c7 	.word	0x080153c7
 8015344:	080153dd 	.word	0x080153dd
 8015348:	080153dd 	.word	0x080153dd
 801534c:	080153dd 	.word	0x080153dd
 8015350:	080153dd 	.word	0x080153dd
 8015354:	080153dd 	.word	0x080153dd
 8015358:	080153dd 	.word	0x080153dd
 801535c:	080153dd 	.word	0x080153dd
 8015360:	080153e5 	.word	0x080153e5
 8015364:	080153dd 	.word	0x080153dd
 8015368:	080153dd 	.word	0x080153dd
 801536c:	080153dd 	.word	0x080153dd
 8015370:	080153dd 	.word	0x080153dd
 8015374:	080153dd 	.word	0x080153dd
 8015378:	080153dd 	.word	0x080153dd
 801537c:	080153dd 	.word	0x080153dd
 8015380:	080153e5 	.word	0x080153e5
 8015384:	080153dd 	.word	0x080153dd
 8015388:	080153dd 	.word	0x080153dd
 801538c:	080153dd 	.word	0x080153dd
 8015390:	080153dd 	.word	0x080153dd
 8015394:	080153dd 	.word	0x080153dd
 8015398:	080153dd 	.word	0x080153dd
 801539c:	080153dd 	.word	0x080153dd
 80153a0:	080153e5 	.word	0x080153e5
 80153a4:	58024400 	.word	0x58024400
 80153a8:	58024800 	.word	0x58024800
 80153ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80153b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80153b4:	3308      	adds	r3, #8
 80153b6:	2101      	movs	r1, #1
 80153b8:	4618      	mov	r0, r3
 80153ba:	f001 fdcb 	bl	8016f54 <RCCEx_PLL2_Config>
 80153be:	4603      	mov	r3, r0
 80153c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80153c4:	e00f      	b.n	80153e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80153c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80153ca:	3328      	adds	r3, #40	; 0x28
 80153cc:	2101      	movs	r1, #1
 80153ce:	4618      	mov	r0, r3
 80153d0:	f001 fe72 	bl	80170b8 <RCCEx_PLL3_Config>
 80153d4:	4603      	mov	r3, r0
 80153d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80153da:	e004      	b.n	80153e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80153dc:	2301      	movs	r3, #1
 80153de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80153e2:	e000      	b.n	80153e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80153e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d10a      	bne.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80153ee:	4bbf      	ldr	r3, [pc, #764]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80153f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80153f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80153fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153fc:	4abb      	ldr	r2, [pc, #748]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80153fe:	430b      	orrs	r3, r1
 8015400:	6553      	str	r3, [r2, #84]	; 0x54
 8015402:	e003      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015404:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015408:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f002 0302 	and.w	r3, r2, #2
 8015418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801541c:	2300      	movs	r3, #0
 801541e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015422:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8015426:	460b      	mov	r3, r1
 8015428:	4313      	orrs	r3, r2
 801542a:	d041      	beq.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015432:	2b05      	cmp	r3, #5
 8015434:	d824      	bhi.n	8015480 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8015436:	a201      	add	r2, pc, #4	; (adr r2, 801543c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8015438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543c:	08015489 	.word	0x08015489
 8015440:	08015455 	.word	0x08015455
 8015444:	0801546b 	.word	0x0801546b
 8015448:	08015489 	.word	0x08015489
 801544c:	08015489 	.word	0x08015489
 8015450:	08015489 	.word	0x08015489
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015458:	3308      	adds	r3, #8
 801545a:	2101      	movs	r1, #1
 801545c:	4618      	mov	r0, r3
 801545e:	f001 fd79 	bl	8016f54 <RCCEx_PLL2_Config>
 8015462:	4603      	mov	r3, r0
 8015464:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015468:	e00f      	b.n	801548a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801546e:	3328      	adds	r3, #40	; 0x28
 8015470:	2101      	movs	r1, #1
 8015472:	4618      	mov	r0, r3
 8015474:	f001 fe20 	bl	80170b8 <RCCEx_PLL3_Config>
 8015478:	4603      	mov	r3, r0
 801547a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801547e:	e004      	b.n	801548a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015480:	2301      	movs	r3, #1
 8015482:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8015486:	e000      	b.n	801548a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8015488:	bf00      	nop
    }

    if (ret == HAL_OK)
 801548a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801548e:	2b00      	cmp	r3, #0
 8015490:	d10a      	bne.n	80154a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015492:	4b96      	ldr	r3, [pc, #600]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8015494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015496:	f023 0107 	bic.w	r1, r3, #7
 801549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801549e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154a0:	4a92      	ldr	r2, [pc, #584]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80154a2:	430b      	orrs	r3, r1
 80154a4:	6553      	str	r3, [r2, #84]	; 0x54
 80154a6:	e003      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80154ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80154b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80154b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b8:	f002 0304 	and.w	r3, r2, #4
 80154bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80154c0:	2300      	movs	r3, #0
 80154c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80154c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80154ca:	460b      	mov	r3, r1
 80154cc:	4313      	orrs	r3, r2
 80154ce:	d044      	beq.n	801555a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80154d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80154d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154d8:	2b05      	cmp	r3, #5
 80154da:	d825      	bhi.n	8015528 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80154dc:	a201      	add	r2, pc, #4	; (adr r2, 80154e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80154de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154e2:	bf00      	nop
 80154e4:	08015531 	.word	0x08015531
 80154e8:	080154fd 	.word	0x080154fd
 80154ec:	08015513 	.word	0x08015513
 80154f0:	08015531 	.word	0x08015531
 80154f4:	08015531 	.word	0x08015531
 80154f8:	08015531 	.word	0x08015531
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80154fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015500:	3308      	adds	r3, #8
 8015502:	2101      	movs	r1, #1
 8015504:	4618      	mov	r0, r3
 8015506:	f001 fd25 	bl	8016f54 <RCCEx_PLL2_Config>
 801550a:	4603      	mov	r3, r0
 801550c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015510:	e00f      	b.n	8015532 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015516:	3328      	adds	r3, #40	; 0x28
 8015518:	2101      	movs	r1, #1
 801551a:	4618      	mov	r0, r3
 801551c:	f001 fdcc 	bl	80170b8 <RCCEx_PLL3_Config>
 8015520:	4603      	mov	r3, r0
 8015522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015526:	e004      	b.n	8015532 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015528:	2301      	movs	r3, #1
 801552a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801552e:	e000      	b.n	8015532 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8015530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015536:	2b00      	cmp	r3, #0
 8015538:	d10b      	bne.n	8015552 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801553a:	4b6c      	ldr	r3, [pc, #432]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801553e:	f023 0107 	bic.w	r1, r3, #7
 8015542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801554a:	4a68      	ldr	r2, [pc, #416]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801554c:	430b      	orrs	r3, r1
 801554e:	6593      	str	r3, [r2, #88]	; 0x58
 8015550:	e003      	b.n	801555a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015552:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015556:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015562:	f002 0320 	and.w	r3, r2, #32
 8015566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801556a:	2300      	movs	r3, #0
 801556c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015570:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8015574:	460b      	mov	r3, r1
 8015576:	4313      	orrs	r3, r2
 8015578:	d055      	beq.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801557a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801557e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015586:	d033      	beq.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8015588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801558c:	d82c      	bhi.n	80155e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015592:	d02f      	beq.n	80155f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8015594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015598:	d826      	bhi.n	80155e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801559a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801559e:	d02b      	beq.n	80155f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80155a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80155a4:	d820      	bhi.n	80155e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80155a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80155aa:	d012      	beq.n	80155d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80155ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80155b0:	d81a      	bhi.n	80155e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d022      	beq.n	80155fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80155b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80155ba:	d115      	bne.n	80155e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80155bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80155c0:	3308      	adds	r3, #8
 80155c2:	2100      	movs	r1, #0
 80155c4:	4618      	mov	r0, r3
 80155c6:	f001 fcc5 	bl	8016f54 <RCCEx_PLL2_Config>
 80155ca:	4603      	mov	r3, r0
 80155cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80155d0:	e015      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80155d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80155d6:	3328      	adds	r3, #40	; 0x28
 80155d8:	2102      	movs	r1, #2
 80155da:	4618      	mov	r0, r3
 80155dc:	f001 fd6c 	bl	80170b8 <RCCEx_PLL3_Config>
 80155e0:	4603      	mov	r3, r0
 80155e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80155e6:	e00a      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80155e8:	2301      	movs	r3, #1
 80155ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80155ee:	e006      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80155f0:	bf00      	nop
 80155f2:	e004      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80155f4:	bf00      	nop
 80155f6:	e002      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80155f8:	bf00      	nop
 80155fa:	e000      	b.n	80155fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80155fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80155fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015602:	2b00      	cmp	r3, #0
 8015604:	d10b      	bne.n	801561e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015606:	4b39      	ldr	r3, [pc, #228]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8015608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801560a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015616:	4a35      	ldr	r2, [pc, #212]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8015618:	430b      	orrs	r3, r1
 801561a:	6553      	str	r3, [r2, #84]	; 0x54
 801561c:	e003      	b.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801561e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015622:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8015632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015636:	2300      	movs	r3, #0
 8015638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801563c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8015640:	460b      	mov	r3, r1
 8015642:	4313      	orrs	r3, r2
 8015644:	d058      	beq.n	80156f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8015646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801564a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801564e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015652:	d033      	beq.n	80156bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8015654:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015658:	d82c      	bhi.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801565e:	d02f      	beq.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8015660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015664:	d826      	bhi.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8015666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801566a:	d02b      	beq.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801566c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015670:	d820      	bhi.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8015672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015676:	d012      	beq.n	801569e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8015678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801567c:	d81a      	bhi.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801567e:	2b00      	cmp	r3, #0
 8015680:	d022      	beq.n	80156c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8015682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015686:	d115      	bne.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801568c:	3308      	adds	r3, #8
 801568e:	2100      	movs	r1, #0
 8015690:	4618      	mov	r0, r3
 8015692:	f001 fc5f 	bl	8016f54 <RCCEx_PLL2_Config>
 8015696:	4603      	mov	r3, r0
 8015698:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801569c:	e015      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801569e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80156a2:	3328      	adds	r3, #40	; 0x28
 80156a4:	2102      	movs	r1, #2
 80156a6:	4618      	mov	r0, r3
 80156a8:	f001 fd06 	bl	80170b8 <RCCEx_PLL3_Config>
 80156ac:	4603      	mov	r3, r0
 80156ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80156b2:	e00a      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80156b4:	2301      	movs	r3, #1
 80156b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80156ba:	e006      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80156bc:	bf00      	nop
 80156be:	e004      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80156c0:	bf00      	nop
 80156c2:	e002      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80156c4:	bf00      	nop
 80156c6:	e000      	b.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80156c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80156ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d10e      	bne.n	80156f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80156d2:	4b06      	ldr	r3, [pc, #24]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80156d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80156da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80156de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80156e2:	4a02      	ldr	r2, [pc, #8]	; (80156ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80156e4:	430b      	orrs	r3, r1
 80156e6:	6593      	str	r3, [r2, #88]	; 0x58
 80156e8:	e006      	b.n	80156f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80156ea:	bf00      	nop
 80156ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80156f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80156f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80156fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015700:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8015704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015708:	2300      	movs	r3, #0
 801570a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801570e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8015712:	460b      	mov	r3, r1
 8015714:	4313      	orrs	r3, r2
 8015716:	d055      	beq.n	80157c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8015718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801571c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015720:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8015724:	d033      	beq.n	801578e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8015726:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801572a:	d82c      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801572c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015730:	d02f      	beq.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8015732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015736:	d826      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8015738:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801573c:	d02b      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801573e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8015742:	d820      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8015744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015748:	d012      	beq.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801574a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801574e:	d81a      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8015750:	2b00      	cmp	r3, #0
 8015752:	d022      	beq.n	801579a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8015754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015758:	d115      	bne.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801575e:	3308      	adds	r3, #8
 8015760:	2100      	movs	r1, #0
 8015762:	4618      	mov	r0, r3
 8015764:	f001 fbf6 	bl	8016f54 <RCCEx_PLL2_Config>
 8015768:	4603      	mov	r3, r0
 801576a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801576e:	e015      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015774:	3328      	adds	r3, #40	; 0x28
 8015776:	2102      	movs	r1, #2
 8015778:	4618      	mov	r0, r3
 801577a:	f001 fc9d 	bl	80170b8 <RCCEx_PLL3_Config>
 801577e:	4603      	mov	r3, r0
 8015780:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8015784:	e00a      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801578c:	e006      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801578e:	bf00      	nop
 8015790:	e004      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8015792:	bf00      	nop
 8015794:	e002      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8015796:	bf00      	nop
 8015798:	e000      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801579c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d10b      	bne.n	80157bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80157a4:	4ba0      	ldr	r3, [pc, #640]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80157a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80157ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80157b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80157b4:	4a9c      	ldr	r2, [pc, #624]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80157b6:	430b      	orrs	r3, r1
 80157b8:	6593      	str	r3, [r2, #88]	; 0x58
 80157ba:	e003      	b.n	80157c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80157c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80157c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	f002 0308 	and.w	r3, r2, #8
 80157d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80157d4:	2300      	movs	r3, #0
 80157d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80157da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80157de:	460b      	mov	r3, r1
 80157e0:	4313      	orrs	r3, r2
 80157e2:	d01e      	beq.n	8015822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80157e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80157e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157f0:	d10c      	bne.n	801580c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80157f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80157f6:	3328      	adds	r3, #40	; 0x28
 80157f8:	2102      	movs	r1, #2
 80157fa:	4618      	mov	r0, r3
 80157fc:	f001 fc5c 	bl	80170b8 <RCCEx_PLL3_Config>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d002      	beq.n	801580c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8015806:	2301      	movs	r3, #1
 8015808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801580c:	4b86      	ldr	r3, [pc, #536]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015810:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801581c:	4a82      	ldr	r2, [pc, #520]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801581e:	430b      	orrs	r3, r1
 8015820:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582a:	f002 0310 	and.w	r3, r2, #16
 801582e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015832:	2300      	movs	r3, #0
 8015834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015838:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801583c:	460b      	mov	r3, r1
 801583e:	4313      	orrs	r3, r2
 8015840:	d01e      	beq.n	8015880 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8015842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801584e:	d10c      	bne.n	801586a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8015850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015854:	3328      	adds	r3, #40	; 0x28
 8015856:	2102      	movs	r1, #2
 8015858:	4618      	mov	r0, r3
 801585a:	f001 fc2d 	bl	80170b8 <RCCEx_PLL3_Config>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d002      	beq.n	801586a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8015864:	2301      	movs	r3, #1
 8015866:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801586a:	4b6f      	ldr	r3, [pc, #444]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801586e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801587a:	4a6b      	ldr	r2, [pc, #428]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801587c:	430b      	orrs	r3, r1
 801587e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015888:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801588c:	67bb      	str	r3, [r7, #120]	; 0x78
 801588e:	2300      	movs	r3, #0
 8015890:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015892:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8015896:	460b      	mov	r3, r1
 8015898:	4313      	orrs	r3, r2
 801589a:	d03e      	beq.n	801591a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80158a8:	d022      	beq.n	80158f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80158aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80158ae:	d81b      	bhi.n	80158e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d003      	beq.n	80158bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80158b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158b8:	d00b      	beq.n	80158d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80158ba:	e015      	b.n	80158e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80158bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158c0:	3308      	adds	r3, #8
 80158c2:	2100      	movs	r1, #0
 80158c4:	4618      	mov	r0, r3
 80158c6:	f001 fb45 	bl	8016f54 <RCCEx_PLL2_Config>
 80158ca:	4603      	mov	r3, r0
 80158cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80158d0:	e00f      	b.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80158d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158d6:	3328      	adds	r3, #40	; 0x28
 80158d8:	2102      	movs	r1, #2
 80158da:	4618      	mov	r0, r3
 80158dc:	f001 fbec 	bl	80170b8 <RCCEx_PLL3_Config>
 80158e0:	4603      	mov	r3, r0
 80158e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80158e6:	e004      	b.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80158e8:	2301      	movs	r3, #1
 80158ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80158ee:	e000      	b.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80158f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d10b      	bne.n	8015912 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80158fa:	4b4b      	ldr	r3, [pc, #300]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80158fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8015902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801590a:	4a47      	ldr	r2, [pc, #284]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801590c:	430b      	orrs	r3, r1
 801590e:	6593      	str	r3, [r2, #88]	; 0x58
 8015910:	e003      	b.n	801591a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015912:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015916:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015922:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8015926:	673b      	str	r3, [r7, #112]	; 0x70
 8015928:	2300      	movs	r3, #0
 801592a:	677b      	str	r3, [r7, #116]	; 0x74
 801592c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8015930:	460b      	mov	r3, r1
 8015932:	4313      	orrs	r3, r2
 8015934:	d03b      	beq.n	80159ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8015936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801593e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015942:	d01f      	beq.n	8015984 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8015944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015948:	d818      	bhi.n	801597c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801594a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801594e:	d003      	beq.n	8015958 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8015950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015954:	d007      	beq.n	8015966 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8015956:	e011      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015958:	4b33      	ldr	r3, [pc, #204]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801595c:	4a32      	ldr	r2, [pc, #200]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801595e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8015964:	e00f      	b.n	8015986 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801596a:	3328      	adds	r3, #40	; 0x28
 801596c:	2101      	movs	r1, #1
 801596e:	4618      	mov	r0, r3
 8015970:	f001 fba2 	bl	80170b8 <RCCEx_PLL3_Config>
 8015974:	4603      	mov	r3, r0
 8015976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801597a:	e004      	b.n	8015986 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801597c:	2301      	movs	r3, #1
 801597e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8015982:	e000      	b.n	8015986 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8015984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801598a:	2b00      	cmp	r3, #0
 801598c:	d10b      	bne.n	80159a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801598e:	4b26      	ldr	r3, [pc, #152]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8015990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015992:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8015996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801599a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801599e:	4a22      	ldr	r2, [pc, #136]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80159a0:	430b      	orrs	r3, r1
 80159a2:	6553      	str	r3, [r2, #84]	; 0x54
 80159a4:	e003      	b.n	80159ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80159aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80159ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80159b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80159ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80159bc:	2300      	movs	r3, #0
 80159be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80159c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80159c4:	460b      	mov	r3, r1
 80159c6:	4313      	orrs	r3, r2
 80159c8:	d034      	beq.n	8015a34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80159ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80159ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d003      	beq.n	80159dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80159d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159d8:	d007      	beq.n	80159ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80159da:	e011      	b.n	8015a00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80159dc:	4b12      	ldr	r3, [pc, #72]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80159de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e0:	4a11      	ldr	r2, [pc, #68]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80159e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80159e8:	e00e      	b.n	8015a08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80159ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80159ee:	3308      	adds	r3, #8
 80159f0:	2102      	movs	r1, #2
 80159f2:	4618      	mov	r0, r3
 80159f4:	f001 faae 	bl	8016f54 <RCCEx_PLL2_Config>
 80159f8:	4603      	mov	r3, r0
 80159fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80159fe:	e003      	b.n	8015a08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8015a00:	2301      	movs	r3, #1
 8015a02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8015a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015a08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10d      	bne.n	8015a2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8015a10:	4b05      	ldr	r3, [pc, #20]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8015a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a1e:	4a02      	ldr	r2, [pc, #8]	; (8015a28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8015a20:	430b      	orrs	r3, r1
 8015a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015a24:	e006      	b.n	8015a34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8015a26:	bf00      	nop
 8015a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015a30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8015a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8015a40:	663b      	str	r3, [r7, #96]	; 0x60
 8015a42:	2300      	movs	r3, #0
 8015a44:	667b      	str	r3, [r7, #100]	; 0x64
 8015a46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	4313      	orrs	r3, r2
 8015a4e:	d00c      	beq.n	8015a6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8015a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015a54:	3328      	adds	r3, #40	; 0x28
 8015a56:	2102      	movs	r1, #2
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f001 fb2d 	bl	80170b8 <RCCEx_PLL3_Config>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d002      	beq.n	8015a6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8015a64:	2301      	movs	r3, #1
 8015a66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8015a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8015a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8015a78:	2300      	movs	r3, #0
 8015a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015a7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8015a80:	460b      	mov	r3, r1
 8015a82:	4313      	orrs	r3, r2
 8015a84:	d036      	beq.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8015a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a90:	d018      	beq.n	8015ac4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8015a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a96:	d811      	bhi.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8015a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a9c:	d014      	beq.n	8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8015a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015aa2:	d80b      	bhi.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d011      	beq.n	8015acc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8015aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015aac:	d106      	bne.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015aae:	4bb7      	ldr	r3, [pc, #732]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ab2:	4ab6      	ldr	r2, [pc, #728]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8015aba:	e008      	b.n	8015ace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015abc:	2301      	movs	r3, #1
 8015abe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8015ac2:	e004      	b.n	8015ace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8015ac4:	bf00      	nop
 8015ac6:	e002      	b.n	8015ace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8015ac8:	bf00      	nop
 8015aca:	e000      	b.n	8015ace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8015acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015ace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d10a      	bne.n	8015aec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015ad6:	4bad      	ldr	r3, [pc, #692]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ae4:	4aa9      	ldr	r2, [pc, #676]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015ae6:	430b      	orrs	r3, r1
 8015ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8015aea:	e003      	b.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015aec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015af0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8015af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8015b00:	653b      	str	r3, [r7, #80]	; 0x50
 8015b02:	2300      	movs	r3, #0
 8015b04:	657b      	str	r3, [r7, #84]	; 0x54
 8015b06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	d009      	beq.n	8015b24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8015b10:	4b9e      	ldr	r3, [pc, #632]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b1e:	4a9b      	ldr	r2, [pc, #620]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b20:	430b      	orrs	r3, r1
 8015b22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8015b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8015b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8015b32:	2300      	movs	r3, #0
 8015b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015b36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	d009      	beq.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8015b40:	4b92      	ldr	r3, [pc, #584]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8015b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b4e:	4a8f      	ldr	r2, [pc, #572]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b50:	430b      	orrs	r3, r1
 8015b52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8015b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8015b60:	643b      	str	r3, [r7, #64]	; 0x40
 8015b62:	2300      	movs	r3, #0
 8015b64:	647b      	str	r3, [r7, #68]	; 0x44
 8015b66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	4313      	orrs	r3, r2
 8015b6e:	d00e      	beq.n	8015b8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8015b70:	4b86      	ldr	r3, [pc, #536]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b72:	691b      	ldr	r3, [r3, #16]
 8015b74:	4a85      	ldr	r2, [pc, #532]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015b7a:	6113      	str	r3, [r2, #16]
 8015b7c:	4b83      	ldr	r3, [pc, #524]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b7e:	6919      	ldr	r1, [r3, #16]
 8015b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015b88:	4a80      	ldr	r2, [pc, #512]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015b8a:	430b      	orrs	r3, r1
 8015b8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8015b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8015b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015ba0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	4313      	orrs	r3, r2
 8015ba8:	d009      	beq.n	8015bbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8015baa:	4b78      	ldr	r3, [pc, #480]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8015bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bb8:	4a74      	ldr	r2, [pc, #464]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015bba:	430b      	orrs	r3, r1
 8015bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8015bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8015bca:	633b      	str	r3, [r7, #48]	; 0x30
 8015bcc:	2300      	movs	r3, #0
 8015bce:	637b      	str	r3, [r7, #52]	; 0x34
 8015bd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	4313      	orrs	r3, r2
 8015bd8:	d00a      	beq.n	8015bf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8015bda:	4b6c      	ldr	r3, [pc, #432]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8015be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bea:	4a68      	ldr	r2, [pc, #416]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015bec:	430b      	orrs	r3, r1
 8015bee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8015bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf8:	2100      	movs	r1, #0
 8015bfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8015bfc:	f003 0301 	and.w	r3, r3, #1
 8015c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8015c06:	460b      	mov	r3, r1
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	d011      	beq.n	8015c30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c10:	3308      	adds	r3, #8
 8015c12:	2100      	movs	r1, #0
 8015c14:	4618      	mov	r0, r3
 8015c16:	f001 f99d 	bl	8016f54 <RCCEx_PLL2_Config>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8015c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d003      	beq.n	8015c30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8015c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c38:	2100      	movs	r1, #0
 8015c3a:	6239      	str	r1, [r7, #32]
 8015c3c:	f003 0302 	and.w	r3, r3, #2
 8015c40:	627b      	str	r3, [r7, #36]	; 0x24
 8015c42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015c46:	460b      	mov	r3, r1
 8015c48:	4313      	orrs	r3, r2
 8015c4a:	d011      	beq.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c50:	3308      	adds	r3, #8
 8015c52:	2101      	movs	r1, #1
 8015c54:	4618      	mov	r0, r3
 8015c56:	f001 f97d 	bl	8016f54 <RCCEx_PLL2_Config>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8015c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d003      	beq.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015c6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8015c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c78:	2100      	movs	r1, #0
 8015c7a:	61b9      	str	r1, [r7, #24]
 8015c7c:	f003 0304 	and.w	r3, r3, #4
 8015c80:	61fb      	str	r3, [r7, #28]
 8015c82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8015c86:	460b      	mov	r3, r1
 8015c88:	4313      	orrs	r3, r2
 8015c8a:	d011      	beq.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015c90:	3308      	adds	r3, #8
 8015c92:	2102      	movs	r1, #2
 8015c94:	4618      	mov	r0, r3
 8015c96:	f001 f95d 	bl	8016f54 <RCCEx_PLL2_Config>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8015ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d003      	beq.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015cac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8015cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb8:	2100      	movs	r1, #0
 8015cba:	6139      	str	r1, [r7, #16]
 8015cbc:	f003 0308 	and.w	r3, r3, #8
 8015cc0:	617b      	str	r3, [r7, #20]
 8015cc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	d011      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015cd0:	3328      	adds	r3, #40	; 0x28
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f001 f9ef 	bl	80170b8 <RCCEx_PLL3_Config>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8015ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d003      	beq.n	8015cf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015cec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8015cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	60b9      	str	r1, [r7, #8]
 8015cfc:	f003 0310 	and.w	r3, r3, #16
 8015d00:	60fb      	str	r3, [r7, #12]
 8015d02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015d06:	460b      	mov	r3, r1
 8015d08:	4313      	orrs	r3, r2
 8015d0a:	d011      	beq.n	8015d30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d10:	3328      	adds	r3, #40	; 0x28
 8015d12:	2101      	movs	r1, #1
 8015d14:	4618      	mov	r0, r3
 8015d16:	f001 f9cf 	bl	80170b8 <RCCEx_PLL3_Config>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8015d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d003      	beq.n	8015d30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015d2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8015d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d38:	2100      	movs	r1, #0
 8015d3a:	6039      	str	r1, [r7, #0]
 8015d3c:	f003 0320 	and.w	r3, r3, #32
 8015d40:	607b      	str	r3, [r7, #4]
 8015d42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015d46:	460b      	mov	r3, r1
 8015d48:	4313      	orrs	r3, r2
 8015d4a:	d011      	beq.n	8015d70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015d50:	3328      	adds	r3, #40	; 0x28
 8015d52:	2102      	movs	r1, #2
 8015d54:	4618      	mov	r0, r3
 8015d56:	f001 f9af 	bl	80170b8 <RCCEx_PLL3_Config>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8015d60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d003      	beq.n	8015d70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015d6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8015d70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d101      	bne.n	8015d7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	e000      	b.n	8015d7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8015d7c:	2301      	movs	r3, #1
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8015d84:	46bd      	mov	sp, r7
 8015d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015d8a:	bf00      	nop
 8015d8c:	58024400 	.word	0x58024400

08015d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b090      	sub	sp, #64	; 0x40
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8015d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8015da2:	430b      	orrs	r3, r1
 8015da4:	f040 8094 	bne.w	8015ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8015da8:	4b9b      	ldr	r3, [pc, #620]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dac:	f003 0307 	and.w	r3, r3, #7
 8015db0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	2b04      	cmp	r3, #4
 8015db6:	f200 8087 	bhi.w	8015ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8015dba:	a201      	add	r2, pc, #4	; (adr r2, 8015dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8015dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc0:	08015dd5 	.word	0x08015dd5
 8015dc4:	08015dfd 	.word	0x08015dfd
 8015dc8:	08015e25 	.word	0x08015e25
 8015dcc:	08015ec1 	.word	0x08015ec1
 8015dd0:	08015e4d 	.word	0x08015e4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015dd4:	4b90      	ldr	r3, [pc, #576]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015de0:	d108      	bne.n	8015df4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015de6:	4618      	mov	r0, r3
 8015de8:	f000 ff62 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015df0:	f000 bc93 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015df4:	2300      	movs	r3, #0
 8015df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015df8:	f000 bc8f 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015dfc:	4b86      	ldr	r3, [pc, #536]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015e08:	d108      	bne.n	8015e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015e0a:	f107 0318 	add.w	r3, r7, #24
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f000 fca6 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015e18:	f000 bc7f 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015e20:	f000 bc7b 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015e24:	4b7c      	ldr	r3, [pc, #496]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015e30:	d108      	bne.n	8015e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015e32:	f107 030c 	add.w	r3, r7, #12
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 fde6 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015e40:	f000 bc6b 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015e48:	f000 bc67 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015e4c:	4b72      	ldr	r3, [pc, #456]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015e54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015e56:	4b70      	ldr	r3, [pc, #448]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	f003 0304 	and.w	r3, r3, #4
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	d10c      	bne.n	8015e7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8015e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d109      	bne.n	8015e7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015e68:	4b6b      	ldr	r3, [pc, #428]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	08db      	lsrs	r3, r3, #3
 8015e6e:	f003 0303 	and.w	r3, r3, #3
 8015e72:	4a6a      	ldr	r2, [pc, #424]	; (801601c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8015e74:	fa22 f303 	lsr.w	r3, r2, r3
 8015e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e7a:	e01f      	b.n	8015ebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015e7c:	4b66      	ldr	r3, [pc, #408]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e88:	d106      	bne.n	8015e98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8015e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015e90:	d102      	bne.n	8015e98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015e92:	4b63      	ldr	r3, [pc, #396]	; (8016020 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8015e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e96:	e011      	b.n	8015ebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015e98:	4b5f      	ldr	r3, [pc, #380]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015ea4:	d106      	bne.n	8015eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8015ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015eac:	d102      	bne.n	8015eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015eae:	4b5d      	ldr	r3, [pc, #372]	; (8016024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015eb2:	e003      	b.n	8015ebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8015eb8:	f000 bc2f 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8015ebc:	f000 bc2d 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015ec0:	4b59      	ldr	r3, [pc, #356]	; (8016028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8015ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ec4:	f000 bc29 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ecc:	f000 bc25 	b.w	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8015ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ed4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8015ed8:	430b      	orrs	r3, r1
 8015eda:	f040 80a7 	bne.w	801602c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8015ede:	4b4e      	ldr	r3, [pc, #312]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ee2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8015ee6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8015ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015eee:	d054      	beq.n	8015f9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8015ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015ef6:	f200 808b 	bhi.w	8016010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015f00:	f000 8083 	beq.w	801600a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8015f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015f0a:	f200 8081 	bhi.w	8016010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8015f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015f14:	d02f      	beq.n	8015f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8015f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015f1c:	d878      	bhi.n	8016010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d004      	beq.n	8015f2e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8015f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015f2a:	d012      	beq.n	8015f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8015f2c:	e070      	b.n	8016010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015f2e:	4b3a      	ldr	r3, [pc, #232]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015f3a:	d107      	bne.n	8015f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 feb5 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015f4a:	e3e6      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f50:	e3e3      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015f52:	4b31      	ldr	r3, [pc, #196]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015f5e:	d107      	bne.n	8015f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015f60:	f107 0318 	add.w	r3, r7, #24
 8015f64:	4618      	mov	r0, r3
 8015f66:	f000 fbfb 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015f6e:	e3d4      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f74:	e3d1      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015f76:	4b28      	ldr	r3, [pc, #160]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f82:	d107      	bne.n	8015f94 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015f84:	f107 030c 	add.w	r3, r7, #12
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 fd3d 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015f92:	e3c2      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f98:	e3bf      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015f9a:	4b1f      	ldr	r3, [pc, #124]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8015fa2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015fa4:	4b1c      	ldr	r3, [pc, #112]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	f003 0304 	and.w	r3, r3, #4
 8015fac:	2b04      	cmp	r3, #4
 8015fae:	d10c      	bne.n	8015fca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8015fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d109      	bne.n	8015fca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015fb6:	4b18      	ldr	r3, [pc, #96]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	08db      	lsrs	r3, r3, #3
 8015fbc:	f003 0303 	and.w	r3, r3, #3
 8015fc0:	4a16      	ldr	r2, [pc, #88]	; (801601c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8015fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8015fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fc8:	e01e      	b.n	8016008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015fca:	4b13      	ldr	r3, [pc, #76]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fd6:	d106      	bne.n	8015fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8015fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015fde:	d102      	bne.n	8015fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015fe0:	4b0f      	ldr	r3, [pc, #60]	; (8016020 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8015fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fe4:	e010      	b.n	8016008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015fe6:	4b0c      	ldr	r3, [pc, #48]	; (8016018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015ff2:	d106      	bne.n	8016002 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8015ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015ffa:	d102      	bne.n	8016002 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015ffc:	4b09      	ldr	r3, [pc, #36]	; (8016024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016000:	e002      	b.n	8016008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016002:	2300      	movs	r3, #0
 8016004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8016006:	e388      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8016008:	e387      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801600a:	4b07      	ldr	r3, [pc, #28]	; (8016028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801600c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801600e:	e384      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8016010:	2300      	movs	r3, #0
 8016012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016014:	e381      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8016016:	bf00      	nop
 8016018:	58024400 	.word	0x58024400
 801601c:	03d09000 	.word	0x03d09000
 8016020:	003d0900 	.word	0x003d0900
 8016024:	017d7840 	.word	0x017d7840
 8016028:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801602c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016030:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8016034:	430b      	orrs	r3, r1
 8016036:	f040 809c 	bne.w	8016172 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801603a:	4b9e      	ldr	r3, [pc, #632]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801603e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8016042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801604a:	d054      	beq.n	80160f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016052:	f200 808b 	bhi.w	801616c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801605c:	f000 8083 	beq.w	8016166 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8016060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8016066:	f200 8081 	bhi.w	801616c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016070:	d02f      	beq.n	80160d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8016072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016078:	d878      	bhi.n	801616c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607c:	2b00      	cmp	r3, #0
 801607e:	d004      	beq.n	801608a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8016080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016086:	d012      	beq.n	80160ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8016088:	e070      	b.n	801616c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801608a:	4b8a      	ldr	r3, [pc, #552]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016096:	d107      	bne.n	80160a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801609c:	4618      	mov	r0, r3
 801609e:	f000 fe07 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80160a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80160a6:	e338      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80160a8:	2300      	movs	r3, #0
 80160aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80160ac:	e335      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80160ae:	4b81      	ldr	r3, [pc, #516]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80160b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80160ba:	d107      	bne.n	80160cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80160bc:	f107 0318 	add.w	r3, r7, #24
 80160c0:	4618      	mov	r0, r3
 80160c2:	f000 fb4d 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80160c6:	69bb      	ldr	r3, [r7, #24]
 80160c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80160ca:	e326      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80160cc:	2300      	movs	r3, #0
 80160ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80160d0:	e323      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80160d2:	4b78      	ldr	r3, [pc, #480]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80160da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80160de:	d107      	bne.n	80160f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80160e0:	f107 030c 	add.w	r3, r7, #12
 80160e4:	4618      	mov	r0, r3
 80160e6:	f000 fc8f 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80160ee:	e314      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80160f0:	2300      	movs	r3, #0
 80160f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80160f4:	e311      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80160f6:	4b6f      	ldr	r3, [pc, #444]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80160f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80160fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016100:	4b6c      	ldr	r3, [pc, #432]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f003 0304 	and.w	r3, r3, #4
 8016108:	2b04      	cmp	r3, #4
 801610a:	d10c      	bne.n	8016126 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801610e:	2b00      	cmp	r3, #0
 8016110:	d109      	bne.n	8016126 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016112:	4b68      	ldr	r3, [pc, #416]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	08db      	lsrs	r3, r3, #3
 8016118:	f003 0303 	and.w	r3, r3, #3
 801611c:	4a66      	ldr	r2, [pc, #408]	; (80162b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801611e:	fa22 f303 	lsr.w	r3, r2, r3
 8016122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016124:	e01e      	b.n	8016164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016126:	4b63      	ldr	r3, [pc, #396]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016132:	d106      	bne.n	8016142 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8016134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801613a:	d102      	bne.n	8016142 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801613c:	4b5f      	ldr	r3, [pc, #380]	; (80162bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801613e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016140:	e010      	b.n	8016164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016142:	4b5c      	ldr	r3, [pc, #368]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801614a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801614e:	d106      	bne.n	801615e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8016150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016156:	d102      	bne.n	801615e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016158:	4b59      	ldr	r3, [pc, #356]	; (80162c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801615c:	e002      	b.n	8016164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801615e:	2300      	movs	r3, #0
 8016160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8016162:	e2da      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8016164:	e2d9      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016166:	4b57      	ldr	r3, [pc, #348]	; (80162c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8016168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801616a:	e2d6      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801616c:	2300      	movs	r3, #0
 801616e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016170:	e2d3      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8016172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016176:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801617a:	430b      	orrs	r3, r1
 801617c:	f040 80a7 	bne.w	80162ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8016180:	4b4c      	ldr	r3, [pc, #304]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016184:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8016188:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016190:	d055      	beq.n	801623e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8016192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016198:	f200 8096 	bhi.w	80162c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80161a2:	f000 8084 	beq.w	80162ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80161a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80161ac:	f200 808c 	bhi.w	80162c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80161b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161b6:	d030      	beq.n	801621a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80161b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161be:	f200 8083 	bhi.w	80162c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80161c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d004      	beq.n	80161d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80161c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161ce:	d012      	beq.n	80161f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80161d0:	e07a      	b.n	80162c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80161d2:	4b38      	ldr	r3, [pc, #224]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80161da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80161de:	d107      	bne.n	80161f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80161e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80161e4:	4618      	mov	r0, r3
 80161e6:	f000 fd63 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80161ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80161ee:	e294      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80161f0:	2300      	movs	r3, #0
 80161f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80161f4:	e291      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80161f6:	4b2f      	ldr	r3, [pc, #188]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80161fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016202:	d107      	bne.n	8016214 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016204:	f107 0318 	add.w	r3, r7, #24
 8016208:	4618      	mov	r0, r3
 801620a:	f000 faa9 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016212:	e282      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016214:	2300      	movs	r3, #0
 8016216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016218:	e27f      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801621a:	4b26      	ldr	r3, [pc, #152]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016226:	d107      	bne.n	8016238 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016228:	f107 030c 	add.w	r3, r7, #12
 801622c:	4618      	mov	r0, r3
 801622e:	f000 fbeb 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016236:	e270      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016238:	2300      	movs	r3, #0
 801623a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801623c:	e26d      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801623e:	4b1d      	ldr	r3, [pc, #116]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8016246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016248:	4b1a      	ldr	r3, [pc, #104]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f003 0304 	and.w	r3, r3, #4
 8016250:	2b04      	cmp	r3, #4
 8016252:	d10c      	bne.n	801626e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8016254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016256:	2b00      	cmp	r3, #0
 8016258:	d109      	bne.n	801626e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801625a:	4b16      	ldr	r3, [pc, #88]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	08db      	lsrs	r3, r3, #3
 8016260:	f003 0303 	and.w	r3, r3, #3
 8016264:	4a14      	ldr	r2, [pc, #80]	; (80162b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8016266:	fa22 f303 	lsr.w	r3, r2, r3
 801626a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801626c:	e01e      	b.n	80162ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801626e:	4b11      	ldr	r3, [pc, #68]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801627a:	d106      	bne.n	801628a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016282:	d102      	bne.n	801628a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016284:	4b0d      	ldr	r3, [pc, #52]	; (80162bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8016286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016288:	e010      	b.n	80162ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801628a:	4b0a      	ldr	r3, [pc, #40]	; (80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016296:	d106      	bne.n	80162a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8016298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801629e:	d102      	bne.n	80162a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80162a0:	4b07      	ldr	r3, [pc, #28]	; (80162c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80162a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80162a4:	e002      	b.n	80162ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80162a6:	2300      	movs	r3, #0
 80162a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80162aa:	e236      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80162ac:	e235      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80162ae:	4b05      	ldr	r3, [pc, #20]	; (80162c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80162b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80162b2:	e232      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80162b4:	58024400 	.word	0x58024400
 80162b8:	03d09000 	.word	0x03d09000
 80162bc:	003d0900 	.word	0x003d0900
 80162c0:	017d7840 	.word	0x017d7840
 80162c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80162c8:	2300      	movs	r3, #0
 80162ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80162cc:	e225      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80162ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80162d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80162d6:	430b      	orrs	r3, r1
 80162d8:	f040 8085 	bne.w	80163e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80162dc:	4b9c      	ldr	r3, [pc, #624]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80162de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80162e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80162e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80162ec:	d06b      	beq.n	80163c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80162ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80162f4:	d874      	bhi.n	80163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80162f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80162fc:	d056      	beq.n	80163ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80162fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016304:	d86c      	bhi.n	80163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8016306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801630c:	d03b      	beq.n	8016386 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8016314:	d864      	bhi.n	80163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8016316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801631c:	d021      	beq.n	8016362 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016324:	d85c      	bhi.n	80163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8016326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016328:	2b00      	cmp	r3, #0
 801632a:	d004      	beq.n	8016336 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016332:	d004      	beq.n	801633e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8016334:	e054      	b.n	80163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8016336:	f7fe fb75 	bl	8014a24 <HAL_RCC_GetPCLK1Freq>
 801633a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801633c:	e1ed      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801633e:	4b84      	ldr	r3, [pc, #528]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801634a:	d107      	bne.n	801635c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801634c:	f107 0318 	add.w	r3, r7, #24
 8016350:	4618      	mov	r0, r3
 8016352:	f000 fa05 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801635a:	e1de      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801635c:	2300      	movs	r3, #0
 801635e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016360:	e1db      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016362:	4b7b      	ldr	r3, [pc, #492]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801636e:	d107      	bne.n	8016380 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016370:	f107 030c 	add.w	r3, r7, #12
 8016374:	4618      	mov	r0, r3
 8016376:	f000 fb47 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801637e:	e1cc      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016380:	2300      	movs	r3, #0
 8016382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016384:	e1c9      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016386:	4b72      	ldr	r3, [pc, #456]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	f003 0304 	and.w	r3, r3, #4
 801638e:	2b04      	cmp	r3, #4
 8016390:	d109      	bne.n	80163a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016392:	4b6f      	ldr	r3, [pc, #444]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	08db      	lsrs	r3, r3, #3
 8016398:	f003 0303 	and.w	r3, r3, #3
 801639c:	4a6d      	ldr	r2, [pc, #436]	; (8016554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801639e:	fa22 f303 	lsr.w	r3, r2, r3
 80163a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163a4:	e1b9      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80163aa:	e1b6      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80163ac:	4b68      	ldr	r3, [pc, #416]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80163b8:	d102      	bne.n	80163c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80163ba:	4b67      	ldr	r3, [pc, #412]	; (8016558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80163bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163be:	e1ac      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80163c0:	2300      	movs	r3, #0
 80163c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80163c4:	e1a9      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80163c6:	4b62      	ldr	r3, [pc, #392]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80163ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80163d2:	d102      	bne.n	80163da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80163d4:	4b61      	ldr	r3, [pc, #388]	; (801655c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80163d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163d8:	e19f      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80163de:	e19c      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80163e4:	e199      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80163e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80163ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80163ee:	430b      	orrs	r3, r1
 80163f0:	d173      	bne.n	80164da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80163f2:	4b57      	ldr	r3, [pc, #348]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80163f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80163fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80163fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016402:	d02f      	beq.n	8016464 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8016404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801640a:	d863      	bhi.n	80164d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801640e:	2b00      	cmp	r3, #0
 8016410:	d004      	beq.n	801641c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8016412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016418:	d012      	beq.n	8016440 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801641a:	e05b      	b.n	80164d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801641c:	4b4c      	ldr	r3, [pc, #304]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016428:	d107      	bne.n	801643a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801642a:	f107 0318 	add.w	r3, r7, #24
 801642e:	4618      	mov	r0, r3
 8016430:	f000 f996 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016438:	e16f      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801643a:	2300      	movs	r3, #0
 801643c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801643e:	e16c      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016440:	4b43      	ldr	r3, [pc, #268]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801644c:	d107      	bne.n	801645e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801644e:	f107 030c 	add.w	r3, r7, #12
 8016452:	4618      	mov	r0, r3
 8016454:	f000 fad8 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801645c:	e15d      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801645e:	2300      	movs	r3, #0
 8016460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016462:	e15a      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016464:	4b3a      	ldr	r3, [pc, #232]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801646c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801646e:	4b38      	ldr	r3, [pc, #224]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f003 0304 	and.w	r3, r3, #4
 8016476:	2b04      	cmp	r3, #4
 8016478:	d10c      	bne.n	8016494 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801647c:	2b00      	cmp	r3, #0
 801647e:	d109      	bne.n	8016494 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016480:	4b33      	ldr	r3, [pc, #204]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	08db      	lsrs	r3, r3, #3
 8016486:	f003 0303 	and.w	r3, r3, #3
 801648a:	4a32      	ldr	r2, [pc, #200]	; (8016554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801648c:	fa22 f303 	lsr.w	r3, r2, r3
 8016490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016492:	e01e      	b.n	80164d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016494:	4b2e      	ldr	r3, [pc, #184]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164a0:	d106      	bne.n	80164b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80164a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80164a8:	d102      	bne.n	80164b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80164aa:	4b2b      	ldr	r3, [pc, #172]	; (8016558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80164ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80164ae:	e010      	b.n	80164d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80164b0:	4b27      	ldr	r3, [pc, #156]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80164b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80164bc:	d106      	bne.n	80164cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80164be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80164c4:	d102      	bne.n	80164cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80164c6:	4b25      	ldr	r3, [pc, #148]	; (801655c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80164c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80164ca:	e002      	b.n	80164d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80164cc:	2300      	movs	r3, #0
 80164ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80164d0:	e123      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80164d2:	e122      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80164d8:	e11f      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80164da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80164e2:	430b      	orrs	r3, r1
 80164e4:	d13c      	bne.n	8016560 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80164e6:	4b1a      	ldr	r3, [pc, #104]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80164e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80164ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80164f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d004      	beq.n	8016500 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80164f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164fc:	d012      	beq.n	8016524 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80164fe:	e023      	b.n	8016548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016500:	4b13      	ldr	r3, [pc, #76]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801650c:	d107      	bne.n	801651e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801650e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016512:	4618      	mov	r0, r3
 8016514:	f000 fbcc 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801651c:	e0fd      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801651e:	2300      	movs	r3, #0
 8016520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016522:	e0fa      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016524:	4b0a      	ldr	r3, [pc, #40]	; (8016550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801652c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016530:	d107      	bne.n	8016542 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016532:	f107 0318 	add.w	r3, r7, #24
 8016536:	4618      	mov	r0, r3
 8016538:	f000 f912 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801653c:	6a3b      	ldr	r3, [r7, #32]
 801653e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016540:	e0eb      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016542:	2300      	movs	r3, #0
 8016544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016546:	e0e8      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8016548:	2300      	movs	r3, #0
 801654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801654c:	e0e5      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801654e:	bf00      	nop
 8016550:	58024400 	.word	0x58024400
 8016554:	03d09000 	.word	0x03d09000
 8016558:	003d0900 	.word	0x003d0900
 801655c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8016560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016564:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8016568:	430b      	orrs	r3, r1
 801656a:	f040 8085 	bne.w	8016678 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801656e:	4b6d      	ldr	r3, [pc, #436]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8016570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016572:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8016576:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8016578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801657a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801657e:	d06b      	beq.n	8016658 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8016580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016586:	d874      	bhi.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8016588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801658e:	d056      	beq.n	801663e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8016590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016596:	d86c      	bhi.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8016598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801659e:	d03b      	beq.n	8016618 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80165a6:	d864      	bhi.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80165a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80165ae:	d021      	beq.n	80165f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80165b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80165b6:	d85c      	bhi.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80165b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d004      	beq.n	80165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80165be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80165c4:	d004      	beq.n	80165d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80165c6:	e054      	b.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80165c8:	f000 f8b4 	bl	8016734 <HAL_RCCEx_GetD3PCLK1Freq>
 80165cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80165ce:	e0a4      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80165d0:	4b54      	ldr	r3, [pc, #336]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80165d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80165dc:	d107      	bne.n	80165ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80165de:	f107 0318 	add.w	r3, r7, #24
 80165e2:	4618      	mov	r0, r3
 80165e4:	f000 f8bc 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80165ec:	e095      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80165ee:	2300      	movs	r3, #0
 80165f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80165f2:	e092      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80165f4:	4b4b      	ldr	r3, [pc, #300]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80165fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016600:	d107      	bne.n	8016612 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016602:	f107 030c 	add.w	r3, r7, #12
 8016606:	4618      	mov	r0, r3
 8016608:	f000 f9fe 	bl	8016a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016610:	e083      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016612:	2300      	movs	r3, #0
 8016614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016616:	e080      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016618:	4b42      	ldr	r3, [pc, #264]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f003 0304 	and.w	r3, r3, #4
 8016620:	2b04      	cmp	r3, #4
 8016622:	d109      	bne.n	8016638 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016624:	4b3f      	ldr	r3, [pc, #252]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	08db      	lsrs	r3, r3, #3
 801662a:	f003 0303 	and.w	r3, r3, #3
 801662e:	4a3e      	ldr	r2, [pc, #248]	; (8016728 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8016630:	fa22 f303 	lsr.w	r3, r2, r3
 8016634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016636:	e070      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016638:	2300      	movs	r3, #0
 801663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801663c:	e06d      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801663e:	4b39      	ldr	r3, [pc, #228]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801664a:	d102      	bne.n	8016652 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801664c:	4b37      	ldr	r3, [pc, #220]	; (801672c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801664e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016650:	e063      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8016652:	2300      	movs	r3, #0
 8016654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016656:	e060      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016658:	4b32      	ldr	r3, [pc, #200]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016664:	d102      	bne.n	801666c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8016666:	4b32      	ldr	r3, [pc, #200]	; (8016730 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8016668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801666a:	e056      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801666c:	2300      	movs	r3, #0
 801666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016670:	e053      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8016672:	2300      	movs	r3, #0
 8016674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016676:	e050      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8016678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801667c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8016680:	430b      	orrs	r3, r1
 8016682:	d148      	bne.n	8016716 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8016684:	4b27      	ldr	r3, [pc, #156]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8016686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801668c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016694:	d02a      	beq.n	80166ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8016696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801669c:	d838      	bhi.n	8016710 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d004      	beq.n	80166ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80166a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80166aa:	d00d      	beq.n	80166c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80166ac:	e030      	b.n	8016710 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80166ae:	4b1d      	ldr	r3, [pc, #116]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80166b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80166ba:	d102      	bne.n	80166c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80166bc:	4b1c      	ldr	r3, [pc, #112]	; (8016730 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80166be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80166c0:	e02b      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80166c2:	2300      	movs	r3, #0
 80166c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80166c6:	e028      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80166c8:	4b16      	ldr	r3, [pc, #88]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80166d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80166d4:	d107      	bne.n	80166e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80166d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80166da:	4618      	mov	r0, r3
 80166dc:	f000 fae8 	bl	8016cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80166e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80166e4:	e019      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80166e6:	2300      	movs	r3, #0
 80166e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80166ea:	e016      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80166ec:	4b0d      	ldr	r3, [pc, #52]	; (8016724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80166f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80166f8:	d107      	bne.n	801670a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80166fa:	f107 0318 	add.w	r3, r7, #24
 80166fe:	4618      	mov	r0, r3
 8016700:	f000 f82e 	bl	8016760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016708:	e007      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801670e:	e004      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016714:	e001      	b.n	801671a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8016716:	2300      	movs	r3, #0
 8016718:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801671c:	4618      	mov	r0, r3
 801671e:	3740      	adds	r7, #64	; 0x40
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	58024400 	.word	0x58024400
 8016728:	03d09000 	.word	0x03d09000
 801672c:	003d0900 	.word	0x003d0900
 8016730:	017d7840 	.word	0x017d7840

08016734 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8016738:	f7fe f944 	bl	80149c4 <HAL_RCC_GetHCLKFreq>
 801673c:	4602      	mov	r2, r0
 801673e:	4b06      	ldr	r3, [pc, #24]	; (8016758 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8016740:	6a1b      	ldr	r3, [r3, #32]
 8016742:	091b      	lsrs	r3, r3, #4
 8016744:	f003 0307 	and.w	r3, r3, #7
 8016748:	4904      	ldr	r1, [pc, #16]	; (801675c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801674a:	5ccb      	ldrb	r3, [r1, r3]
 801674c:	f003 031f 	and.w	r3, r3, #31
 8016750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8016754:	4618      	mov	r0, r3
 8016756:	bd80      	pop	{r7, pc}
 8016758:	58024400 	.word	0x58024400
 801675c:	08023b0c 	.word	0x08023b0c

08016760 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8016760:	b480      	push	{r7}
 8016762:	b089      	sub	sp, #36	; 0x24
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016768:	4ba1      	ldr	r3, [pc, #644]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801676c:	f003 0303 	and.w	r3, r3, #3
 8016770:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8016772:	4b9f      	ldr	r3, [pc, #636]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016776:	0b1b      	lsrs	r3, r3, #12
 8016778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801677c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801677e:	4b9c      	ldr	r3, [pc, #624]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016782:	091b      	lsrs	r3, r3, #4
 8016784:	f003 0301 	and.w	r3, r3, #1
 8016788:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801678a:	4b99      	ldr	r3, [pc, #612]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801678e:	08db      	lsrs	r3, r3, #3
 8016790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016794:	693a      	ldr	r2, [r7, #16]
 8016796:	fb02 f303 	mul.w	r3, r2, r3
 801679a:	ee07 3a90 	vmov	s15, r3
 801679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	f000 8111 	beq.w	80169d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	2b02      	cmp	r3, #2
 80167b2:	f000 8083 	beq.w	80168bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80167b6:	69bb      	ldr	r3, [r7, #24]
 80167b8:	2b02      	cmp	r3, #2
 80167ba:	f200 80a1 	bhi.w	8016900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80167be:	69bb      	ldr	r3, [r7, #24]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d003      	beq.n	80167cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80167c4:	69bb      	ldr	r3, [r7, #24]
 80167c6:	2b01      	cmp	r3, #1
 80167c8:	d056      	beq.n	8016878 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80167ca:	e099      	b.n	8016900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80167cc:	4b88      	ldr	r3, [pc, #544]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f003 0320 	and.w	r3, r3, #32
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d02d      	beq.n	8016834 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80167d8:	4b85      	ldr	r3, [pc, #532]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	08db      	lsrs	r3, r3, #3
 80167de:	f003 0303 	and.w	r3, r3, #3
 80167e2:	4a84      	ldr	r2, [pc, #528]	; (80169f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80167e4:	fa22 f303 	lsr.w	r3, r2, r3
 80167e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	ee07 3a90 	vmov	s15, r3
 80167f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	ee07 3a90 	vmov	s15, r3
 80167fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016802:	4b7b      	ldr	r3, [pc, #492]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801680a:	ee07 3a90 	vmov	s15, r3
 801680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016812:	ed97 6a03 	vldr	s12, [r7, #12]
 8016816:	eddf 5a78 	vldr	s11, [pc, #480]	; 80169f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801681a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801681e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801682e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016832:	e087      	b.n	8016944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	ee07 3a90 	vmov	s15, r3
 801683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801683e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80169fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8016842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016846:	4b6a      	ldr	r3, [pc, #424]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801684a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801684e:	ee07 3a90 	vmov	s15, r3
 8016852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016856:	ed97 6a03 	vldr	s12, [r7, #12]
 801685a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80169f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801685e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801686a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801686e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016876:	e065      	b.n	8016944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	ee07 3a90 	vmov	s15, r3
 801687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016882:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8016a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8016886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801688a:	4b59      	ldr	r3, [pc, #356]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016892:	ee07 3a90 	vmov	s15, r3
 8016896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801689a:	ed97 6a03 	vldr	s12, [r7, #12]
 801689e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80169f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80168a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80168a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80168aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80168ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80168ba:	e043      	b.n	8016944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	ee07 3a90 	vmov	s15, r3
 80168c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8016a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80168ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80168ce:	4b48      	ldr	r3, [pc, #288]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80168d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168d6:	ee07 3a90 	vmov	s15, r3
 80168da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80168de:	ed97 6a03 	vldr	s12, [r7, #12]
 80168e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80169f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80168e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80168ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80168ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80168f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80168fe:	e021      	b.n	8016944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	ee07 3a90 	vmov	s15, r3
 8016906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801690a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016912:	4b37      	ldr	r3, [pc, #220]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801691a:	ee07 3a90 	vmov	s15, r3
 801691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016922:	ed97 6a03 	vldr	s12, [r7, #12]
 8016926:	eddf 5a34 	vldr	s11, [pc, #208]	; 80169f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016942:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8016944:	4b2a      	ldr	r3, [pc, #168]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016948:	0a5b      	lsrs	r3, r3, #9
 801694a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801694e:	ee07 3a90 	vmov	s15, r3
 8016952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801695a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801695e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801696a:	ee17 2a90 	vmov	r2, s15
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8016972:	4b1f      	ldr	r3, [pc, #124]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016976:	0c1b      	lsrs	r3, r3, #16
 8016978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801697c:	ee07 3a90 	vmov	s15, r3
 8016980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016988:	ee37 7a87 	vadd.f32	s14, s15, s14
 801698c:	edd7 6a07 	vldr	s13, [r7, #28]
 8016990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016998:	ee17 2a90 	vmov	r2, s15
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80169a0:	4b13      	ldr	r3, [pc, #76]	; (80169f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80169a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169a4:	0e1b      	lsrs	r3, r3, #24
 80169a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169aa:	ee07 3a90 	vmov	s15, r3
 80169ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80169b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80169ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80169be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169c6:	ee17 2a90 	vmov	r2, s15
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80169ce:	e008      	b.n	80169e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2200      	movs	r2, #0
 80169da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2200      	movs	r2, #0
 80169e0:	609a      	str	r2, [r3, #8]
}
 80169e2:	bf00      	nop
 80169e4:	3724      	adds	r7, #36	; 0x24
 80169e6:	46bd      	mov	sp, r7
 80169e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop
 80169f0:	58024400 	.word	0x58024400
 80169f4:	03d09000 	.word	0x03d09000
 80169f8:	46000000 	.word	0x46000000
 80169fc:	4c742400 	.word	0x4c742400
 8016a00:	4a742400 	.word	0x4a742400
 8016a04:	4bbebc20 	.word	0x4bbebc20

08016a08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b089      	sub	sp, #36	; 0x24
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016a10:	4ba1      	ldr	r3, [pc, #644]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a14:	f003 0303 	and.w	r3, r3, #3
 8016a18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8016a1a:	4b9f      	ldr	r3, [pc, #636]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a1e:	0d1b      	lsrs	r3, r3, #20
 8016a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8016a26:	4b9c      	ldr	r3, [pc, #624]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2a:	0a1b      	lsrs	r3, r3, #8
 8016a2c:	f003 0301 	and.w	r3, r3, #1
 8016a30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8016a32:	4b99      	ldr	r3, [pc, #612]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a36:	08db      	lsrs	r3, r3, #3
 8016a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a3c:	693a      	ldr	r2, [r7, #16]
 8016a3e:	fb02 f303 	mul.w	r3, r2, r3
 8016a42:	ee07 3a90 	vmov	s15, r3
 8016a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8016a4e:	697b      	ldr	r3, [r7, #20]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f000 8111 	beq.w	8016c78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	2b02      	cmp	r3, #2
 8016a5a:	f000 8083 	beq.w	8016b64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	2b02      	cmp	r3, #2
 8016a62:	f200 80a1 	bhi.w	8016ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d003      	beq.n	8016a74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	2b01      	cmp	r3, #1
 8016a70:	d056      	beq.n	8016b20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8016a72:	e099      	b.n	8016ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016a74:	4b88      	ldr	r3, [pc, #544]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f003 0320 	and.w	r3, r3, #32
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d02d      	beq.n	8016adc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016a80:	4b85      	ldr	r3, [pc, #532]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	08db      	lsrs	r3, r3, #3
 8016a86:	f003 0303 	and.w	r3, r3, #3
 8016a8a:	4a84      	ldr	r2, [pc, #528]	; (8016c9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8016a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8016a90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	ee07 3a90 	vmov	s15, r3
 8016a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	ee07 3a90 	vmov	s15, r3
 8016aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016aaa:	4b7b      	ldr	r3, [pc, #492]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ab2:	ee07 3a90 	vmov	s15, r3
 8016ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8016abe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8016ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016ada:	e087      	b.n	8016bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	ee07 3a90 	vmov	s15, r3
 8016ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8016ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8016aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016aee:	4b6a      	ldr	r3, [pc, #424]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016af6:	ee07 3a90 	vmov	s15, r3
 8016afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8016ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016b1e:	e065      	b.n	8016bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	ee07 3a90 	vmov	s15, r3
 8016b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8016ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8016b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b32:	4b59      	ldr	r3, [pc, #356]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b3a:	ee07 3a90 	vmov	s15, r3
 8016b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8016ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016b62:	e043      	b.n	8016bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	ee07 3a90 	vmov	s15, r3
 8016b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8016cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8016b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b76:	4b48      	ldr	r3, [pc, #288]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b7e:	ee07 3a90 	vmov	s15, r3
 8016b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016ba6:	e021      	b.n	8016bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	ee07 3a90 	vmov	s15, r3
 8016bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8016bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bba:	4b37      	ldr	r3, [pc, #220]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bc2:	ee07 3a90 	vmov	s15, r3
 8016bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8016bce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016bea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8016bec:	4b2a      	ldr	r3, [pc, #168]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bf0:	0a5b      	lsrs	r3, r3, #9
 8016bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016bf6:	ee07 3a90 	vmov	s15, r3
 8016bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c12:	ee17 2a90 	vmov	r2, s15
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8016c1a:	4b1f      	ldr	r3, [pc, #124]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c1e:	0c1b      	lsrs	r3, r3, #16
 8016c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c24:	ee07 3a90 	vmov	s15, r3
 8016c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c40:	ee17 2a90 	vmov	r2, s15
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8016c48:	4b13      	ldr	r3, [pc, #76]	; (8016c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c4c:	0e1b      	lsrs	r3, r3, #24
 8016c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c52:	ee07 3a90 	vmov	s15, r3
 8016c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c6e:	ee17 2a90 	vmov	r2, s15
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016c76:	e008      	b.n	8016c8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2200      	movs	r2, #0
 8016c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2200      	movs	r2, #0
 8016c88:	609a      	str	r2, [r3, #8]
}
 8016c8a:	bf00      	nop
 8016c8c:	3724      	adds	r7, #36	; 0x24
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c94:	4770      	bx	lr
 8016c96:	bf00      	nop
 8016c98:	58024400 	.word	0x58024400
 8016c9c:	03d09000 	.word	0x03d09000
 8016ca0:	46000000 	.word	0x46000000
 8016ca4:	4c742400 	.word	0x4c742400
 8016ca8:	4a742400 	.word	0x4a742400
 8016cac:	4bbebc20 	.word	0x4bbebc20

08016cb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8016cb0:	b480      	push	{r7}
 8016cb2:	b089      	sub	sp, #36	; 0x24
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016cb8:	4ba0      	ldr	r3, [pc, #640]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cbc:	f003 0303 	and.w	r3, r3, #3
 8016cc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8016cc2:	4b9e      	ldr	r3, [pc, #632]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cc6:	091b      	lsrs	r3, r3, #4
 8016cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ccc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8016cce:	4b9b      	ldr	r3, [pc, #620]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd2:	f003 0301 	and.w	r3, r3, #1
 8016cd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8016cd8:	4b98      	ldr	r3, [pc, #608]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cdc:	08db      	lsrs	r3, r3, #3
 8016cde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ce2:	693a      	ldr	r2, [r7, #16]
 8016ce4:	fb02 f303 	mul.w	r3, r2, r3
 8016ce8:	ee07 3a90 	vmov	s15, r3
 8016cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	f000 8111 	beq.w	8016f1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8016cfc:	69bb      	ldr	r3, [r7, #24]
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	f000 8083 	beq.w	8016e0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8016d04:	69bb      	ldr	r3, [r7, #24]
 8016d06:	2b02      	cmp	r3, #2
 8016d08:	f200 80a1 	bhi.w	8016e4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8016d12:	69bb      	ldr	r3, [r7, #24]
 8016d14:	2b01      	cmp	r3, #1
 8016d16:	d056      	beq.n	8016dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8016d18:	e099      	b.n	8016e4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016d1a:	4b88      	ldr	r3, [pc, #544]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f003 0320 	and.w	r3, r3, #32
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d02d      	beq.n	8016d82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016d26:	4b85      	ldr	r3, [pc, #532]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	08db      	lsrs	r3, r3, #3
 8016d2c:	f003 0303 	and.w	r3, r3, #3
 8016d30:	4a83      	ldr	r2, [pc, #524]	; (8016f40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8016d32:	fa22 f303 	lsr.w	r3, r2, r3
 8016d36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	ee07 3a90 	vmov	s15, r3
 8016d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	ee07 3a90 	vmov	s15, r3
 8016d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016d50:	4b7a      	ldr	r3, [pc, #488]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d58:	ee07 3a90 	vmov	s15, r3
 8016d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8016d64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016d80:	e087      	b.n	8016e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	ee07 3a90 	vmov	s15, r3
 8016d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016f48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8016d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016d94:	4b69      	ldr	r3, [pc, #420]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d9c:	ee07 3a90 	vmov	s15, r3
 8016da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8016da8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016dc4:	e065      	b.n	8016e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016dc6:	697b      	ldr	r3, [r7, #20]
 8016dc8:	ee07 3a90 	vmov	s15, r3
 8016dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016dd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016f4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8016dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016dd8:	4b58      	ldr	r3, [pc, #352]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016de0:	ee07 3a90 	vmov	s15, r3
 8016de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8016dec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e08:	e043      	b.n	8016e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	ee07 3a90 	vmov	s15, r3
 8016e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8016e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e1c:	4b47      	ldr	r3, [pc, #284]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e24:	ee07 3a90 	vmov	s15, r3
 8016e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e4c:	e021      	b.n	8016e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	ee07 3a90 	vmov	s15, r3
 8016e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016f48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8016e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e60:	4b36      	ldr	r3, [pc, #216]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e68:	ee07 3a90 	vmov	s15, r3
 8016e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e70:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8016e92:	4b2a      	ldr	r3, [pc, #168]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e96:	0a5b      	lsrs	r3, r3, #9
 8016e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e9c:	ee07 3a90 	vmov	s15, r3
 8016ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8016eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016eb8:	ee17 2a90 	vmov	r2, s15
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8016ec0:	4b1e      	ldr	r3, [pc, #120]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ec4:	0c1b      	lsrs	r3, r3, #16
 8016ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016eca:	ee07 3a90 	vmov	s15, r3
 8016ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8016ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ee6:	ee17 2a90 	vmov	r2, s15
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8016eee:	4b13      	ldr	r3, [pc, #76]	; (8016f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ef2:	0e1b      	lsrs	r3, r3, #24
 8016ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ef8:	ee07 3a90 	vmov	s15, r3
 8016efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f14:	ee17 2a90 	vmov	r2, s15
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8016f1c:	e008      	b.n	8016f30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2200      	movs	r2, #0
 8016f22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	609a      	str	r2, [r3, #8]
}
 8016f30:	bf00      	nop
 8016f32:	3724      	adds	r7, #36	; 0x24
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr
 8016f3c:	58024400 	.word	0x58024400
 8016f40:	03d09000 	.word	0x03d09000
 8016f44:	46000000 	.word	0x46000000
 8016f48:	4c742400 	.word	0x4c742400
 8016f4c:	4a742400 	.word	0x4a742400
 8016f50:	4bbebc20 	.word	0x4bbebc20

08016f54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b084      	sub	sp, #16
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016f62:	4b53      	ldr	r3, [pc, #332]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f66:	f003 0303 	and.w	r3, r3, #3
 8016f6a:	2b03      	cmp	r3, #3
 8016f6c:	d101      	bne.n	8016f72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016f6e:	2301      	movs	r3, #1
 8016f70:	e099      	b.n	80170a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016f72:	4b4f      	ldr	r3, [pc, #316]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	4a4e      	ldr	r2, [pc, #312]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016f7e:	f7f6 fcfd 	bl	800d97c <HAL_GetTick>
 8016f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016f84:	e008      	b.n	8016f98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016f86:	f7f6 fcf9 	bl	800d97c <HAL_GetTick>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	1ad3      	subs	r3, r2, r3
 8016f90:	2b02      	cmp	r3, #2
 8016f92:	d901      	bls.n	8016f98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016f94:	2303      	movs	r3, #3
 8016f96:	e086      	b.n	80170a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016f98:	4b45      	ldr	r3, [pc, #276]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d1f0      	bne.n	8016f86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016fa4:	4b42      	ldr	r3, [pc, #264]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	031b      	lsls	r3, r3, #12
 8016fb2:	493f      	ldr	r1, [pc, #252]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016fb4:	4313      	orrs	r3, r2
 8016fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	685b      	ldr	r3, [r3, #4]
 8016fbc:	3b01      	subs	r3, #1
 8016fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	689b      	ldr	r3, [r3, #8]
 8016fc6:	3b01      	subs	r3, #1
 8016fc8:	025b      	lsls	r3, r3, #9
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	431a      	orrs	r2, r3
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	68db      	ldr	r3, [r3, #12]
 8016fd2:	3b01      	subs	r3, #1
 8016fd4:	041b      	lsls	r3, r3, #16
 8016fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016fda:	431a      	orrs	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	691b      	ldr	r3, [r3, #16]
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	061b      	lsls	r3, r3, #24
 8016fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016fe8:	4931      	ldr	r1, [pc, #196]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016fea:	4313      	orrs	r3, r2
 8016fec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016fee:	4b30      	ldr	r3, [pc, #192]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	695b      	ldr	r3, [r3, #20]
 8016ffa:	492d      	ldr	r1, [pc, #180]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8016ffc:	4313      	orrs	r3, r2
 8016ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8017000:	4b2b      	ldr	r3, [pc, #172]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017004:	f023 0220 	bic.w	r2, r3, #32
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	699b      	ldr	r3, [r3, #24]
 801700c:	4928      	ldr	r1, [pc, #160]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801700e:	4313      	orrs	r3, r2
 8017010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8017012:	4b27      	ldr	r3, [pc, #156]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017016:	4a26      	ldr	r2, [pc, #152]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017018:	f023 0310 	bic.w	r3, r3, #16
 801701c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801701e:	4b24      	ldr	r3, [pc, #144]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017022:	4b24      	ldr	r3, [pc, #144]	; (80170b4 <RCCEx_PLL2_Config+0x160>)
 8017024:	4013      	ands	r3, r2
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	69d2      	ldr	r2, [r2, #28]
 801702a:	00d2      	lsls	r2, r2, #3
 801702c:	4920      	ldr	r1, [pc, #128]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801702e:	4313      	orrs	r3, r2
 8017030:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8017032:	4b1f      	ldr	r3, [pc, #124]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017036:	4a1e      	ldr	r2, [pc, #120]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017038:	f043 0310 	orr.w	r3, r3, #16
 801703c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d106      	bne.n	8017052 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8017044:	4b1a      	ldr	r3, [pc, #104]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017048:	4a19      	ldr	r2, [pc, #100]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801704a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801704e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017050:	e00f      	b.n	8017072 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d106      	bne.n	8017066 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8017058:	4b15      	ldr	r3, [pc, #84]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801705c:	4a14      	ldr	r2, [pc, #80]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801705e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017064:	e005      	b.n	8017072 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8017066:	4b12      	ldr	r3, [pc, #72]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801706a:	4a11      	ldr	r2, [pc, #68]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801706c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8017072:	4b0f      	ldr	r3, [pc, #60]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	4a0e      	ldr	r2, [pc, #56]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 8017078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801707c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801707e:	f7f6 fc7d 	bl	800d97c <HAL_GetTick>
 8017082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017084:	e008      	b.n	8017098 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8017086:	f7f6 fc79 	bl	800d97c <HAL_GetTick>
 801708a:	4602      	mov	r2, r0
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	2b02      	cmp	r3, #2
 8017092:	d901      	bls.n	8017098 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017094:	2303      	movs	r3, #3
 8017096:	e006      	b.n	80170a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017098:	4b05      	ldr	r3, [pc, #20]	; (80170b0 <RCCEx_PLL2_Config+0x15c>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d0f0      	beq.n	8017086 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80170a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3710      	adds	r7, #16
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}
 80170ae:	bf00      	nop
 80170b0:	58024400 	.word	0x58024400
 80170b4:	ffff0007 	.word	0xffff0007

080170b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b084      	sub	sp, #16
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80170c2:	2300      	movs	r3, #0
 80170c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80170c6:	4b53      	ldr	r3, [pc, #332]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80170c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170ca:	f003 0303 	and.w	r3, r3, #3
 80170ce:	2b03      	cmp	r3, #3
 80170d0:	d101      	bne.n	80170d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80170d2:	2301      	movs	r3, #1
 80170d4:	e099      	b.n	801720a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80170d6:	4b4f      	ldr	r3, [pc, #316]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	4a4e      	ldr	r2, [pc, #312]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80170dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80170e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80170e2:	f7f6 fc4b 	bl	800d97c <HAL_GetTick>
 80170e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80170e8:	e008      	b.n	80170fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80170ea:	f7f6 fc47 	bl	800d97c <HAL_GetTick>
 80170ee:	4602      	mov	r2, r0
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	2b02      	cmp	r3, #2
 80170f6:	d901      	bls.n	80170fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80170f8:	2303      	movs	r3, #3
 80170fa:	e086      	b.n	801720a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80170fc:	4b45      	ldr	r3, [pc, #276]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017104:	2b00      	cmp	r3, #0
 8017106:	d1f0      	bne.n	80170ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8017108:	4b42      	ldr	r3, [pc, #264]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 801710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801710c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	051b      	lsls	r3, r3, #20
 8017116:	493f      	ldr	r1, [pc, #252]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017118:	4313      	orrs	r3, r2
 801711a:	628b      	str	r3, [r1, #40]	; 0x28
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	685b      	ldr	r3, [r3, #4]
 8017120:	3b01      	subs	r3, #1
 8017122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	689b      	ldr	r3, [r3, #8]
 801712a:	3b01      	subs	r3, #1
 801712c:	025b      	lsls	r3, r3, #9
 801712e:	b29b      	uxth	r3, r3
 8017130:	431a      	orrs	r2, r3
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	3b01      	subs	r3, #1
 8017138:	041b      	lsls	r3, r3, #16
 801713a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801713e:	431a      	orrs	r2, r3
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	691b      	ldr	r3, [r3, #16]
 8017144:	3b01      	subs	r3, #1
 8017146:	061b      	lsls	r3, r3, #24
 8017148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801714c:	4931      	ldr	r1, [pc, #196]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 801714e:	4313      	orrs	r3, r2
 8017150:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8017152:	4b30      	ldr	r3, [pc, #192]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	695b      	ldr	r3, [r3, #20]
 801715e:	492d      	ldr	r1, [pc, #180]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017160:	4313      	orrs	r3, r2
 8017162:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8017164:	4b2b      	ldr	r3, [pc, #172]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017168:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	699b      	ldr	r3, [r3, #24]
 8017170:	4928      	ldr	r1, [pc, #160]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017172:	4313      	orrs	r3, r2
 8017174:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8017176:	4b27      	ldr	r3, [pc, #156]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801717a:	4a26      	ldr	r2, [pc, #152]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 801717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8017182:	4b24      	ldr	r3, [pc, #144]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017186:	4b24      	ldr	r3, [pc, #144]	; (8017218 <RCCEx_PLL3_Config+0x160>)
 8017188:	4013      	ands	r3, r2
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	69d2      	ldr	r2, [r2, #28]
 801718e:	00d2      	lsls	r2, r2, #3
 8017190:	4920      	ldr	r1, [pc, #128]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017192:	4313      	orrs	r3, r2
 8017194:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8017196:	4b1f      	ldr	r3, [pc, #124]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 8017198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801719a:	4a1e      	ldr	r2, [pc, #120]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 801719c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80171a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d106      	bne.n	80171b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80171a8:	4b1a      	ldr	r3, [pc, #104]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ac:	4a19      	ldr	r2, [pc, #100]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80171b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80171b4:	e00f      	b.n	80171d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d106      	bne.n	80171ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80171bc:	4b15      	ldr	r3, [pc, #84]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171c0:	4a14      	ldr	r2, [pc, #80]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80171c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80171c8:	e005      	b.n	80171d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80171ca:	4b12      	ldr	r3, [pc, #72]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ce:	4a11      	ldr	r2, [pc, #68]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80171d6:	4b0f      	ldr	r3, [pc, #60]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	4a0e      	ldr	r2, [pc, #56]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80171e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80171e2:	f7f6 fbcb 	bl	800d97c <HAL_GetTick>
 80171e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80171e8:	e008      	b.n	80171fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80171ea:	f7f6 fbc7 	bl	800d97c <HAL_GetTick>
 80171ee:	4602      	mov	r2, r0
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	2b02      	cmp	r3, #2
 80171f6:	d901      	bls.n	80171fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80171f8:	2303      	movs	r3, #3
 80171fa:	e006      	b.n	801720a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80171fc:	4b05      	ldr	r3, [pc, #20]	; (8017214 <RCCEx_PLL3_Config+0x15c>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017204:	2b00      	cmp	r3, #0
 8017206:	d0f0      	beq.n	80171ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8017208:	7bfb      	ldrb	r3, [r7, #15]
}
 801720a:	4618      	mov	r0, r3
 801720c:	3710      	adds	r7, #16
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop
 8017214:	58024400 	.word	0x58024400
 8017218:	ffff0007 	.word	0xffff0007

0801721c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d101      	bne.n	801722e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801722a:	2301      	movs	r3, #1
 801722c:	e049      	b.n	80172c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2200      	movs	r2, #0
 801723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f7f5 fe8e 	bl	800cf64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2202      	movs	r2, #2
 801724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	3304      	adds	r3, #4
 8017258:	4619      	mov	r1, r3
 801725a:	4610      	mov	r0, r2
 801725c:	f000 fea0 	bl	8017fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2201      	movs	r2, #1
 8017264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2201      	movs	r2, #1
 801726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2201      	movs	r2, #1
 8017274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2201      	movs	r2, #1
 801727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2201      	movs	r2, #1
 8017284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2201      	movs	r2, #1
 801728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2201      	movs	r2, #1
 8017294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2201      	movs	r2, #1
 801729c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2201      	movs	r2, #1
 80172a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2201      	movs	r2, #1
 80172ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2201      	movs	r2, #1
 80172b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2201      	movs	r2, #1
 80172bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80172c0:	2300      	movs	r3, #0
}
 80172c2:	4618      	mov	r0, r3
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}

080172ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80172ca:	b580      	push	{r7, lr}
 80172cc:	b082      	sub	sp, #8
 80172ce:	af00      	add	r7, sp, #0
 80172d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d101      	bne.n	80172dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80172d8:	2301      	movs	r3, #1
 80172da:	e049      	b.n	8017370 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172e2:	b2db      	uxtb	r3, r3
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d106      	bne.n	80172f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2200      	movs	r2, #0
 80172ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7f5 fdb9 	bl	800ce68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	2202      	movs	r2, #2
 80172fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	681a      	ldr	r2, [r3, #0]
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	3304      	adds	r3, #4
 8017306:	4619      	mov	r1, r3
 8017308:	4610      	mov	r0, r2
 801730a:	f000 fe49 	bl	8017fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2201      	movs	r2, #1
 8017312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2201      	movs	r2, #1
 801731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2201      	movs	r2, #1
 8017322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	2201      	movs	r2, #1
 801732a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	2201      	movs	r2, #1
 8017332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2201      	movs	r2, #1
 801733a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2201      	movs	r2, #1
 8017342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2201      	movs	r2, #1
 801734a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2201      	movs	r2, #1
 8017352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2201      	movs	r2, #1
 801735a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2201      	movs	r2, #1
 8017362:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2201      	movs	r2, #1
 801736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801736e:	2300      	movs	r3, #0
}
 8017370:	4618      	mov	r0, r3
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b084      	sub	sp, #16
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d109      	bne.n	801739c <HAL_TIM_PWM_Start+0x24>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801738e:	b2db      	uxtb	r3, r3
 8017390:	2b01      	cmp	r3, #1
 8017392:	bf14      	ite	ne
 8017394:	2301      	movne	r3, #1
 8017396:	2300      	moveq	r3, #0
 8017398:	b2db      	uxtb	r3, r3
 801739a:	e03c      	b.n	8017416 <HAL_TIM_PWM_Start+0x9e>
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	2b04      	cmp	r3, #4
 80173a0:	d109      	bne.n	80173b6 <HAL_TIM_PWM_Start+0x3e>
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	bf14      	ite	ne
 80173ae:	2301      	movne	r3, #1
 80173b0:	2300      	moveq	r3, #0
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	e02f      	b.n	8017416 <HAL_TIM_PWM_Start+0x9e>
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	2b08      	cmp	r3, #8
 80173ba:	d109      	bne.n	80173d0 <HAL_TIM_PWM_Start+0x58>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b01      	cmp	r3, #1
 80173c6:	bf14      	ite	ne
 80173c8:	2301      	movne	r3, #1
 80173ca:	2300      	moveq	r3, #0
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	e022      	b.n	8017416 <HAL_TIM_PWM_Start+0x9e>
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	2b0c      	cmp	r3, #12
 80173d4:	d109      	bne.n	80173ea <HAL_TIM_PWM_Start+0x72>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	2b01      	cmp	r3, #1
 80173e0:	bf14      	ite	ne
 80173e2:	2301      	movne	r3, #1
 80173e4:	2300      	moveq	r3, #0
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	e015      	b.n	8017416 <HAL_TIM_PWM_Start+0x9e>
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	2b10      	cmp	r3, #16
 80173ee:	d109      	bne.n	8017404 <HAL_TIM_PWM_Start+0x8c>
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	bf14      	ite	ne
 80173fc:	2301      	movne	r3, #1
 80173fe:	2300      	moveq	r3, #0
 8017400:	b2db      	uxtb	r3, r3
 8017402:	e008      	b.n	8017416 <HAL_TIM_PWM_Start+0x9e>
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801740a:	b2db      	uxtb	r3, r3
 801740c:	2b01      	cmp	r3, #1
 801740e:	bf14      	ite	ne
 8017410:	2301      	movne	r3, #1
 8017412:	2300      	moveq	r3, #0
 8017414:	b2db      	uxtb	r3, r3
 8017416:	2b00      	cmp	r3, #0
 8017418:	d001      	beq.n	801741e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801741a:	2301      	movs	r3, #1
 801741c:	e0ab      	b.n	8017576 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d104      	bne.n	801742e <HAL_TIM_PWM_Start+0xb6>
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2202      	movs	r2, #2
 8017428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801742c:	e023      	b.n	8017476 <HAL_TIM_PWM_Start+0xfe>
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	2b04      	cmp	r3, #4
 8017432:	d104      	bne.n	801743e <HAL_TIM_PWM_Start+0xc6>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2202      	movs	r2, #2
 8017438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801743c:	e01b      	b.n	8017476 <HAL_TIM_PWM_Start+0xfe>
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	2b08      	cmp	r3, #8
 8017442:	d104      	bne.n	801744e <HAL_TIM_PWM_Start+0xd6>
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2202      	movs	r2, #2
 8017448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801744c:	e013      	b.n	8017476 <HAL_TIM_PWM_Start+0xfe>
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	2b0c      	cmp	r3, #12
 8017452:	d104      	bne.n	801745e <HAL_TIM_PWM_Start+0xe6>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2202      	movs	r2, #2
 8017458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801745c:	e00b      	b.n	8017476 <HAL_TIM_PWM_Start+0xfe>
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	2b10      	cmp	r3, #16
 8017462:	d104      	bne.n	801746e <HAL_TIM_PWM_Start+0xf6>
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2202      	movs	r2, #2
 8017468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801746c:	e003      	b.n	8017476 <HAL_TIM_PWM_Start+0xfe>
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2202      	movs	r2, #2
 8017472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2201      	movs	r2, #1
 801747c:	6839      	ldr	r1, [r7, #0]
 801747e:	4618      	mov	r0, r3
 8017480:	f001 fade 	bl	8018a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4a3d      	ldr	r2, [pc, #244]	; (8017580 <HAL_TIM_PWM_Start+0x208>)
 801748a:	4293      	cmp	r3, r2
 801748c:	d013      	beq.n	80174b6 <HAL_TIM_PWM_Start+0x13e>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	4a3c      	ldr	r2, [pc, #240]	; (8017584 <HAL_TIM_PWM_Start+0x20c>)
 8017494:	4293      	cmp	r3, r2
 8017496:	d00e      	beq.n	80174b6 <HAL_TIM_PWM_Start+0x13e>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4a3a      	ldr	r2, [pc, #232]	; (8017588 <HAL_TIM_PWM_Start+0x210>)
 801749e:	4293      	cmp	r3, r2
 80174a0:	d009      	beq.n	80174b6 <HAL_TIM_PWM_Start+0x13e>
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	4a39      	ldr	r2, [pc, #228]	; (801758c <HAL_TIM_PWM_Start+0x214>)
 80174a8:	4293      	cmp	r3, r2
 80174aa:	d004      	beq.n	80174b6 <HAL_TIM_PWM_Start+0x13e>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	4a37      	ldr	r2, [pc, #220]	; (8017590 <HAL_TIM_PWM_Start+0x218>)
 80174b2:	4293      	cmp	r3, r2
 80174b4:	d101      	bne.n	80174ba <HAL_TIM_PWM_Start+0x142>
 80174b6:	2301      	movs	r3, #1
 80174b8:	e000      	b.n	80174bc <HAL_TIM_PWM_Start+0x144>
 80174ba:	2300      	movs	r3, #0
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d007      	beq.n	80174d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80174ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	4a2a      	ldr	r2, [pc, #168]	; (8017580 <HAL_TIM_PWM_Start+0x208>)
 80174d6:	4293      	cmp	r3, r2
 80174d8:	d02c      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80174e2:	d027      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	4a2a      	ldr	r2, [pc, #168]	; (8017594 <HAL_TIM_PWM_Start+0x21c>)
 80174ea:	4293      	cmp	r3, r2
 80174ec:	d022      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	4a29      	ldr	r2, [pc, #164]	; (8017598 <HAL_TIM_PWM_Start+0x220>)
 80174f4:	4293      	cmp	r3, r2
 80174f6:	d01d      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	4a27      	ldr	r2, [pc, #156]	; (801759c <HAL_TIM_PWM_Start+0x224>)
 80174fe:	4293      	cmp	r3, r2
 8017500:	d018      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4a1f      	ldr	r2, [pc, #124]	; (8017584 <HAL_TIM_PWM_Start+0x20c>)
 8017508:	4293      	cmp	r3, r2
 801750a:	d013      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4a23      	ldr	r2, [pc, #140]	; (80175a0 <HAL_TIM_PWM_Start+0x228>)
 8017512:	4293      	cmp	r3, r2
 8017514:	d00e      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	4a1b      	ldr	r2, [pc, #108]	; (8017588 <HAL_TIM_PWM_Start+0x210>)
 801751c:	4293      	cmp	r3, r2
 801751e:	d009      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	4a1f      	ldr	r2, [pc, #124]	; (80175a4 <HAL_TIM_PWM_Start+0x22c>)
 8017526:	4293      	cmp	r3, r2
 8017528:	d004      	beq.n	8017534 <HAL_TIM_PWM_Start+0x1bc>
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	4a1e      	ldr	r2, [pc, #120]	; (80175a8 <HAL_TIM_PWM_Start+0x230>)
 8017530:	4293      	cmp	r3, r2
 8017532:	d115      	bne.n	8017560 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	689a      	ldr	r2, [r3, #8]
 801753a:	4b1c      	ldr	r3, [pc, #112]	; (80175ac <HAL_TIM_PWM_Start+0x234>)
 801753c:	4013      	ands	r3, r2
 801753e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2b06      	cmp	r3, #6
 8017544:	d015      	beq.n	8017572 <HAL_TIM_PWM_Start+0x1fa>
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801754c:	d011      	beq.n	8017572 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f042 0201 	orr.w	r2, r2, #1
 801755c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801755e:	e008      	b.n	8017572 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	681a      	ldr	r2, [r3, #0]
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	f042 0201 	orr.w	r2, r2, #1
 801756e:	601a      	str	r2, [r3, #0]
 8017570:	e000      	b.n	8017574 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8017574:	2300      	movs	r3, #0
}
 8017576:	4618      	mov	r0, r3
 8017578:	3710      	adds	r7, #16
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}
 801757e:	bf00      	nop
 8017580:	40010000 	.word	0x40010000
 8017584:	40010400 	.word	0x40010400
 8017588:	40014000 	.word	0x40014000
 801758c:	40014400 	.word	0x40014400
 8017590:	40014800 	.word	0x40014800
 8017594:	40000400 	.word	0x40000400
 8017598:	40000800 	.word	0x40000800
 801759c:	40000c00 	.word	0x40000c00
 80175a0:	40001800 	.word	0x40001800
 80175a4:	4000e000 	.word	0x4000e000
 80175a8:	4000e400 	.word	0x4000e400
 80175ac:	00010007 	.word	0x00010007

080175b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d101      	bne.n	80175c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80175be:	2301      	movs	r3, #1
 80175c0:	e049      	b.n	8017656 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d106      	bne.n	80175dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2200      	movs	r2, #0
 80175d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f7f5 fdc0 	bl	800d15c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2202      	movs	r2, #2
 80175e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681a      	ldr	r2, [r3, #0]
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	3304      	adds	r3, #4
 80175ec:	4619      	mov	r1, r3
 80175ee:	4610      	mov	r0, r2
 80175f0:	f000 fcd6 	bl	8017fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2201      	movs	r2, #1
 80175f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2201      	movs	r2, #1
 8017600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2201      	movs	r2, #1
 8017608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2201      	movs	r2, #1
 8017610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2201      	movs	r2, #1
 8017618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2201      	movs	r2, #1
 8017620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2201      	movs	r2, #1
 8017628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2201      	movs	r2, #1
 8017630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2201      	movs	r2, #1
 8017638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2201      	movs	r2, #1
 8017640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2201      	movs	r2, #1
 8017648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2201      	movs	r2, #1
 8017650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017654:	2300      	movs	r3, #0
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
	...

08017660 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b086      	sub	sp, #24
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
 8017668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d101      	bne.n	8017674 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8017670:	2301      	movs	r3, #1
 8017672:	e08f      	b.n	8017794 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801767a:	b2db      	uxtb	r3, r3
 801767c:	2b00      	cmp	r3, #0
 801767e:	d106      	bne.n	801768e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2200      	movs	r2, #0
 8017684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7f5 fd1d 	bl	800d0c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2202      	movs	r2, #2
 8017692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	6899      	ldr	r1, [r3, #8]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681a      	ldr	r2, [r3, #0]
 80176a0:	4b3e      	ldr	r3, [pc, #248]	; (801779c <HAL_TIM_Encoder_Init+0x13c>)
 80176a2:	400b      	ands	r3, r1
 80176a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681a      	ldr	r2, [r3, #0]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	3304      	adds	r3, #4
 80176ae:	4619      	mov	r1, r3
 80176b0:	4610      	mov	r0, r2
 80176b2:	f000 fc75 	bl	8017fa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	689b      	ldr	r3, [r3, #8]
 80176bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	699b      	ldr	r3, [r3, #24]
 80176c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	6a1b      	ldr	r3, [r3, #32]
 80176cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	697a      	ldr	r2, [r7, #20]
 80176d4:	4313      	orrs	r3, r2
 80176d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	4b31      	ldr	r3, [pc, #196]	; (80177a0 <HAL_TIM_Encoder_Init+0x140>)
 80176dc:	4013      	ands	r3, r2
 80176de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	689a      	ldr	r2, [r3, #8]
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	699b      	ldr	r3, [r3, #24]
 80176e8:	021b      	lsls	r3, r3, #8
 80176ea:	4313      	orrs	r3, r2
 80176ec:	693a      	ldr	r2, [r7, #16]
 80176ee:	4313      	orrs	r3, r2
 80176f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80176f2:	693a      	ldr	r2, [r7, #16]
 80176f4:	4b2b      	ldr	r3, [pc, #172]	; (80177a4 <HAL_TIM_Encoder_Init+0x144>)
 80176f6:	4013      	ands	r3, r2
 80176f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80176fa:	693a      	ldr	r2, [r7, #16]
 80176fc:	4b2a      	ldr	r3, [pc, #168]	; (80177a8 <HAL_TIM_Encoder_Init+0x148>)
 80176fe:	4013      	ands	r3, r2
 8017700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	68da      	ldr	r2, [r3, #12]
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	69db      	ldr	r3, [r3, #28]
 801770a:	021b      	lsls	r3, r3, #8
 801770c:	4313      	orrs	r3, r2
 801770e:	693a      	ldr	r2, [r7, #16]
 8017710:	4313      	orrs	r3, r2
 8017712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	691b      	ldr	r3, [r3, #16]
 8017718:	011a      	lsls	r2, r3, #4
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	6a1b      	ldr	r3, [r3, #32]
 801771e:	031b      	lsls	r3, r3, #12
 8017720:	4313      	orrs	r3, r2
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	4313      	orrs	r3, r2
 8017726:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801772e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8017736:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	685a      	ldr	r2, [r3, #4]
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	695b      	ldr	r3, [r3, #20]
 8017740:	011b      	lsls	r3, r3, #4
 8017742:	4313      	orrs	r3, r2
 8017744:	68fa      	ldr	r2, [r7, #12]
 8017746:	4313      	orrs	r3, r2
 8017748:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	697a      	ldr	r2, [r7, #20]
 8017750:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	693a      	ldr	r2, [r7, #16]
 8017758:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	68fa      	ldr	r2, [r7, #12]
 8017760:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2201      	movs	r2, #1
 8017766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2201      	movs	r2, #1
 801776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2201      	movs	r2, #1
 8017776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2201      	movs	r2, #1
 801777e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	2201      	movs	r2, #1
 8017786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2201      	movs	r2, #1
 801778e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017792:	2300      	movs	r3, #0
}
 8017794:	4618      	mov	r0, r3
 8017796:	3718      	adds	r7, #24
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	fffebff8 	.word	0xfffebff8
 80177a0:	fffffcfc 	.word	0xfffffcfc
 80177a4:	fffff3f3 	.word	0xfffff3f3
 80177a8:	ffff0f0f 	.word	0xffff0f0f

080177ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	691b      	ldr	r3, [r3, #16]
 80177ba:	f003 0302 	and.w	r3, r3, #2
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d122      	bne.n	8017808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	68db      	ldr	r3, [r3, #12]
 80177c8:	f003 0302 	and.w	r3, r3, #2
 80177cc:	2b02      	cmp	r3, #2
 80177ce:	d11b      	bne.n	8017808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	f06f 0202 	mvn.w	r2, #2
 80177d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2201      	movs	r2, #1
 80177de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	699b      	ldr	r3, [r3, #24]
 80177e6:	f003 0303 	and.w	r3, r3, #3
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d003      	beq.n	80177f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f000 fbb8 	bl	8017f64 <HAL_TIM_IC_CaptureCallback>
 80177f4:	e005      	b.n	8017802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f000 fbaa 	bl	8017f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f000 fbbb 	bl	8017f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2200      	movs	r2, #0
 8017806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	691b      	ldr	r3, [r3, #16]
 801780e:	f003 0304 	and.w	r3, r3, #4
 8017812:	2b04      	cmp	r3, #4
 8017814:	d122      	bne.n	801785c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	68db      	ldr	r3, [r3, #12]
 801781c:	f003 0304 	and.w	r3, r3, #4
 8017820:	2b04      	cmp	r3, #4
 8017822:	d11b      	bne.n	801785c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f06f 0204 	mvn.w	r2, #4
 801782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2202      	movs	r2, #2
 8017832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	699b      	ldr	r3, [r3, #24]
 801783a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801783e:	2b00      	cmp	r3, #0
 8017840:	d003      	beq.n	801784a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f000 fb8e 	bl	8017f64 <HAL_TIM_IC_CaptureCallback>
 8017848:	e005      	b.n	8017856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f000 fb80 	bl	8017f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 fb91 	bl	8017f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2200      	movs	r2, #0
 801785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	691b      	ldr	r3, [r3, #16]
 8017862:	f003 0308 	and.w	r3, r3, #8
 8017866:	2b08      	cmp	r3, #8
 8017868:	d122      	bne.n	80178b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	f003 0308 	and.w	r3, r3, #8
 8017874:	2b08      	cmp	r3, #8
 8017876:	d11b      	bne.n	80178b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	f06f 0208 	mvn.w	r2, #8
 8017880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2204      	movs	r2, #4
 8017886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	69db      	ldr	r3, [r3, #28]
 801788e:	f003 0303 	and.w	r3, r3, #3
 8017892:	2b00      	cmp	r3, #0
 8017894:	d003      	beq.n	801789e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f000 fb64 	bl	8017f64 <HAL_TIM_IC_CaptureCallback>
 801789c:	e005      	b.n	80178aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f000 fb56 	bl	8017f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f000 fb67 	bl	8017f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2200      	movs	r2, #0
 80178ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	691b      	ldr	r3, [r3, #16]
 80178b6:	f003 0310 	and.w	r3, r3, #16
 80178ba:	2b10      	cmp	r3, #16
 80178bc:	d122      	bne.n	8017904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	68db      	ldr	r3, [r3, #12]
 80178c4:	f003 0310 	and.w	r3, r3, #16
 80178c8:	2b10      	cmp	r3, #16
 80178ca:	d11b      	bne.n	8017904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f06f 0210 	mvn.w	r2, #16
 80178d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2208      	movs	r2, #8
 80178da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	69db      	ldr	r3, [r3, #28]
 80178e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d003      	beq.n	80178f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f000 fb3a 	bl	8017f64 <HAL_TIM_IC_CaptureCallback>
 80178f0:	e005      	b.n	80178fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f000 fb2c 	bl	8017f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f000 fb3d 	bl	8017f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	2200      	movs	r2, #0
 8017902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	691b      	ldr	r3, [r3, #16]
 801790a:	f003 0301 	and.w	r3, r3, #1
 801790e:	2b01      	cmp	r3, #1
 8017910:	d10e      	bne.n	8017930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	68db      	ldr	r3, [r3, #12]
 8017918:	f003 0301 	and.w	r3, r3, #1
 801791c:	2b01      	cmp	r3, #1
 801791e:	d107      	bne.n	8017930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	f06f 0201 	mvn.w	r2, #1
 8017928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f000 fb06 	bl	8017f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	691b      	ldr	r3, [r3, #16]
 8017936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801793a:	2b80      	cmp	r3, #128	; 0x80
 801793c:	d10e      	bne.n	801795c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	68db      	ldr	r3, [r3, #12]
 8017944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017948:	2b80      	cmp	r3, #128	; 0x80
 801794a:	d107      	bne.n	801795c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8017954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f001 faae 	bl	8018eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	691b      	ldr	r3, [r3, #16]
 8017962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801796a:	d10e      	bne.n	801798a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	68db      	ldr	r3, [r3, #12]
 8017972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017976:	2b80      	cmp	r3, #128	; 0x80
 8017978:	d107      	bne.n	801798a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f001 faa1 	bl	8018ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	691b      	ldr	r3, [r3, #16]
 8017990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017994:	2b40      	cmp	r3, #64	; 0x40
 8017996:	d10e      	bne.n	80179b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	68db      	ldr	r3, [r3, #12]
 801799e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179a2:	2b40      	cmp	r3, #64	; 0x40
 80179a4:	d107      	bne.n	80179b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80179ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f000 faeb 	bl	8017f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	691b      	ldr	r3, [r3, #16]
 80179bc:	f003 0320 	and.w	r3, r3, #32
 80179c0:	2b20      	cmp	r3, #32
 80179c2:	d10e      	bne.n	80179e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	f003 0320 	and.w	r3, r3, #32
 80179ce:	2b20      	cmp	r3, #32
 80179d0:	d107      	bne.n	80179e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	f06f 0220 	mvn.w	r2, #32
 80179da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f001 fa61 	bl	8018ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80179e2:	bf00      	nop
 80179e4:	3708      	adds	r7, #8
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}

080179ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b086      	sub	sp, #24
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	60f8      	str	r0, [r7, #12]
 80179f2:	60b9      	str	r1, [r7, #8]
 80179f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80179f6:	2300      	movs	r3, #0
 80179f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d101      	bne.n	8017a08 <HAL_TIM_IC_ConfigChannel+0x1e>
 8017a04:	2302      	movs	r3, #2
 8017a06:	e088      	b.n	8017b1a <HAL_TIM_IC_ConfigChannel+0x130>
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d11b      	bne.n	8017a4e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	6818      	ldr	r0, [r3, #0]
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	6819      	ldr	r1, [r3, #0]
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	685a      	ldr	r2, [r3, #4]
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	68db      	ldr	r3, [r3, #12]
 8017a26:	f000 fe37 	bl	8018698 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	699a      	ldr	r2, [r3, #24]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f022 020c 	bic.w	r2, r2, #12
 8017a38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	6999      	ldr	r1, [r3, #24]
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	689a      	ldr	r2, [r3, #8]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	430a      	orrs	r2, r1
 8017a4a:	619a      	str	r2, [r3, #24]
 8017a4c:	e060      	b.n	8017b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2b04      	cmp	r3, #4
 8017a52:	d11c      	bne.n	8017a8e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	6818      	ldr	r0, [r3, #0]
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	6819      	ldr	r1, [r3, #0]
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	685a      	ldr	r2, [r3, #4]
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	f000 fec7 	bl	80187f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	699a      	ldr	r2, [r3, #24]
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8017a76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	6999      	ldr	r1, [r3, #24]
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	021a      	lsls	r2, r3, #8
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	430a      	orrs	r2, r1
 8017a8a:	619a      	str	r2, [r3, #24]
 8017a8c:	e040      	b.n	8017b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2b08      	cmp	r3, #8
 8017a92:	d11b      	bne.n	8017acc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	6818      	ldr	r0, [r3, #0]
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	6819      	ldr	r1, [r3, #0]
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	685a      	ldr	r2, [r3, #4]
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	68db      	ldr	r3, [r3, #12]
 8017aa4:	f000 ff14 	bl	80188d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	69da      	ldr	r2, [r3, #28]
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	f022 020c 	bic.w	r2, r2, #12
 8017ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	69d9      	ldr	r1, [r3, #28]
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	689a      	ldr	r2, [r3, #8]
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	430a      	orrs	r2, r1
 8017ac8:	61da      	str	r2, [r3, #28]
 8017aca:	e021      	b.n	8017b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2b0c      	cmp	r3, #12
 8017ad0:	d11c      	bne.n	8017b0c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	6818      	ldr	r0, [r3, #0]
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	6819      	ldr	r1, [r3, #0]
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	685a      	ldr	r2, [r3, #4]
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	f000 ff31 	bl	8018948 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	69da      	ldr	r2, [r3, #28]
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8017af4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	69d9      	ldr	r1, [r3, #28]
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	689b      	ldr	r3, [r3, #8]
 8017b00:	021a      	lsls	r2, r3, #8
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	430a      	orrs	r2, r1
 8017b08:	61da      	str	r2, [r3, #28]
 8017b0a:	e001      	b.n	8017b10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8017b0c:	2301      	movs	r3, #1
 8017b0e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2200      	movs	r2, #0
 8017b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8017b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3718      	adds	r7, #24
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
	...

08017b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b086      	sub	sp, #24
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017b30:	2300      	movs	r3, #0
 8017b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b3a:	2b01      	cmp	r3, #1
 8017b3c:	d101      	bne.n	8017b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8017b3e:	2302      	movs	r3, #2
 8017b40:	e0ff      	b.n	8017d42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	2201      	movs	r2, #1
 8017b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	2b14      	cmp	r3, #20
 8017b4e:	f200 80f0 	bhi.w	8017d32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8017b52:	a201      	add	r2, pc, #4	; (adr r2, 8017b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8017b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b58:	08017bad 	.word	0x08017bad
 8017b5c:	08017d33 	.word	0x08017d33
 8017b60:	08017d33 	.word	0x08017d33
 8017b64:	08017d33 	.word	0x08017d33
 8017b68:	08017bed 	.word	0x08017bed
 8017b6c:	08017d33 	.word	0x08017d33
 8017b70:	08017d33 	.word	0x08017d33
 8017b74:	08017d33 	.word	0x08017d33
 8017b78:	08017c2f 	.word	0x08017c2f
 8017b7c:	08017d33 	.word	0x08017d33
 8017b80:	08017d33 	.word	0x08017d33
 8017b84:	08017d33 	.word	0x08017d33
 8017b88:	08017c6f 	.word	0x08017c6f
 8017b8c:	08017d33 	.word	0x08017d33
 8017b90:	08017d33 	.word	0x08017d33
 8017b94:	08017d33 	.word	0x08017d33
 8017b98:	08017cb1 	.word	0x08017cb1
 8017b9c:	08017d33 	.word	0x08017d33
 8017ba0:	08017d33 	.word	0x08017d33
 8017ba4:	08017d33 	.word	0x08017d33
 8017ba8:	08017cf1 	.word	0x08017cf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	68b9      	ldr	r1, [r7, #8]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f000 fa9a 	bl	80180ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	699a      	ldr	r2, [r3, #24]
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f042 0208 	orr.w	r2, r2, #8
 8017bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	699a      	ldr	r2, [r3, #24]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	f022 0204 	bic.w	r2, r2, #4
 8017bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	6999      	ldr	r1, [r3, #24]
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	691a      	ldr	r2, [r3, #16]
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	430a      	orrs	r2, r1
 8017be8:	619a      	str	r2, [r3, #24]
      break;
 8017bea:	e0a5      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	68b9      	ldr	r1, [r7, #8]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f000 fb0a 	bl	801820c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	699a      	ldr	r2, [r3, #24]
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	699a      	ldr	r2, [r3, #24]
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	6999      	ldr	r1, [r3, #24]
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	691b      	ldr	r3, [r3, #16]
 8017c22:	021a      	lsls	r2, r3, #8
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	430a      	orrs	r2, r1
 8017c2a:	619a      	str	r2, [r3, #24]
      break;
 8017c2c:	e084      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	68b9      	ldr	r1, [r7, #8]
 8017c34:	4618      	mov	r0, r3
 8017c36:	f000 fb73 	bl	8018320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	69da      	ldr	r2, [r3, #28]
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	f042 0208 	orr.w	r2, r2, #8
 8017c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	69da      	ldr	r2, [r3, #28]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f022 0204 	bic.w	r2, r2, #4
 8017c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	69d9      	ldr	r1, [r3, #28]
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	691a      	ldr	r2, [r3, #16]
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	430a      	orrs	r2, r1
 8017c6a:	61da      	str	r2, [r3, #28]
      break;
 8017c6c:	e064      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	68b9      	ldr	r1, [r7, #8]
 8017c74:	4618      	mov	r0, r3
 8017c76:	f000 fbdb 	bl	8018430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	69da      	ldr	r2, [r3, #28]
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	69da      	ldr	r2, [r3, #28]
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	69d9      	ldr	r1, [r3, #28]
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	691b      	ldr	r3, [r3, #16]
 8017ca4:	021a      	lsls	r2, r3, #8
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	430a      	orrs	r2, r1
 8017cac:	61da      	str	r2, [r3, #28]
      break;
 8017cae:	e043      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	68b9      	ldr	r1, [r7, #8]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f000 fc24 	bl	8018504 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	f042 0208 	orr.w	r2, r2, #8
 8017cca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	f022 0204 	bic.w	r2, r2, #4
 8017cda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	691a      	ldr	r2, [r3, #16]
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	430a      	orrs	r2, r1
 8017cec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017cee:	e023      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	68b9      	ldr	r1, [r7, #8]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f000 fc68 	bl	80185cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017d0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	691b      	ldr	r3, [r3, #16]
 8017d26:	021a      	lsls	r2, r3, #8
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	430a      	orrs	r2, r1
 8017d2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8017d30:	e002      	b.n	8017d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8017d32:	2301      	movs	r3, #1
 8017d34:	75fb      	strb	r3, [r7, #23]
      break;
 8017d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8017d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d42:	4618      	mov	r0, r3
 8017d44:	3718      	adds	r7, #24
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
 8017d4a:	bf00      	nop

08017d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b084      	sub	sp, #16
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017d56:	2300      	movs	r3, #0
 8017d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d101      	bne.n	8017d68 <HAL_TIM_ConfigClockSource+0x1c>
 8017d64:	2302      	movs	r3, #2
 8017d66:	e0dc      	b.n	8017f22 <HAL_TIM_ConfigClockSource+0x1d6>
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2201      	movs	r2, #1
 8017d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2202      	movs	r2, #2
 8017d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	689b      	ldr	r3, [r3, #8]
 8017d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8017d80:	68ba      	ldr	r2, [r7, #8]
 8017d82:	4b6a      	ldr	r3, [pc, #424]	; (8017f2c <HAL_TIM_ConfigClockSource+0x1e0>)
 8017d84:	4013      	ands	r3, r2
 8017d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	68ba      	ldr	r2, [r7, #8]
 8017d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	4a64      	ldr	r2, [pc, #400]	; (8017f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	f000 80a9 	beq.w	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017da4:	4a62      	ldr	r2, [pc, #392]	; (8017f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8017da6:	4293      	cmp	r3, r2
 8017da8:	f200 80ae 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017dac:	4a61      	ldr	r2, [pc, #388]	; (8017f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8017dae:	4293      	cmp	r3, r2
 8017db0:	f000 80a1 	beq.w	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017db4:	4a5f      	ldr	r2, [pc, #380]	; (8017f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	f200 80a6 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017dbc:	4a5e      	ldr	r2, [pc, #376]	; (8017f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	f000 8099 	beq.w	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017dc4:	4a5c      	ldr	r2, [pc, #368]	; (8017f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8017dc6:	4293      	cmp	r3, r2
 8017dc8:	f200 809e 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017dcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8017dd0:	f000 8091 	beq.w	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017dd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8017dd8:	f200 8096 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017de0:	f000 8089 	beq.w	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017de8:	f200 808e 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017df0:	d03e      	beq.n	8017e70 <HAL_TIM_ConfigClockSource+0x124>
 8017df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017df6:	f200 8087 	bhi.w	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017dfe:	f000 8086 	beq.w	8017f0e <HAL_TIM_ConfigClockSource+0x1c2>
 8017e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e06:	d87f      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e08:	2b70      	cmp	r3, #112	; 0x70
 8017e0a:	d01a      	beq.n	8017e42 <HAL_TIM_ConfigClockSource+0xf6>
 8017e0c:	2b70      	cmp	r3, #112	; 0x70
 8017e0e:	d87b      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e10:	2b60      	cmp	r3, #96	; 0x60
 8017e12:	d050      	beq.n	8017eb6 <HAL_TIM_ConfigClockSource+0x16a>
 8017e14:	2b60      	cmp	r3, #96	; 0x60
 8017e16:	d877      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e18:	2b50      	cmp	r3, #80	; 0x50
 8017e1a:	d03c      	beq.n	8017e96 <HAL_TIM_ConfigClockSource+0x14a>
 8017e1c:	2b50      	cmp	r3, #80	; 0x50
 8017e1e:	d873      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e20:	2b40      	cmp	r3, #64	; 0x40
 8017e22:	d058      	beq.n	8017ed6 <HAL_TIM_ConfigClockSource+0x18a>
 8017e24:	2b40      	cmp	r3, #64	; 0x40
 8017e26:	d86f      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e28:	2b30      	cmp	r3, #48	; 0x30
 8017e2a:	d064      	beq.n	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017e2c:	2b30      	cmp	r3, #48	; 0x30
 8017e2e:	d86b      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e30:	2b20      	cmp	r3, #32
 8017e32:	d060      	beq.n	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017e34:	2b20      	cmp	r3, #32
 8017e36:	d867      	bhi.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d05c      	beq.n	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017e3c:	2b10      	cmp	r3, #16
 8017e3e:	d05a      	beq.n	8017ef6 <HAL_TIM_ConfigClockSource+0x1aa>
 8017e40:	e062      	b.n	8017f08 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	6818      	ldr	r0, [r3, #0]
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	6899      	ldr	r1, [r3, #8]
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	685a      	ldr	r2, [r3, #4]
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	f000 fdd5 	bl	8018a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	689b      	ldr	r3, [r3, #8]
 8017e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8017e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	68ba      	ldr	r2, [r7, #8]
 8017e6c:	609a      	str	r2, [r3, #8]
      break;
 8017e6e:	e04f      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	6899      	ldr	r1, [r3, #8]
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	685a      	ldr	r2, [r3, #4]
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	68db      	ldr	r3, [r3, #12]
 8017e80:	f000 fdbe 	bl	8018a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	689a      	ldr	r2, [r3, #8]
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017e92:	609a      	str	r2, [r3, #8]
      break;
 8017e94:	e03c      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6818      	ldr	r0, [r3, #0]
 8017e9a:	683b      	ldr	r3, [r7, #0]
 8017e9c:	6859      	ldr	r1, [r3, #4]
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	68db      	ldr	r3, [r3, #12]
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	f000 fc78 	bl	8018798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	2150      	movs	r1, #80	; 0x50
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f000 fd88 	bl	80189c4 <TIM_ITRx_SetConfig>
      break;
 8017eb4:	e02c      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	6818      	ldr	r0, [r3, #0]
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	6859      	ldr	r1, [r3, #4]
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	68db      	ldr	r3, [r3, #12]
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	f000 fcd4 	bl	8018870 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	2160      	movs	r1, #96	; 0x60
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f000 fd78 	bl	80189c4 <TIM_ITRx_SetConfig>
      break;
 8017ed4:	e01c      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	6859      	ldr	r1, [r3, #4]
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	68db      	ldr	r3, [r3, #12]
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	f000 fc58 	bl	8018798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2140      	movs	r1, #64	; 0x40
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f000 fd68 	bl	80189c4 <TIM_ITRx_SetConfig>
      break;
 8017ef4:	e00c      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681a      	ldr	r2, [r3, #0]
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	4619      	mov	r1, r3
 8017f00:	4610      	mov	r0, r2
 8017f02:	f000 fd5f 	bl	80189c4 <TIM_ITRx_SetConfig>
      break;
 8017f06:	e003      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8017f08:	2301      	movs	r3, #1
 8017f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8017f0c:	e000      	b.n	8017f10 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8017f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	2201      	movs	r2, #1
 8017f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8017f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3710      	adds	r7, #16
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	ffceff88 	.word	0xffceff88
 8017f30:	00100040 	.word	0x00100040
 8017f34:	00100030 	.word	0x00100030
 8017f38:	00100020 	.word	0x00100020

08017f3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8017f44:	bf00      	nop
 8017f46:	370c      	adds	r7, #12
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017f50:	b480      	push	{r7}
 8017f52:	b083      	sub	sp, #12
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017f58:	bf00      	nop
 8017f5a:	370c      	adds	r7, #12
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f62:	4770      	bx	lr

08017f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017f64:	b480      	push	{r7}
 8017f66:	b083      	sub	sp, #12
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017f6c:	bf00      	nop
 8017f6e:	370c      	adds	r7, #12
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr

08017f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017f78:	b480      	push	{r7}
 8017f7a:	b083      	sub	sp, #12
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017f80:	bf00      	nop
 8017f82:	370c      	adds	r7, #12
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr

08017f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017f94:	bf00      	nop
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr

08017fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b085      	sub	sp, #20
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	4a44      	ldr	r2, [pc, #272]	; (80180c4 <TIM_Base_SetConfig+0x124>)
 8017fb4:	4293      	cmp	r3, r2
 8017fb6:	d013      	beq.n	8017fe0 <TIM_Base_SetConfig+0x40>
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017fbe:	d00f      	beq.n	8017fe0 <TIM_Base_SetConfig+0x40>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	4a41      	ldr	r2, [pc, #260]	; (80180c8 <TIM_Base_SetConfig+0x128>)
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	d00b      	beq.n	8017fe0 <TIM_Base_SetConfig+0x40>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	4a40      	ldr	r2, [pc, #256]	; (80180cc <TIM_Base_SetConfig+0x12c>)
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d007      	beq.n	8017fe0 <TIM_Base_SetConfig+0x40>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	4a3f      	ldr	r2, [pc, #252]	; (80180d0 <TIM_Base_SetConfig+0x130>)
 8017fd4:	4293      	cmp	r3, r2
 8017fd6:	d003      	beq.n	8017fe0 <TIM_Base_SetConfig+0x40>
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	4a3e      	ldr	r2, [pc, #248]	; (80180d4 <TIM_Base_SetConfig+0x134>)
 8017fdc:	4293      	cmp	r3, r2
 8017fde:	d108      	bne.n	8017ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	68fa      	ldr	r2, [r7, #12]
 8017fee:	4313      	orrs	r3, r2
 8017ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	4a33      	ldr	r2, [pc, #204]	; (80180c4 <TIM_Base_SetConfig+0x124>)
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d027      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018000:	d023      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	4a30      	ldr	r2, [pc, #192]	; (80180c8 <TIM_Base_SetConfig+0x128>)
 8018006:	4293      	cmp	r3, r2
 8018008:	d01f      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	4a2f      	ldr	r2, [pc, #188]	; (80180cc <TIM_Base_SetConfig+0x12c>)
 801800e:	4293      	cmp	r3, r2
 8018010:	d01b      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	4a2e      	ldr	r2, [pc, #184]	; (80180d0 <TIM_Base_SetConfig+0x130>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d017      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	4a2d      	ldr	r2, [pc, #180]	; (80180d4 <TIM_Base_SetConfig+0x134>)
 801801e:	4293      	cmp	r3, r2
 8018020:	d013      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	4a2c      	ldr	r2, [pc, #176]	; (80180d8 <TIM_Base_SetConfig+0x138>)
 8018026:	4293      	cmp	r3, r2
 8018028:	d00f      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	4a2b      	ldr	r2, [pc, #172]	; (80180dc <TIM_Base_SetConfig+0x13c>)
 801802e:	4293      	cmp	r3, r2
 8018030:	d00b      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4a2a      	ldr	r2, [pc, #168]	; (80180e0 <TIM_Base_SetConfig+0x140>)
 8018036:	4293      	cmp	r3, r2
 8018038:	d007      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	4a29      	ldr	r2, [pc, #164]	; (80180e4 <TIM_Base_SetConfig+0x144>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d003      	beq.n	801804a <TIM_Base_SetConfig+0xaa>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4a28      	ldr	r2, [pc, #160]	; (80180e8 <TIM_Base_SetConfig+0x148>)
 8018046:	4293      	cmp	r3, r2
 8018048:	d108      	bne.n	801805c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018052:	683b      	ldr	r3, [r7, #0]
 8018054:	68db      	ldr	r3, [r3, #12]
 8018056:	68fa      	ldr	r2, [r7, #12]
 8018058:	4313      	orrs	r3, r2
 801805a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	695b      	ldr	r3, [r3, #20]
 8018066:	4313      	orrs	r3, r2
 8018068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	68fa      	ldr	r2, [r7, #12]
 801806e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	689a      	ldr	r2, [r3, #8]
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	681a      	ldr	r2, [r3, #0]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	4a10      	ldr	r2, [pc, #64]	; (80180c4 <TIM_Base_SetConfig+0x124>)
 8018084:	4293      	cmp	r3, r2
 8018086:	d00f      	beq.n	80180a8 <TIM_Base_SetConfig+0x108>
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	4a12      	ldr	r2, [pc, #72]	; (80180d4 <TIM_Base_SetConfig+0x134>)
 801808c:	4293      	cmp	r3, r2
 801808e:	d00b      	beq.n	80180a8 <TIM_Base_SetConfig+0x108>
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	4a11      	ldr	r2, [pc, #68]	; (80180d8 <TIM_Base_SetConfig+0x138>)
 8018094:	4293      	cmp	r3, r2
 8018096:	d007      	beq.n	80180a8 <TIM_Base_SetConfig+0x108>
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	4a10      	ldr	r2, [pc, #64]	; (80180dc <TIM_Base_SetConfig+0x13c>)
 801809c:	4293      	cmp	r3, r2
 801809e:	d003      	beq.n	80180a8 <TIM_Base_SetConfig+0x108>
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	4a0f      	ldr	r2, [pc, #60]	; (80180e0 <TIM_Base_SetConfig+0x140>)
 80180a4:	4293      	cmp	r3, r2
 80180a6:	d103      	bne.n	80180b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	691a      	ldr	r2, [r3, #16]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2201      	movs	r2, #1
 80180b4:	615a      	str	r2, [r3, #20]
}
 80180b6:	bf00      	nop
 80180b8:	3714      	adds	r7, #20
 80180ba:	46bd      	mov	sp, r7
 80180bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop
 80180c4:	40010000 	.word	0x40010000
 80180c8:	40000400 	.word	0x40000400
 80180cc:	40000800 	.word	0x40000800
 80180d0:	40000c00 	.word	0x40000c00
 80180d4:	40010400 	.word	0x40010400
 80180d8:	40014000 	.word	0x40014000
 80180dc:	40014400 	.word	0x40014400
 80180e0:	40014800 	.word	0x40014800
 80180e4:	4000e000 	.word	0x4000e000
 80180e8:	4000e400 	.word	0x4000e400

080180ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b087      	sub	sp, #28
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6a1b      	ldr	r3, [r3, #32]
 80180fa:	f023 0201 	bic.w	r2, r3, #1
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6a1b      	ldr	r3, [r3, #32]
 8018106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	699b      	ldr	r3, [r3, #24]
 8018112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8018114:	68fa      	ldr	r2, [r7, #12]
 8018116:	4b37      	ldr	r3, [pc, #220]	; (80181f4 <TIM_OC1_SetConfig+0x108>)
 8018118:	4013      	ands	r3, r2
 801811a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	f023 0303 	bic.w	r3, r3, #3
 8018122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	68fa      	ldr	r2, [r7, #12]
 801812a:	4313      	orrs	r3, r2
 801812c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	f023 0302 	bic.w	r3, r3, #2
 8018134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	689b      	ldr	r3, [r3, #8]
 801813a:	697a      	ldr	r2, [r7, #20]
 801813c:	4313      	orrs	r3, r2
 801813e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	4a2d      	ldr	r2, [pc, #180]	; (80181f8 <TIM_OC1_SetConfig+0x10c>)
 8018144:	4293      	cmp	r3, r2
 8018146:	d00f      	beq.n	8018168 <TIM_OC1_SetConfig+0x7c>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	4a2c      	ldr	r2, [pc, #176]	; (80181fc <TIM_OC1_SetConfig+0x110>)
 801814c:	4293      	cmp	r3, r2
 801814e:	d00b      	beq.n	8018168 <TIM_OC1_SetConfig+0x7c>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	4a2b      	ldr	r2, [pc, #172]	; (8018200 <TIM_OC1_SetConfig+0x114>)
 8018154:	4293      	cmp	r3, r2
 8018156:	d007      	beq.n	8018168 <TIM_OC1_SetConfig+0x7c>
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	4a2a      	ldr	r2, [pc, #168]	; (8018204 <TIM_OC1_SetConfig+0x118>)
 801815c:	4293      	cmp	r3, r2
 801815e:	d003      	beq.n	8018168 <TIM_OC1_SetConfig+0x7c>
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	4a29      	ldr	r2, [pc, #164]	; (8018208 <TIM_OC1_SetConfig+0x11c>)
 8018164:	4293      	cmp	r3, r2
 8018166:	d10c      	bne.n	8018182 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	f023 0308 	bic.w	r3, r3, #8
 801816e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	68db      	ldr	r3, [r3, #12]
 8018174:	697a      	ldr	r2, [r7, #20]
 8018176:	4313      	orrs	r3, r2
 8018178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	f023 0304 	bic.w	r3, r3, #4
 8018180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	4a1c      	ldr	r2, [pc, #112]	; (80181f8 <TIM_OC1_SetConfig+0x10c>)
 8018186:	4293      	cmp	r3, r2
 8018188:	d00f      	beq.n	80181aa <TIM_OC1_SetConfig+0xbe>
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	4a1b      	ldr	r2, [pc, #108]	; (80181fc <TIM_OC1_SetConfig+0x110>)
 801818e:	4293      	cmp	r3, r2
 8018190:	d00b      	beq.n	80181aa <TIM_OC1_SetConfig+0xbe>
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	4a1a      	ldr	r2, [pc, #104]	; (8018200 <TIM_OC1_SetConfig+0x114>)
 8018196:	4293      	cmp	r3, r2
 8018198:	d007      	beq.n	80181aa <TIM_OC1_SetConfig+0xbe>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	4a19      	ldr	r2, [pc, #100]	; (8018204 <TIM_OC1_SetConfig+0x118>)
 801819e:	4293      	cmp	r3, r2
 80181a0:	d003      	beq.n	80181aa <TIM_OC1_SetConfig+0xbe>
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	4a18      	ldr	r2, [pc, #96]	; (8018208 <TIM_OC1_SetConfig+0x11c>)
 80181a6:	4293      	cmp	r3, r2
 80181a8:	d111      	bne.n	80181ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80181b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80181b2:	693b      	ldr	r3, [r7, #16]
 80181b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80181b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	695b      	ldr	r3, [r3, #20]
 80181be:	693a      	ldr	r2, [r7, #16]
 80181c0:	4313      	orrs	r3, r2
 80181c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	699b      	ldr	r3, [r3, #24]
 80181c8:	693a      	ldr	r2, [r7, #16]
 80181ca:	4313      	orrs	r3, r2
 80181cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	693a      	ldr	r2, [r7, #16]
 80181d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	68fa      	ldr	r2, [r7, #12]
 80181d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	685a      	ldr	r2, [r3, #4]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	697a      	ldr	r2, [r7, #20]
 80181e6:	621a      	str	r2, [r3, #32]
}
 80181e8:	bf00      	nop
 80181ea:	371c      	adds	r7, #28
 80181ec:	46bd      	mov	sp, r7
 80181ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f2:	4770      	bx	lr
 80181f4:	fffeff8f 	.word	0xfffeff8f
 80181f8:	40010000 	.word	0x40010000
 80181fc:	40010400 	.word	0x40010400
 8018200:	40014000 	.word	0x40014000
 8018204:	40014400 	.word	0x40014400
 8018208:	40014800 	.word	0x40014800

0801820c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801820c:	b480      	push	{r7}
 801820e:	b087      	sub	sp, #28
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	6a1b      	ldr	r3, [r3, #32]
 801821a:	f023 0210 	bic.w	r2, r3, #16
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6a1b      	ldr	r3, [r3, #32]
 8018226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	699b      	ldr	r3, [r3, #24]
 8018232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8018234:	68fa      	ldr	r2, [r7, #12]
 8018236:	4b34      	ldr	r3, [pc, #208]	; (8018308 <TIM_OC2_SetConfig+0xfc>)
 8018238:	4013      	ands	r3, r2
 801823a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018244:	683b      	ldr	r3, [r7, #0]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	021b      	lsls	r3, r3, #8
 801824a:	68fa      	ldr	r2, [r7, #12]
 801824c:	4313      	orrs	r3, r2
 801824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8018250:	697b      	ldr	r3, [r7, #20]
 8018252:	f023 0320 	bic.w	r3, r3, #32
 8018256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	689b      	ldr	r3, [r3, #8]
 801825c:	011b      	lsls	r3, r3, #4
 801825e:	697a      	ldr	r2, [r7, #20]
 8018260:	4313      	orrs	r3, r2
 8018262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	4a29      	ldr	r2, [pc, #164]	; (801830c <TIM_OC2_SetConfig+0x100>)
 8018268:	4293      	cmp	r3, r2
 801826a:	d003      	beq.n	8018274 <TIM_OC2_SetConfig+0x68>
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	4a28      	ldr	r2, [pc, #160]	; (8018310 <TIM_OC2_SetConfig+0x104>)
 8018270:	4293      	cmp	r3, r2
 8018272:	d10d      	bne.n	8018290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801827a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	68db      	ldr	r3, [r3, #12]
 8018280:	011b      	lsls	r3, r3, #4
 8018282:	697a      	ldr	r2, [r7, #20]
 8018284:	4313      	orrs	r3, r2
 8018286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801828e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	4a1e      	ldr	r2, [pc, #120]	; (801830c <TIM_OC2_SetConfig+0x100>)
 8018294:	4293      	cmp	r3, r2
 8018296:	d00f      	beq.n	80182b8 <TIM_OC2_SetConfig+0xac>
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	4a1d      	ldr	r2, [pc, #116]	; (8018310 <TIM_OC2_SetConfig+0x104>)
 801829c:	4293      	cmp	r3, r2
 801829e:	d00b      	beq.n	80182b8 <TIM_OC2_SetConfig+0xac>
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	4a1c      	ldr	r2, [pc, #112]	; (8018314 <TIM_OC2_SetConfig+0x108>)
 80182a4:	4293      	cmp	r3, r2
 80182a6:	d007      	beq.n	80182b8 <TIM_OC2_SetConfig+0xac>
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	4a1b      	ldr	r2, [pc, #108]	; (8018318 <TIM_OC2_SetConfig+0x10c>)
 80182ac:	4293      	cmp	r3, r2
 80182ae:	d003      	beq.n	80182b8 <TIM_OC2_SetConfig+0xac>
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	4a1a      	ldr	r2, [pc, #104]	; (801831c <TIM_OC2_SetConfig+0x110>)
 80182b4:	4293      	cmp	r3, r2
 80182b6:	d113      	bne.n	80182e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80182be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80182c0:	693b      	ldr	r3, [r7, #16]
 80182c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80182c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	695b      	ldr	r3, [r3, #20]
 80182cc:	009b      	lsls	r3, r3, #2
 80182ce:	693a      	ldr	r2, [r7, #16]
 80182d0:	4313      	orrs	r3, r2
 80182d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	699b      	ldr	r3, [r3, #24]
 80182d8:	009b      	lsls	r3, r3, #2
 80182da:	693a      	ldr	r2, [r7, #16]
 80182dc:	4313      	orrs	r3, r2
 80182de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	693a      	ldr	r2, [r7, #16]
 80182e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	68fa      	ldr	r2, [r7, #12]
 80182ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	685a      	ldr	r2, [r3, #4]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	697a      	ldr	r2, [r7, #20]
 80182f8:	621a      	str	r2, [r3, #32]
}
 80182fa:	bf00      	nop
 80182fc:	371c      	adds	r7, #28
 80182fe:	46bd      	mov	sp, r7
 8018300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018304:	4770      	bx	lr
 8018306:	bf00      	nop
 8018308:	feff8fff 	.word	0xfeff8fff
 801830c:	40010000 	.word	0x40010000
 8018310:	40010400 	.word	0x40010400
 8018314:	40014000 	.word	0x40014000
 8018318:	40014400 	.word	0x40014400
 801831c:	40014800 	.word	0x40014800

08018320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018320:	b480      	push	{r7}
 8018322:	b087      	sub	sp, #28
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6a1b      	ldr	r3, [r3, #32]
 801832e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6a1b      	ldr	r3, [r3, #32]
 801833a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	69db      	ldr	r3, [r3, #28]
 8018346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8018348:	68fa      	ldr	r2, [r7, #12]
 801834a:	4b33      	ldr	r3, [pc, #204]	; (8018418 <TIM_OC3_SetConfig+0xf8>)
 801834c:	4013      	ands	r3, r2
 801834e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	f023 0303 	bic.w	r3, r3, #3
 8018356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	68fa      	ldr	r2, [r7, #12]
 801835e:	4313      	orrs	r3, r2
 8018360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8018368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	689b      	ldr	r3, [r3, #8]
 801836e:	021b      	lsls	r3, r3, #8
 8018370:	697a      	ldr	r2, [r7, #20]
 8018372:	4313      	orrs	r3, r2
 8018374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	4a28      	ldr	r2, [pc, #160]	; (801841c <TIM_OC3_SetConfig+0xfc>)
 801837a:	4293      	cmp	r3, r2
 801837c:	d003      	beq.n	8018386 <TIM_OC3_SetConfig+0x66>
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	4a27      	ldr	r2, [pc, #156]	; (8018420 <TIM_OC3_SetConfig+0x100>)
 8018382:	4293      	cmp	r3, r2
 8018384:	d10d      	bne.n	80183a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8018386:	697b      	ldr	r3, [r7, #20]
 8018388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801838c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	68db      	ldr	r3, [r3, #12]
 8018392:	021b      	lsls	r3, r3, #8
 8018394:	697a      	ldr	r2, [r7, #20]
 8018396:	4313      	orrs	r3, r2
 8018398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80183a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	4a1d      	ldr	r2, [pc, #116]	; (801841c <TIM_OC3_SetConfig+0xfc>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d00f      	beq.n	80183ca <TIM_OC3_SetConfig+0xaa>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	4a1c      	ldr	r2, [pc, #112]	; (8018420 <TIM_OC3_SetConfig+0x100>)
 80183ae:	4293      	cmp	r3, r2
 80183b0:	d00b      	beq.n	80183ca <TIM_OC3_SetConfig+0xaa>
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	4a1b      	ldr	r2, [pc, #108]	; (8018424 <TIM_OC3_SetConfig+0x104>)
 80183b6:	4293      	cmp	r3, r2
 80183b8:	d007      	beq.n	80183ca <TIM_OC3_SetConfig+0xaa>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	4a1a      	ldr	r2, [pc, #104]	; (8018428 <TIM_OC3_SetConfig+0x108>)
 80183be:	4293      	cmp	r3, r2
 80183c0:	d003      	beq.n	80183ca <TIM_OC3_SetConfig+0xaa>
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	4a19      	ldr	r2, [pc, #100]	; (801842c <TIM_OC3_SetConfig+0x10c>)
 80183c6:	4293      	cmp	r3, r2
 80183c8:	d113      	bne.n	80183f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80183ca:	693b      	ldr	r3, [r7, #16]
 80183cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80183d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80183d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	695b      	ldr	r3, [r3, #20]
 80183de:	011b      	lsls	r3, r3, #4
 80183e0:	693a      	ldr	r2, [r7, #16]
 80183e2:	4313      	orrs	r3, r2
 80183e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	011b      	lsls	r3, r3, #4
 80183ec:	693a      	ldr	r2, [r7, #16]
 80183ee:	4313      	orrs	r3, r2
 80183f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	693a      	ldr	r2, [r7, #16]
 80183f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	68fa      	ldr	r2, [r7, #12]
 80183fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	685a      	ldr	r2, [r3, #4]
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	697a      	ldr	r2, [r7, #20]
 801840a:	621a      	str	r2, [r3, #32]
}
 801840c:	bf00      	nop
 801840e:	371c      	adds	r7, #28
 8018410:	46bd      	mov	sp, r7
 8018412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018416:	4770      	bx	lr
 8018418:	fffeff8f 	.word	0xfffeff8f
 801841c:	40010000 	.word	0x40010000
 8018420:	40010400 	.word	0x40010400
 8018424:	40014000 	.word	0x40014000
 8018428:	40014400 	.word	0x40014400
 801842c:	40014800 	.word	0x40014800

08018430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018430:	b480      	push	{r7}
 8018432:	b087      	sub	sp, #28
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	6a1b      	ldr	r3, [r3, #32]
 801843e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	6a1b      	ldr	r3, [r3, #32]
 801844a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	69db      	ldr	r3, [r3, #28]
 8018456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8018458:	68fa      	ldr	r2, [r7, #12]
 801845a:	4b24      	ldr	r3, [pc, #144]	; (80184ec <TIM_OC4_SetConfig+0xbc>)
 801845c:	4013      	ands	r3, r2
 801845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	021b      	lsls	r3, r3, #8
 801846e:	68fa      	ldr	r2, [r7, #12]
 8018470:	4313      	orrs	r3, r2
 8018472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8018474:	693b      	ldr	r3, [r7, #16]
 8018476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801847a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801847c:	683b      	ldr	r3, [r7, #0]
 801847e:	689b      	ldr	r3, [r3, #8]
 8018480:	031b      	lsls	r3, r3, #12
 8018482:	693a      	ldr	r2, [r7, #16]
 8018484:	4313      	orrs	r3, r2
 8018486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	4a19      	ldr	r2, [pc, #100]	; (80184f0 <TIM_OC4_SetConfig+0xc0>)
 801848c:	4293      	cmp	r3, r2
 801848e:	d00f      	beq.n	80184b0 <TIM_OC4_SetConfig+0x80>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	4a18      	ldr	r2, [pc, #96]	; (80184f4 <TIM_OC4_SetConfig+0xc4>)
 8018494:	4293      	cmp	r3, r2
 8018496:	d00b      	beq.n	80184b0 <TIM_OC4_SetConfig+0x80>
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	4a17      	ldr	r2, [pc, #92]	; (80184f8 <TIM_OC4_SetConfig+0xc8>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d007      	beq.n	80184b0 <TIM_OC4_SetConfig+0x80>
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	4a16      	ldr	r2, [pc, #88]	; (80184fc <TIM_OC4_SetConfig+0xcc>)
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d003      	beq.n	80184b0 <TIM_OC4_SetConfig+0x80>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	4a15      	ldr	r2, [pc, #84]	; (8018500 <TIM_OC4_SetConfig+0xd0>)
 80184ac:	4293      	cmp	r3, r2
 80184ae:	d109      	bne.n	80184c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80184b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	695b      	ldr	r3, [r3, #20]
 80184bc:	019b      	lsls	r3, r3, #6
 80184be:	697a      	ldr	r2, [r7, #20]
 80184c0:	4313      	orrs	r3, r2
 80184c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	697a      	ldr	r2, [r7, #20]
 80184c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	68fa      	ldr	r2, [r7, #12]
 80184ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	685a      	ldr	r2, [r3, #4]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	693a      	ldr	r2, [r7, #16]
 80184dc:	621a      	str	r2, [r3, #32]
}
 80184de:	bf00      	nop
 80184e0:	371c      	adds	r7, #28
 80184e2:	46bd      	mov	sp, r7
 80184e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e8:	4770      	bx	lr
 80184ea:	bf00      	nop
 80184ec:	feff8fff 	.word	0xfeff8fff
 80184f0:	40010000 	.word	0x40010000
 80184f4:	40010400 	.word	0x40010400
 80184f8:	40014000 	.word	0x40014000
 80184fc:	40014400 	.word	0x40014400
 8018500:	40014800 	.word	0x40014800

08018504 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018504:	b480      	push	{r7}
 8018506:	b087      	sub	sp, #28
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
 801850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6a1b      	ldr	r3, [r3, #32]
 8018512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	6a1b      	ldr	r3, [r3, #32]
 801851e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	685b      	ldr	r3, [r3, #4]
 8018524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801852c:	68fa      	ldr	r2, [r7, #12]
 801852e:	4b21      	ldr	r3, [pc, #132]	; (80185b4 <TIM_OC5_SetConfig+0xb0>)
 8018530:	4013      	ands	r3, r2
 8018532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	68fa      	ldr	r2, [r7, #12]
 801853a:	4313      	orrs	r3, r2
 801853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8018544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	689b      	ldr	r3, [r3, #8]
 801854a:	041b      	lsls	r3, r3, #16
 801854c:	693a      	ldr	r2, [r7, #16]
 801854e:	4313      	orrs	r3, r2
 8018550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	4a18      	ldr	r2, [pc, #96]	; (80185b8 <TIM_OC5_SetConfig+0xb4>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d00f      	beq.n	801857a <TIM_OC5_SetConfig+0x76>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	4a17      	ldr	r2, [pc, #92]	; (80185bc <TIM_OC5_SetConfig+0xb8>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d00b      	beq.n	801857a <TIM_OC5_SetConfig+0x76>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	4a16      	ldr	r2, [pc, #88]	; (80185c0 <TIM_OC5_SetConfig+0xbc>)
 8018566:	4293      	cmp	r3, r2
 8018568:	d007      	beq.n	801857a <TIM_OC5_SetConfig+0x76>
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	4a15      	ldr	r2, [pc, #84]	; (80185c4 <TIM_OC5_SetConfig+0xc0>)
 801856e:	4293      	cmp	r3, r2
 8018570:	d003      	beq.n	801857a <TIM_OC5_SetConfig+0x76>
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	4a14      	ldr	r2, [pc, #80]	; (80185c8 <TIM_OC5_SetConfig+0xc4>)
 8018576:	4293      	cmp	r3, r2
 8018578:	d109      	bne.n	801858e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	695b      	ldr	r3, [r3, #20]
 8018586:	021b      	lsls	r3, r3, #8
 8018588:	697a      	ldr	r2, [r7, #20]
 801858a:	4313      	orrs	r3, r2
 801858c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	697a      	ldr	r2, [r7, #20]
 8018592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	68fa      	ldr	r2, [r7, #12]
 8018598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	685a      	ldr	r2, [r3, #4]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	693a      	ldr	r2, [r7, #16]
 80185a6:	621a      	str	r2, [r3, #32]
}
 80185a8:	bf00      	nop
 80185aa:	371c      	adds	r7, #28
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr
 80185b4:	fffeff8f 	.word	0xfffeff8f
 80185b8:	40010000 	.word	0x40010000
 80185bc:	40010400 	.word	0x40010400
 80185c0:	40014000 	.word	0x40014000
 80185c4:	40014400 	.word	0x40014400
 80185c8:	40014800 	.word	0x40014800

080185cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80185cc:	b480      	push	{r7}
 80185ce:	b087      	sub	sp, #28
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6a1b      	ldr	r3, [r3, #32]
 80185da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6a1b      	ldr	r3, [r3, #32]
 80185e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	685b      	ldr	r3, [r3, #4]
 80185ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80185f4:	68fa      	ldr	r2, [r7, #12]
 80185f6:	4b22      	ldr	r3, [pc, #136]	; (8018680 <TIM_OC6_SetConfig+0xb4>)
 80185f8:	4013      	ands	r3, r2
 80185fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	021b      	lsls	r3, r3, #8
 8018602:	68fa      	ldr	r2, [r7, #12]
 8018604:	4313      	orrs	r3, r2
 8018606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8018608:	693b      	ldr	r3, [r7, #16]
 801860a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801860e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8018610:	683b      	ldr	r3, [r7, #0]
 8018612:	689b      	ldr	r3, [r3, #8]
 8018614:	051b      	lsls	r3, r3, #20
 8018616:	693a      	ldr	r2, [r7, #16]
 8018618:	4313      	orrs	r3, r2
 801861a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	4a19      	ldr	r2, [pc, #100]	; (8018684 <TIM_OC6_SetConfig+0xb8>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d00f      	beq.n	8018644 <TIM_OC6_SetConfig+0x78>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	4a18      	ldr	r2, [pc, #96]	; (8018688 <TIM_OC6_SetConfig+0xbc>)
 8018628:	4293      	cmp	r3, r2
 801862a:	d00b      	beq.n	8018644 <TIM_OC6_SetConfig+0x78>
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	4a17      	ldr	r2, [pc, #92]	; (801868c <TIM_OC6_SetConfig+0xc0>)
 8018630:	4293      	cmp	r3, r2
 8018632:	d007      	beq.n	8018644 <TIM_OC6_SetConfig+0x78>
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	4a16      	ldr	r2, [pc, #88]	; (8018690 <TIM_OC6_SetConfig+0xc4>)
 8018638:	4293      	cmp	r3, r2
 801863a:	d003      	beq.n	8018644 <TIM_OC6_SetConfig+0x78>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	4a15      	ldr	r2, [pc, #84]	; (8018694 <TIM_OC6_SetConfig+0xc8>)
 8018640:	4293      	cmp	r3, r2
 8018642:	d109      	bne.n	8018658 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801864a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	695b      	ldr	r3, [r3, #20]
 8018650:	029b      	lsls	r3, r3, #10
 8018652:	697a      	ldr	r2, [r7, #20]
 8018654:	4313      	orrs	r3, r2
 8018656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	697a      	ldr	r2, [r7, #20]
 801865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	68fa      	ldr	r2, [r7, #12]
 8018662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8018664:	683b      	ldr	r3, [r7, #0]
 8018666:	685a      	ldr	r2, [r3, #4]
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	693a      	ldr	r2, [r7, #16]
 8018670:	621a      	str	r2, [r3, #32]
}
 8018672:	bf00      	nop
 8018674:	371c      	adds	r7, #28
 8018676:	46bd      	mov	sp, r7
 8018678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop
 8018680:	feff8fff 	.word	0xfeff8fff
 8018684:	40010000 	.word	0x40010000
 8018688:	40010400 	.word	0x40010400
 801868c:	40014000 	.word	0x40014000
 8018690:	40014400 	.word	0x40014400
 8018694:	40014800 	.word	0x40014800

08018698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8018698:	b480      	push	{r7}
 801869a:	b087      	sub	sp, #28
 801869c:	af00      	add	r7, sp, #0
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
 80186a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	6a1b      	ldr	r3, [r3, #32]
 80186aa:	f023 0201 	bic.w	r2, r3, #1
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	699b      	ldr	r3, [r3, #24]
 80186b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	6a1b      	ldr	r3, [r3, #32]
 80186bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	4a2c      	ldr	r2, [pc, #176]	; (8018774 <TIM_TI1_SetConfig+0xdc>)
 80186c2:	4293      	cmp	r3, r2
 80186c4:	d023      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80186cc:	d01f      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	4a29      	ldr	r2, [pc, #164]	; (8018778 <TIM_TI1_SetConfig+0xe0>)
 80186d2:	4293      	cmp	r3, r2
 80186d4:	d01b      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	4a28      	ldr	r2, [pc, #160]	; (801877c <TIM_TI1_SetConfig+0xe4>)
 80186da:	4293      	cmp	r3, r2
 80186dc:	d017      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	4a27      	ldr	r2, [pc, #156]	; (8018780 <TIM_TI1_SetConfig+0xe8>)
 80186e2:	4293      	cmp	r3, r2
 80186e4:	d013      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	4a26      	ldr	r2, [pc, #152]	; (8018784 <TIM_TI1_SetConfig+0xec>)
 80186ea:	4293      	cmp	r3, r2
 80186ec:	d00f      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	4a25      	ldr	r2, [pc, #148]	; (8018788 <TIM_TI1_SetConfig+0xf0>)
 80186f2:	4293      	cmp	r3, r2
 80186f4:	d00b      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	4a24      	ldr	r2, [pc, #144]	; (801878c <TIM_TI1_SetConfig+0xf4>)
 80186fa:	4293      	cmp	r3, r2
 80186fc:	d007      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	4a23      	ldr	r2, [pc, #140]	; (8018790 <TIM_TI1_SetConfig+0xf8>)
 8018702:	4293      	cmp	r3, r2
 8018704:	d003      	beq.n	801870e <TIM_TI1_SetConfig+0x76>
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	4a22      	ldr	r2, [pc, #136]	; (8018794 <TIM_TI1_SetConfig+0xfc>)
 801870a:	4293      	cmp	r3, r2
 801870c:	d101      	bne.n	8018712 <TIM_TI1_SetConfig+0x7a>
 801870e:	2301      	movs	r3, #1
 8018710:	e000      	b.n	8018714 <TIM_TI1_SetConfig+0x7c>
 8018712:	2300      	movs	r3, #0
 8018714:	2b00      	cmp	r3, #0
 8018716:	d008      	beq.n	801872a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	f023 0303 	bic.w	r3, r3, #3
 801871e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8018720:	697a      	ldr	r2, [r7, #20]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	4313      	orrs	r3, r2
 8018726:	617b      	str	r3, [r7, #20]
 8018728:	e003      	b.n	8018732 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	f043 0301 	orr.w	r3, r3, #1
 8018730:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8018732:	697b      	ldr	r3, [r7, #20]
 8018734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	011b      	lsls	r3, r3, #4
 801873e:	b2db      	uxtb	r3, r3
 8018740:	697a      	ldr	r2, [r7, #20]
 8018742:	4313      	orrs	r3, r2
 8018744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	f023 030a 	bic.w	r3, r3, #10
 801874c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	f003 030a 	and.w	r3, r3, #10
 8018754:	693a      	ldr	r2, [r7, #16]
 8018756:	4313      	orrs	r3, r2
 8018758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	697a      	ldr	r2, [r7, #20]
 801875e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	693a      	ldr	r2, [r7, #16]
 8018764:	621a      	str	r2, [r3, #32]
}
 8018766:	bf00      	nop
 8018768:	371c      	adds	r7, #28
 801876a:	46bd      	mov	sp, r7
 801876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018770:	4770      	bx	lr
 8018772:	bf00      	nop
 8018774:	40010000 	.word	0x40010000
 8018778:	40000400 	.word	0x40000400
 801877c:	40000800 	.word	0x40000800
 8018780:	40000c00 	.word	0x40000c00
 8018784:	40010400 	.word	0x40010400
 8018788:	40001800 	.word	0x40001800
 801878c:	40014000 	.word	0x40014000
 8018790:	4000e000 	.word	0x4000e000
 8018794:	4000e400 	.word	0x4000e400

08018798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018798:	b480      	push	{r7}
 801879a:	b087      	sub	sp, #28
 801879c:	af00      	add	r7, sp, #0
 801879e:	60f8      	str	r0, [r7, #12]
 80187a0:	60b9      	str	r1, [r7, #8]
 80187a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	6a1b      	ldr	r3, [r3, #32]
 80187a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	6a1b      	ldr	r3, [r3, #32]
 80187ae:	f023 0201 	bic.w	r2, r3, #1
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	699b      	ldr	r3, [r3, #24]
 80187ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80187bc:	693b      	ldr	r3, [r7, #16]
 80187be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80187c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	011b      	lsls	r3, r3, #4
 80187c8:	693a      	ldr	r2, [r7, #16]
 80187ca:	4313      	orrs	r3, r2
 80187cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80187ce:	697b      	ldr	r3, [r7, #20]
 80187d0:	f023 030a 	bic.w	r3, r3, #10
 80187d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80187d6:	697a      	ldr	r2, [r7, #20]
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	4313      	orrs	r3, r2
 80187dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	693a      	ldr	r2, [r7, #16]
 80187e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	697a      	ldr	r2, [r7, #20]
 80187e8:	621a      	str	r2, [r3, #32]
}
 80187ea:	bf00      	nop
 80187ec:	371c      	adds	r7, #28
 80187ee:	46bd      	mov	sp, r7
 80187f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f4:	4770      	bx	lr

080187f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80187f6:	b480      	push	{r7}
 80187f8:	b087      	sub	sp, #28
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	60f8      	str	r0, [r7, #12]
 80187fe:	60b9      	str	r1, [r7, #8]
 8018800:	607a      	str	r2, [r7, #4]
 8018802:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	6a1b      	ldr	r3, [r3, #32]
 8018808:	f023 0210 	bic.w	r2, r3, #16
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	699b      	ldr	r3, [r3, #24]
 8018814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	6a1b      	ldr	r3, [r3, #32]
 801881a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	021b      	lsls	r3, r3, #8
 8018828:	697a      	ldr	r2, [r7, #20]
 801882a:	4313      	orrs	r3, r2
 801882c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8018834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	031b      	lsls	r3, r3, #12
 801883a:	b29b      	uxth	r3, r3
 801883c:	697a      	ldr	r2, [r7, #20]
 801883e:	4313      	orrs	r3, r2
 8018840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8018848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	011b      	lsls	r3, r3, #4
 801884e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018852:	693a      	ldr	r2, [r7, #16]
 8018854:	4313      	orrs	r3, r2
 8018856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	697a      	ldr	r2, [r7, #20]
 801885c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	693a      	ldr	r2, [r7, #16]
 8018862:	621a      	str	r2, [r3, #32]
}
 8018864:	bf00      	nop
 8018866:	371c      	adds	r7, #28
 8018868:	46bd      	mov	sp, r7
 801886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886e:	4770      	bx	lr

08018870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018870:	b480      	push	{r7}
 8018872:	b087      	sub	sp, #28
 8018874:	af00      	add	r7, sp, #0
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	6a1b      	ldr	r3, [r3, #32]
 8018880:	f023 0210 	bic.w	r2, r3, #16
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	699b      	ldr	r3, [r3, #24]
 801888c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	6a1b      	ldr	r3, [r3, #32]
 8018892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8018894:	697b      	ldr	r3, [r7, #20]
 8018896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801889a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	031b      	lsls	r3, r3, #12
 80188a0:	697a      	ldr	r2, [r7, #20]
 80188a2:	4313      	orrs	r3, r2
 80188a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80188ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	011b      	lsls	r3, r3, #4
 80188b2:	693a      	ldr	r2, [r7, #16]
 80188b4:	4313      	orrs	r3, r2
 80188b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	697a      	ldr	r2, [r7, #20]
 80188bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	693a      	ldr	r2, [r7, #16]
 80188c2:	621a      	str	r2, [r3, #32]
}
 80188c4:	bf00      	nop
 80188c6:	371c      	adds	r7, #28
 80188c8:	46bd      	mov	sp, r7
 80188ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ce:	4770      	bx	lr

080188d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80188d0:	b480      	push	{r7}
 80188d2:	b087      	sub	sp, #28
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
 80188dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	6a1b      	ldr	r3, [r3, #32]
 80188e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	69db      	ldr	r3, [r3, #28]
 80188ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	6a1b      	ldr	r3, [r3, #32]
 80188f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80188f6:	697b      	ldr	r3, [r7, #20]
 80188f8:	f023 0303 	bic.w	r3, r3, #3
 80188fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80188fe:	697a      	ldr	r2, [r7, #20]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	4313      	orrs	r3, r2
 8018904:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801890c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	011b      	lsls	r3, r3, #4
 8018912:	b2db      	uxtb	r3, r3
 8018914:	697a      	ldr	r2, [r7, #20]
 8018916:	4313      	orrs	r3, r2
 8018918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8018920:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	021b      	lsls	r3, r3, #8
 8018926:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801892a:	693a      	ldr	r2, [r7, #16]
 801892c:	4313      	orrs	r3, r2
 801892e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	697a      	ldr	r2, [r7, #20]
 8018934:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	693a      	ldr	r2, [r7, #16]
 801893a:	621a      	str	r2, [r3, #32]
}
 801893c:	bf00      	nop
 801893e:	371c      	adds	r7, #28
 8018940:	46bd      	mov	sp, r7
 8018942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018946:	4770      	bx	lr

08018948 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8018948:	b480      	push	{r7}
 801894a:	b087      	sub	sp, #28
 801894c:	af00      	add	r7, sp, #0
 801894e:	60f8      	str	r0, [r7, #12]
 8018950:	60b9      	str	r1, [r7, #8]
 8018952:	607a      	str	r2, [r7, #4]
 8018954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	6a1b      	ldr	r3, [r3, #32]
 801895a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	69db      	ldr	r3, [r3, #28]
 8018966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	6a1b      	ldr	r3, [r3, #32]
 801896c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018974:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	021b      	lsls	r3, r3, #8
 801897a:	697a      	ldr	r2, [r7, #20]
 801897c:	4313      	orrs	r3, r2
 801897e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8018980:	697b      	ldr	r3, [r7, #20]
 8018982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8018986:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	031b      	lsls	r3, r3, #12
 801898c:	b29b      	uxth	r3, r3
 801898e:	697a      	ldr	r2, [r7, #20]
 8018990:	4313      	orrs	r3, r2
 8018992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801899a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	031b      	lsls	r3, r3, #12
 80189a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80189a4:	693a      	ldr	r2, [r7, #16]
 80189a6:	4313      	orrs	r3, r2
 80189a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	697a      	ldr	r2, [r7, #20]
 80189ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	693a      	ldr	r2, [r7, #16]
 80189b4:	621a      	str	r2, [r3, #32]
}
 80189b6:	bf00      	nop
 80189b8:	371c      	adds	r7, #28
 80189ba:	46bd      	mov	sp, r7
 80189bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c0:	4770      	bx	lr
	...

080189c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80189c4:	b480      	push	{r7}
 80189c6:	b085      	sub	sp, #20
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	689b      	ldr	r3, [r3, #8]
 80189d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80189d4:	68fa      	ldr	r2, [r7, #12]
 80189d6:	4b09      	ldr	r3, [pc, #36]	; (80189fc <TIM_ITRx_SetConfig+0x38>)
 80189d8:	4013      	ands	r3, r2
 80189da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80189dc:	683a      	ldr	r2, [r7, #0]
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	4313      	orrs	r3, r2
 80189e2:	f043 0307 	orr.w	r3, r3, #7
 80189e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	68fa      	ldr	r2, [r7, #12]
 80189ec:	609a      	str	r2, [r3, #8]
}
 80189ee:	bf00      	nop
 80189f0:	3714      	adds	r7, #20
 80189f2:	46bd      	mov	sp, r7
 80189f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop
 80189fc:	ffcfff8f 	.word	0xffcfff8f

08018a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b087      	sub	sp, #28
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	607a      	str	r2, [r7, #4]
 8018a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	689b      	ldr	r3, [r3, #8]
 8018a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018a14:	697b      	ldr	r3, [r7, #20]
 8018a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	021a      	lsls	r2, r3, #8
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	431a      	orrs	r2, r3
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	4313      	orrs	r3, r2
 8018a28:	697a      	ldr	r2, [r7, #20]
 8018a2a:	4313      	orrs	r3, r2
 8018a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	697a      	ldr	r2, [r7, #20]
 8018a32:	609a      	str	r2, [r3, #8]
}
 8018a34:	bf00      	nop
 8018a36:	371c      	adds	r7, #28
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3e:	4770      	bx	lr

08018a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018a40:	b480      	push	{r7}
 8018a42:	b087      	sub	sp, #28
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	f003 031f 	and.w	r3, r3, #31
 8018a52:	2201      	movs	r2, #1
 8018a54:	fa02 f303 	lsl.w	r3, r2, r3
 8018a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	6a1a      	ldr	r2, [r3, #32]
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	43db      	mvns	r3, r3
 8018a62:	401a      	ands	r2, r3
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	6a1a      	ldr	r2, [r3, #32]
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	f003 031f 	and.w	r3, r3, #31
 8018a72:	6879      	ldr	r1, [r7, #4]
 8018a74:	fa01 f303 	lsl.w	r3, r1, r3
 8018a78:	431a      	orrs	r2, r3
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	621a      	str	r2, [r3, #32]
}
 8018a7e:	bf00      	nop
 8018a80:	371c      	adds	r7, #28
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
	...

08018a8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d109      	bne.n	8018ab0 <HAL_TIMEx_PWMN_Start+0x24>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b01      	cmp	r3, #1
 8018aa6:	bf14      	ite	ne
 8018aa8:	2301      	movne	r3, #1
 8018aaa:	2300      	moveq	r3, #0
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	e022      	b.n	8018af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	2b04      	cmp	r3, #4
 8018ab4:	d109      	bne.n	8018aca <HAL_TIMEx_PWMN_Start+0x3e>
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	bf14      	ite	ne
 8018ac2:	2301      	movne	r3, #1
 8018ac4:	2300      	moveq	r3, #0
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	e015      	b.n	8018af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	2b08      	cmp	r3, #8
 8018ace:	d109      	bne.n	8018ae4 <HAL_TIMEx_PWMN_Start+0x58>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	2b01      	cmp	r3, #1
 8018ada:	bf14      	ite	ne
 8018adc:	2301      	movne	r3, #1
 8018ade:	2300      	moveq	r3, #0
 8018ae0:	b2db      	uxtb	r3, r3
 8018ae2:	e008      	b.n	8018af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8018aea:	b2db      	uxtb	r3, r3
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	bf14      	ite	ne
 8018af0:	2301      	movne	r3, #1
 8018af2:	2300      	moveq	r3, #0
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d001      	beq.n	8018afe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8018afa:	2301      	movs	r3, #1
 8018afc:	e07d      	b.n	8018bfa <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d104      	bne.n	8018b0e <HAL_TIMEx_PWMN_Start+0x82>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2202      	movs	r2, #2
 8018b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018b0c:	e013      	b.n	8018b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	2b04      	cmp	r3, #4
 8018b12:	d104      	bne.n	8018b1e <HAL_TIMEx_PWMN_Start+0x92>
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2202      	movs	r2, #2
 8018b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018b1c:	e00b      	b.n	8018b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	2b08      	cmp	r3, #8
 8018b22:	d104      	bne.n	8018b2e <HAL_TIMEx_PWMN_Start+0xa2>
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2202      	movs	r2, #2
 8018b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8018b2c:	e003      	b.n	8018b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	2202      	movs	r2, #2
 8018b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	2204      	movs	r2, #4
 8018b3c:	6839      	ldr	r1, [r7, #0]
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f000 f9ce 	bl	8018ee0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018b52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4a2a      	ldr	r2, [pc, #168]	; (8018c04 <HAL_TIMEx_PWMN_Start+0x178>)
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d02c      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b66:	d027      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4a26      	ldr	r2, [pc, #152]	; (8018c08 <HAL_TIMEx_PWMN_Start+0x17c>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d022      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a25      	ldr	r2, [pc, #148]	; (8018c0c <HAL_TIMEx_PWMN_Start+0x180>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d01d      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a23      	ldr	r2, [pc, #140]	; (8018c10 <HAL_TIMEx_PWMN_Start+0x184>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d018      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a22      	ldr	r2, [pc, #136]	; (8018c14 <HAL_TIMEx_PWMN_Start+0x188>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d013      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4a20      	ldr	r2, [pc, #128]	; (8018c18 <HAL_TIMEx_PWMN_Start+0x18c>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d00e      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	4a1f      	ldr	r2, [pc, #124]	; (8018c1c <HAL_TIMEx_PWMN_Start+0x190>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d009      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	4a1d      	ldr	r2, [pc, #116]	; (8018c20 <HAL_TIMEx_PWMN_Start+0x194>)
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d004      	beq.n	8018bb8 <HAL_TIMEx_PWMN_Start+0x12c>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4a1c      	ldr	r2, [pc, #112]	; (8018c24 <HAL_TIMEx_PWMN_Start+0x198>)
 8018bb4:	4293      	cmp	r3, r2
 8018bb6:	d115      	bne.n	8018be4 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	689a      	ldr	r2, [r3, #8]
 8018bbe:	4b1a      	ldr	r3, [pc, #104]	; (8018c28 <HAL_TIMEx_PWMN_Start+0x19c>)
 8018bc0:	4013      	ands	r3, r2
 8018bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2b06      	cmp	r3, #6
 8018bc8:	d015      	beq.n	8018bf6 <HAL_TIMEx_PWMN_Start+0x16a>
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018bd0:	d011      	beq.n	8018bf6 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f042 0201 	orr.w	r2, r2, #1
 8018be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018be2:	e008      	b.n	8018bf6 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f042 0201 	orr.w	r2, r2, #1
 8018bf2:	601a      	str	r2, [r3, #0]
 8018bf4:	e000      	b.n	8018bf8 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8018bf8:	2300      	movs	r3, #0
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3710      	adds	r7, #16
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}
 8018c02:	bf00      	nop
 8018c04:	40010000 	.word	0x40010000
 8018c08:	40000400 	.word	0x40000400
 8018c0c:	40000800 	.word	0x40000800
 8018c10:	40000c00 	.word	0x40000c00
 8018c14:	40010400 	.word	0x40010400
 8018c18:	40001800 	.word	0x40001800
 8018c1c:	40014000 	.word	0x40014000
 8018c20:	4000e000 	.word	0x4000e000
 8018c24:	4000e400 	.word	0x4000e400
 8018c28:	00010007 	.word	0x00010007

08018c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018c2c:	b480      	push	{r7}
 8018c2e:	b085      	sub	sp, #20
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018c3c:	2b01      	cmp	r3, #1
 8018c3e:	d101      	bne.n	8018c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018c40:	2302      	movs	r3, #2
 8018c42:	e077      	b.n	8018d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2201      	movs	r2, #1
 8018c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	2202      	movs	r2, #2
 8018c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	685b      	ldr	r3, [r3, #4]
 8018c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	689b      	ldr	r3, [r3, #8]
 8018c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	4a35      	ldr	r2, [pc, #212]	; (8018d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	d004      	beq.n	8018c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	4a34      	ldr	r2, [pc, #208]	; (8018d44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8018c74:	4293      	cmp	r3, r2
 8018c76:	d108      	bne.n	8018c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8018c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018c80:	683b      	ldr	r3, [r7, #0]
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	68fa      	ldr	r2, [r7, #12]
 8018c86:	4313      	orrs	r3, r2
 8018c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	68fa      	ldr	r2, [r7, #12]
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	68fa      	ldr	r2, [r7, #12]
 8018ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4a25      	ldr	r2, [pc, #148]	; (8018d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d02c      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018cb6:	d027      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	4a22      	ldr	r2, [pc, #136]	; (8018d48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8018cbe:	4293      	cmp	r3, r2
 8018cc0:	d022      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	4a21      	ldr	r2, [pc, #132]	; (8018d4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8018cc8:	4293      	cmp	r3, r2
 8018cca:	d01d      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4a1f      	ldr	r2, [pc, #124]	; (8018d50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8018cd2:	4293      	cmp	r3, r2
 8018cd4:	d018      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	4a1a      	ldr	r2, [pc, #104]	; (8018d44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	d013      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	4a1b      	ldr	r2, [pc, #108]	; (8018d54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8018ce6:	4293      	cmp	r3, r2
 8018ce8:	d00e      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	4a1a      	ldr	r2, [pc, #104]	; (8018d58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8018cf0:	4293      	cmp	r3, r2
 8018cf2:	d009      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	4a18      	ldr	r2, [pc, #96]	; (8018d5c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d004      	beq.n	8018d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	4a17      	ldr	r2, [pc, #92]	; (8018d60 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8018d04:	4293      	cmp	r3, r2
 8018d06:	d10c      	bne.n	8018d22 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018d0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	689b      	ldr	r3, [r3, #8]
 8018d14:	68ba      	ldr	r2, [r7, #8]
 8018d16:	4313      	orrs	r3, r2
 8018d18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	2201      	movs	r2, #1
 8018d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018d32:	2300      	movs	r3, #0
}
 8018d34:	4618      	mov	r0, r3
 8018d36:	3714      	adds	r7, #20
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3e:	4770      	bx	lr
 8018d40:	40010000 	.word	0x40010000
 8018d44:	40010400 	.word	0x40010400
 8018d48:	40000400 	.word	0x40000400
 8018d4c:	40000800 	.word	0x40000800
 8018d50:	40000c00 	.word	0x40000c00
 8018d54:	40001800 	.word	0x40001800
 8018d58:	40014000 	.word	0x40014000
 8018d5c:	4000e000 	.word	0x4000e000
 8018d60:	4000e400 	.word	0x4000e400

08018d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8018d64:	b480      	push	{r7}
 8018d66:	b085      	sub	sp, #20
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8018d6e:	2300      	movs	r3, #0
 8018d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d101      	bne.n	8018d80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8018d7c:	2302      	movs	r3, #2
 8018d7e:	e087      	b.n	8018e90 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2201      	movs	r2, #1
 8018d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8018d8e:	683b      	ldr	r3, [r7, #0]
 8018d90:	68db      	ldr	r3, [r3, #12]
 8018d92:	4313      	orrs	r3, r2
 8018d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	689b      	ldr	r3, [r3, #8]
 8018da0:	4313      	orrs	r3, r2
 8018da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	685b      	ldr	r3, [r3, #4]
 8018dae:	4313      	orrs	r3, r2
 8018db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4313      	orrs	r3, r2
 8018dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	691b      	ldr	r3, [r3, #16]
 8018dca:	4313      	orrs	r3, r2
 8018dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	695b      	ldr	r3, [r3, #20]
 8018dd8:	4313      	orrs	r3, r2
 8018dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018de6:	4313      	orrs	r3, r2
 8018de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	699b      	ldr	r3, [r3, #24]
 8018df4:	041b      	lsls	r3, r3, #16
 8018df6:	4313      	orrs	r3, r2
 8018df8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	4a27      	ldr	r2, [pc, #156]	; (8018e9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8018e00:	4293      	cmp	r3, r2
 8018e02:	d004      	beq.n	8018e0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	4a25      	ldr	r2, [pc, #148]	; (8018ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8018e0a:	4293      	cmp	r3, r2
 8018e0c:	d106      	bne.n	8018e1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	69db      	ldr	r3, [r3, #28]
 8018e18:	4313      	orrs	r3, r2
 8018e1a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a1e      	ldr	r2, [pc, #120]	; (8018e9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d004      	beq.n	8018e30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4a1d      	ldr	r2, [pc, #116]	; (8018ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	d126      	bne.n	8018e7e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8018e36:	683b      	ldr	r3, [r7, #0]
 8018e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e3a:	051b      	lsls	r3, r3, #20
 8018e3c:	4313      	orrs	r3, r2
 8018e3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	6a1b      	ldr	r3, [r3, #32]
 8018e4a:	4313      	orrs	r3, r2
 8018e4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e58:	4313      	orrs	r3, r2
 8018e5a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	4a0e      	ldr	r2, [pc, #56]	; (8018e9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8018e62:	4293      	cmp	r3, r2
 8018e64:	d004      	beq.n	8018e70 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	4a0d      	ldr	r2, [pc, #52]	; (8018ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8018e6c:	4293      	cmp	r3, r2
 8018e6e:	d106      	bne.n	8018e7e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e7a:	4313      	orrs	r3, r2
 8018e7c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	68fa      	ldr	r2, [r7, #12]
 8018e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2200      	movs	r2, #0
 8018e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018e8e:	2300      	movs	r3, #0
}
 8018e90:	4618      	mov	r0, r3
 8018e92:	3714      	adds	r7, #20
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr
 8018e9c:	40010000 	.word	0x40010000
 8018ea0:	40010400 	.word	0x40010400

08018ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018ea4:	b480      	push	{r7}
 8018ea6:	b083      	sub	sp, #12
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018eac:	bf00      	nop
 8018eae:	370c      	adds	r7, #12
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb6:	4770      	bx	lr

08018eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b083      	sub	sp, #12
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018ec0:	bf00      	nop
 8018ec2:	370c      	adds	r7, #12
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr

08018ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018ecc:	b480      	push	{r7}
 8018ece:	b083      	sub	sp, #12
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018ed4:	bf00      	nop
 8018ed6:	370c      	adds	r7, #12
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ede:	4770      	bx	lr

08018ee0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b087      	sub	sp, #28
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	f003 031f 	and.w	r3, r3, #31
 8018ef2:	2204      	movs	r2, #4
 8018ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8018ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	6a1a      	ldr	r2, [r3, #32]
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	43db      	mvns	r3, r3
 8018f02:	401a      	ands	r2, r3
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	6a1a      	ldr	r2, [r3, #32]
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	f003 031f 	and.w	r3, r3, #31
 8018f12:	6879      	ldr	r1, [r7, #4]
 8018f14:	fa01 f303 	lsl.w	r3, r1, r3
 8018f18:	431a      	orrs	r2, r3
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	621a      	str	r2, [r3, #32]
}
 8018f1e:	bf00      	nop
 8018f20:	371c      	adds	r7, #28
 8018f22:	46bd      	mov	sp, r7
 8018f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f28:	4770      	bx	lr

08018f2a <_ZN3PinC1Ev>:
 *      Author: stefan
 */

#include "PinModel/Pin.hpp"

Pin::Pin(){}
 8018f2a:	b480      	push	{r7}
 8018f2c:	b083      	sub	sp, #12
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	6078      	str	r0, [r7, #4]
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2200      	movs	r2, #0
 8018f36:	71da      	strb	r2, [r3, #7]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	370c      	adds	r7, #12
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f44:	4770      	bx	lr

08018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>:

Pin::Pin(GPIOPort port, GPIOPin gpio_pin) : port((GPIO_TypeDef*)port), gpio_pin(gpio_pin){}
 8018f46:	b480      	push	{r7}
 8018f48:	b085      	sub	sp, #20
 8018f4a:	af00      	add	r7, sp, #0
 8018f4c:	60f8      	str	r0, [r7, #12]
 8018f4e:	60b9      	str	r1, [r7, #8]
 8018f50:	4613      	mov	r3, r2
 8018f52:	80fb      	strh	r3, [r7, #6]
 8018f54:	68ba      	ldr	r2, [r7, #8]
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	601a      	str	r2, [r3, #0]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	88fa      	ldrh	r2, [r7, #6]
 8018f5e:	809a      	strh	r2, [r3, #4]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	2200      	movs	r2, #0
 8018f64:	71da      	strb	r2, [r3, #7]
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3714      	adds	r7, #20
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f72:	4770      	bx	lr

08018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>:

Pin::Pin(GPIOPort port, GPIOPin gpio_pin, AlternativeFunction alternative_function) :
 8018f74:	b480      	push	{r7}
 8018f76:	b085      	sub	sp, #20
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	4611      	mov	r1, r2
 8018f80:	461a      	mov	r2, r3
 8018f82:	460b      	mov	r3, r1
 8018f84:	80fb      	strh	r3, [r7, #6]
 8018f86:	4613      	mov	r3, r2
 8018f88:	717b      	strb	r3, [r7, #5]
		port((GPIO_TypeDef*)port),
		gpio_pin(gpio_pin),
		alternative_function(alternative_function)
 8018f8a:	68ba      	ldr	r2, [r7, #8]
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	601a      	str	r2, [r3, #0]
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	88fa      	ldrh	r2, [r7, #6]
 8018f94:	809a      	strh	r2, [r3, #4]
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	797a      	ldrb	r2, [r7, #5]
 8018f9a:	719a      	strb	r2, [r3, #6]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	71da      	strb	r2, [r3, #7]
		{}
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3714      	adds	r7, #20
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fae:	4770      	bx	lr

08018fb0 <_ZN3Pin8inscribeERS_13OperationMode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, OperationMode mode){
 8018fb0:	b480      	push	{r7}
 8018fb2:	b083      	sub	sp, #12
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	460b      	mov	r3, r1
 8018fba:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != OperationMode::NOT_USED){
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	79db      	ldrb	r3, [r3, #7]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d103      	bne.n	8018fcc <_ZN3Pin8inscribeERS_13OperationMode+0x1c>
		return;
	}
	pin.mode = mode;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	78fa      	ldrb	r2, [r7, #3]
 8018fc8:	71da      	strb	r2, [r3, #7]
 8018fca:	e000      	b.n	8018fce <_ZN3Pin8inscribeERS_13OperationMode+0x1e>
		return;
 8018fcc:	bf00      	nop
}
 8018fce:	370c      	adds	r7, #12
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd6:	4770      	bx	lr

08018fd8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8018fd8:	b480      	push	{r7}
 8018fda:	b083      	sub	sp, #12
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	370c      	adds	r7, #12
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fec:	4770      	bx	lr

08018fee <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8018fee:	b590      	push	{r4, r7, lr}
 8018ff0:	b083      	sub	sp, #12
 8018ff2:	af00      	add	r7, sp, #0
 8018ff4:	6078      	str	r0, [r7, #4]
 8018ff6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8018ff8:	6878      	ldr	r0, [r7, #4]
 8018ffa:	f7ff ffed 	bl	8018fd8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 8018ffe:	4603      	mov	r3, r0
 8019000:	681c      	ldr	r4, [r3, #0]
 8019002:	6838      	ldr	r0, [r7, #0]
 8019004:	f7ff ffe8 	bl	8018fd8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 8019008:	4603      	mov	r3, r0
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	429c      	cmp	r4, r3
 801900e:	bf0c      	ite	eq
 8019010:	2301      	moveq	r3, #1
 8019012:	2300      	movne	r3, #0
 8019014:	b2db      	uxtb	r3, r3
 8019016:	4618      	mov	r0, r3
 8019018:	370c      	adds	r7, #12
 801901a:	46bd      	mov	sp, r7
 801901c:	bd90      	pop	{r4, r7, pc}

0801901e <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801901e:	b480      	push	{r7}
 8019020:	b083      	sub	sp, #12
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
	++_M_current;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	1d1a      	adds	r2, r3, #4
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	601a      	str	r2, [r3, #0]
	return *this;
 8019030:	687b      	ldr	r3, [r7, #4]
      }
 8019032:	4618      	mov	r0, r3
 8019034:	370c      	adds	r7, #12
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr

0801903e <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>:

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      _GLIBCXX20_CONSTEXPR
      operator _Tp&() const noexcept
 801903e:	b580      	push	{r7, lr}
 8019040:	b082      	sub	sp, #8
 8019042:	af00      	add	r7, sp, #0
 8019044:	6078      	str	r0, [r7, #4]
      { return this->get(); }
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f000 f996 	bl	8019378 <_ZNKSt17reference_wrapperI3PinE3getEv>
 801904c:	4603      	mov	r3, r0
 801904e:	4618      	mov	r0, r3
 8019050:	3708      	adds	r7, #8
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}

08019056 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8019056:	b480      	push	{r7}
 8019058:	b083      	sub	sp, #12
 801905a:	af00      	add	r7, sp, #0
 801905c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	4618      	mov	r0, r3
 8019064:	370c      	adds	r7, #12
 8019066:	46bd      	mov	sp, r7
 8019068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906c:	4770      	bx	lr
	...

08019070 <_ZN3Pin5startEv>:

void Pin::start(){
 8019070:	b580      	push	{r7, lr}
 8019072:	b090      	sub	sp, #64	; 0x40
 8019074:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8019076:	4b84      	ldr	r3, [pc, #528]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801907c:	4a82      	ldr	r2, [pc, #520]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801907e:	f043 0302 	orr.w	r3, r3, #2
 8019082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8019086:	4b80      	ldr	r3, [pc, #512]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801908c:	f003 0302 	and.w	r3, r3, #2
 8019090:	623b      	str	r3, [r7, #32]
 8019092:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8019094:	4b7c      	ldr	r3, [pc, #496]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801909a:	4a7b      	ldr	r2, [pc, #492]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801909c:	f043 0301 	orr.w	r3, r3, #1
 80190a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80190a4:	4b78      	ldr	r3, [pc, #480]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190aa:	f003 0301 	and.w	r3, r3, #1
 80190ae:	61fb      	str	r3, [r7, #28]
 80190b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80190b2:	4b75      	ldr	r3, [pc, #468]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190b8:	4a73      	ldr	r2, [pc, #460]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190ba:	f043 0304 	orr.w	r3, r3, #4
 80190be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80190c2:	4b71      	ldr	r3, [pc, #452]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190c8:	f003 0304 	and.w	r3, r3, #4
 80190cc:	61bb      	str	r3, [r7, #24]
 80190ce:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80190d0:	4b6d      	ldr	r3, [pc, #436]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190d6:	4a6c      	ldr	r2, [pc, #432]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190d8:	f043 0308 	orr.w	r3, r3, #8
 80190dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80190e0:	4b69      	ldr	r3, [pc, #420]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190e6:	f003 0308 	and.w	r3, r3, #8
 80190ea:	617b      	str	r3, [r7, #20]
 80190ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80190ee:	4b66      	ldr	r3, [pc, #408]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80190f4:	4a64      	ldr	r2, [pc, #400]	; (8019288 <_ZN3Pin5startEv+0x218>)
 80190f6:	f043 0310 	orr.w	r3, r3, #16
 80190fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80190fe:	4b62      	ldr	r3, [pc, #392]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019104:	f003 0310 	and.w	r3, r3, #16
 8019108:	613b      	str	r3, [r7, #16]
 801910a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801910c:	4b5e      	ldr	r3, [pc, #376]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801910e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019112:	4a5d      	ldr	r2, [pc, #372]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019114:	f043 0320 	orr.w	r3, r3, #32
 8019118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801911c:	4b5a      	ldr	r3, [pc, #360]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801911e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019122:	f003 0320 	and.w	r3, r3, #32
 8019126:	60fb      	str	r3, [r7, #12]
 8019128:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801912a:	4b57      	ldr	r3, [pc, #348]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801912c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019130:	4a55      	ldr	r2, [pc, #340]	; (8019288 <_ZN3Pin5startEv+0x218>)
 8019132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801913a:	4b53      	ldr	r3, [pc, #332]	; (8019288 <_ZN3Pin5startEv+0x218>)
 801913c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019144:	60bb      	str	r3, [r7, #8]
 8019146:	68bb      	ldr	r3, [r7, #8]

	for(Pin& pin : Pin::pinVector){
 8019148:	4b50      	ldr	r3, [pc, #320]	; (801928c <_ZN3Pin5startEv+0x21c>)
 801914a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801914c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801914e:	f000 f8f2 	bl	8019336 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>
 8019152:	4603      	mov	r3, r0
 8019154:	607b      	str	r3, [r7, #4]
 8019156:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019158:	f000 f8fd 	bl	8019356 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>
 801915c:	4603      	mov	r3, r0
 801915e:	603b      	str	r3, [r7, #0]
 8019160:	463a      	mov	r2, r7
 8019162:	1d3b      	adds	r3, r7, #4
 8019164:	4611      	mov	r1, r2
 8019166:	4618      	mov	r0, r3
 8019168:	f7ff ff41 	bl	8018fee <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 801916c:	4603      	mov	r3, r0
 801916e:	f083 0301 	eor.w	r3, r3, #1
 8019172:	b2db      	uxtb	r3, r3
 8019174:	2b00      	cmp	r3, #0
 8019176:	f000 8083 	beq.w	8019280 <_ZN3Pin5startEv+0x210>
 801917a:	1d3b      	adds	r3, r7, #4
 801917c:	4618      	mov	r0, r3
 801917e:	f7ff ff6a 	bl	8019056 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>
 8019182:	4603      	mov	r3, r0
 8019184:	4618      	mov	r0, r3
 8019186:	f7ff ff5a 	bl	801903e <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>
 801918a:	63b8      	str	r0, [r7, #56]	; 0x38
		GPIO_InitStruct = {0};
 801918c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019190:	2200      	movs	r2, #0
 8019192:	601a      	str	r2, [r3, #0]
 8019194:	605a      	str	r2, [r3, #4]
 8019196:	609a      	str	r2, [r3, #8]
 8019198:	60da      	str	r2, [r3, #12]
 801919a:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = pin.gpio_pin;
 801919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919e:	889b      	ldrh	r3, [r3, #4]
 80191a0:	627b      	str	r3, [r7, #36]	; 0x24
		switch(pin.mode){
 80191a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a4:	79db      	ldrb	r3, [r3, #7]
 80191a6:	2b05      	cmp	r3, #5
 80191a8:	d864      	bhi.n	8019274 <_ZN3Pin5startEv+0x204>
 80191aa:	a201      	add	r2, pc, #4	; (adr r2, 80191b0 <_ZN3Pin5startEv+0x140>)
 80191ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191b0:	080191c9 	.word	0x080191c9
 80191b4:	08019201 	.word	0x08019201
 80191b8:	080191e3 	.word	0x080191e3
 80191bc:	0801921b 	.word	0x0801921b
 80191c0:	08019235 	.word	0x08019235
 80191c4:	08019251 	.word	0x08019251

		case OperationMode::NOT_USED:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 80191c8:	2300      	movs	r3, #0
 80191ca:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80191cc:	2302      	movs	r3, #2
 80191ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80191d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80191d8:	4611      	mov	r1, r2
 80191da:	4618      	mov	r0, r3
 80191dc:	f7f9 feae 	bl	8012f3c <HAL_GPIO_Init>
			break;
 80191e0:	e049      	b.n	8019276 <_ZN3Pin5startEv+0x206>

		case OperationMode::OUTPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80191e2:	2301      	movs	r3, #1
 80191e4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191e6:	2300      	movs	r3, #0
 80191e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80191ea:	2300      	movs	r3, #0
 80191ec:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80191f6:	4611      	mov	r1, r2
 80191f8:	4618      	mov	r0, r3
 80191fa:	f7f9 fe9f 	bl	8012f3c <HAL_GPIO_Init>
			break;
 80191fe:	e03a      	b.n	8019276 <_ZN3Pin5startEv+0x206>

		case OperationMode::INPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 8019200:	2300      	movs	r3, #0
 8019202:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019204:	2300      	movs	r3, #0
 8019206:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8019208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019210:	4611      	mov	r1, r2
 8019212:	4618      	mov	r0, r3
 8019214:	f7f9 fe92 	bl	8012f3c <HAL_GPIO_Init>
			break;
 8019218:	e02d      	b.n	8019276 <_ZN3Pin5startEv+0x206>

		case OperationMode::ANALOG:
			GPIO_InitStruct.Mode =  GPIO_MODE_ANALOG;
 801921a:	2303      	movs	r3, #3
 801921c:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 801921e:	2300      	movs	r3, #0
 8019220:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8019222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801922a:	4611      	mov	r1, r2
 801922c:	4618      	mov	r0, r3
 801922e:	f7f9 fe85 	bl	8012f3c <HAL_GPIO_Init>
			break;
 8019232:	e020      	b.n	8019276 <_ZN3Pin5startEv+0x206>
		case OperationMode::EXTERNAL_INTERRUPT:
			GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8019234:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8019238:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801923a:	2302      	movs	r3, #2
 801923c:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 801923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019246:	4611      	mov	r1, r2
 8019248:	4618      	mov	r0, r3
 801924a:	f7f9 fe77 	bl	8012f3c <HAL_GPIO_Init>
			break;
 801924e:	e012      	b.n	8019276 <_ZN3Pin5startEv+0x206>
		case OperationMode::TIMER_ALTERNATE_FUNCTION:
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019250:	2302      	movs	r3, #2
 8019252:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019254:	2300      	movs	r3, #0
 8019256:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019258:	2300      	movs	r3, #0
 801925a:	633b      	str	r3, [r7, #48]	; 0x30
			GPIO_InitStruct.Alternate = pin.alternative_function;
 801925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925e:	799b      	ldrb	r3, [r3, #6]
 8019260:	637b      	str	r3, [r7, #52]	; 0x34
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8019262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801926a:	4611      	mov	r1, r2
 801926c:	4618      	mov	r0, r3
 801926e:	f7f9 fe65 	bl	8012f3c <HAL_GPIO_Init>
			break;
 8019272:	e000      	b.n	8019276 <_ZN3Pin5startEv+0x206>

		default:
			break;
 8019274:	bf00      	nop
	for(Pin& pin : Pin::pinVector){
 8019276:	1d3b      	adds	r3, r7, #4
 8019278:	4618      	mov	r0, r3
 801927a:	f7ff fed0 	bl	801901e <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>
 801927e:	e76f      	b.n	8019160 <_ZN3Pin5startEv+0xf0>
		}
	}
}
 8019280:	bf00      	nop
 8019282:	3740      	adds	r7, #64	; 0x40
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}
 8019288:	58024400 	.word	0x58024400
 801928c:	24001350 	.word	0x24001350

08019290 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f000 f879 	bl	8019390 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	4618      	mov	r0, r3
 80192a2:	3708      	adds	r7, #8
 80192a4:	46bd      	mov	sp, r7
 80192a6:	bd80      	pop	{r7, pc}

080192a8 <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80192a8:	b480      	push	{r7}
 80192aa:	b083      	sub	sp, #12
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	4618      	mov	r0, r3
 80192b4:	370c      	adds	r7, #12
 80192b6:	46bd      	mov	sp, r7
 80192b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192bc:	4770      	bx	lr

080192be <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
      vector(initializer_list<value_type> __l,
 80192be:	b5b0      	push	{r4, r5, r7, lr}
 80192c0:	b086      	sub	sp, #24
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	60f8      	str	r0, [r7, #12]
 80192c6:	1d38      	adds	r0, r7, #4
 80192c8:	e880 0006 	stmia.w	r0, {r1, r2}
 80192cc:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	6839      	ldr	r1, [r7, #0]
 80192d2:	4618      	mov	r0, r3
 80192d4:	f000 f873 	bl	80193be <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
	_M_range_initialize(__l.begin(), __l.end(),
 80192d8:	1d3b      	adds	r3, r7, #4
 80192da:	4618      	mov	r0, r3
 80192dc:	f000 f897 	bl	801940e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 80192e0:	4604      	mov	r4, r0
 80192e2:	1d3b      	adds	r3, r7, #4
 80192e4:	4618      	mov	r0, r3
 80192e6:	f000 f89e 	bl	8019426 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 80192ea:	4602      	mov	r2, r0
 80192ec:	462b      	mov	r3, r5
 80192ee:	4621      	mov	r1, r4
 80192f0:	68f8      	ldr	r0, [r7, #12]
 80192f2:	f000 f8be 	bl	8019472 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
      }
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	4618      	mov	r0, r3
 80192fa:	3718      	adds	r7, #24
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bdb0      	pop	{r4, r5, r7, pc}

08019300 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8019300:	b5b0      	push	{r4, r5, r7, lr}
 8019302:	b082      	sub	sp, #8
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681c      	ldr	r4, [r3, #0]
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	4618      	mov	r0, r3
 8019314:	f000 f8e6 	bl	80194e4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 8019318:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801931a:	461a      	mov	r2, r3
 801931c:	4629      	mov	r1, r5
 801931e:	4620      	mov	r0, r4
 8019320:	f000 f8eb 	bl	80194fa <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
      }
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	4618      	mov	r0, r3
 8019328:	f000 f858 	bl	80193dc <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	4618      	mov	r0, r3
 8019330:	3708      	adds	r7, #8
 8019332:	46bd      	mov	sp, r7
 8019334:	bdb0      	pop	{r4, r5, r7, pc}

08019336 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8019336:	b580      	push	{r7, lr}
 8019338:	b084      	sub	sp, #16
 801933a:	af00      	add	r7, sp, #0
 801933c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	f107 030c 	add.w	r3, r7, #12
 8019344:	4611      	mov	r1, r2
 8019346:	4618      	mov	r0, r3
 8019348:	f000 f8e5 	bl	8019516 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	1d1a      	adds	r2, r3, #4
 8019362:	f107 030c 	add.w	r3, r7, #12
 8019366:	4611      	mov	r1, r2
 8019368:	4618      	mov	r0, r3
 801936a:	f000 f8d4 	bl	8019516 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	4618      	mov	r0, r3
 8019372:	3710      	adds	r7, #16
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <_ZNKSt17reference_wrapperI3PinE3getEv>:

      _GLIBCXX20_CONSTEXPR
      _Tp&
      get() const noexcept
 8019378:	b480      	push	{r7}
 801937a:	b083      	sub	sp, #12
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
      { return *_M_data; }
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	4618      	mov	r0, r3
 8019386:	370c      	adds	r7, #12
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	4618      	mov	r0, r3
 801939c:	370c      	adds	r7, #12
 801939e:	46bd      	mov	sp, r7
 80193a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a4:	4770      	bx	lr

080193a6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80193a6:	b580      	push	{r7, lr}
 80193a8:	b082      	sub	sp, #8
 80193aa:	af00      	add	r7, sp, #0
 80193ac:	6078      	str	r0, [r7, #4]
 80193ae:	6878      	ldr	r0, [r7, #4]
 80193b0:	f7ff ff7a 	bl	80192a8 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	4618      	mov	r0, r3
 80193b8:	3708      	adds	r7, #8
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}

080193be <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80193be:	b580      	push	{r7, lr}
 80193c0:	b082      	sub	sp, #8
 80193c2:	af00      	add	r7, sp, #0
 80193c4:	6078      	str	r0, [r7, #4]
 80193c6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	6839      	ldr	r1, [r7, #0]
 80193cc:	4618      	mov	r0, r3
 80193ce:	f000 f8b2 	bl	8019536 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	4618      	mov	r0, r3
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}

080193dc <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80193dc:	b580      	push	{r7, lr}
 80193de:	b082      	sub	sp, #8
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	689a      	ldr	r2, [r3, #8]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	1ad3      	subs	r3, r2, r3
 80193f2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80193f4:	461a      	mov	r2, r3
 80193f6:	6878      	ldr	r0, [r7, #4]
 80193f8:	f000 f8af 	bl	801955a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	4618      	mov	r0, r3
 8019400:	f7ff ffd1 	bl	80193a6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	4618      	mov	r0, r3
 8019408:	3708      	adds	r7, #8
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}

0801940e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801940e:	b480      	push	{r7}
 8019410:	b083      	sub	sp, #12
 8019412:	af00      	add	r7, sp, #0
 8019414:	6078      	str	r0, [r7, #4]
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	4618      	mov	r0, r3
 801941c:	370c      	adds	r7, #12
 801941e:	46bd      	mov	sp, r7
 8019420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019424:	4770      	bx	lr

08019426 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8019426:	b590      	push	{r4, r7, lr}
 8019428:	b083      	sub	sp, #12
 801942a:	af00      	add	r7, sp, #0
 801942c:	6078      	str	r0, [r7, #4]
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	f7ff ffed 	bl	801940e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 8019434:	4604      	mov	r4, r0
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f8a2 	bl	8019580 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 801943c:	4603      	mov	r3, r0
 801943e:	009b      	lsls	r3, r3, #2
 8019440:	4423      	add	r3, r4
 8019442:	4618      	mov	r0, r3
 8019444:	370c      	adds	r7, #12
 8019446:	46bd      	mov	sp, r7
 8019448:	bd90      	pop	{r4, r7, pc}

0801944a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
    distance(_InputIterator __first, _InputIterator __last)
 801944a:	b5b0      	push	{r4, r5, r7, lr}
 801944c:	b082      	sub	sp, #8
 801944e:	af00      	add	r7, sp, #0
 8019450:	6078      	str	r0, [r7, #4]
 8019452:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8019454:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8019456:	1d3b      	adds	r3, r7, #4
 8019458:	4618      	mov	r0, r3
 801945a:	f000 f89d 	bl	8019598 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 801945e:	462a      	mov	r2, r5
 8019460:	6839      	ldr	r1, [r7, #0]
 8019462:	4620      	mov	r0, r4
 8019464:	f000 f8a2 	bl	80195ac <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 8019468:	4603      	mov	r3, r0
    }
 801946a:	4618      	mov	r0, r3
 801946c:	3708      	adds	r7, #8
 801946e:	46bd      	mov	sp, r7
 8019470:	bdb0      	pop	{r4, r5, r7, pc}

08019472 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8019472:	b590      	push	{r4, r7, lr}
 8019474:	b087      	sub	sp, #28
 8019476:	af00      	add	r7, sp, #0
 8019478:	60f8      	str	r0, [r7, #12]
 801947a:	60b9      	str	r1, [r7, #8]
 801947c:	607a      	str	r2, [r7, #4]
 801947e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8019480:	6879      	ldr	r1, [r7, #4]
 8019482:	68b8      	ldr	r0, [r7, #8]
 8019484:	f7ff ffe1 	bl	801944a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8019488:	4603      	mov	r3, r0
 801948a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801948c:	68fc      	ldr	r4, [r7, #12]
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	4618      	mov	r0, r3
 8019492:	f000 f827 	bl	80194e4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 8019496:	4603      	mov	r3, r0
 8019498:	4619      	mov	r1, r3
 801949a:	6978      	ldr	r0, [r7, #20]
 801949c:	f000 f896 	bl	80195cc <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 80194a0:	4603      	mov	r3, r0
 80194a2:	4619      	mov	r1, r3
 80194a4:	4620      	mov	r0, r4
 80194a6:	f000 f8b9 	bl	801961c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 80194aa:	4602      	mov	r2, r0
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	009b      	lsls	r3, r3, #2
 80194b8:	441a      	add	r2, r3
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	4618      	mov	r0, r3
 80194c6:	f000 f80d 	bl	80194e4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 80194ca:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80194cc:	4622      	mov	r2, r4
 80194ce:	6879      	ldr	r1, [r7, #4]
 80194d0:	68b8      	ldr	r0, [r7, #8]
 80194d2:	f000 f8b7 	bl	8019644 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 80194d6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	605a      	str	r2, [r3, #4]
	}
 80194dc:	bf00      	nop
 80194de:	371c      	adds	r7, #28
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd90      	pop	{r4, r7, pc}

080194e4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80194e4:	b480      	push	{r7}
 80194e6:	b083      	sub	sp, #12
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	4618      	mov	r0, r3
 80194f0:	370c      	adds	r7, #12
 80194f2:	46bd      	mov	sp, r7
 80194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f8:	4770      	bx	lr

080194fa <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80194fa:	b580      	push	{r7, lr}
 80194fc:	b084      	sub	sp, #16
 80194fe:	af00      	add	r7, sp, #0
 8019500:	60f8      	str	r0, [r7, #12]
 8019502:	60b9      	str	r1, [r7, #8]
 8019504:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8019506:	68b9      	ldr	r1, [r7, #8]
 8019508:	68f8      	ldr	r0, [r7, #12]
 801950a:	f000 f8ac 	bl	8019666 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 801950e:	bf00      	nop
 8019510:	3710      	adds	r7, #16
 8019512:	46bd      	mov	sp, r7
 8019514:	bd80      	pop	{r7, pc}

08019516 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019516:	b480      	push	{r7}
 8019518:	b083      	sub	sp, #12
 801951a:	af00      	add	r7, sp, #0
 801951c:	6078      	str	r0, [r7, #4]
 801951e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	681a      	ldr	r2, [r3, #0]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	601a      	str	r2, [r3, #0]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	4618      	mov	r0, r3
 801952c:	370c      	adds	r7, #12
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr

08019536 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8019536:	b580      	push	{r7, lr}
 8019538:	b082      	sub	sp, #8
 801953a:	af00      	add	r7, sp, #0
 801953c:	6078      	str	r0, [r7, #4]
 801953e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8019540:	6839      	ldr	r1, [r7, #0]
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f000 f8a5 	bl	8019692 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	4618      	mov	r0, r3
 801954c:	f000 f8af 	bl	80196ae <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	4618      	mov	r0, r3
 8019554:	3708      	adds	r7, #8
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}

0801955a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 801955a:	b580      	push	{r7, lr}
 801955c:	b084      	sub	sp, #16
 801955e:	af00      	add	r7, sp, #0
 8019560:	60f8      	str	r0, [r7, #12]
 8019562:	60b9      	str	r1, [r7, #8]
 8019564:	607a      	str	r2, [r7, #4]
	if (__p)
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d005      	beq.n	8019578 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	68b9      	ldr	r1, [r7, #8]
 8019572:	4618      	mov	r0, r3
 8019574:	f000 f8af 	bl	80196d6 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 8019578:	bf00      	nop
 801957a:	3710      	adds	r7, #16
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}

08019580 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8019580:	b480      	push	{r7}
 8019582:	b083      	sub	sp, #12
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	685b      	ldr	r3, [r3, #4]
 801958c:	4618      	mov	r0, r3
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr

08019598 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
    __iterator_category(const _Iter&)
 8019598:	b480      	push	{r7}
 801959a:	b083      	sub	sp, #12
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80195a0:	4618      	mov	r0, r3
 80195a2:	370c      	adds	r7, #12
 80195a4:	46bd      	mov	sp, r7
 80195a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195aa:	4770      	bx	lr

080195ac <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80195ac:	b480      	push	{r7}
 80195ae:	b085      	sub	sp, #20
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80195b8:	68ba      	ldr	r2, [r7, #8]
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	1ad3      	subs	r3, r2, r3
 80195be:	109b      	asrs	r3, r3, #2
    }
 80195c0:	4618      	mov	r0, r3
 80195c2:	3714      	adds	r7, #20
 80195c4:	46bd      	mov	sp, r7
 80195c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ca:	4770      	bx	lr

080195cc <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80195cc:	b590      	push	{r4, r7, lr}
 80195ce:	b085      	sub	sp, #20
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
 80195d4:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80195d6:	f107 030c 	add.w	r3, r7, #12
 80195da:	6839      	ldr	r1, [r7, #0]
 80195dc:	4618      	mov	r0, r3
 80195de:	f000 f858 	bl	8019692 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 80195e2:	f107 030c 	add.w	r3, r7, #12
 80195e6:	4618      	mov	r0, r3
 80195e8:	f000 f8a0 	bl	801972c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 80195ec:	4602      	mov	r2, r0
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	4293      	cmp	r3, r2
 80195f2:	bf8c      	ite	hi
 80195f4:	2301      	movhi	r3, #1
 80195f6:	2300      	movls	r3, #0
 80195f8:	b2dc      	uxtb	r4, r3
 80195fa:	f107 030c 	add.w	r3, r7, #12
 80195fe:	4618      	mov	r0, r3
 8019600:	f7ff fe52 	bl	80192a8 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 8019604:	2c00      	cmp	r4, #0
 8019606:	d002      	beq.n	801960e <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 8019608:	4803      	ldr	r0, [pc, #12]	; (8019618 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 801960a:	f009 fe31 	bl	8023270 <_ZSt20__throw_length_errorPKc>
	return __n;
 801960e:	687b      	ldr	r3, [r7, #4]
      }
 8019610:	4618      	mov	r0, r3
 8019612:	3714      	adds	r7, #20
 8019614:	46bd      	mov	sp, r7
 8019616:	bd90      	pop	{r4, r7, pc}
 8019618:	080238cc 	.word	0x080238cc

0801961c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
 8019624:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d006      	beq.n	801963a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	6839      	ldr	r1, [r7, #0]
 8019630:	4618      	mov	r0, r3
 8019632:	f000 f895 	bl	8019760 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 8019636:	4603      	mov	r3, r0
 8019638:	e000      	b.n	801963c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 801963a:	2300      	movs	r3, #0
      }
 801963c:	4618      	mov	r0, r3
 801963e:	3708      	adds	r7, #8
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}

08019644 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8019644:	b580      	push	{r7, lr}
 8019646:	b084      	sub	sp, #16
 8019648:	af00      	add	r7, sp, #0
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	607a      	str	r2, [r7, #4]
 8019650:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	68b9      	ldr	r1, [r7, #8]
 8019656:	68f8      	ldr	r0, [r7, #12]
 8019658:	f000 f8a2 	bl	80197a0 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 801965c:	4603      	mov	r3, r0
 801965e:	4618      	mov	r0, r3
 8019660:	3710      	adds	r7, #16
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}

08019666 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8019666:	b580      	push	{r7, lr}
 8019668:	b082      	sub	sp, #8
 801966a:	af00      	add	r7, sp, #0
 801966c:	6078      	str	r0, [r7, #4]
 801966e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8019670:	f7e6 fe4e 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8019674:	4603      	mov	r3, r0
 8019676:	2b00      	cmp	r3, #0
 8019678:	d004      	beq.n	8019684 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 801967a:	6839      	ldr	r1, [r7, #0]
 801967c:	6878      	ldr	r0, [r7, #4]
 801967e:	f000 f8a1 	bl	80197c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 8019682:	e003      	b.n	801968c <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
	__destroy(__first, __last);
 8019684:	6839      	ldr	r1, [r7, #0]
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f000 f8b4 	bl	80197f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 801968c:	3708      	adds	r7, #8
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}

08019692 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8019692:	b580      	push	{r7, lr}
 8019694:	b082      	sub	sp, #8
 8019696:	af00      	add	r7, sp, #0
 8019698:	6078      	str	r0, [r7, #4]
 801969a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801969c:	6839      	ldr	r1, [r7, #0]
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f000 f8b3 	bl	801980a <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	4618      	mov	r0, r3
 80196a8:	3708      	adds	r7, #8
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}

080196ae <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80196ae:	b480      	push	{r7}
 80196b0:	b083      	sub	sp, #12
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2200      	movs	r2, #0
 80196ba:	601a      	str	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2200      	movs	r2, #0
 80196c0:	605a      	str	r2, [r3, #4]
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2200      	movs	r2, #0
 80196c6:	609a      	str	r2, [r3, #8]
	{ }
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	4618      	mov	r0, r3
 80196cc:	370c      	adds	r7, #12
 80196ce:	46bd      	mov	sp, r7
 80196d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d4:	4770      	bx	lr

080196d6 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80196d6:	b580      	push	{r7, lr}
 80196d8:	b088      	sub	sp, #32
 80196da:	af00      	add	r7, sp, #0
 80196dc:	60f8      	str	r0, [r7, #12]
 80196de:	60b9      	str	r1, [r7, #8]
 80196e0:	607a      	str	r2, [r7, #4]
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	61fb      	str	r3, [r7, #28]
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	61bb      	str	r3, [r7, #24]
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80196ee:	f7e6 fe0f 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80196f2:	4603      	mov	r3, r0
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d003      	beq.n	8019700 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80196f8:	69b8      	ldr	r0, [r7, #24]
 80196fa:	f009 fcee 	bl	80230da <_ZdlPv>
	    return;
 80196fe:	e005      	b.n	801970c <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8019700:	697a      	ldr	r2, [r7, #20]
 8019702:	69b9      	ldr	r1, [r7, #24]
 8019704:	69f8      	ldr	r0, [r7, #28]
 8019706:	f000 f8c2 	bl	801988e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 801970a:	bf00      	nop
 801970c:	bf00      	nop
 801970e:	3720      	adds	r7, #32
 8019710:	46bd      	mov	sp, r7
 8019712:	bd80      	pop	{r7, pc}

08019714 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8019714:	b480      	push	{r7}
 8019716:	b083      	sub	sp, #12
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801971c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8019720:	4618      	mov	r0, r3
 8019722:	370c      	adds	r7, #12
 8019724:	46bd      	mov	sp, r7
 8019726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972a:	4770      	bx	lr

0801972c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801972c:	b580      	push	{r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8019734:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8019738:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801973a:	6878      	ldr	r0, [r7, #4]
 801973c:	f7ff ffea 	bl	8019714 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 8019740:	4603      	mov	r3, r0
 8019742:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8019744:	f107 0208 	add.w	r2, r7, #8
 8019748:	f107 030c 	add.w	r3, r7, #12
 801974c:	4611      	mov	r1, r2
 801974e:	4618      	mov	r0, r3
 8019750:	f7e6 fe8d 	bl	800046e <_ZSt3minIjERKT_S2_S2_>
 8019754:	4603      	mov	r3, r0
 8019756:	681b      	ldr	r3, [r3, #0]
      }
 8019758:	4618      	mov	r0, r3
 801975a:	3710      	adds	r7, #16
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}

08019760 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
 8019768:	6039      	str	r1, [r7, #0]
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	60fb      	str	r3, [r7, #12]
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8019772:	f7e6 fdcd 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d006      	beq.n	801978a <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	4618      	mov	r0, r3
 8019782:	f009 fcae 	bl	80230e2 <_Znwj>
 8019786:	4603      	mov	r3, r0
 8019788:	e006      	b.n	8019798 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801978a:	2200      	movs	r2, #0
 801978c:	68b9      	ldr	r1, [r7, #8]
 801978e:	68f8      	ldr	r0, [r7, #12]
 8019790:	f000 f88c 	bl	80198ac <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 8019794:	4603      	mov	r3, r0
 8019796:	bf00      	nop
      { return __a.allocate(__n); }
 8019798:	4618      	mov	r0, r3
 801979a:	3710      	adds	r7, #16
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}

080197a0 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b086      	sub	sp, #24
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	60f8      	str	r0, [r7, #12]
 80197a8:	60b9      	str	r1, [r7, #8]
 80197aa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80197ac:	2301      	movs	r3, #1
 80197ae:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80197b0:	687a      	ldr	r2, [r7, #4]
 80197b2:	68b9      	ldr	r1, [r7, #8]
 80197b4:	68f8      	ldr	r0, [r7, #12]
 80197b6:	f000 f834 	bl	8019822 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 80197ba:	4603      	mov	r3, r0
    }
 80197bc:	4618      	mov	r0, r3
 80197be:	3718      	adds	r7, #24
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}

080197c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b082      	sub	sp, #8
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80197ce:	687a      	ldr	r2, [r7, #4]
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d00a      	beq.n	80197ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f000 f843 	bl	8019862 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 80197dc:	4603      	mov	r3, r0
 80197de:	4618      	mov	r0, r3
 80197e0:	f000 f84a 	bl	8019878 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	3304      	adds	r3, #4
 80197e8:	607b      	str	r3, [r7, #4]
 80197ea:	e7f0      	b.n	80197ce <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 80197ec:	bf00      	nop
 80197ee:	3708      	adds	r7, #8
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}

080197f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80197f4:	b480      	push	{r7}
 80197f6:	b083      	sub	sp, #12
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
 80197fe:	bf00      	nop
 8019800:	370c      	adds	r7, #12
 8019802:	46bd      	mov	sp, r7
 8019804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019808:	4770      	bx	lr

0801980a <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801980a:	b480      	push	{r7}
 801980c:	b083      	sub	sp, #12
 801980e:	af00      	add	r7, sp, #0
 8019810:	6078      	str	r0, [r7, #4]
 8019812:	6039      	str	r1, [r7, #0]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	4618      	mov	r0, r3
 8019818:	370c      	adds	r7, #12
 801981a:	46bd      	mov	sp, r7
 801981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019820:	4770      	bx	lr

08019822 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8019822:	b580      	push	{r7, lr}
 8019824:	b086      	sub	sp, #24
 8019826:	af00      	add	r7, sp, #0
 8019828:	60f8      	str	r0, [r7, #12]
 801982a:	60b9      	str	r1, [r7, #8]
 801982c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8019832:	68fa      	ldr	r2, [r7, #12]
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	429a      	cmp	r2, r3
 8019838:	d00e      	beq.n	8019858 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 801983a:	6978      	ldr	r0, [r7, #20]
 801983c:	f000 f811 	bl	8019862 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 8019840:	4603      	mov	r3, r0
 8019842:	68f9      	ldr	r1, [r7, #12]
 8019844:	4618      	mov	r0, r3
 8019846:	f000 f850 	bl	80198ea <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	3304      	adds	r3, #4
 801984e:	60fb      	str	r3, [r7, #12]
 8019850:	697b      	ldr	r3, [r7, #20]
 8019852:	3304      	adds	r3, #4
 8019854:	617b      	str	r3, [r7, #20]
 8019856:	e7ec      	b.n	8019832 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 8019858:	697b      	ldr	r3, [r7, #20]
	}
 801985a:	4618      	mov	r0, r3
 801985c:	3718      	adds	r7, #24
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}

08019862 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8019862:	b480      	push	{r7}
 8019864:	b083      	sub	sp, #12
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	4618      	mov	r0, r3
 801986e:	370c      	adds	r7, #12
 8019870:	46bd      	mov	sp, r7
 8019872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019876:	4770      	bx	lr

08019878 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8019880:	6878      	ldr	r0, [r7, #4]
 8019882:	f000 f847 	bl	8019914 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 8019886:	bf00      	nop
 8019888:	3708      	adds	r7, #8
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}

0801988e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 801988e:	b580      	push	{r7, lr}
 8019890:	b084      	sub	sp, #16
 8019892:	af00      	add	r7, sp, #0
 8019894:	60f8      	str	r0, [r7, #12]
 8019896:	60b9      	str	r1, [r7, #8]
 8019898:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	009b      	lsls	r3, r3, #2
 801989e:	4619      	mov	r1, r3
 80198a0:	68b8      	ldr	r0, [r7, #8]
 80198a2:	f009 fc1c 	bl	80230de <_ZdlPvj>
      }
 80198a6:	3710      	adds	r7, #16
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}

080198ac <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b084      	sub	sp, #16
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80198b8:	68f8      	ldr	r0, [r7, #12]
 80198ba:	f000 f835 	bl	8019928 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 80198be:	4602      	mov	r2, r0
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	4293      	cmp	r3, r2
 80198c4:	bf8c      	ite	hi
 80198c6:	2301      	movhi	r3, #1
 80198c8:	2300      	movls	r3, #0
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d001      	beq.n	80198d4 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80198d0:	f009 fccb 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	4618      	mov	r0, r3
 80198da:	f009 fc02 	bl	80230e2 <_Znwj>
 80198de:	4603      	mov	r3, r0
 80198e0:	bf00      	nop
      }
 80198e2:	4618      	mov	r0, r3
 80198e4:	3710      	adds	r7, #16
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}

080198ea <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80198ea:	b590      	push	{r4, r7, lr}
 80198ec:	b083      	sub	sp, #12
 80198ee:	af00      	add	r7, sp, #0
 80198f0:	6078      	str	r0, [r7, #4]
 80198f2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 80198f4:	6838      	ldr	r0, [r7, #0]
 80198f6:	f000 f823 	bl	8019940 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 80198fa:	4604      	mov	r4, r0
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	4619      	mov	r1, r3
 8019900:	2004      	movs	r0, #4
 8019902:	f7e6 fd3b 	bl	800037c <_ZnwjPv>
 8019906:	4602      	mov	r2, r0
 8019908:	6823      	ldr	r3, [r4, #0]
 801990a:	6013      	str	r3, [r2, #0]
 801990c:	bf00      	nop
 801990e:	370c      	adds	r7, #12
 8019910:	46bd      	mov	sp, r7
 8019912:	bd90      	pop	{r4, r7, pc}

08019914 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8019914:	b480      	push	{r7}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
    }
 801991c:	bf00      	nop
 801991e:	370c      	adds	r7, #12
 8019920:	46bd      	mov	sp, r7
 8019922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019926:	4770      	bx	lr

08019928 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8019928:	b480      	push	{r7}
 801992a:	b083      	sub	sp, #12
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8019930:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8019934:	4618      	mov	r0, r3
 8019936:	370c      	adds	r7, #12
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr

08019940 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019940:	b480      	push	{r7}
 8019942:	b083      	sub	sp, #12
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	4618      	mov	r0, r3
 801994c:	370c      	adds	r7, #12
 801994e:	46bd      	mov	sp, r7
 8019950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019954:	4770      	bx	lr
	...

08019958 <_Z41__static_initialization_and_destruction_0ii>:
 8019958:	b580      	push	{r7, lr}
 801995a:	b0f4      	sub	sp, #464	; 0x1d0
 801995c:	af00      	add	r7, sp, #0
 801995e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019962:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8019966:	6018      	str	r0, [r3, #0]
 8019968:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801996c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8019970:	6019      	str	r1, [r3, #0]
 8019972:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019976:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	2b01      	cmp	r3, #1
 801997e:	f040 834e 	bne.w	801a01e <_Z41__static_initialization_and_destruction_0ii+0x6c6>
 8019982:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019986:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019990:	4293      	cmp	r3, r2
 8019992:	f040 8344 	bne.w	801a01e <_Z41__static_initialization_and_destruction_0ii+0x6c6>
Pin PE2(PORT_E, PIN_2);
 8019996:	2204      	movs	r2, #4
 8019998:	49bc      	ldr	r1, [pc, #752]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 801999a:	48bd      	ldr	r0, [pc, #756]	; (8019c90 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 801999c:	f7ff fad3 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PE3(PORT_E, PIN_3);
 80199a0:	2208      	movs	r2, #8
 80199a2:	49ba      	ldr	r1, [pc, #744]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80199a4:	48bb      	ldr	r0, [pc, #748]	; (8019c94 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80199a6:	f7ff face 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PE4(PORT_E, PIN_4, AF4);
 80199aa:	2304      	movs	r3, #4
 80199ac:	2210      	movs	r2, #16
 80199ae:	49b7      	ldr	r1, [pc, #732]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80199b0:	48b9      	ldr	r0, [pc, #740]	; (8019c98 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80199b2:	f7ff fadf 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE5(PORT_E, PIN_5, AF4);
 80199b6:	2304      	movs	r3, #4
 80199b8:	2220      	movs	r2, #32
 80199ba:	49b4      	ldr	r1, [pc, #720]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80199bc:	48b7      	ldr	r0, [pc, #732]	; (8019c9c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80199be:	f7ff fad9 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE6(PORT_E, PIN_6, AF4);
 80199c2:	2304      	movs	r3, #4
 80199c4:	2240      	movs	r2, #64	; 0x40
 80199c6:	49b1      	ldr	r1, [pc, #708]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80199c8:	48b5      	ldr	r0, [pc, #724]	; (8019ca0 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80199ca:	f7ff fad3 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC13(PORT_C, PIN_13);
 80199ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80199d2:	49b4      	ldr	r1, [pc, #720]	; (8019ca4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80199d4:	48b4      	ldr	r0, [pc, #720]	; (8019ca8 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80199d6:	f7ff fab6 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF0(PORT_F, PIN_0, AF13);
 80199da:	230d      	movs	r3, #13
 80199dc:	2201      	movs	r2, #1
 80199de:	49b3      	ldr	r1, [pc, #716]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80199e0:	48b3      	ldr	r0, [pc, #716]	; (8019cb0 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80199e2:	f7ff fac7 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PF1(PORT_F, PIN_1, AF13);
 80199e6:	230d      	movs	r3, #13
 80199e8:	2202      	movs	r2, #2
 80199ea:	49b0      	ldr	r1, [pc, #704]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80199ec:	48b1      	ldr	r0, [pc, #708]	; (8019cb4 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80199ee:	f7ff fac1 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PF2(PORT_F, PIN_2, AF13);
 80199f2:	230d      	movs	r3, #13
 80199f4:	2204      	movs	r2, #4
 80199f6:	49ad      	ldr	r1, [pc, #692]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80199f8:	48af      	ldr	r0, [pc, #700]	; (8019cb8 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80199fa:	f7ff fabb 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PF3(PORT_F, PIN_3, AF13);
 80199fe:	230d      	movs	r3, #13
 8019a00:	2208      	movs	r2, #8
 8019a02:	49aa      	ldr	r1, [pc, #680]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a04:	48ad      	ldr	r0, [pc, #692]	; (8019cbc <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8019a06:	f7ff fab5 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PF4(PORT_F, PIN_4);
 8019a0a:	2210      	movs	r2, #16
 8019a0c:	49a7      	ldr	r1, [pc, #668]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a0e:	48ac      	ldr	r0, [pc, #688]	; (8019cc0 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8019a10:	f7ff fa99 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF5(PORT_F, PIN_5);
 8019a14:	2220      	movs	r2, #32
 8019a16:	49a5      	ldr	r1, [pc, #660]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a18:	48aa      	ldr	r0, [pc, #680]	; (8019cc4 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8019a1a:	f7ff fa94 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF6(PORT_F, PIN_6);
 8019a1e:	2240      	movs	r2, #64	; 0x40
 8019a20:	49a2      	ldr	r1, [pc, #648]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a22:	48a9      	ldr	r0, [pc, #676]	; (8019cc8 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8019a24:	f7ff fa8f 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF7(PORT_F, PIN_7);
 8019a28:	2280      	movs	r2, #128	; 0x80
 8019a2a:	49a0      	ldr	r1, [pc, #640]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a2c:	48a7      	ldr	r0, [pc, #668]	; (8019ccc <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8019a2e:	f7ff fa8a 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF8(PORT_F, PIN_8);
 8019a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a36:	499d      	ldr	r1, [pc, #628]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a38:	48a5      	ldr	r0, [pc, #660]	; (8019cd0 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8019a3a:	f7ff fa84 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF9(PORT_F, PIN_9);
 8019a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a42:	499a      	ldr	r1, [pc, #616]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a44:	48a3      	ldr	r0, [pc, #652]	; (8019cd4 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8019a46:	f7ff fa7e 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF10(PORT_F, PIN_10);
 8019a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019a4e:	4997      	ldr	r1, [pc, #604]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019a50:	48a1      	ldr	r0, [pc, #644]	; (8019cd8 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8019a52:	f7ff fa78 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC0(PORT_C, PIN_0);
 8019a56:	2201      	movs	r2, #1
 8019a58:	4992      	ldr	r1, [pc, #584]	; (8019ca4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8019a5a:	48a0      	ldr	r0, [pc, #640]	; (8019cdc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8019a5c:	f7ff fa73 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC1(PORT_C, PIN_1, AF11);
 8019a60:	230b      	movs	r3, #11
 8019a62:	2202      	movs	r2, #2
 8019a64:	498f      	ldr	r1, [pc, #572]	; (8019ca4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8019a66:	489e      	ldr	r0, [pc, #632]	; (8019ce0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8019a68:	f7ff fa84 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA0(PORT_A, PIN_0);
 8019a6c:	2201      	movs	r2, #1
 8019a6e:	499d      	ldr	r1, [pc, #628]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019a70:	489d      	ldr	r0, [pc, #628]	; (8019ce8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8019a72:	f7ff fa68 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA1(PORT_A, PIN_1);
 8019a76:	2202      	movs	r2, #2
 8019a78:	499a      	ldr	r1, [pc, #616]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019a7a:	489c      	ldr	r0, [pc, #624]	; (8019cec <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8019a7c:	f7ff fa63 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA2(PORT_A, PIN_2, AF11);
 8019a80:	230b      	movs	r3, #11
 8019a82:	2204      	movs	r2, #4
 8019a84:	4997      	ldr	r1, [pc, #604]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019a86:	489a      	ldr	r0, [pc, #616]	; (8019cf0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8019a88:	f7ff fa74 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA3(PORT_A, PIN_3);
 8019a8c:	2208      	movs	r2, #8
 8019a8e:	4995      	ldr	r1, [pc, #596]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019a90:	4898      	ldr	r0, [pc, #608]	; (8019cf4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8019a92:	f7ff fa58 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA4(PORT_A, PIN_4);
 8019a96:	2210      	movs	r2, #16
 8019a98:	4992      	ldr	r1, [pc, #584]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019a9a:	4897      	ldr	r0, [pc, #604]	; (8019cf8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8019a9c:	f7ff fa53 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA5(PORT_A, PIN_5);
 8019aa0:	2220      	movs	r2, #32
 8019aa2:	4990      	ldr	r1, [pc, #576]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019aa4:	4895      	ldr	r0, [pc, #596]	; (8019cfc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8019aa6:	f7ff fa4e 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA6(PORT_A, PIN_6);
 8019aaa:	2240      	movs	r2, #64	; 0x40
 8019aac:	498d      	ldr	r1, [pc, #564]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019aae:	4894      	ldr	r0, [pc, #592]	; (8019d00 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8019ab0:	f7ff fa49 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA7(PORT_A, PIN_7);
 8019ab4:	2280      	movs	r2, #128	; 0x80
 8019ab6:	498b      	ldr	r1, [pc, #556]	; (8019ce4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8019ab8:	4892      	ldr	r0, [pc, #584]	; (8019d04 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8019aba:	f7ff fa44 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC4(PORT_C, PIN_4, AF11);
 8019abe:	230b      	movs	r3, #11
 8019ac0:	2210      	movs	r2, #16
 8019ac2:	4978      	ldr	r1, [pc, #480]	; (8019ca4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8019ac4:	4890      	ldr	r0, [pc, #576]	; (8019d08 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8019ac6:	f7ff fa55 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC5(PORT_C, PIN_5, AF11);
 8019aca:	230b      	movs	r3, #11
 8019acc:	2220      	movs	r2, #32
 8019ace:	4975      	ldr	r1, [pc, #468]	; (8019ca4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8019ad0:	488e      	ldr	r0, [pc, #568]	; (8019d0c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8019ad2:	f7ff fa4f 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB0(PORT_B, PIN_0);
 8019ad6:	2201      	movs	r2, #1
 8019ad8:	498d      	ldr	r1, [pc, #564]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019ada:	488e      	ldr	r0, [pc, #568]	; (8019d14 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8019adc:	f7ff fa33 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB1(PORT_B, PIN_1);
 8019ae0:	2202      	movs	r2, #2
 8019ae2:	498b      	ldr	r1, [pc, #556]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019ae4:	488c      	ldr	r0, [pc, #560]	; (8019d18 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8019ae6:	f7ff fa2e 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB2(PORT_B, PIN_2);
 8019aea:	2204      	movs	r2, #4
 8019aec:	4988      	ldr	r1, [pc, #544]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019aee:	488b      	ldr	r0, [pc, #556]	; (8019d1c <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8019af0:	f7ff fa29 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF11(PORT_F, PIN_11);
 8019af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019af8:	496c      	ldr	r1, [pc, #432]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019afa:	4889      	ldr	r0, [pc, #548]	; (8019d20 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8019afc:	f7ff fa23 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF12(PORT_F, PIN_12);
 8019b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019b04:	4969      	ldr	r1, [pc, #420]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019b06:	4887      	ldr	r0, [pc, #540]	; (8019d24 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8019b08:	f7ff fa1d 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF13(PORT_F, PIN_13);
 8019b0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019b10:	4966      	ldr	r1, [pc, #408]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019b12:	4885      	ldr	r0, [pc, #532]	; (8019d28 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8019b14:	f7ff fa17 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF14(PORT_F, PIN_14);
 8019b18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019b1c:	4963      	ldr	r1, [pc, #396]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019b1e:	4883      	ldr	r0, [pc, #524]	; (8019d2c <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8019b20:	f7ff fa11 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PF15(PORT_F, PIN_15);
 8019b24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019b28:	4960      	ldr	r1, [pc, #384]	; (8019cac <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8019b2a:	4881      	ldr	r0, [pc, #516]	; (8019d30 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8019b2c:	f7ff fa0b 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG0(PORT_G, PIN_0);
 8019b30:	2201      	movs	r2, #1
 8019b32:	4980      	ldr	r1, [pc, #512]	; (8019d34 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8019b34:	4880      	ldr	r0, [pc, #512]	; (8019d38 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8019b36:	f7ff fa06 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG1(PORT_G, PIN_1);
 8019b3a:	2202      	movs	r2, #2
 8019b3c:	497d      	ldr	r1, [pc, #500]	; (8019d34 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8019b3e:	487f      	ldr	r0, [pc, #508]	; (8019d3c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8019b40:	f7ff fa01 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PE7(PORT_E, PIN_7);
 8019b44:	2280      	movs	r2, #128	; 0x80
 8019b46:	4951      	ldr	r1, [pc, #324]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b48:	487d      	ldr	r0, [pc, #500]	; (8019d40 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8019b4a:	f7ff f9fc 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PE8(PORT_E, PIN_8, AF1);
 8019b4e:	2301      	movs	r3, #1
 8019b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019b54:	494d      	ldr	r1, [pc, #308]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b56:	487b      	ldr	r0, [pc, #492]	; (8019d44 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8019b58:	f7ff fa0c 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE9(PORT_E, PIN_9, AF1);
 8019b5c:	2301      	movs	r3, #1
 8019b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b62:	494a      	ldr	r1, [pc, #296]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b64:	4878      	ldr	r0, [pc, #480]	; (8019d48 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8019b66:	f7ff fa05 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE10(PORT_E, PIN_10, AF1);
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019b70:	4946      	ldr	r1, [pc, #280]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b72:	4876      	ldr	r0, [pc, #472]	; (8019d4c <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8019b74:	f7ff f9fe 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE11(PORT_E, PIN_11, AF1);
 8019b78:	2301      	movs	r3, #1
 8019b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019b7e:	4943      	ldr	r1, [pc, #268]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b80:	4873      	ldr	r0, [pc, #460]	; (8019d50 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8019b82:	f7ff f9f7 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE12(PORT_E, PIN_12, AF1);
 8019b86:	2301      	movs	r3, #1
 8019b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019b8c:	493f      	ldr	r1, [pc, #252]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b8e:	4871      	ldr	r0, [pc, #452]	; (8019d54 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8019b90:	f7ff f9f0 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE13(PORT_E, PIN_13, AF1);
 8019b94:	2301      	movs	r3, #1
 8019b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019b9a:	493c      	ldr	r1, [pc, #240]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019b9c:	486e      	ldr	r0, [pc, #440]	; (8019d58 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8019b9e:	f7ff f9e9 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE14(PORT_E, PIN_14, AF1);
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019ba8:	4938      	ldr	r1, [pc, #224]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019baa:	486c      	ldr	r0, [pc, #432]	; (8019d5c <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8019bac:	f7ff f9e2 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE15(PORT_E, PIN_15);
 8019bb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019bb4:	4935      	ldr	r1, [pc, #212]	; (8019c8c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8019bb6:	486a      	ldr	r0, [pc, #424]	; (8019d60 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8019bb8:	f7ff f9c5 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB10(PORT_B, PIN_10);
 8019bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019bc0:	4953      	ldr	r1, [pc, #332]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019bc2:	4868      	ldr	r0, [pc, #416]	; (8019d64 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8019bc4:	f7ff f9bf 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB11(PORT_B, PIN_11);
 8019bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019bcc:	4950      	ldr	r1, [pc, #320]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019bce:	4866      	ldr	r0, [pc, #408]	; (8019d68 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8019bd0:	f7ff f9b9 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB12(PORT_B, PIN_12);
 8019bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019bd8:	494d      	ldr	r1, [pc, #308]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019bda:	4864      	ldr	r0, [pc, #400]	; (8019d6c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8019bdc:	f7ff f9b3 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB13(PORT_B, PIN_13, AF11);
 8019be0:	230b      	movs	r3, #11
 8019be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019be6:	494a      	ldr	r1, [pc, #296]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019be8:	4861      	ldr	r0, [pc, #388]	; (8019d70 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8019bea:	f7ff f9c3 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB14(PORT_B, PIN_14, AF2);
 8019bee:	2302      	movs	r3, #2
 8019bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019bf4:	4946      	ldr	r1, [pc, #280]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019bf6:	485f      	ldr	r0, [pc, #380]	; (8019d74 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8019bf8:	f7ff f9bc 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB15(PORT_B, PIN_15, AF2);
 8019bfc:	2302      	movs	r3, #2
 8019bfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019c02:	4943      	ldr	r1, [pc, #268]	; (8019d10 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8019c04:	485c      	ldr	r0, [pc, #368]	; (8019d78 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8019c06:	f7ff f9b5 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD8(PORT_D, PIN_8);
 8019c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019c0e:	495b      	ldr	r1, [pc, #364]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c10:	485b      	ldr	r0, [pc, #364]	; (8019d80 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8019c12:	f7ff f998 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD9(PORT_D, PIN_9);
 8019c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c1a:	4958      	ldr	r1, [pc, #352]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c1c:	4859      	ldr	r0, [pc, #356]	; (8019d84 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8019c1e:	f7ff f992 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD10(PORT_D, PIN_10);
 8019c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019c26:	4955      	ldr	r1, [pc, #340]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c28:	4857      	ldr	r0, [pc, #348]	; (8019d88 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8019c2a:	f7ff f98c 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD11(PORT_D, PIN_11);
 8019c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019c32:	4952      	ldr	r1, [pc, #328]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c34:	4855      	ldr	r0, [pc, #340]	; (8019d8c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8019c36:	f7ff f986 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD12(PORT_D, PIN_12, AF2);
 8019c3a:	2302      	movs	r3, #2
 8019c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019c40:	494e      	ldr	r1, [pc, #312]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c42:	4853      	ldr	r0, [pc, #332]	; (8019d90 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8019c44:	f7ff f996 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD13(PORT_D, PIN_13, AF2);
 8019c48:	2302      	movs	r3, #2
 8019c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019c4e:	494b      	ldr	r1, [pc, #300]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c50:	4850      	ldr	r0, [pc, #320]	; (8019d94 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8019c52:	f7ff f98f 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD14(PORT_D, PIN_14, AF2);
 8019c56:	2302      	movs	r3, #2
 8019c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019c5c:	4947      	ldr	r1, [pc, #284]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c5e:	484e      	ldr	r0, [pc, #312]	; (8019d98 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8019c60:	f7ff f988 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD15(PORT_D, PIN_15, AF2);
 8019c64:	2302      	movs	r3, #2
 8019c66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019c6a:	4944      	ldr	r1, [pc, #272]	; (8019d7c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8019c6c:	484b      	ldr	r0, [pc, #300]	; (8019d9c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8019c6e:	f7ff f981 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PG2(PORT_G, PIN_2);
 8019c72:	2204      	movs	r2, #4
 8019c74:	492f      	ldr	r1, [pc, #188]	; (8019d34 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8019c76:	484a      	ldr	r0, [pc, #296]	; (8019da0 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8019c78:	f7ff f965 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG3(PORT_G, PIN_3);
 8019c7c:	2208      	movs	r2, #8
 8019c7e:	492d      	ldr	r1, [pc, #180]	; (8019d34 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8019c80:	4848      	ldr	r0, [pc, #288]	; (8019da4 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8019c82:	f7ff f960 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG4(PORT_G, PIN_4);
 8019c86:	2210      	movs	r2, #16
 8019c88:	492a      	ldr	r1, [pc, #168]	; (8019d34 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8019c8a:	e08d      	b.n	8019da8 <_Z41__static_initialization_and_destruction_0ii+0x450>
 8019c8c:	58021000 	.word	0x58021000
 8019c90:	24000fe0 	.word	0x24000fe0
 8019c94:	24000fe8 	.word	0x24000fe8
 8019c98:	24000ff0 	.word	0x24000ff0
 8019c9c:	24000ff8 	.word	0x24000ff8
 8019ca0:	24001000 	.word	0x24001000
 8019ca4:	58020800 	.word	0x58020800
 8019ca8:	24001008 	.word	0x24001008
 8019cac:	58021400 	.word	0x58021400
 8019cb0:	24001010 	.word	0x24001010
 8019cb4:	24001018 	.word	0x24001018
 8019cb8:	24001020 	.word	0x24001020
 8019cbc:	24001028 	.word	0x24001028
 8019cc0:	24001030 	.word	0x24001030
 8019cc4:	24001038 	.word	0x24001038
 8019cc8:	24001040 	.word	0x24001040
 8019ccc:	24001048 	.word	0x24001048
 8019cd0:	24001050 	.word	0x24001050
 8019cd4:	24001058 	.word	0x24001058
 8019cd8:	24001060 	.word	0x24001060
 8019cdc:	24001068 	.word	0x24001068
 8019ce0:	24001070 	.word	0x24001070
 8019ce4:	58020000 	.word	0x58020000
 8019ce8:	24001078 	.word	0x24001078
 8019cec:	24001080 	.word	0x24001080
 8019cf0:	24001088 	.word	0x24001088
 8019cf4:	24001090 	.word	0x24001090
 8019cf8:	24001098 	.word	0x24001098
 8019cfc:	240010a0 	.word	0x240010a0
 8019d00:	240010a8 	.word	0x240010a8
 8019d04:	240010b0 	.word	0x240010b0
 8019d08:	240010b8 	.word	0x240010b8
 8019d0c:	240010c0 	.word	0x240010c0
 8019d10:	58020400 	.word	0x58020400
 8019d14:	240010c8 	.word	0x240010c8
 8019d18:	240010d0 	.word	0x240010d0
 8019d1c:	240010d8 	.word	0x240010d8
 8019d20:	240010e0 	.word	0x240010e0
 8019d24:	240010e8 	.word	0x240010e8
 8019d28:	240010f0 	.word	0x240010f0
 8019d2c:	240010f8 	.word	0x240010f8
 8019d30:	24001100 	.word	0x24001100
 8019d34:	58021800 	.word	0x58021800
 8019d38:	24001108 	.word	0x24001108
 8019d3c:	24001110 	.word	0x24001110
 8019d40:	24001118 	.word	0x24001118
 8019d44:	24001120 	.word	0x24001120
 8019d48:	24001128 	.word	0x24001128
 8019d4c:	24001130 	.word	0x24001130
 8019d50:	24001138 	.word	0x24001138
 8019d54:	24001140 	.word	0x24001140
 8019d58:	24001148 	.word	0x24001148
 8019d5c:	24001150 	.word	0x24001150
 8019d60:	24001158 	.word	0x24001158
 8019d64:	24001160 	.word	0x24001160
 8019d68:	24001168 	.word	0x24001168
 8019d6c:	24001170 	.word	0x24001170
 8019d70:	24001178 	.word	0x24001178
 8019d74:	24001180 	.word	0x24001180
 8019d78:	24001188 	.word	0x24001188
 8019d7c:	58020c00 	.word	0x58020c00
 8019d80:	24001190 	.word	0x24001190
 8019d84:	24001198 	.word	0x24001198
 8019d88:	240011a0 	.word	0x240011a0
 8019d8c:	240011a8 	.word	0x240011a8
 8019d90:	240011b0 	.word	0x240011b0
 8019d94:	240011b8 	.word	0x240011b8
 8019d98:	240011c0 	.word	0x240011c0
 8019d9c:	240011c8 	.word	0x240011c8
 8019da0:	240011d0 	.word	0x240011d0
 8019da4:	240011d8 	.word	0x240011d8
 8019da8:	48a9      	ldr	r0, [pc, #676]	; (801a050 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8019daa:	f7ff f8cc 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG5(PORT_G, PIN_5);
 8019dae:	2220      	movs	r2, #32
 8019db0:	49a8      	ldr	r1, [pc, #672]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019db2:	48a9      	ldr	r0, [pc, #676]	; (801a058 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8019db4:	f7ff f8c7 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG6(PORT_G, PIN_6);
 8019db8:	2240      	movs	r2, #64	; 0x40
 8019dba:	49a6      	ldr	r1, [pc, #664]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019dbc:	48a7      	ldr	r0, [pc, #668]	; (801a05c <_Z41__static_initialization_and_destruction_0ii+0x704>)
 8019dbe:	f7ff f8c2 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG7(PORT_G, PIN_7);
 8019dc2:	2280      	movs	r2, #128	; 0x80
 8019dc4:	49a3      	ldr	r1, [pc, #652]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019dc6:	48a6      	ldr	r0, [pc, #664]	; (801a060 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8019dc8:	f7ff f8bd 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG8(PORT_G, PIN_8);
 8019dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019dd0:	49a0      	ldr	r1, [pc, #640]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019dd2:	48a4      	ldr	r0, [pc, #656]	; (801a064 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8019dd4:	f7ff f8b7 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC6(PORT_C, PIN_6, AF3);
 8019dd8:	2303      	movs	r3, #3
 8019dda:	2240      	movs	r2, #64	; 0x40
 8019ddc:	49a2      	ldr	r1, [pc, #648]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019dde:	48a3      	ldr	r0, [pc, #652]	; (801a06c <_Z41__static_initialization_and_destruction_0ii+0x714>)
 8019de0:	f7ff f8c8 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC7(PORT_C, PIN_7, AF3);
 8019de4:	2303      	movs	r3, #3
 8019de6:	2280      	movs	r2, #128	; 0x80
 8019de8:	499f      	ldr	r1, [pc, #636]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019dea:	48a1      	ldr	r0, [pc, #644]	; (801a070 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8019dec:	f7ff f8c2 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC8(PORT_C, PIN_8, AF2);
 8019df0:	2302      	movs	r3, #2
 8019df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019df6:	499c      	ldr	r1, [pc, #624]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019df8:	489e      	ldr	r0, [pc, #632]	; (801a074 <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 8019dfa:	f7ff f8bb 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC9(PORT_C, PIN_9, AF2);
 8019dfe:	2302      	movs	r3, #2
 8019e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019e04:	4998      	ldr	r1, [pc, #608]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019e06:	489c      	ldr	r0, [pc, #624]	; (801a078 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 8019e08:	f7ff f8b4 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA8(PORT_A, PIN_8);
 8019e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019e10:	499a      	ldr	r1, [pc, #616]	; (801a07c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8019e12:	489b      	ldr	r0, [pc, #620]	; (801a080 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 8019e14:	f7ff f897 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PA9(PORT_A, PIN_9, AF7);
 8019e18:	2307      	movs	r3, #7
 8019e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019e1e:	4997      	ldr	r1, [pc, #604]	; (801a07c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8019e20:	4898      	ldr	r0, [pc, #608]	; (801a084 <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 8019e22:	f7ff f8a7 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA10(PORT_A, PIN_10, AF7);
 8019e26:	2307      	movs	r3, #7
 8019e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019e2c:	4993      	ldr	r1, [pc, #588]	; (801a07c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8019e2e:	4896      	ldr	r0, [pc, #600]	; (801a088 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 8019e30:	f7ff f8a0 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA11(PORT_A, PIN_11, AF9);
 8019e34:	2309      	movs	r3, #9
 8019e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019e3a:	4990      	ldr	r1, [pc, #576]	; (801a07c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8019e3c:	4893      	ldr	r0, [pc, #588]	; (801a08c <_Z41__static_initialization_and_destruction_0ii+0x734>)
 8019e3e:	f7ff f899 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PA12(PORT_A, PIN_12, AF9);
 8019e42:	2309      	movs	r3, #9
 8019e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019e48:	498c      	ldr	r1, [pc, #560]	; (801a07c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8019e4a:	4891      	ldr	r0, [pc, #580]	; (801a090 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 8019e4c:	f7ff f892 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC10(PORT_C, PIN_10);
 8019e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019e54:	4984      	ldr	r1, [pc, #528]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019e56:	488f      	ldr	r0, [pc, #572]	; (801a094 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 8019e58:	f7ff f875 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC11(PORT_C, PIN_11);
 8019e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019e60:	4981      	ldr	r1, [pc, #516]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019e62:	488d      	ldr	r0, [pc, #564]	; (801a098 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 8019e64:	f7ff f86f 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC12(PORT_C, PIN_12);
 8019e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019e6c:	497e      	ldr	r1, [pc, #504]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019e6e:	488b      	ldr	r0, [pc, #556]	; (801a09c <_Z41__static_initialization_and_destruction_0ii+0x744>)
 8019e70:	f7ff f869 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD0(PORT_D, PIN_0);
 8019e74:	2201      	movs	r2, #1
 8019e76:	498a      	ldr	r1, [pc, #552]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019e78:	488a      	ldr	r0, [pc, #552]	; (801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 8019e7a:	f7ff f864 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD1(PORT_D, PIN_1);
 8019e7e:	2202      	movs	r2, #2
 8019e80:	4987      	ldr	r1, [pc, #540]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019e82:	4889      	ldr	r0, [pc, #548]	; (801a0a8 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 8019e84:	f7ff f85f 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD2(PORT_D, PIN_2);
 8019e88:	2204      	movs	r2, #4
 8019e8a:	4985      	ldr	r1, [pc, #532]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019e8c:	4887      	ldr	r0, [pc, #540]	; (801a0ac <_Z41__static_initialization_and_destruction_0ii+0x754>)
 8019e8e:	f7ff f85a 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD3(PORT_D, PIN_3);
 8019e92:	2208      	movs	r2, #8
 8019e94:	4982      	ldr	r1, [pc, #520]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019e96:	4886      	ldr	r0, [pc, #536]	; (801a0b0 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 8019e98:	f7ff f855 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD4(PORT_D, PIN_4);
 8019e9c:	2210      	movs	r2, #16
 8019e9e:	4980      	ldr	r1, [pc, #512]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019ea0:	4884      	ldr	r0, [pc, #528]	; (801a0b4 <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 8019ea2:	f7ff f850 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PD5(PORT_D, PIN_5, AF7);
 8019ea6:	2307      	movs	r3, #7
 8019ea8:	2220      	movs	r2, #32
 8019eaa:	497d      	ldr	r1, [pc, #500]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019eac:	4882      	ldr	r0, [pc, #520]	; (801a0b8 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 8019eae:	f7ff f861 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD6(PORT_D, PIN_6, AF7);
 8019eb2:	2307      	movs	r3, #7
 8019eb4:	2240      	movs	r2, #64	; 0x40
 8019eb6:	497a      	ldr	r1, [pc, #488]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019eb8:	4880      	ldr	r0, [pc, #512]	; (801a0bc <_Z41__static_initialization_and_destruction_0ii+0x764>)
 8019eba:	f7ff f85b 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PD7(PORT_D, PIN_7);
 8019ebe:	2280      	movs	r2, #128	; 0x80
 8019ec0:	4977      	ldr	r1, [pc, #476]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8019ec2:	487f      	ldr	r0, [pc, #508]	; (801a0c0 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 8019ec4:	f7ff f83f 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG9(PORT_G, PIN_9, AF2);
 8019ec8:	2302      	movs	r3, #2
 8019eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ece:	4961      	ldr	r1, [pc, #388]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019ed0:	487c      	ldr	r0, [pc, #496]	; (801a0c4 <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 8019ed2:	f7ff f84f 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PG10(PORT_G, PIN_10, AF2);
 8019ed6:	2302      	movs	r3, #2
 8019ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019edc:	495d      	ldr	r1, [pc, #372]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019ede:	487a      	ldr	r0, [pc, #488]	; (801a0c8 <_Z41__static_initialization_and_destruction_0ii+0x770>)
 8019ee0:	f7ff f848 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PG11(PORT_G, PIN_11, AF11);
 8019ee4:	230b      	movs	r3, #11
 8019ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019eea:	495a      	ldr	r1, [pc, #360]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019eec:	4877      	ldr	r0, [pc, #476]	; (801a0cc <_Z41__static_initialization_and_destruction_0ii+0x774>)
 8019eee:	f7ff f841 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PG12(PORT_G, PIN_12);
 8019ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019ef6:	4957      	ldr	r1, [pc, #348]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019ef8:	4875      	ldr	r0, [pc, #468]	; (801a0d0 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 8019efa:	f7ff f824 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG13(PORT_G, PIN_13, AF11);
 8019efe:	230b      	movs	r3, #11
 8019f00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019f04:	4953      	ldr	r1, [pc, #332]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019f06:	4873      	ldr	r0, [pc, #460]	; (801a0d4 <_Z41__static_initialization_and_destruction_0ii+0x77c>)
 8019f08:	f7ff f834 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PG14(PORT_G, PIN_14);
 8019f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019f10:	4950      	ldr	r1, [pc, #320]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019f12:	4871      	ldr	r0, [pc, #452]	; (801a0d8 <_Z41__static_initialization_and_destruction_0ii+0x780>)
 8019f14:	f7ff f817 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PG15(PORT_G, PIN_15);
 8019f18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f1c:	494d      	ldr	r1, [pc, #308]	; (801a054 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8019f1e:	486f      	ldr	r0, [pc, #444]	; (801a0dc <_Z41__static_initialization_and_destruction_0ii+0x784>)
 8019f20:	f7ff f811 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB5(PORT_B, PIN_5, AF2);
 8019f24:	2302      	movs	r3, #2
 8019f26:	2220      	movs	r2, #32
 8019f28:	496d      	ldr	r1, [pc, #436]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f2a:	486e      	ldr	r0, [pc, #440]	; (801a0e4 <_Z41__static_initialization_and_destruction_0ii+0x78c>)
 8019f2c:	f7ff f822 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB6(PORT_B, PIN_6, AF1);
 8019f30:	2301      	movs	r3, #1
 8019f32:	2240      	movs	r2, #64	; 0x40
 8019f34:	496a      	ldr	r1, [pc, #424]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f36:	486c      	ldr	r0, [pc, #432]	; (801a0e8 <_Z41__static_initialization_and_destruction_0ii+0x790>)
 8019f38:	f7ff f81c 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB7(PORT_B, PIN_7, AF1);
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	2280      	movs	r2, #128	; 0x80
 8019f40:	4967      	ldr	r1, [pc, #412]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f42:	486a      	ldr	r0, [pc, #424]	; (801a0ec <_Z41__static_initialization_and_destruction_0ii+0x794>)
 8019f44:	f7ff f816 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB8(PORT_B, PIN_8, AF1);
 8019f48:	2301      	movs	r3, #1
 8019f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019f4e:	4964      	ldr	r1, [pc, #400]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f50:	4867      	ldr	r0, [pc, #412]	; (801a0f0 <_Z41__static_initialization_and_destruction_0ii+0x798>)
 8019f52:	f7ff f80f 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PB9(PORT_B, PIN_9, AF1);
 8019f56:	2301      	movs	r3, #1
 8019f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019f5c:	4960      	ldr	r1, [pc, #384]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f5e:	4865      	ldr	r0, [pc, #404]	; (801a0f4 <_Z41__static_initialization_and_destruction_0ii+0x79c>)
 8019f60:	f7ff f808 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PE0(PORT_E, PIN_0);
 8019f64:	2201      	movs	r2, #1
 8019f66:	4964      	ldr	r1, [pc, #400]	; (801a0f8 <_Z41__static_initialization_and_destruction_0ii+0x7a0>)
 8019f68:	4864      	ldr	r0, [pc, #400]	; (801a0fc <_Z41__static_initialization_and_destruction_0ii+0x7a4>)
 8019f6a:	f7fe ffec 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PE1(PORT_E, PIN_1);
 8019f6e:	2202      	movs	r2, #2
 8019f70:	4961      	ldr	r1, [pc, #388]	; (801a0f8 <_Z41__static_initialization_and_destruction_0ii+0x7a0>)
 8019f72:	4863      	ldr	r0, [pc, #396]	; (801a100 <_Z41__static_initialization_and_destruction_0ii+0x7a8>)
 8019f74:	f7fe ffe7 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PB4(PORT_B, PIN_4, AF1);
 8019f78:	2301      	movs	r3, #1
 8019f7a:	2210      	movs	r2, #16
 8019f7c:	4958      	ldr	r1, [pc, #352]	; (801a0e0 <_Z41__static_initialization_and_destruction_0ii+0x788>)
 8019f7e:	4861      	ldr	r0, [pc, #388]	; (801a104 <_Z41__static_initialization_and_destruction_0ii+0x7ac>)
 8019f80:	f7fe fff8 	bl	8018f74 <_ZN3PinC1E8GPIOPort7GPIOPin19AlternativeFunction>
Pin PC14(PORT_C, PIN_14);
 8019f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019f88:	4937      	ldr	r1, [pc, #220]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019f8a:	485f      	ldr	r0, [pc, #380]	; (801a108 <_Z41__static_initialization_and_destruction_0ii+0x7b0>)
 8019f8c:	f7fe ffdb 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC15(PORT_C, PIN_15);
 8019f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f94:	4934      	ldr	r1, [pc, #208]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019f96:	485d      	ldr	r0, [pc, #372]	; (801a10c <_Z41__static_initialization_and_destruction_0ii+0x7b4>)
 8019f98:	f7fe ffd5 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC2(PORT_C, PIN_2);
 8019f9c:	2204      	movs	r2, #4
 8019f9e:	4932      	ldr	r1, [pc, #200]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019fa0:	485b      	ldr	r0, [pc, #364]	; (801a110 <_Z41__static_initialization_and_destruction_0ii+0x7b8>)
 8019fa2:	f7fe ffd0 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PC3(PORT_C, PIN_3);
 8019fa6:	2208      	movs	r2, #8
 8019fa8:	492f      	ldr	r1, [pc, #188]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8019faa:	485a      	ldr	r0, [pc, #360]	; (801a114 <_Z41__static_initialization_and_destruction_0ii+0x7bc>)
 8019fac:	f7fe ffcb 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PH0(PORT_H, PIN_0);
 8019fb0:	2201      	movs	r2, #1
 8019fb2:	4959      	ldr	r1, [pc, #356]	; (801a118 <_Z41__static_initialization_and_destruction_0ii+0x7c0>)
 8019fb4:	4859      	ldr	r0, [pc, #356]	; (801a11c <_Z41__static_initialization_and_destruction_0ii+0x7c4>)
 8019fb6:	f7fe ffc6 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
Pin PH1(PORT_H, PIN_1);
 8019fba:	2202      	movs	r2, #2
 8019fbc:	4956      	ldr	r1, [pc, #344]	; (801a118 <_Z41__static_initialization_and_destruction_0ii+0x7c0>)
 8019fbe:	4858      	ldr	r0, [pc, #352]	; (801a120 <_Z41__static_initialization_and_destruction_0ii+0x7c8>)
 8019fc0:	f7fe ffc1 	bl	8018f46 <_ZN3PinC1E8GPIOPort7GPIOPin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 8019fc4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019fc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8019fcc:	4a55      	ldr	r2, [pc, #340]	; (801a124 <_Z41__static_initialization_and_destruction_0ii+0x7cc>)
 8019fce:	4618      	mov	r0, r3
 8019fd0:	4611      	mov	r1, r2
 8019fd2:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8019fd6:	461a      	mov	r2, r3
 8019fd8:	f009 fa6a 	bl	80234b0 <memcpy>
 8019fdc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019fe0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8019fe4:	f107 0214 	add.w	r2, r7, #20
 8019fe8:	601a      	str	r2, [r3, #0]
 8019fea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019fee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8019ff2:	226e      	movs	r2, #110	; 0x6e
 8019ff4:	605a      	str	r2, [r3, #4]
 8019ff6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7ff f948 	bl	8019290 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 801a000:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801a004:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801a008:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 801a00c:	ca06      	ldmia	r2, {r1, r2}
 801a00e:	4846      	ldr	r0, [pc, #280]	; (801a128 <_Z41__static_initialization_and_destruction_0ii+0x7d0>)
 801a010:	f7ff f955 	bl	80192be <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 801a014:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801a018:	4618      	mov	r0, r3
 801a01a:	f7ff f945 	bl	80192a8 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 801a01e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801a022:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d10b      	bne.n	801a044 <_Z41__static_initialization_and_destruction_0ii+0x6ec>
 801a02c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801a030:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a03a:	4293      	cmp	r3, r2
 801a03c:	d102      	bne.n	801a044 <_Z41__static_initialization_and_destruction_0ii+0x6ec>
 801a03e:	483a      	ldr	r0, [pc, #232]	; (801a128 <_Z41__static_initialization_and_destruction_0ii+0x7d0>)
 801a040:	f7ff f95e 	bl	8019300 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 801a044:	bf00      	nop
 801a046:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}
 801a04e:	bf00      	nop
 801a050:	240011e0 	.word	0x240011e0
 801a054:	58021800 	.word	0x58021800
 801a058:	240011e8 	.word	0x240011e8
 801a05c:	240011f0 	.word	0x240011f0
 801a060:	240011f8 	.word	0x240011f8
 801a064:	24001200 	.word	0x24001200
 801a068:	58020800 	.word	0x58020800
 801a06c:	24001208 	.word	0x24001208
 801a070:	24001210 	.word	0x24001210
 801a074:	24001218 	.word	0x24001218
 801a078:	24001220 	.word	0x24001220
 801a07c:	58020000 	.word	0x58020000
 801a080:	24001228 	.word	0x24001228
 801a084:	24001230 	.word	0x24001230
 801a088:	24001238 	.word	0x24001238
 801a08c:	24001240 	.word	0x24001240
 801a090:	24001248 	.word	0x24001248
 801a094:	24001250 	.word	0x24001250
 801a098:	24001258 	.word	0x24001258
 801a09c:	24001260 	.word	0x24001260
 801a0a0:	58020c00 	.word	0x58020c00
 801a0a4:	24001268 	.word	0x24001268
 801a0a8:	24001270 	.word	0x24001270
 801a0ac:	24001278 	.word	0x24001278
 801a0b0:	24001280 	.word	0x24001280
 801a0b4:	24001288 	.word	0x24001288
 801a0b8:	24001290 	.word	0x24001290
 801a0bc:	24001298 	.word	0x24001298
 801a0c0:	240012a0 	.word	0x240012a0
 801a0c4:	240012a8 	.word	0x240012a8
 801a0c8:	240012b0 	.word	0x240012b0
 801a0cc:	240012b8 	.word	0x240012b8
 801a0d0:	240012c0 	.word	0x240012c0
 801a0d4:	240012c8 	.word	0x240012c8
 801a0d8:	240012d0 	.word	0x240012d0
 801a0dc:	240012d8 	.word	0x240012d8
 801a0e0:	58020400 	.word	0x58020400
 801a0e4:	240012e0 	.word	0x240012e0
 801a0e8:	240012e8 	.word	0x240012e8
 801a0ec:	240012f0 	.word	0x240012f0
 801a0f0:	240012f8 	.word	0x240012f8
 801a0f4:	24001300 	.word	0x24001300
 801a0f8:	58021000 	.word	0x58021000
 801a0fc:	24001308 	.word	0x24001308
 801a100:	24001310 	.word	0x24001310
 801a104:	24001318 	.word	0x24001318
 801a108:	24001320 	.word	0x24001320
 801a10c:	24001328 	.word	0x24001328
 801a110:	24001330 	.word	0x24001330
 801a114:	24001338 	.word	0x24001338
 801a118:	58021c00 	.word	0x58021c00
 801a11c:	24001340 	.word	0x24001340
 801a120:	24001348 	.word	0x24001348
 801a124:	08023900 	.word	0x08023900
 801a128:	24001350 	.word	0x24001350

0801a12c <_GLOBAL__sub_I__ZN3PinC2Ev>:
 801a12c:	b580      	push	{r7, lr}
 801a12e:	af00      	add	r7, sp, #0
 801a130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a134:	2001      	movs	r0, #1
 801a136:	f7ff fc0f 	bl	8019958 <_Z41__static_initialization_and_destruction_0ii>
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <_GLOBAL__sub_D__ZN3PinC2Ev>:
 801a13c:	b580      	push	{r7, lr}
 801a13e:	af00      	add	r7, sp, #0
 801a140:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a144:	2000      	movs	r0, #0
 801a146:	f7ff fc07 	bl	8019958 <_Z41__static_initialization_and_destruction_0ii>
 801a14a:	bd80      	pop	{r7, pc}

0801a14c <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
 801a154:	6878      	ldr	r0, [r7, #4]
 801a156:	f7ec f870 	bl	800623a <_ZNSaISt17reference_wrapperI15TimerPeripheralEED1Ev>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	4618      	mov	r0, r3
 801a15e:	3708      	adds	r7, #8
 801a160:	46bd      	mov	sp, r7
 801a162:	bd80      	pop	{r7, pc}

0801a164 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EEC1Ev>:
      _Vector_base() = default;
 801a164:	b580      	push	{r7, lr}
 801a166:	b082      	sub	sp, #8
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	4618      	mov	r0, r3
 801a170:	f000 fa72 	bl	801a658 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE12_Vector_implC1Ev>
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	4618      	mov	r0, r3
 801a178:	3708      	adds	r7, #8
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}

0801a17e <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EEC1Ev>:
      vector() = default;
 801a17e:	b580      	push	{r7, lr}
 801a180:	b082      	sub	sp, #8
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	4618      	mov	r0, r3
 801a18a:	f7ff ffeb 	bl	801a164 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EEC1Ev>
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	4618      	mov	r0, r3
 801a192:	3708      	adds	r7, #8
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}

0801a198 <_ZN15TimerPeripheral8InitDataC1EP11TIM_TypeDefmmm>:

#include "TimerPeripheral/TimerPeripheral.hpp"

vector<reference_wrapper<TimerPeripheral>> TimerPeripheral::timers;

TimerPeripheral::InitData::InitData(
 801a198:	b590      	push	{r4, r7, lr}
 801a19a:	b08b      	sub	sp, #44	; 0x2c
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	607a      	str	r2, [r7, #4]
 801a1a4:	603b      	str	r3, [r7, #0]
		timer(timer),
		prescaler(prescaler),
		period(period),
		deadtime(deadtime),
		pwm_channels({}),
		input_capture_channels({}) {}
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	68ba      	ldr	r2, [r7, #8]
 801a1aa:	601a      	str	r2, [r3, #0]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	687a      	ldr	r2, [r7, #4]
 801a1b0:	605a      	str	r2, [r3, #4]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	683a      	ldr	r2, [r7, #0]
 801a1b6:	609a      	str	r2, [r3, #8]
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a1bc:	60da      	str	r2, [r3, #12]
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	f103 0410 	add.w	r4, r3, #16
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	613b      	str	r3, [r7, #16]
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	617b      	str	r3, [r7, #20]
 801a1cc:	f107 0318 	add.w	r3, r7, #24
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f7e9 f997 	bl	8003504 <_ZNSaImEC1Ev>
 801a1d6:	f107 0318 	add.w	r3, r7, #24
 801a1da:	f107 0210 	add.w	r2, r7, #16
 801a1de:	ca06      	ldmia	r2, {r1, r2}
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f000 fa62 	bl	801a6aa <_ZNSt6vectorImSaImEEC1ESt16initializer_listImERKS0_>
 801a1e6:	f107 0318 	add.w	r3, r7, #24
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7e8 fda2 	bl	8002d34 <_ZNSaImED1Ev>
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f103 041c 	add.w	r4, r3, #28
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	61fb      	str	r3, [r7, #28]
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	623b      	str	r3, [r7, #32]
 801a1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a202:	4618      	mov	r0, r3
 801a204:	f000 fa72 	bl	801a6ec <_ZNSaISt4pairImmEEC1Ev>
 801a208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a20c:	f107 021c 	add.w	r2, r7, #28
 801a210:	ca06      	ldmia	r2, {r1, r2}
 801a212:	4620      	mov	r0, r4
 801a214:	f000 fa76 	bl	801a704 <_ZNSt6vectorISt4pairImmESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 801a218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a21c:	4618      	mov	r0, r3
 801a21e:	f7e9 fc1d 	bl	8003a5c <_ZNSaISt4pairImmEED1Ev>
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	4618      	mov	r0, r3
 801a226:	372c      	adds	r7, #44	; 0x2c
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd90      	pop	{r4, r7, pc}

0801a22c <_ZN15TimerPeripheralC1EP17TIM_HandleTypeDefNS_8InitDataE>:

TimerPeripheral::TimerPeripheral(
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b084      	sub	sp, #16
 801a230:	af00      	add	r7, sp, #0
 801a232:	60f8      	str	r0, [r7, #12]
 801a234:	60b9      	str	r1, [r7, #8]
 801a236:	607a      	str	r2, [r7, #4]
		TIM_HandleTypeDef* handle, InitData init_data) :
		handle(handle),
		init_data(init_data) {}
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	68ba      	ldr	r2, [r7, #8]
 801a23c:	601a      	str	r2, [r3, #0]
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	3304      	adds	r3, #4
 801a242:	6879      	ldr	r1, [r7, #4]
 801a244:	4618      	mov	r0, r3
 801a246:	f7e6 fc0d 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	4618      	mov	r0, r3
 801a24e:	3710      	adds	r7, #16
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}

0801a254 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801a254:	b480      	push	{r7}
 801a256:	b083      	sub	sp, #12
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	4618      	mov	r0, r3
 801a260:	370c      	adds	r7, #12
 801a262:	46bd      	mov	sp, r7
 801a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a268:	4770      	bx	lr

0801a26a <_ZN9__gnu_cxxeqIPSt4pairImmES3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 801a26a:	b590      	push	{r4, r7, lr}
 801a26c:	b083      	sub	sp, #12
 801a26e:	af00      	add	r7, sp, #0
 801a270:	6078      	str	r0, [r7, #4]
 801a272:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f7ff ffed 	bl	801a254 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>
 801a27a:	4603      	mov	r3, r0
 801a27c:	681c      	ldr	r4, [r3, #0]
 801a27e:	6838      	ldr	r0, [r7, #0]
 801a280:	f7ff ffe8 	bl	801a254 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEE4baseEv>
 801a284:	4603      	mov	r3, r0
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	429c      	cmp	r4, r3
 801a28a:	bf0c      	ite	eq
 801a28c:	2301      	moveq	r3, #1
 801a28e:	2300      	movne	r3, #0
 801a290:	b2db      	uxtb	r3, r3
 801a292:	4618      	mov	r0, r3
 801a294:	370c      	adds	r7, #12
 801a296:	46bd      	mov	sp, r7
 801a298:	bd90      	pop	{r4, r7, pc}

0801a29a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801a29a:	b480      	push	{r7}
 801a29c:	b083      	sub	sp, #12
 801a29e:	af00      	add	r7, sp, #0
 801a2a0:	6078      	str	r0, [r7, #4]
	++_M_current;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	f103 0208 	add.w	r2, r3, #8
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	601a      	str	r2, [r3, #0]
	return *this;
 801a2ae:	687b      	ldr	r3, [r7, #4]
      }
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	370c      	adds	r7, #12
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ba:	4770      	bx	lr

0801a2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801a2bc:	b480      	push	{r7}
 801a2be:	b083      	sub	sp, #12
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	370c      	adds	r7, #12
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d2:	4770      	bx	lr

0801a2d4 <_ZN15TimerPeripheral4initEv>:

void TimerPeripheral::init() {
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b0a6      	sub	sp, #152	; 0x98
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a2dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	601a      	str	r2, [r3, #0]
 801a2e4:	605a      	str	r2, [r3, #4]
 801a2e6:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 801a2e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
 801a2f0:	605a      	str	r2, [r3, #4]
 801a2f2:	609a      	str	r2, [r3, #8]
 801a2f4:	60da      	str	r2, [r3, #12]
		TIM_OC_InitTypeDef sConfigOC = {0};
 801a2f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	601a      	str	r2, [r3, #0]
 801a2fe:	605a      	str	r2, [r3, #4]
 801a300:	609a      	str	r2, [r3, #8]
 801a302:	60da      	str	r2, [r3, #12]
 801a304:	611a      	str	r2, [r3, #16]
 801a306:	615a      	str	r2, [r3, #20]
 801a308:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801a30a:	f107 0320 	add.w	r3, r7, #32
 801a30e:	2234      	movs	r2, #52	; 0x34
 801a310:	2100      	movs	r1, #0
 801a312:	4618      	mov	r0, r3
 801a314:	f009 f8f4 	bl	8023500 <memset>

		handle->Instance = init_data.timer;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	687a      	ldr	r2, [r7, #4]
 801a31e:	6852      	ldr	r2, [r2, #4]
 801a320:	601a      	str	r2, [r3, #0]
		handle->Init.Prescaler = init_data.prescaler;
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	6892      	ldr	r2, [r2, #8]
 801a32a:	605a      	str	r2, [r3, #4]
		handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	2200      	movs	r2, #0
 801a332:	609a      	str	r2, [r3, #8]
		handle->Init.Period = init_data.period;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	687a      	ldr	r2, [r7, #4]
 801a33a:	68d2      	ldr	r2, [r2, #12]
 801a33c:	60da      	str	r2, [r3, #12]
		handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2200      	movs	r2, #0
 801a344:	611a      	str	r2, [r3, #16]
		handle->Init.RepetitionCounter = 0;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	2200      	movs	r2, #0
 801a34c:	615a      	str	r2, [r3, #20]
		handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2200      	movs	r2, #0
 801a354:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(handle) != HAL_OK) {
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	4618      	mov	r0, r3
 801a35c:	f7fc ffb5 	bl	80172ca <HAL_TIM_PWM_Init>
 801a360:	4603      	mov	r3, r0
 801a362:	2b00      	cmp	r3, #0
			//TODO: error handler
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801a364:	2300      	movs	r3, #0
 801a366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801a36a:	2300      	movs	r3, #0
 801a36c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801a370:	2300      	movs	r3, #0
 801a372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		if (HAL_TIMEx_MasterConfigSynchronization(handle, &sMasterConfig) != HAL_OK) {
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a37e:	4611      	mov	r1, r2
 801a380:	4618      	mov	r0, r3
 801a382:	f7fe fc53 	bl	8018c2c <HAL_TIMEx_MasterConfigSynchronization>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
			//TODO: error handler
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801a38a:	2360      	movs	r3, #96	; 0x60
 801a38c:	657b      	str	r3, [r7, #84]	; 0x54
		sConfigOC.Pulse = 0;
 801a38e:	2300      	movs	r3, #0
 801a390:	65bb      	str	r3, [r7, #88]	; 0x58
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801a392:	2300      	movs	r3, #0
 801a394:	65fb      	str	r3, [r7, #92]	; 0x5c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801a396:	2300      	movs	r3, #0
 801a398:	663b      	str	r3, [r7, #96]	; 0x60
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801a39a:	2300      	movs	r3, #0
 801a39c:	667b      	str	r3, [r7, #100]	; 0x64
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	66bb      	str	r3, [r7, #104]	; 0x68
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (uint32_t channel : init_data.pwm_channels) {
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	3314      	adds	r3, #20
 801a3aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a3ae:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801a3b2:	f7ea f803 	bl	80043bc <_ZNSt6vectorImSaImEE5beginEv>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	61fb      	str	r3, [r7, #28]
 801a3ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801a3be:	f7ea f825 	bl	800440c <_ZNSt6vectorImSaImEE3endEv>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	61bb      	str	r3, [r7, #24]
 801a3c6:	f107 0218 	add.w	r2, r7, #24
 801a3ca:	f107 031c 	add.w	r3, r7, #28
 801a3ce:	4611      	mov	r1, r2
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f7ec ff94 	bl	80072fe <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	f083 0301 	eor.w	r3, r3, #1
 801a3dc:	b2db      	uxtb	r3, r3
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d019      	beq.n	801a416 <_ZN15TimerPeripheral4initEv+0x142>
 801a3e2:	f107 031c 	add.w	r3, r7, #28
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7ee fcf2 	bl	8008dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 801a3ec:	4603      	mov	r3, r0
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (HAL_TIM_PWM_ConfigChannel(handle, &sConfigOC, channel) != HAL_OK) {
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801a3fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a400:	4618      	mov	r0, r3
 801a402:	f7fd fb8f 	bl	8017b24 <HAL_TIM_PWM_ConfigChannel>
 801a406:	4603      	mov	r3, r0
 801a408:	2b00      	cmp	r3, #0
		for (uint32_t channel : init_data.pwm_channels) {
 801a40a:	f107 031c 	add.w	r3, r7, #28
 801a40e:	4618      	mov	r0, r3
 801a410:	f7ec ff65 	bl	80072de <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 801a414:	e7d7      	b.n	801a3c6 <_ZN15TimerPeripheral4initEv+0xf2>
				//TODO: Error handler
			}
		}

		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801a416:	2300      	movs	r3, #0
 801a418:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801a41a:	2300      	movs	r3, #0
 801a41c:	627b      	str	r3, [r7, #36]	; 0x24
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801a41e:	2300      	movs	r3, #0
 801a420:	62bb      	str	r3, [r7, #40]	; 0x28
		sBreakDeadTimeConfig.DeadTime = init_data.deadtime;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	691b      	ldr	r3, [r3, #16]
 801a426:	62fb      	str	r3, [r7, #44]	; 0x2c
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801a428:	2300      	movs	r3, #0
 801a42a:	633b      	str	r3, [r7, #48]	; 0x30
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801a42c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a430:	637b      	str	r3, [r7, #52]	; 0x34
		sBreakDeadTimeConfig.BreakFilter = 0;
 801a432:	2300      	movs	r3, #0
 801a434:	63bb      	str	r3, [r7, #56]	; 0x38
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801a436:	2300      	movs	r3, #0
 801a438:	643b      	str	r3, [r7, #64]	; 0x40
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801a43a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a43e:	647b      	str	r3, [r7, #68]	; 0x44
		sBreakDeadTimeConfig.Break2Filter = 0;
 801a440:	2300      	movs	r3, #0
 801a442:	64bb      	str	r3, [r7, #72]	; 0x48
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801a444:	2300      	movs	r3, #0
 801a446:	653b      	str	r3, [r7, #80]	; 0x50
		if (HAL_TIMEx_ConfigBreakDeadTime(handle, &sBreakDeadTimeConfig) != HAL_OK) {
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	f107 0220 	add.w	r2, r7, #32
 801a450:	4611      	mov	r1, r2
 801a452:	4618      	mov	r0, r3
 801a454:	f7fe fc86 	bl	8018d64 <HAL_TIMEx_ConfigBreakDeadTime>
 801a458:	4603      	mov	r3, r0
 801a45a:	2b00      	cmp	r3, #0
			//TODO: Error Handler
		}

		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 801a45c:	2300      	movs	r3, #0
 801a45e:	673b      	str	r3, [r7, #112]	; 0x70
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 801a460:	2300      	movs	r3, #0
 801a462:	67bb      	str	r3, [r7, #120]	; 0x78
		sConfigIC.ICFilter = 0;
 801a464:	2300      	movs	r3, #0
 801a466:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (pair<uint32_t, uint32_t> channels_rising_falling : init_data.input_capture_channels) {
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	3320      	adds	r3, #32
 801a46c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a470:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a474:	f000 f967 	bl	801a746 <_ZNSt6vectorISt4pairImmESaIS1_EE5beginEv>
 801a478:	4603      	mov	r3, r0
 801a47a:	60fb      	str	r3, [r7, #12]
 801a47c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a480:	f000 f971 	bl	801a766 <_ZNSt6vectorISt4pairImmESaIS1_EE3endEv>
 801a484:	4603      	mov	r3, r0
 801a486:	60bb      	str	r3, [r7, #8]
 801a488:	f107 0208 	add.w	r2, r7, #8
 801a48c:	f107 030c 	add.w	r3, r7, #12
 801a490:	4611      	mov	r1, r2
 801a492:	4618      	mov	r0, r3
 801a494:	f7ff fee9 	bl	801a26a <_ZN9__gnu_cxxeqIPSt4pairImmES3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 801a498:	4603      	mov	r3, r0
 801a49a:	f083 0301 	eor.w	r3, r3, #1
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d029      	beq.n	801a4f8 <_ZN15TimerPeripheral4initEv+0x224>
 801a4a4:	f107 030c 	add.w	r3, r7, #12
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	f7ff ff07 	bl	801a2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEdeEv>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	f107 0310 	add.w	r3, r7, #16
 801a4b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a4b8:	e883 0003 	stmia.w	r3, {r0, r1}
			sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 801a4bc:	2301      	movs	r3, #1
 801a4be:	677b      	str	r3, [r7, #116]	; 0x74
			if (HAL_TIM_IC_ConfigChannel(handle, &sConfigIC, channels_rising_falling.first) != HAL_OK) {
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	693a      	ldr	r2, [r7, #16]
 801a4c6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f7fd fa8d 	bl	80179ea <HAL_TIM_IC_ConfigChannel>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	2b00      	cmp	r3, #0
				//TODO: Error handler
			}

			sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 801a4d4:	2302      	movs	r3, #2
 801a4d6:	677b      	str	r3, [r7, #116]	; 0x74
			if (HAL_TIM_IC_ConfigChannel(handle, &sConfigIC, channels_rising_falling.second) != HAL_OK) {
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	697a      	ldr	r2, [r7, #20]
 801a4de:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f7fd fa81 	bl	80179ea <HAL_TIM_IC_ConfigChannel>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	2b00      	cmp	r3, #0
		for (pair<uint32_t, uint32_t> channels_rising_falling : init_data.input_capture_channels) {
 801a4ec:	f107 030c 	add.w	r3, r7, #12
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7ff fed2 	bl	801a29a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEppEv>
 801a4f6:	e7c7      	b.n	801a488 <_ZN15TimerPeripheral4initEv+0x1b4>
				//TODO: Error handler
			}
		}
}
 801a4f8:	bf00      	nop
 801a4fa:	3798      	adds	r7, #152	; 0x98
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801a500:	b480      	push	{r7}
 801a502:	b083      	sub	sp, #12
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	4618      	mov	r0, r3
 801a50c:	370c      	adds	r7, #12
 801a50e:	46bd      	mov	sp, r7
 801a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a514:	4770      	bx	lr

0801a516 <_ZN9__gnu_cxxeqIPSt17reference_wrapperI15TimerPeripheralES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 801a516:	b590      	push	{r4, r7, lr}
 801a518:	b083      	sub	sp, #12
 801a51a:	af00      	add	r7, sp, #0
 801a51c:	6078      	str	r0, [r7, #4]
 801a51e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801a520:	6878      	ldr	r0, [r7, #4]
 801a522:	f7ff ffed 	bl	801a500 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEE4baseEv>
 801a526:	4603      	mov	r3, r0
 801a528:	681c      	ldr	r4, [r3, #0]
 801a52a:	6838      	ldr	r0, [r7, #0]
 801a52c:	f7ff ffe8 	bl	801a500 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEE4baseEv>
 801a530:	4603      	mov	r3, r0
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	429c      	cmp	r4, r3
 801a536:	bf0c      	ite	eq
 801a538:	2301      	moveq	r3, #1
 801a53a:	2300      	movne	r3, #0
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	4618      	mov	r0, r3
 801a540:	370c      	adds	r7, #12
 801a542:	46bd      	mov	sp, r7
 801a544:	bd90      	pop	{r4, r7, pc}

0801a546 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801a546:	b480      	push	{r7}
 801a548:	b083      	sub	sp, #12
 801a54a:	af00      	add	r7, sp, #0
 801a54c:	6078      	str	r0, [r7, #4]
	++_M_current;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	1d1a      	adds	r2, r3, #4
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	601a      	str	r2, [r3, #0]
	return *this;
 801a558:	687b      	ldr	r3, [r7, #4]
      }
 801a55a:	4618      	mov	r0, r3
 801a55c:	370c      	adds	r7, #12
 801a55e:	46bd      	mov	sp, r7
 801a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a564:	4770      	bx	lr

0801a566 <_ZN15TimerPeripheralC1ERKS_>:
 801a566:	b580      	push	{r7, lr}
 801a568:	b082      	sub	sp, #8
 801a56a:	af00      	add	r7, sp, #0
 801a56c:	6078      	str	r0, [r7, #4]
 801a56e:	6039      	str	r1, [r7, #0]
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	681a      	ldr	r2, [r3, #0]
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	601a      	str	r2, [r3, #0]
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	1d1a      	adds	r2, r3, #4
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	3304      	adds	r3, #4
 801a580:	4619      	mov	r1, r3
 801a582:	4610      	mov	r0, r2
 801a584:	f7e6 fa6e 	bl	8000a64 <_ZN15TimerPeripheral8InitDataC1ERKS0_>
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	4618      	mov	r0, r3
 801a58c:	3708      	adds	r7, #8
 801a58e:	46bd      	mov	sp, r7
 801a590:	bd80      	pop	{r7, pc}
	...

0801a594 <_ZN15TimerPeripheral5startEv>:

void TimerPeripheral::start() {
 801a594:	b580      	push	{r7, lr}
 801a596:	b08e      	sub	sp, #56	; 0x38
 801a598:	af00      	add	r7, sp, #0
	for (TimerPeripheral timer : timers) {
 801a59a:	4b21      	ldr	r3, [pc, #132]	; (801a620 <_ZN15TimerPeripheral5startEv+0x8c>)
 801a59c:	637b      	str	r3, [r7, #52]	; 0x34
 801a59e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a5a0:	f000 f8f2 	bl	801a788 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE5beginEv>
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	633b      	str	r3, [r7, #48]	; 0x30
 801a5a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a5aa:	f000 f8fd 	bl	801a7a8 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE3endEv>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5ba:	4611      	mov	r1, r2
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7ff ffaa 	bl	801a516 <_ZN9__gnu_cxxeqIPSt17reference_wrapperI15TimerPeripheralES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	f083 0301 	eor.w	r3, r3, #1
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d023      	beq.n	801a616 <_ZN15TimerPeripheral5startEv+0x82>
 801a5ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f000 f8f9 	bl	801a7ca <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEdeEv>
 801a5d8:	4603      	mov	r3, r0
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f000 f901 	bl	801a7e2 <_ZNKSt17reference_wrapperI15TimerPeripheralEcvRS0_Ev>
 801a5e0:	4602      	mov	r2, r0
 801a5e2:	463b      	mov	r3, r7
 801a5e4:	4611      	mov	r1, r2
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f7ff ffbd 	bl	801a566 <_ZN15TimerPeripheralC1ERKS_>
		if (timer.is_registered()) {
 801a5ec:	463b      	mov	r3, r7
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f000 f818 	bl	801a624 <_ZN15TimerPeripheral13is_registeredEv>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d003      	beq.n	801a602 <_ZN15TimerPeripheral5startEv+0x6e>
			timer.init();
 801a5fa:	463b      	mov	r3, r7
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f7ff fe69 	bl	801a2d4 <_ZN15TimerPeripheral4initEv>
	for (TimerPeripheral timer : timers) {
 801a602:	463b      	mov	r3, r7
 801a604:	4618      	mov	r0, r3
 801a606:	f7e6 fe31 	bl	800126c <_ZN15TimerPeripheralD1Ev>
 801a60a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a60e:	4618      	mov	r0, r3
 801a610:	f7ff ff99 	bl	801a546 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEppEv>
 801a614:	e7cd      	b.n	801a5b2 <_ZN15TimerPeripheral5startEv+0x1e>
		}
	}
}
 801a616:	bf00      	nop
 801a618:	3738      	adds	r7, #56	; 0x38
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	2400135c 	.word	0x2400135c

0801a624 <_ZN15TimerPeripheral13is_registeredEv>:

bool TimerPeripheral::is_registered() {
 801a624:	b590      	push	{r4, r7, lr}
 801a626:	b083      	sub	sp, #12
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
	return init_data.pwm_channels.size() + init_data.input_capture_channels.size();
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	3314      	adds	r3, #20
 801a630:	4618      	mov	r0, r3
 801a632:	f7e8 fbbe 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801a636:	4604      	mov	r4, r0
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	3320      	adds	r3, #32
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7e9 f9e4 	bl	8003a0a <_ZNKSt6vectorISt4pairImmESaIS1_EE4sizeEv>
 801a642:	4603      	mov	r3, r0
 801a644:	4423      	add	r3, r4
 801a646:	2b00      	cmp	r3, #0
 801a648:	bf14      	ite	ne
 801a64a:	2301      	movne	r3, #1
 801a64c:	2300      	moveq	r3, #0
 801a64e:	b2db      	uxtb	r3, r3
}
 801a650:	4618      	mov	r0, r3
 801a652:	370c      	adds	r7, #12
 801a654:	46bd      	mov	sp, r7
 801a656:	bd90      	pop	{r4, r7, pc}

0801a658 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801a658:	b580      	push	{r7, lr}
 801a65a:	b082      	sub	sp, #8
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f000 f8ca 	bl	801a7fa <_ZNSaISt17reference_wrapperI15TimerPeripheralEEC1Ev>
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	4618      	mov	r0, r3
 801a66a:	f000 f8d2 	bl	801a812 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	4618      	mov	r0, r3
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801a678:	b580      	push	{r7, lr}
 801a67a:	b082      	sub	sp, #8
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	689a      	ldr	r2, [r3, #8]
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	1ad3      	subs	r3, r2, r3
 801a68e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801a690:	461a      	mov	r2, r3
 801a692:	6878      	ldr	r0, [r7, #4]
 801a694:	f7ea fa73 	bl	8004b7e <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE13_M_deallocateEPS2_j>
      }
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	4618      	mov	r0, r3
 801a69c:	f7ff fd56 	bl	801a14c <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE12_Vector_implD1Ev>
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	3708      	adds	r7, #8
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}

0801a6aa <_ZNSt6vectorImSaImEEC1ESt16initializer_listImERKS0_>:
      vector(initializer_list<value_type> __l,
 801a6aa:	b5b0      	push	{r4, r5, r7, lr}
 801a6ac:	b086      	sub	sp, #24
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	60f8      	str	r0, [r7, #12]
 801a6b2:	1d38      	adds	r0, r7, #4
 801a6b4:	e880 0006 	stmia.w	r0, {r1, r2}
 801a6b8:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	6839      	ldr	r1, [r7, #0]
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f000 f8bb 	bl	801a83a <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 801a6c4:	1d3b      	adds	r3, r7, #4
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7e8 ff68 	bl	800359c <_ZNKSt16initializer_listImE5beginEv>
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	1d3b      	adds	r3, r7, #4
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7e8 ff6f 	bl	80035b4 <_ZNKSt16initializer_listImE3endEv>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	462b      	mov	r3, r5
 801a6da:	4621      	mov	r1, r4
 801a6dc:	68f8      	ldr	r0, [r7, #12]
 801a6de:	f000 f8cf 	bl	801a880 <_ZNSt6vectorImSaImEE19_M_range_initializeIPKmEEvT_S5_St20forward_iterator_tag>
      }
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	3718      	adds	r7, #24
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bdb0      	pop	{r4, r5, r7, pc}

0801a6ec <_ZNSaISt4pairImmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f000 f8fc 	bl	801a8f2 <_ZN9__gnu_cxx13new_allocatorISt4pairImmEEC1Ev>
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	3708      	adds	r7, #8
 801a700:	46bd      	mov	sp, r7
 801a702:	bd80      	pop	{r7, pc}

0801a704 <_ZNSt6vectorISt4pairImmESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
 801a704:	b5b0      	push	{r4, r5, r7, lr}
 801a706:	b086      	sub	sp, #24
 801a708:	af00      	add	r7, sp, #0
 801a70a:	60f8      	str	r0, [r7, #12]
 801a70c:	1d38      	adds	r0, r7, #4
 801a70e:	e880 0006 	stmia.w	r0, {r1, r2}
 801a712:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	6839      	ldr	r1, [r7, #0]
 801a718:	4618      	mov	r0, r3
 801a71a:	f000 f8f5 	bl	801a908 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 801a71e:	1d3b      	adds	r3, r7, #4
 801a720:	4618      	mov	r0, r3
 801a722:	f000 f900 	bl	801a926 <_ZNKSt16initializer_listISt4pairImmEE5beginEv>
 801a726:	4604      	mov	r4, r0
 801a728:	1d3b      	adds	r3, r7, #4
 801a72a:	4618      	mov	r0, r3
 801a72c:	f000 f907 	bl	801a93e <_ZNKSt16initializer_listISt4pairImmEE3endEv>
 801a730:	4602      	mov	r2, r0
 801a732:	462b      	mov	r3, r5
 801a734:	4621      	mov	r1, r4
 801a736:	68f8      	ldr	r0, [r7, #12]
 801a738:	f000 f927 	bl	801a98a <_ZNSt6vectorISt4pairImmESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	4618      	mov	r0, r3
 801a740:	3718      	adds	r7, #24
 801a742:	46bd      	mov	sp, r7
 801a744:	bdb0      	pop	{r4, r5, r7, pc}

0801a746 <_ZNSt6vectorISt4pairImmESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801a746:	b580      	push	{r7, lr}
 801a748:	b084      	sub	sp, #16
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	f107 030c 	add.w	r3, r7, #12
 801a754:	4611      	mov	r1, r2
 801a756:	4618      	mov	r0, r3
 801a758:	f000 f950 	bl	801a9fc <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	4618      	mov	r0, r3
 801a760:	3710      	adds	r7, #16
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}

0801a766 <_ZNSt6vectorISt4pairImmESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801a766:	b580      	push	{r7, lr}
 801a768:	b084      	sub	sp, #16
 801a76a:	af00      	add	r7, sp, #0
 801a76c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	1d1a      	adds	r2, r3, #4
 801a772:	f107 030c 	add.w	r3, r7, #12
 801a776:	4611      	mov	r1, r2
 801a778:	4618      	mov	r0, r3
 801a77a:	f000 f93f 	bl	801a9fc <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	4618      	mov	r0, r3
 801a782:	3710      	adds	r7, #16
 801a784:	46bd      	mov	sp, r7
 801a786:	bd80      	pop	{r7, pc}

0801a788 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801a788:	b580      	push	{r7, lr}
 801a78a:	b084      	sub	sp, #16
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801a790:	687a      	ldr	r2, [r7, #4]
 801a792:	f107 030c 	add.w	r3, r7, #12
 801a796:	4611      	mov	r1, r2
 801a798:	4618      	mov	r0, r3
 801a79a:	f000 f93f 	bl	801aa1c <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	3710      	adds	r7, #16
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}

0801a7a8 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b084      	sub	sp, #16
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	1d1a      	adds	r2, r3, #4
 801a7b4:	f107 030c 	add.w	r3, r7, #12
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f000 f92e 	bl	801aa1c <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3710      	adds	r7, #16
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}

0801a7ca <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801a7ca:	b480      	push	{r7}
 801a7cc:	b083      	sub	sp, #12
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	370c      	adds	r7, #12
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e0:	4770      	bx	lr

0801a7e2 <_ZNKSt17reference_wrapperI15TimerPeripheralEcvRS0_Ev>:
      operator _Tp&() const noexcept
 801a7e2:	b580      	push	{r7, lr}
 801a7e4:	b082      	sub	sp, #8
 801a7e6:	af00      	add	r7, sp, #0
 801a7e8:	6078      	str	r0, [r7, #4]
      { return this->get(); }
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f000 f926 	bl	801aa3c <_ZNKSt17reference_wrapperI15TimerPeripheralE3getEv>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3708      	adds	r7, #8
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bd80      	pop	{r7, pc}

0801a7fa <_ZNSaISt17reference_wrapperI15TimerPeripheralEEC1Ev>:
 801a7fa:	b580      	push	{r7, lr}
 801a7fc:	b082      	sub	sp, #8
 801a7fe:	af00      	add	r7, sp, #0
 801a800:	6078      	str	r0, [r7, #4]
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f000 f926 	bl	801aa54 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEEC1Ev>
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	4618      	mov	r0, r3
 801a80c:	3708      	adds	r7, #8
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd80      	pop	{r7, pc}

0801a812 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801a812:	b480      	push	{r7}
 801a814:	b083      	sub	sp, #12
 801a816:	af00      	add	r7, sp, #0
 801a818:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2200      	movs	r2, #0
 801a81e:	601a      	str	r2, [r3, #0]
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2200      	movs	r2, #0
 801a824:	605a      	str	r2, [r3, #4]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	2200      	movs	r2, #0
 801a82a:	609a      	str	r2, [r3, #8]
	{ }
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	4618      	mov	r0, r3
 801a830:	370c      	adds	r7, #12
 801a832:	46bd      	mov	sp, r7
 801a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a838:	4770      	bx	lr

0801a83a <_ZNSt12_Vector_baseImSaImEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801a83a:	b580      	push	{r7, lr}
 801a83c:	b082      	sub	sp, #8
 801a83e:	af00      	add	r7, sp, #0
 801a840:	6078      	str	r0, [r7, #4]
 801a842:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	6839      	ldr	r1, [r7, #0]
 801a848:	4618      	mov	r0, r3
 801a84a:	f7e9 feec 	bl	8004626 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	4618      	mov	r0, r3
 801a852:	3708      	adds	r7, #8
 801a854:	46bd      	mov	sp, r7
 801a856:	bd80      	pop	{r7, pc}

0801a858 <_ZSt8distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 801a858:	b5b0      	push	{r4, r5, r7, lr}
 801a85a:	b082      	sub	sp, #8
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 801a862:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 801a864:	1d3b      	adds	r3, r7, #4
 801a866:	4618      	mov	r0, r3
 801a868:	f000 f8ff 	bl	801aa6a <_ZSt19__iterator_categoryIPKmENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 801a86c:	462a      	mov	r2, r5
 801a86e:	6839      	ldr	r1, [r7, #0]
 801a870:	4620      	mov	r0, r4
 801a872:	f000 f904 	bl	801aa7e <_ZSt10__distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 801a876:	4603      	mov	r3, r0
    }
 801a878:	4618      	mov	r0, r3
 801a87a:	3708      	adds	r7, #8
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bdb0      	pop	{r4, r5, r7, pc}

0801a880 <_ZNSt6vectorImSaImEE19_M_range_initializeIPKmEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801a880:	b590      	push	{r4, r7, lr}
 801a882:	b087      	sub	sp, #28
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	607a      	str	r2, [r7, #4]
 801a88c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 801a88e:	6879      	ldr	r1, [r7, #4]
 801a890:	68b8      	ldr	r0, [r7, #8]
 801a892:	f7ff ffe1 	bl	801a858 <_ZSt8distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 801a896:	4603      	mov	r3, r0
 801a898:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801a89a:	68fc      	ldr	r4, [r7, #12]
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7e8 fe63 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	4619      	mov	r1, r3
 801a8a8:	6978      	ldr	r0, [r7, #20]
 801a8aa:	f000 f8f9 	bl	801aaa0 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	4619      	mov	r1, r3
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	f7ea fdaf 	bl	8005416 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 801a8b8:	4602      	mov	r2, r0
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681a      	ldr	r2, [r3, #0]
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	009b      	lsls	r3, r3, #2
 801a8c6:	441a      	add	r2, r3
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7e8 fe49 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801a8d8:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 801a8da:	4622      	mov	r2, r4
 801a8dc:	6879      	ldr	r1, [r7, #4]
 801a8de:	68b8      	ldr	r0, [r7, #8]
 801a8e0:	f000 f906 	bl	801aaf0 <_ZSt22__uninitialized_copy_aIPKmPmmET0_T_S4_S3_RSaIT1_E>
 801a8e4:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	605a      	str	r2, [r3, #4]
	}
 801a8ea:	bf00      	nop
 801a8ec:	371c      	adds	r7, #28
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd90      	pop	{r4, r7, pc}

0801a8f2 <_ZN9__gnu_cxx13new_allocatorISt4pairImmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a8f2:	b480      	push	{r7}
 801a8f4:	b083      	sub	sp, #12
 801a8f6:	af00      	add	r7, sp, #0
 801a8f8:	6078      	str	r0, [r7, #4]
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	370c      	adds	r7, #12
 801a900:	46bd      	mov	sp, r7
 801a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a906:	4770      	bx	lr

0801a908 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801a908:	b580      	push	{r7, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
 801a910:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	6839      	ldr	r1, [r7, #0]
 801a916:	4618      	mov	r0, r3
 801a918:	f7e9 fee1 	bl	80046de <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE12_Vector_implC1ERKS2_>
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	4618      	mov	r0, r3
 801a920:	3708      	adds	r7, #8
 801a922:	46bd      	mov	sp, r7
 801a924:	bd80      	pop	{r7, pc}

0801a926 <_ZNKSt16initializer_listISt4pairImmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801a926:	b480      	push	{r7}
 801a928:	b083      	sub	sp, #12
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	4618      	mov	r0, r3
 801a934:	370c      	adds	r7, #12
 801a936:	46bd      	mov	sp, r7
 801a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a93c:	4770      	bx	lr

0801a93e <_ZNKSt16initializer_listISt4pairImmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 801a93e:	b590      	push	{r4, r7, lr}
 801a940:	b083      	sub	sp, #12
 801a942:	af00      	add	r7, sp, #0
 801a944:	6078      	str	r0, [r7, #4]
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f7ff ffed 	bl	801a926 <_ZNKSt16initializer_listISt4pairImmEE5beginEv>
 801a94c:	4604      	mov	r4, r0
 801a94e:	6878      	ldr	r0, [r7, #4]
 801a950:	f000 f8df 	bl	801ab12 <_ZNKSt16initializer_listISt4pairImmEE4sizeEv>
 801a954:	4603      	mov	r3, r0
 801a956:	00db      	lsls	r3, r3, #3
 801a958:	4423      	add	r3, r4
 801a95a:	4618      	mov	r0, r3
 801a95c:	370c      	adds	r7, #12
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd90      	pop	{r4, r7, pc}

0801a962 <_ZSt8distanceIPKSt4pairImmEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
 801a962:	b5b0      	push	{r4, r5, r7, lr}
 801a964:	b082      	sub	sp, #8
 801a966:	af00      	add	r7, sp, #0
 801a968:	6078      	str	r0, [r7, #4]
 801a96a:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 801a96c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 801a96e:	1d3b      	adds	r3, r7, #4
 801a970:	4618      	mov	r0, r3
 801a972:	f000 f8da 	bl	801ab2a <_ZSt19__iterator_categoryIPKSt4pairImmEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 801a976:	462a      	mov	r2, r5
 801a978:	6839      	ldr	r1, [r7, #0]
 801a97a:	4620      	mov	r0, r4
 801a97c:	f000 f8df 	bl	801ab3e <_ZSt10__distanceIPKSt4pairImmEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 801a980:	4603      	mov	r3, r0
    }
 801a982:	4618      	mov	r0, r3
 801a984:	3708      	adds	r7, #8
 801a986:	46bd      	mov	sp, r7
 801a988:	bdb0      	pop	{r4, r5, r7, pc}

0801a98a <_ZNSt6vectorISt4pairImmESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801a98a:	b590      	push	{r4, r7, lr}
 801a98c:	b087      	sub	sp, #28
 801a98e:	af00      	add	r7, sp, #0
 801a990:	60f8      	str	r0, [r7, #12]
 801a992:	60b9      	str	r1, [r7, #8]
 801a994:	607a      	str	r2, [r7, #4]
 801a996:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 801a998:	6879      	ldr	r1, [r7, #4]
 801a99a:	68b8      	ldr	r0, [r7, #8]
 801a99c:	f7ff ffe1 	bl	801a962 <_ZSt8distanceIPKSt4pairImmEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801a9a4:	68fc      	ldr	r4, [r7, #12]
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7e9 f8bc 	bl	8003b26 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	6978      	ldr	r0, [r7, #20]
 801a9b4:	f000 f8d4 	bl	801ab60 <_ZNSt6vectorISt4pairImmESaIS1_EE17_S_check_init_lenEjRKS2_>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	4619      	mov	r1, r3
 801a9bc:	4620      	mov	r0, r4
 801a9be:	f7ea ffd2 	bl	8005966 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE11_M_allocateEj>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	681a      	ldr	r2, [r3, #0]
 801a9cc:	697b      	ldr	r3, [r7, #20]
 801a9ce:	00db      	lsls	r3, r3, #3
 801a9d0:	441a      	add	r2, r3
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7e9 f8a2 	bl	8003b26 <_ZNSt12_Vector_baseISt4pairImmESaIS1_EE19_M_get_Tp_allocatorEv>
 801a9e2:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 801a9e4:	4622      	mov	r2, r4
 801a9e6:	6879      	ldr	r1, [r7, #4]
 801a9e8:	68b8      	ldr	r0, [r7, #8]
 801a9ea:	f000 f8e1 	bl	801abb0 <_ZSt22__uninitialized_copy_aIPKSt4pairImmEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 801a9ee:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	605a      	str	r2, [r3, #4]
	}
 801a9f4:	bf00      	nop
 801a9f6:	371c      	adds	r7, #28
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd90      	pop	{r4, r7, pc}

0801a9fc <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairImmESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a9fc:	b480      	push	{r7}
 801a9fe:	b083      	sub	sp, #12
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	681a      	ldr	r2, [r3, #0]
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	601a      	str	r2, [r3, #0]
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	4618      	mov	r0, r3
 801aa12:	370c      	adds	r7, #12
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr

0801aa1c <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI15TimerPeripheralESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801aa1c:	b480      	push	{r7}
 801aa1e:	b083      	sub	sp, #12
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801aa26:	683b      	ldr	r3, [r7, #0]
 801aa28:	681a      	ldr	r2, [r3, #0]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	601a      	str	r2, [r3, #0]
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	4618      	mov	r0, r3
 801aa32:	370c      	adds	r7, #12
 801aa34:	46bd      	mov	sp, r7
 801aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3a:	4770      	bx	lr

0801aa3c <_ZNKSt17reference_wrapperI15TimerPeripheralE3getEv>:
      get() const noexcept
 801aa3c:	b480      	push	{r7}
 801aa3e:	b083      	sub	sp, #12
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
      { return *_M_data; }
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4618      	mov	r0, r3
 801aa4a:	370c      	adds	r7, #12
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa52:	4770      	bx	lr

0801aa54 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI15TimerPeripheralEEC1Ev>:
 801aa54:	b480      	push	{r7}
 801aa56:	b083      	sub	sp, #12
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	4618      	mov	r0, r3
 801aa60:	370c      	adds	r7, #12
 801aa62:	46bd      	mov	sp, r7
 801aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa68:	4770      	bx	lr

0801aa6a <_ZSt19__iterator_categoryIPKmENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 801aa6a:	b480      	push	{r7}
 801aa6c:	b083      	sub	sp, #12
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801aa72:	4618      	mov	r0, r3
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr

0801aa7e <_ZSt10__distanceIPKmENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801aa7e:	b480      	push	{r7}
 801aa80:	b085      	sub	sp, #20
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	60f8      	str	r0, [r7, #12]
 801aa86:	60b9      	str	r1, [r7, #8]
 801aa88:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 801aa8a:	68ba      	ldr	r2, [r7, #8]
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	1ad3      	subs	r3, r2, r3
 801aa90:	109b      	asrs	r3, r3, #2
    }
 801aa92:	4618      	mov	r0, r3
 801aa94:	3714      	adds	r7, #20
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr
	...

0801aaa0 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 801aaa0:	b590      	push	{r4, r7, lr}
 801aaa2:	b085      	sub	sp, #20
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801aaaa:	f107 030c 	add.w	r3, r7, #12
 801aaae:	6839      	ldr	r1, [r7, #0]
 801aab0:	4618      	mov	r0, r3
 801aab2:	f7ea ff18 	bl	80058e6 <_ZNSaImEC1ERKS_>
 801aab6:	f107 030c 	add.w	r3, r7, #12
 801aaba:	4618      	mov	r0, r3
 801aabc:	f000 f895 	bl	801abea <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 801aac0:	4602      	mov	r2, r0
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	4293      	cmp	r3, r2
 801aac6:	bf8c      	ite	hi
 801aac8:	2301      	movhi	r3, #1
 801aaca:	2300      	movls	r3, #0
 801aacc:	b2dc      	uxtb	r4, r3
 801aace:	f107 030c 	add.w	r3, r7, #12
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7e8 f92e 	bl	8002d34 <_ZNSaImED1Ev>
 801aad8:	2c00      	cmp	r4, #0
 801aada:	d002      	beq.n	801aae2 <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 801aadc:	4803      	ldr	r0, [pc, #12]	; (801aaec <_ZNSt6vectorImSaImEE17_S_check_init_lenEjRKS0_+0x4c>)
 801aade:	f008 fbc7 	bl	8023270 <_ZSt20__throw_length_errorPKc>
	return __n;
 801aae2:	687b      	ldr	r3, [r7, #4]
      }
 801aae4:	4618      	mov	r0, r3
 801aae6:	3714      	adds	r7, #20
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd90      	pop	{r4, r7, pc}
 801aaec:	08023ab8 	.word	0x08023ab8

0801aaf0 <_ZSt22__uninitialized_copy_aIPKmPmmET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	60f8      	str	r0, [r7, #12]
 801aaf8:	60b9      	str	r1, [r7, #8]
 801aafa:	607a      	str	r2, [r7, #4]
 801aafc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801aafe:	687a      	ldr	r2, [r7, #4]
 801ab00:	68b9      	ldr	r1, [r7, #8]
 801ab02:	68f8      	ldr	r0, [r7, #12]
 801ab04:	f000 f88b 	bl	801ac1e <_ZSt18uninitialized_copyIPKmPmET0_T_S4_S3_>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3710      	adds	r7, #16
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}

0801ab12 <_ZNKSt16initializer_listISt4pairImmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 801ab12:	b480      	push	{r7}
 801ab14:	b083      	sub	sp, #12
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	6078      	str	r0, [r7, #4]
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	685b      	ldr	r3, [r3, #4]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	370c      	adds	r7, #12
 801ab22:	46bd      	mov	sp, r7
 801ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab28:	4770      	bx	lr

0801ab2a <_ZSt19__iterator_categoryIPKSt4pairImmEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
 801ab2a:	b480      	push	{r7}
 801ab2c:	b083      	sub	sp, #12
 801ab2e:	af00      	add	r7, sp, #0
 801ab30:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801ab32:	4618      	mov	r0, r3
 801ab34:	370c      	adds	r7, #12
 801ab36:	46bd      	mov	sp, r7
 801ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3c:	4770      	bx	lr

0801ab3e <_ZSt10__distanceIPKSt4pairImmEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801ab3e:	b480      	push	{r7}
 801ab40:	b085      	sub	sp, #20
 801ab42:	af00      	add	r7, sp, #0
 801ab44:	60f8      	str	r0, [r7, #12]
 801ab46:	60b9      	str	r1, [r7, #8]
 801ab48:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 801ab4a:	68ba      	ldr	r2, [r7, #8]
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	1ad3      	subs	r3, r2, r3
 801ab50:	10db      	asrs	r3, r3, #3
    }
 801ab52:	4618      	mov	r0, r3
 801ab54:	3714      	adds	r7, #20
 801ab56:	46bd      	mov	sp, r7
 801ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5c:	4770      	bx	lr
	...

0801ab60 <_ZNSt6vectorISt4pairImmESaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 801ab60:	b590      	push	{r4, r7, lr}
 801ab62:	b085      	sub	sp, #20
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801ab6a:	f107 030c 	add.w	r3, r7, #12
 801ab6e:	6839      	ldr	r1, [r7, #0]
 801ab70:	4618      	mov	r0, r3
 801ab72:	f7ea fed6 	bl	8005922 <_ZNSaISt4pairImmEEC1ERKS1_>
 801ab76:	f107 030c 	add.w	r3, r7, #12
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f000 f86d 	bl	801ac5a <_ZNSt6vectorISt4pairImmESaIS1_EE11_S_max_sizeERKS2_>
 801ab80:	4602      	mov	r2, r0
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	4293      	cmp	r3, r2
 801ab86:	bf8c      	ite	hi
 801ab88:	2301      	movhi	r3, #1
 801ab8a:	2300      	movls	r3, #0
 801ab8c:	b2dc      	uxtb	r4, r3
 801ab8e:	f107 030c 	add.w	r3, r7, #12
 801ab92:	4618      	mov	r0, r3
 801ab94:	f7e8 ff62 	bl	8003a5c <_ZNSaISt4pairImmEED1Ev>
 801ab98:	2c00      	cmp	r4, #0
 801ab9a:	d002      	beq.n	801aba2 <_ZNSt6vectorISt4pairImmESaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 801ab9c:	4803      	ldr	r0, [pc, #12]	; (801abac <_ZNSt6vectorISt4pairImmESaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 801ab9e:	f008 fb67 	bl	8023270 <_ZSt20__throw_length_errorPKc>
	return __n;
 801aba2:	687b      	ldr	r3, [r7, #4]
      }
 801aba4:	4618      	mov	r0, r3
 801aba6:	3714      	adds	r7, #20
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd90      	pop	{r4, r7, pc}
 801abac:	08023ab8 	.word	0x08023ab8

0801abb0 <_ZSt22__uninitialized_copy_aIPKSt4pairImmEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60f8      	str	r0, [r7, #12]
 801abb8:	60b9      	str	r1, [r7, #8]
 801abba:	607a      	str	r2, [r7, #4]
 801abbc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801abbe:	687a      	ldr	r2, [r7, #4]
 801abc0:	68b9      	ldr	r1, [r7, #8]
 801abc2:	68f8      	ldr	r0, [r7, #12]
 801abc4:	f000 f863 	bl	801ac8e <_ZSt18uninitialized_copyIPKSt4pairImmEPS1_ET0_T_S6_S5_>
 801abc8:	4603      	mov	r3, r0
 801abca:	4618      	mov	r0, r3
 801abcc:	3710      	adds	r7, #16
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}

0801abd2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801abd2:	b480      	push	{r7}
 801abd4:	b083      	sub	sp, #12
 801abd6:	af00      	add	r7, sp, #0
 801abd8:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801abda:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801abde:	4618      	mov	r0, r3
 801abe0:	370c      	adds	r7, #12
 801abe2:	46bd      	mov	sp, r7
 801abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe8:	4770      	bx	lr

0801abea <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801abea:	b580      	push	{r7, lr}
 801abec:	b084      	sub	sp, #16
 801abee:	af00      	add	r7, sp, #0
 801abf0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801abf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801abf6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	f7ff ffea 	bl	801abd2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 801abfe:	4603      	mov	r3, r0
 801ac00:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801ac02:	f107 0208 	add.w	r2, r7, #8
 801ac06:	f107 030c 	add.w	r3, r7, #12
 801ac0a:	4611      	mov	r1, r2
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7e5 fc2e 	bl	800046e <_ZSt3minIjERKT_S2_S2_>
 801ac12:	4603      	mov	r3, r0
 801ac14:	681b      	ldr	r3, [r3, #0]
      }
 801ac16:	4618      	mov	r0, r3
 801ac18:	3710      	adds	r7, #16
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd80      	pop	{r7, pc}

0801ac1e <_ZSt18uninitialized_copyIPKmPmET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801ac1e:	b580      	push	{r7, lr}
 801ac20:	b086      	sub	sp, #24
 801ac22:	af00      	add	r7, sp, #0
 801ac24:	60f8      	str	r0, [r7, #12]
 801ac26:	60b9      	str	r1, [r7, #8]
 801ac28:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801ac2e:	687a      	ldr	r2, [r7, #4]
 801ac30:	68b9      	ldr	r1, [r7, #8]
 801ac32:	68f8      	ldr	r0, [r7, #12]
 801ac34:	f000 f83d 	bl	801acb2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKmPmEET0_T_S6_S5_>
 801ac38:	4603      	mov	r3, r0
    }
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3718      	adds	r7, #24
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	bd80      	pop	{r7, pc}

0801ac42 <_ZNSt16allocator_traitsISaISt4pairImmEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801ac42:	b480      	push	{r7}
 801ac44:	b083      	sub	sp, #12
 801ac46:	af00      	add	r7, sp, #0
 801ac48:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801ac4a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801ac4e:	4618      	mov	r0, r3
 801ac50:	370c      	adds	r7, #12
 801ac52:	46bd      	mov	sp, r7
 801ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac58:	4770      	bx	lr

0801ac5a <_ZNSt6vectorISt4pairImmESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801ac5a:	b580      	push	{r7, lr}
 801ac5c:	b084      	sub	sp, #16
 801ac5e:	af00      	add	r7, sp, #0
 801ac60:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801ac62:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801ac66:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801ac68:	6878      	ldr	r0, [r7, #4]
 801ac6a:	f7ff ffea 	bl	801ac42 <_ZNSt16allocator_traitsISaISt4pairImmEEE8max_sizeERKS2_>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801ac72:	f107 0208 	add.w	r2, r7, #8
 801ac76:	f107 030c 	add.w	r3, r7, #12
 801ac7a:	4611      	mov	r1, r2
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f7e5 fbf6 	bl	800046e <_ZSt3minIjERKT_S2_S2_>
 801ac82:	4603      	mov	r3, r0
 801ac84:	681b      	ldr	r3, [r3, #0]
      }
 801ac86:	4618      	mov	r0, r3
 801ac88:	3710      	adds	r7, #16
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bd80      	pop	{r7, pc}

0801ac8e <_ZSt18uninitialized_copyIPKSt4pairImmEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801ac8e:	b580      	push	{r7, lr}
 801ac90:	b086      	sub	sp, #24
 801ac92:	af00      	add	r7, sp, #0
 801ac94:	60f8      	str	r0, [r7, #12]
 801ac96:	60b9      	str	r1, [r7, #8]
 801ac98:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801ac9e:	687a      	ldr	r2, [r7, #4]
 801aca0:	68b9      	ldr	r1, [r7, #8]
 801aca2:	68f8      	ldr	r0, [r7, #12]
 801aca4:	f000 f815 	bl	801acd2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairImmEPS3_EET0_T_S8_S7_>
 801aca8:	4603      	mov	r3, r0
    }
 801acaa:	4618      	mov	r0, r3
 801acac:	3718      	adds	r7, #24
 801acae:	46bd      	mov	sp, r7
 801acb0:	bd80      	pop	{r7, pc}

0801acb2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKmPmEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801acb2:	b580      	push	{r7, lr}
 801acb4:	b084      	sub	sp, #16
 801acb6:	af00      	add	r7, sp, #0
 801acb8:	60f8      	str	r0, [r7, #12]
 801acba:	60b9      	str	r1, [r7, #8]
 801acbc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801acbe:	687a      	ldr	r2, [r7, #4]
 801acc0:	68b9      	ldr	r1, [r7, #8]
 801acc2:	68f8      	ldr	r0, [r7, #12]
 801acc4:	f000 f825 	bl	801ad12 <_ZSt4copyIPKmPmET0_T_S4_S3_>
 801acc8:	4603      	mov	r3, r0
 801acca:	4618      	mov	r0, r3
 801accc:	3710      	adds	r7, #16
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}

0801acd2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairImmEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801acd2:	b580      	push	{r7, lr}
 801acd4:	b086      	sub	sp, #24
 801acd6:	af00      	add	r7, sp, #0
 801acd8:	60f8      	str	r0, [r7, #12]
 801acda:	60b9      	str	r1, [r7, #8]
 801acdc:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 801ace2:	68fa      	ldr	r2, [r7, #12]
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d00e      	beq.n	801ad08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairImmEPS3_EET0_T_S8_S7_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 801acea:	6978      	ldr	r0, [r7, #20]
 801acec:	f7ec fd79 	bl	80077e2 <_ZSt11__addressofISt4pairImmEEPT_RS2_>
 801acf0:	4603      	mov	r3, r0
 801acf2:	68f9      	ldr	r1, [r7, #12]
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7ec fd8b 	bl	8007810 <_ZSt10_ConstructISt4pairImmEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	3308      	adds	r3, #8
 801acfe:	60fb      	str	r3, [r7, #12]
 801ad00:	697b      	ldr	r3, [r7, #20]
 801ad02:	3308      	adds	r3, #8
 801ad04:	617b      	str	r3, [r7, #20]
 801ad06:	e7ec      	b.n	801ace2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt4pairImmEPS3_EET0_T_S8_S7_+0x10>
	      return __cur;
 801ad08:	697b      	ldr	r3, [r7, #20]
	}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3718      	adds	r7, #24
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}

0801ad12 <_ZSt4copyIPKmPmET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 801ad12:	b590      	push	{r4, r7, lr}
 801ad14:	b085      	sub	sp, #20
 801ad16:	af00      	add	r7, sp, #0
 801ad18:	60f8      	str	r0, [r7, #12]
 801ad1a:	60b9      	str	r1, [r7, #8]
 801ad1c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801ad1e:	68f8      	ldr	r0, [r7, #12]
 801ad20:	f000 f80f 	bl	801ad42 <_ZSt12__miter_baseIPKmET_S2_>
 801ad24:	4604      	mov	r4, r0
 801ad26:	68b8      	ldr	r0, [r7, #8]
 801ad28:	f000 f80b 	bl	801ad42 <_ZSt12__miter_baseIPKmET_S2_>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	687a      	ldr	r2, [r7, #4]
 801ad30:	4619      	mov	r1, r3
 801ad32:	4620      	mov	r0, r4
 801ad34:	f000 f810 	bl	801ad58 <_ZSt13__copy_move_aILb0EPKmPmET1_T0_S4_S3_>
 801ad38:	4603      	mov	r3, r0
    }
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3714      	adds	r7, #20
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd90      	pop	{r4, r7, pc}

0801ad42 <_ZSt12__miter_baseIPKmET_S2_>:
    __miter_base(_Iterator __it)
 801ad42:	b480      	push	{r7}
 801ad44:	b083      	sub	sp, #12
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	6078      	str	r0, [r7, #4]
    { return __it; }
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	370c      	adds	r7, #12
 801ad50:	46bd      	mov	sp, r7
 801ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad56:	4770      	bx	lr

0801ad58 <_ZSt13__copy_move_aILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801ad58:	b5b0      	push	{r4, r5, r7, lr}
 801ad5a:	b084      	sub	sp, #16
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	60f8      	str	r0, [r7, #12]
 801ad60:	60b9      	str	r1, [r7, #8]
 801ad62:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801ad64:	68f8      	ldr	r0, [r7, #12]
 801ad66:	f000 f81a 	bl	801ad9e <_ZSt12__niter_baseIPKmET_S2_>
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	68b8      	ldr	r0, [r7, #8]
 801ad6e:	f000 f816 	bl	801ad9e <_ZSt12__niter_baseIPKmET_S2_>
 801ad72:	4605      	mov	r5, r0
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	4618      	mov	r0, r3
 801ad78:	f7ea fbb3 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	461a      	mov	r2, r3
 801ad80:	4629      	mov	r1, r5
 801ad82:	4620      	mov	r0, r4
 801ad84:	f7ec fa79 	bl	800727a <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 801ad88:	4602      	mov	r2, r0
 801ad8a:	1d3b      	adds	r3, r7, #4
 801ad8c:	4611      	mov	r1, r2
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7ea fbc2 	bl	8005518 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 801ad94:	4603      	mov	r3, r0
    }
 801ad96:	4618      	mov	r0, r3
 801ad98:	3710      	adds	r7, #16
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bdb0      	pop	{r4, r5, r7, pc}

0801ad9e <_ZSt12__niter_baseIPKmET_S2_>:
    __niter_base(_Iterator __it)
 801ad9e:	b480      	push	{r7}
 801ada0:	b083      	sub	sp, #12
 801ada2:	af00      	add	r7, sp, #0
 801ada4:	6078      	str	r0, [r7, #4]
    { return __it; }
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	4618      	mov	r0, r3
 801adaa:	370c      	adds	r7, #12
 801adac:	46bd      	mov	sp, r7
 801adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb2:	4770      	bx	lr

0801adb4 <_Z41__static_initialization_and_destruction_0ii>:
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
 801adbc:	6039      	str	r1, [r7, #0]
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	2b01      	cmp	r3, #1
 801adc2:	d107      	bne.n	801add4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801adc4:	683b      	ldr	r3, [r7, #0]
 801adc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801adca:	4293      	cmp	r3, r2
 801adcc:	d102      	bne.n	801add4 <_Z41__static_initialization_and_destruction_0ii+0x20>
vector<reference_wrapper<TimerPeripheral>> TimerPeripheral::timers;
 801adce:	4809      	ldr	r0, [pc, #36]	; (801adf4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801add0:	f7ff f9d5 	bl	801a17e <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EEC1Ev>
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d107      	bne.n	801adea <_Z41__static_initialization_and_destruction_0ii+0x36>
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ade0:	4293      	cmp	r3, r2
 801ade2:	d102      	bne.n	801adea <_Z41__static_initialization_and_destruction_0ii+0x36>
 801ade4:	4803      	ldr	r0, [pc, #12]	; (801adf4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801ade6:	f000 f807 	bl	801adf8 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EED1Ev>
}
 801adea:	bf00      	nop
 801adec:	3708      	adds	r7, #8
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}
 801adf2:	bf00      	nop
 801adf4:	2400135c 	.word	0x2400135c

0801adf8 <_ZNSt6vectorISt17reference_wrapperI15TimerPeripheralESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801adf8:	b5b0      	push	{r4, r5, r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681c      	ldr	r4, [r3, #0]
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	f7e9 fe82 	bl	8004b14 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EE19_M_get_Tp_allocatorEv>
 801ae10:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801ae12:	461a      	mov	r2, r3
 801ae14:	4629      	mov	r1, r5
 801ae16:	4620      	mov	r0, r4
 801ae18:	f7e9 fea3 	bl	8004b62 <_ZSt8_DestroyIPSt17reference_wrapperI15TimerPeripheralES2_EvT_S4_RSaIT0_E>
      }
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	f7ff fc2a 	bl	801a678 <_ZNSt12_Vector_baseISt17reference_wrapperI15TimerPeripheralESaIS2_EED1Ev>
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	4618      	mov	r0, r3
 801ae28:	3708      	adds	r7, #8
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	bdb0      	pop	{r4, r5, r7, pc}

0801ae2e <_GLOBAL__sub_I__ZN15TimerPeripheral6timersE>:
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae36:	2001      	movs	r0, #1
 801ae38:	f7ff ffbc 	bl	801adb4 <_Z41__static_initialization_and_destruction_0ii>
 801ae3c:	bd80      	pop	{r7, pc}

0801ae3e <_GLOBAL__sub_D__ZN15TimerPeripheral6timersE>:
 801ae3e:	b580      	push	{r7, lr}
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae46:	2000      	movs	r0, #0
 801ae48:	f7ff ffb4 	bl	801adb4 <_Z41__static_initialization_and_destruction_0ii>
 801ae4c:	bd80      	pop	{r7, pc}

0801ae4e <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 801ae4e:	b580      	push	{r7, lr}
 801ae50:	b082      	sub	sp, #8
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	2200      	movs	r2, #0
 801ae5a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 801ae5c:	6878      	ldr	r0, [r7, #4]
 801ae5e:	f7e5 fb1e 	bl	800049e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	4618      	mov	r0, r3
 801ae66:	3708      	adds	r7, #8
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b082      	sub	sp, #8
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f000 fb54 	bl	801b522 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3708      	adds	r7, #8
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}

0801ae84 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b082      	sub	sp, #8
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f000 fb32 	bl	801b4f8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	4618      	mov	r0, r3
 801ae98:	3708      	adds	r7, #8
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}

0801ae9e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 801ae9e:	b580      	push	{r7, lr}
 801aea0:	b082      	sub	sp, #8
 801aea2:	af00      	add	r7, sp, #0
 801aea4:	6078      	str	r0, [r7, #4]
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f7ff ffeb 	bl	801ae84 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	3708      	adds	r7, #8
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}

0801aeb8 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b082      	sub	sp, #8
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	4618      	mov	r0, r3
 801aec4:	f000 fb38 	bl	801b538 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	4618      	mov	r0, r3
 801aecc:	3708      	adds	r7, #8
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}

0801aed2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801aed2:	b580      	push	{r7, lr}
 801aed4:	b082      	sub	sp, #8
 801aed6:	af00      	add	r7, sp, #0
 801aed8:	6078      	str	r0, [r7, #4]
 801aeda:	6878      	ldr	r0, [r7, #4]
 801aedc:	f000 fb56 	bl	801b58c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	4618      	mov	r0, r3
 801aee4:	3708      	adds	r7, #8
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd80      	pop	{r7, pc}

0801aeea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 801aeea:	b580      	push	{r7, lr}
 801aeec:	b082      	sub	sp, #8
 801aeee:	af00      	add	r7, sp, #0
 801aef0:	6078      	str	r0, [r7, #4]
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f000 fb34 	bl	801b562 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	4618      	mov	r0, r3
 801aefe:	3708      	adds	r7, #8
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>:
      map() = default;
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	4618      	mov	r0, r3
 801af10:	f7ff ffeb 	bl	801aeea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	4618      	mov	r0, r3
 801af18:	3708      	adds	r7, #8
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}

0801af1e <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
      ~map() = default;
 801af1e:	b580      	push	{r7, lr}
 801af20:	b082      	sub	sp, #8
 801af22:	af00      	add	r7, sp, #0
 801af24:	6078      	str	r0, [r7, #4]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	4618      	mov	r0, r3
 801af2a:	f000 fb3a 	bl	801b5a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	4618      	mov	r0, r3
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}

0801af38 <_ZN3ADC8InitDataC1Ev>:
		InitData() = default;
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	330c      	adds	r3, #12
 801af44:	4618      	mov	r0, r3
 801af46:	f7e5 fad9 	bl	80004fc <_ZNSt6vectorImSaImEEC1Ev>
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	4618      	mov	r0, r3
 801af4e:	3708      	adds	r7, #8
 801af50:	46bd      	mov	sp, r7
 801af52:	bd80      	pop	{r7, pc}

0801af54 <_ZN3ADC10PeripheralC1Ev>:
		uint16_t* dma_stream;
		LowPowerTimer timer;
		InitData init_data;
		bool is_on = false;

		Peripheral() = default;
 801af54:	b580      	push	{r7, lr}
 801af56:	b082      	sub	sp, #8
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	3314      	adds	r3, #20
 801af60:	4618      	mov	r0, r3
 801af62:	f7ff ffe9 	bl	801af38 <_ZN3ADC8InitDataC1Ev>
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	2200      	movs	r2, #0
 801af6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	4618      	mov	r0, r3
 801af72:	3708      	adds	r7, #8
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
map<uint8_t, ADC::Instance> ADC::active_instances = { };
map<Pin, ADC::Instance> ADC::available_instances = { };
uint32_t ADC::ranks[16];
ADC::Peripheral ADC::peripherals[3];

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 801af78:	b580      	push	{r7, lr}
 801af7a:	b084      	sub	sp, #16
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	60f8      	str	r0, [r7, #12]
 801af80:	60b9      	str	r1, [r7, #8]
 801af82:	607a      	str	r2, [r7, #4]
 801af84:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	68ba      	ldr	r2, [r7, #8]
 801af8a:	601a      	str	r2, [r3, #0]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	605a      	str	r2, [r3, #4]
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	683a      	ldr	r2, [r7, #0]
 801af96:	609a      	str	r2, [r3, #8]
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	330c      	adds	r3, #12
 801af9c:	69b9      	ldr	r1, [r7, #24]
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7e7 ffef 	bl	8002f82 <_ZNSt6vectorImSaImEEC1ERKS1_>
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	4618      	mov	r0, r3
 801afa8:	3710      	adds	r7, #16
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}

0801afae <_ZN3ADC8InitDataC1ERKS0_>:
	struct InitData {
 801afae:	b580      	push	{r7, lr}
 801afb0:	b082      	sub	sp, #8
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	6078      	str	r0, [r7, #4]
 801afb6:	6039      	str	r1, [r7, #0]
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	681a      	ldr	r2, [r3, #0]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	601a      	str	r2, [r3, #0]
 801afc0:	683b      	ldr	r3, [r7, #0]
 801afc2:	685a      	ldr	r2, [r3, #4]
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	605a      	str	r2, [r3, #4]
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	689a      	ldr	r2, [r3, #8]
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	609a      	str	r2, [r3, #8]
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	f103 020c 	add.w	r2, r3, #12
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	330c      	adds	r3, #12
 801afda:	4619      	mov	r1, r3
 801afdc:	4610      	mov	r0, r2
 801afde:	f7e7 ffd0 	bl	8002f82 <_ZNSt6vectorImSaImEEC1ERKS1_>
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	4618      	mov	r0, r3
 801afe6:	3708      	adds	r7, #8
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}

0801afec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 801afec:	b580      	push	{r7, lr}
 801afee:	b084      	sub	sp, #16
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
 801aff8:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	68ba      	ldr	r2, [r7, #8]
 801affe:	601a      	str	r2, [r3, #0]
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	687a      	ldr	r2, [r7, #4]
 801b004:	605a      	str	r2, [r3, #4]
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	683a      	ldr	r2, [r7, #0]
 801b00a:	3308      	adds	r3, #8
 801b00c:	ca07      	ldmia	r2, {r0, r1, r2}
 801b00e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	3314      	adds	r3, #20
 801b016:	69b9      	ldr	r1, [r7, #24]
 801b018:	4618      	mov	r0, r3
 801b01a:	f7ff ffc8 	bl	801afae <_ZN3ADC8InitDataC1ERKS0_>
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	2200      	movs	r2, #0
 801b022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	4618      	mov	r0, r3
 801b02a:	3710      	adds	r7, #16
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}

0801b030 <_ZN3ADC10Peripheral13is_registeredEv>:

bool ADC::Peripheral::is_registered() {
 801b030:	b580      	push	{r7, lr}
 801b032:	b082      	sub	sp, #8
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
	return init_data.channels.size();
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	3320      	adds	r3, #32
 801b03c:	4618      	mov	r0, r3
 801b03e:	f7e7 feb8 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801b042:	4603      	mov	r3, r0
 801b044:	2b00      	cmp	r3, #0
 801b046:	bf14      	ite	ne
 801b048:	2301      	movne	r3, #1
 801b04a:	2300      	moveq	r3, #0
 801b04c:	b2db      	uxtb	r3, r3
}
 801b04e:	4618      	mov	r0, r3
 801b050:	3708      	adds	r7, #8
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}

0801b056 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 801b056:	b480      	push	{r7}
 801b058:	b085      	sub	sp, #20
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	60f8      	str	r0, [r7, #12]
 801b05e:	60b9      	str	r1, [r7, #8]
 801b060:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	68ba      	ldr	r2, [r7, #8]
 801b066:	601a      	str	r2, [r3, #0]
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	687a      	ldr	r2, [r7, #4]
 801b06c:	605a      	str	r2, [r3, #4]
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	4618      	mov	r0, r3
 801b072:	3714      	adds	r7, #20
 801b074:	46bd      	mov	sp, r7
 801b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07a:	4770      	bx	lr

0801b07c <_ZN3ADC8inscribeE3Pin>:

optional<uint8_t> ADC::inscribe(Pin pin) {
 801b07c:	b590      	push	{r4, r7, lr}
 801b07e:	b087      	sub	sp, #28
 801b080:	af00      	add	r7, sp, #0
 801b082:	463b      	mov	r3, r7
 801b084:	e883 0003 	stmia.w	r3, {r0, r1}
	if (not available_instances.contains(pin)) {
 801b088:	463b      	mov	r3, r7
 801b08a:	4619      	mov	r1, r3
 801b08c:	4831      	ldr	r0, [pc, #196]	; (801b154 <_ZN3ADC8inscribeE3Pin+0xd8>)
 801b08e:	f000 fa9d 	bl	801b5cc <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>
 801b092:	4603      	mov	r3, r0
 801b094:	f083 0301 	eor.w	r3, r3, #1
 801b098:	b2db      	uxtb	r3, r3
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d008      	beq.n	801b0b0 <_ZN3ADC8inscribeE3Pin+0x34>
		return nullopt;
 801b09e:	f107 030c 	add.w	r3, r7, #12
 801b0a2:	4621      	mov	r1, r4
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f000 fae8 	bl	801b67a <_ZNSt8optionalIhEC1ESt9nullopt_t>
 801b0aa:	89bb      	ldrh	r3, [r7, #12]
 801b0ac:	813b      	strh	r3, [r7, #8]
 801b0ae:	e045      	b.n	801b13c <_ZN3ADC8inscribeE3Pin+0xc0>
	}

	Pin::inscribe(pin, ANALOG);
 801b0b0:	463b      	mov	r3, r7
 801b0b2:	2103      	movs	r1, #3
 801b0b4:	4618      	mov	r0, r3
 801b0b6:	f7fd ff7b 	bl	8018fb0 <_ZN3Pin8inscribeERS_13OperationMode>
	active_instances[id_counter] = available_instances[pin];
 801b0ba:	463b      	mov	r3, r7
 801b0bc:	4619      	mov	r1, r3
 801b0be:	4825      	ldr	r0, [pc, #148]	; (801b154 <_ZN3ADC8inscribeE3Pin+0xd8>)
 801b0c0:	f000 fb46 	bl	801b750 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
 801b0c4:	4604      	mov	r4, r0
 801b0c6:	4924      	ldr	r1, [pc, #144]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b0c8:	4824      	ldr	r0, [pc, #144]	; (801b15c <_ZN3ADC8inscribeE3Pin+0xe0>)
 801b0ca:	f000 fae5 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	4622      	mov	r2, r4
 801b0d2:	ca07      	ldmia	r2, {r0, r1, r2}
 801b0d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	InitData& init_data = active_instances[id_counter].peripheral->init_data;
 801b0d8:	491f      	ldr	r1, [pc, #124]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b0da:	4820      	ldr	r0, [pc, #128]	; (801b15c <_ZN3ADC8inscribeE3Pin+0xe0>)
 801b0dc:	f000 fadc 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	3314      	adds	r3, #20
 801b0e6:	617b      	str	r3, [r7, #20]
	active_instances[id_counter].rank = init_data.channels.size();
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	330c      	adds	r3, #12
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f7e7 fe60 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801b0f2:	4604      	mov	r4, r0
 801b0f4:	4918      	ldr	r1, [pc, #96]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b0f6:	4819      	ldr	r0, [pc, #100]	; (801b15c <_ZN3ADC8inscribeE3Pin+0xe0>)
 801b0f8:	f000 face 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b0fc:	4603      	mov	r3, r0
 801b0fe:	609c      	str	r4, [r3, #8]
	init_data.channels.push_back(active_instances[id_counter].channel);
 801b100:	697b      	ldr	r3, [r7, #20]
 801b102:	f103 040c 	add.w	r4, r3, #12
 801b106:	4914      	ldr	r1, [pc, #80]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b108:	4814      	ldr	r0, [pc, #80]	; (801b15c <_ZN3ADC8inscribeE3Pin+0xe0>)
 801b10a:	f000 fac5 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b10e:	4603      	mov	r3, r0
 801b110:	3304      	adds	r3, #4
 801b112:	4619      	mov	r1, r3
 801b114:	4620      	mov	r0, r4
 801b116:	f000 fb77 	bl	801b808 <_ZNSt6vectorImSaImEE9push_backERKm>
	return id_counter++;
 801b11a:	4b0f      	ldr	r3, [pc, #60]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	1c5a      	adds	r2, r3, #1
 801b120:	b2d1      	uxtb	r1, r2
 801b122:	4a0d      	ldr	r2, [pc, #52]	; (801b158 <_ZN3ADC8inscribeE3Pin+0xdc>)
 801b124:	7011      	strb	r1, [r2, #0]
 801b126:	74fb      	strb	r3, [r7, #19]
 801b128:	f107 0213 	add.w	r2, r7, #19
 801b12c:	f107 0310 	add.w	r3, r7, #16
 801b130:	4611      	mov	r1, r2
 801b132:	4618      	mov	r0, r3
 801b134:	f000 fb8d 	bl	801b852 <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 801b138:	8a3b      	ldrh	r3, [r7, #16]
 801b13a:	813b      	strh	r3, [r7, #8]
}
 801b13c:	2300      	movs	r3, #0
 801b13e:	7a3a      	ldrb	r2, [r7, #8]
 801b140:	f362 0307 	bfi	r3, r2, #0, #8
 801b144:	7a7a      	ldrb	r2, [r7, #9]
 801b146:	f362 230f 	bfi	r3, r2, #8, #8
 801b14a:	4618      	mov	r0, r3
 801b14c:	371c      	adds	r7, #28
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd90      	pop	{r4, r7, pc}
 801b152:	bf00      	nop
 801b154:	24001384 	.word	0x24001384
 801b158:	24001368 	.word	0x24001368
 801b15c:	2400136c 	.word	0x2400136c

0801b160 <_ZN3ADC5startEv>:

void ADC::start() {
 801b160:	b580      	push	{r7, lr}
 801b162:	b084      	sub	sp, #16
 801b164:	af00      	add	r7, sp, #0
	for(Peripheral& peripheral : peripherals) {
 801b166:	4b0e      	ldr	r3, [pc, #56]	; (801b1a0 <_ZN3ADC5startEv+0x40>)
 801b168:	60bb      	str	r3, [r7, #8]
 801b16a:	4b0d      	ldr	r3, [pc, #52]	; (801b1a0 <_ZN3ADC5startEv+0x40>)
 801b16c:	60fb      	str	r3, [r7, #12]
 801b16e:	4b0d      	ldr	r3, [pc, #52]	; (801b1a4 <_ZN3ADC5startEv+0x44>)
 801b170:	607b      	str	r3, [r7, #4]
 801b172:	68fa      	ldr	r2, [r7, #12]
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	429a      	cmp	r2, r3
 801b178:	d00e      	beq.n	801b198 <_ZN3ADC5startEv+0x38>
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	603b      	str	r3, [r7, #0]
		if (peripheral.is_registered()) {
 801b17e:	6838      	ldr	r0, [r7, #0]
 801b180:	f7ff ff56 	bl	801b030 <_ZN3ADC10Peripheral13is_registeredEv>
 801b184:	4603      	mov	r3, r0
 801b186:	2b00      	cmp	r3, #0
 801b188:	d002      	beq.n	801b190 <_ZN3ADC5startEv+0x30>
			ADC::init(peripheral);
 801b18a:	6838      	ldr	r0, [r7, #0]
 801b18c:	f000 f8d4 	bl	801b338 <_ZN3ADC4initERNS_10PeripheralE>
	for(Peripheral& peripheral : peripherals) {
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	3330      	adds	r3, #48	; 0x30
 801b194:	60fb      	str	r3, [r7, #12]
 801b196:	e7ec      	b.n	801b172 <_ZN3ADC5startEv+0x12>
		}
	}
}
 801b198:	bf00      	nop
 801b19a:	3710      	adds	r7, #16
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bd80      	pop	{r7, pc}
 801b1a0:	240013dc 	.word	0x240013dc
 801b1a4:	2400146c 	.word	0x2400146c

0801b1a8 <_ZN3ADC7turn_onEh>:

void ADC::turn_on(uint8_t id){
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b086      	sub	sp, #24
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	71fb      	strb	r3, [r7, #7]
	if (not active_instances.contains(id)) {
 801b1b2:	1dfb      	adds	r3, r7, #7
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	4829      	ldr	r0, [pc, #164]	; (801b25c <_ZN3ADC7turn_onEh+0xb4>)
 801b1b8:	f000 fb5f 	bl	801b87a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	f083 0301 	eor.w	r3, r3, #1
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d13e      	bne.n	801b246 <_ZN3ADC7turn_onEh+0x9e>
		return;
	}

	Peripheral* peripheral = active_instances[id].peripheral;
 801b1c8:	1dfb      	adds	r3, r7, #7
 801b1ca:	4619      	mov	r1, r3
 801b1cc:	4823      	ldr	r0, [pc, #140]	; (801b25c <_ZN3ADC7turn_onEh+0xb4>)
 801b1ce:	f000 fa63 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	617b      	str	r3, [r7, #20]
	if (peripheral->is_on) {
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d133      	bne.n	801b24a <_ZN3ADC7turn_onEh+0xa2>
		return;
	}

	uint32_t buffer_length = peripheral->init_data.channels.size();
 801b1e2:	697b      	ldr	r3, [r7, #20]
 801b1e4:	3320      	adds	r3, #32
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f7e7 fde3 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801b1ec:	6138      	str	r0, [r7, #16]
	if (HAL_ADC_Start_DMA(peripheral->handle, (uint32_t*) peripheral->dma_stream, buffer_length) != HAL_OK) {
 801b1ee:	697b      	ldr	r3, [r7, #20]
 801b1f0:	6818      	ldr	r0, [r3, #0]
 801b1f2:	697b      	ldr	r3, [r7, #20]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	693a      	ldr	r2, [r7, #16]
 801b1f8:	4619      	mov	r1, r3
 801b1fa:	f7f3 f8d9 	bl	800e3b0 <HAL_ADC_Start_DMA>
 801b1fe:	4603      	mov	r3, r0
 801b200:	2b00      	cmp	r3, #0
 801b202:	bf14      	ite	ne
 801b204:	2301      	movne	r3, #1
 801b206:	2300      	moveq	r3, #0
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d11f      	bne.n	801b24e <_ZN3ADC7turn_onEh+0xa6>
		return; //TODO: Error handler
	}

	LowPowerTimer* timer = &peripheral->timer;
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	3308      	adds	r3, #8
 801b212:	60fb      	str	r3, [r7, #12]
	if (HAL_LPTIM_TimeOut_Start_IT(timer->handle, timer->period, timer->period / 2) != HAL_OK) {
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	6858      	ldr	r0, [r3, #4]
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	891b      	ldrh	r3, [r3, #8]
 801b21c:	4619      	mov	r1, r3
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	891b      	ldrh	r3, [r3, #8]
 801b222:	085b      	lsrs	r3, r3, #1
 801b224:	b29b      	uxth	r3, r3
 801b226:	461a      	mov	r2, r3
 801b228:	f7f8 f92c 	bl	8013484 <HAL_LPTIM_TimeOut_Start_IT>
 801b22c:	4603      	mov	r3, r0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	bf14      	ite	ne
 801b232:	2301      	movne	r3, #1
 801b234:	2300      	moveq	r3, #0
 801b236:	b2db      	uxtb	r3, r3
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d10a      	bne.n	801b252 <_ZN3ADC7turn_onEh+0xaa>
		return; //TODO: Error handler
	}
	peripheral->is_on = true;
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	2201      	movs	r2, #1
 801b240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801b244:	e006      	b.n	801b254 <_ZN3ADC7turn_onEh+0xac>
		return;
 801b246:	bf00      	nop
 801b248:	e004      	b.n	801b254 <_ZN3ADC7turn_onEh+0xac>
		return;
 801b24a:	bf00      	nop
 801b24c:	e002      	b.n	801b254 <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 801b24e:	bf00      	nop
 801b250:	e000      	b.n	801b254 <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 801b252:	bf00      	nop
}
 801b254:	3718      	adds	r7, #24
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}
 801b25a:	bf00      	nop
 801b25c:	2400136c 	.word	0x2400136c

0801b260 <_ZN3ADC9get_valueEh>:

optional<float> ADC::get_value(uint8_t id) {
 801b260:	b590      	push	{r4, r7, lr}
 801b262:	b089      	sub	sp, #36	; 0x24
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
 801b268:	460b      	mov	r3, r1
 801b26a:	70fb      	strb	r3, [r7, #3]
	if (not active_instances.contains(id)) {
 801b26c:	1cfb      	adds	r3, r7, #3
 801b26e:	4619      	mov	r1, r3
 801b270:	482f      	ldr	r0, [pc, #188]	; (801b330 <_ZN3ADC9get_valueEh+0xd0>)
 801b272:	f000 fb02 	bl	801b87a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 801b276:	4603      	mov	r3, r0
 801b278:	f083 0301 	eor.w	r3, r3, #1
 801b27c:	b2db      	uxtb	r3, r3
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d004      	beq.n	801b28c <_ZN3ADC9get_valueEh+0x2c>
		return nullopt;
 801b282:	4621      	mov	r1, r4
 801b284:	6878      	ldr	r0, [r7, #4]
 801b286:	f000 fb4f 	bl	801b928 <_ZNSt8optionalIfEC1ESt9nullopt_t>
 801b28a:	e03f      	b.n	801b30c <_ZN3ADC9get_valueEh+0xac>
	}

	Instance& instance = active_instances[id];
 801b28c:	1cfb      	adds	r3, r7, #3
 801b28e:	4619      	mov	r1, r3
 801b290:	4827      	ldr	r0, [pc, #156]	; (801b330 <_ZN3ADC9get_valueEh+0xd0>)
 801b292:	f000 fa01 	bl	801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801b296:	61f8      	str	r0, [r7, #28]
	uint16_t raw = instance.peripheral->dma_stream[instance.rank];
 801b298:	69fb      	ldr	r3, [r7, #28]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	685a      	ldr	r2, [r3, #4]
 801b29e:	69fb      	ldr	r3, [r7, #28]
 801b2a0:	689b      	ldr	r3, [r3, #8]
 801b2a2:	005b      	lsls	r3, r3, #1
 801b2a4:	4413      	add	r3, r2
 801b2a6:	881b      	ldrh	r3, [r3, #0]
 801b2a8:	837b      	strh	r3, [r7, #26]
	if(instance.peripheral->handle == &hadc3) {
 801b2aa:	69fb      	ldr	r3, [r7, #28]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	4a20      	ldr	r2, [pc, #128]	; (801b334 <_ZN3ADC9get_valueEh+0xd4>)
 801b2b2:	4293      	cmp	r3, r2
 801b2b4:	d115      	bne.n	801b2e2 <_ZN3ADC9get_valueEh+0x82>
		return raw / MAX_12BIT * MAX_VOLTAGE;
 801b2b6:	8b7b      	ldrh	r3, [r7, #26]
 801b2b8:	ee07 3a90 	vmov	s15, r3
 801b2bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801b2c0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 801b318 <_ZN3ADC9get_valueEh+0xb8>
 801b2c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801b2c8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801b320 <_ZN3ADC9get_valueEh+0xc0>
 801b2cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b2d0:	ed87 7b02 	vstr	d7, [r7, #8]
 801b2d4:	f107 0308 	add.w	r3, r7, #8
 801b2d8:	4619      	mov	r1, r3
 801b2da:	6878      	ldr	r0, [r7, #4]
 801b2dc:	f000 fb32 	bl	801b944 <_ZNSt8optionalIfEC1IdLb1EEEOT_>
	else {
		return raw / MAX_16BIT * MAX_VOLTAGE;
	}

	return nullopt;
}
 801b2e0:	e014      	b.n	801b30c <_ZN3ADC9get_valueEh+0xac>
		return raw / MAX_16BIT * MAX_VOLTAGE;
 801b2e2:	8b7b      	ldrh	r3, [r7, #26]
 801b2e4:	ee07 3a90 	vmov	s15, r3
 801b2e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801b2ec:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 801b328 <_ZN3ADC9get_valueEh+0xc8>
 801b2f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801b2f4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 801b320 <_ZN3ADC9get_valueEh+0xc0>
 801b2f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b2fc:	ed87 7b04 	vstr	d7, [r7, #16]
 801b300:	f107 0310 	add.w	r3, r7, #16
 801b304:	4619      	mov	r1, r3
 801b306:	6878      	ldr	r0, [r7, #4]
 801b308:	f000 fb1c 	bl	801b944 <_ZNSt8optionalIfEC1IdLb1EEEOT_>
}
 801b30c:	6878      	ldr	r0, [r7, #4]
 801b30e:	3724      	adds	r7, #36	; 0x24
 801b310:	46bd      	mov	sp, r7
 801b312:	bd90      	pop	{r4, r7, pc}
 801b314:	f3af 8000 	nop.w
 801b318:	00000000 	.word	0x00000000
 801b31c:	40affe00 	.word	0x40affe00
 801b320:	66666666 	.word	0x66666666
 801b324:	400a6666 	.word	0x400a6666
 801b328:	00000000 	.word	0x00000000
 801b32c:	40efffe0 	.word	0x40efffe0
 801b330:	2400136c 	.word	0x2400136c
 801b334:	240005d8 	.word	0x240005d8

0801b338 <_ZN3ADC4initERNS_10PeripheralE>:
	else {
		return raw;
	}
}

void ADC::init(Peripheral& peripheral) {
 801b338:	b580      	push	{r7, lr}
 801b33a:	b09a      	sub	sp, #104	; 0x68
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
	ADC_MultiModeTypeDef multimode = {0};
 801b340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b344:	2200      	movs	r2, #0
 801b346:	601a      	str	r2, [r3, #0]
 801b348:	605a      	str	r2, [r3, #4]
 801b34a:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 801b34c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b350:	2224      	movs	r2, #36	; 0x24
 801b352:	2100      	movs	r1, #0
 801b354:	4618      	mov	r0, r3
 801b356:	f008 f8d3 	bl	8023500 <memset>
	ADC_HandleTypeDef& adc_handle = *peripheral.handle;
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	663b      	str	r3, [r7, #96]	; 0x60
	InitData init_data = peripheral.init_data;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f103 0214 	add.w	r2, r3, #20
 801b366:	f107 0310 	add.w	r3, r7, #16
 801b36a:	4611      	mov	r1, r2
 801b36c:	4618      	mov	r0, r3
 801b36e:	f7ff fe1e 	bl	801afae <_ZN3ADC8InitDataC1ERKS0_>

	adc_handle.Instance = init_data.adc;
 801b372:	693a      	ldr	r2, [r7, #16]
 801b374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b376:	601a      	str	r2, [r3, #0]
	adc_handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801b378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b37a:	2200      	movs	r2, #0
 801b37c:	605a      	str	r2, [r3, #4]
	adc_handle.Init.Resolution = init_data.resolution;
 801b37e:	697a      	ldr	r2, [r7, #20]
 801b380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b382:	609a      	str	r2, [r3, #8]
	adc_handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801b384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b386:	2201      	movs	r2, #1
 801b388:	611a      	str	r2, [r3, #16]
	adc_handle.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 801b38a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b38c:	2208      	movs	r2, #8
 801b38e:	615a      	str	r2, [r3, #20]
	adc_handle.Init.LowPowerAutoWait = DISABLE;
 801b390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b392:	2200      	movs	r2, #0
 801b394:	761a      	strb	r2, [r3, #24]
	adc_handle.Init.ContinuousConvMode = DISABLE;
 801b396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b398:	2200      	movs	r2, #0
 801b39a:	765a      	strb	r2, [r3, #25]
	adc_handle.Init.NbrOfConversion = init_data.channels.size();
 801b39c:	f107 0310 	add.w	r3, r7, #16
 801b3a0:	330c      	adds	r3, #12
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7e7 fd05 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801b3a8:	4602      	mov	r2, r0
 801b3aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3ac:	61da      	str	r2, [r3, #28]
	adc_handle.Init.DiscontinuousConvMode = DISABLE;
 801b3ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3b0:	2200      	movs	r2, #0
 801b3b2:	f883 2020 	strb.w	r2, [r3, #32]
	adc_handle.Init.ExternalTrigConv = init_data.external_trigger;
 801b3b6:	69ba      	ldr	r2, [r7, #24]
 801b3b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3ba:	629a      	str	r2, [r3, #40]	; 0x28
	adc_handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801b3bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b3c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (adc_handle.Instance == ADC3) {
 801b3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	4a3f      	ldr	r2, [pc, #252]	; (801b4c8 <_ZN3ADC4initERNS_10PeripheralE+0x190>)
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d104      	bne.n	801b3d8 <_ZN3ADC4initERNS_10PeripheralE+0xa0>
		adc_handle.Init.DMAContinuousRequests = ENABLE;
 801b3ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3d0:	2201      	movs	r2, #1
 801b3d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 801b3d6:	e002      	b.n	801b3de <_ZN3ADC4initERNS_10PeripheralE+0xa6>
	} else {
		adc_handle.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 801b3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3da:	2203      	movs	r2, #3
 801b3dc:	631a      	str	r2, [r3, #48]	; 0x30
	}
	adc_handle.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801b3de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	63da      	str	r2, [r3, #60]	; 0x3c
	adc_handle.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 801b3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	641a      	str	r2, [r3, #64]	; 0x40
	adc_handle.Init.OversamplingMode = DISABLE;
 801b3ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&adc_handle) != HAL_OK) {
 801b3f2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801b3f4:	f7f2 fdd4 	bl	800dfa0 <HAL_ADC_Init>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	2b00      	cmp	r3, #0
	//TODO: Error handler
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_ADCEx_MultiModeConfigChannel(&adc_handle, &multimode) != HAL_OK) {
 801b400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b404:	4619      	mov	r1, r3
 801b406:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801b408:	f7f4 f82a 	bl	800f460 <HAL_ADCEx_MultiModeConfigChannel>
 801b40c:	4603      	mov	r3, r0
 801b40e:	2b00      	cmp	r3, #0
	//TODO: Error handler
	}

	uint8_t counter = 0;
 801b410:	2300      	movs	r3, #0
 801b412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	for(uint32_t channel : peripheral.init_data.channels) {
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	3320      	adds	r3, #32
 801b41a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b41c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801b41e:	f7e8 ffcd 	bl	80043bc <_ZNSt6vectorImSaImEE5beginEv>
 801b422:	4603      	mov	r3, r0
 801b424:	60fb      	str	r3, [r7, #12]
 801b426:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801b428:	f7e8 fff0 	bl	800440c <_ZNSt6vectorImSaImEE3endEv>
 801b42c:	4603      	mov	r3, r0
 801b42e:	60bb      	str	r3, [r7, #8]
 801b430:	f107 0208 	add.w	r2, r7, #8
 801b434:	f107 030c 	add.w	r3, r7, #12
 801b438:	4611      	mov	r1, r2
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7eb ff5f 	bl	80072fe <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 801b440:	4603      	mov	r3, r0
 801b442:	f083 0301 	eor.w	r3, r3, #1
 801b446:	b2db      	uxtb	r3, r3
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d02e      	beq.n	801b4aa <_ZN3ADC4initERNS_10PeripheralE+0x172>
 801b44c:	f107 030c 	add.w	r3, r7, #12
 801b450:	4618      	mov	r0, r3
 801b452:	f7ed fcbd 	bl	8008dd0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 801b456:	4603      	mov	r3, r0
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	65bb      	str	r3, [r7, #88]	; 0x58
	  sConfig.Channel = channel;
 801b45c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b45e:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfig.Rank = ranks[counter];
 801b460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b464:	4a19      	ldr	r2, [pc, #100]	; (801b4cc <_ZN3ADC4initERNS_10PeripheralE+0x194>)
 801b466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 801b46c:	2300      	movs	r3, #0
 801b46e:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801b470:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801b474:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801b476:	2304      	movs	r3, #4
 801b478:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfig.Offset = 0;
 801b47a:	2300      	movs	r3, #0
 801b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfig.OffsetSignedSaturation = DISABLE;
 801b47e:	2300      	movs	r3, #0
 801b480:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
 801b484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b488:	4619      	mov	r1, r3
 801b48a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801b48c:	f7f3 f88a 	bl	800e5a4 <HAL_ADC_ConfigChannel>
 801b490:	4603      	mov	r3, r0
 801b492:	2b00      	cmp	r3, #0
		  //TODO: Error handler
	  }
	  counter++;
 801b494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b498:	3301      	adds	r3, #1
 801b49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	for(uint32_t channel : peripheral.init_data.channels) {
 801b49e:	f107 030c 	add.w	r3, r7, #12
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7eb ff1b 	bl	80072de <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 801b4a8:	e7c2      	b.n	801b430 <_ZN3ADC4initERNS_10PeripheralE+0xf8>
	}

	  peripheral.timer.init();
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	3308      	adds	r3, #8
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	f007 fdde 	bl	8023070 <_ZN13LowPowerTimer4initEv>
	InitData init_data = peripheral.init_data;
 801b4b4:	f107 0310 	add.w	r3, r7, #16
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	f7e5 f874 	bl	80005a6 <_ZN3ADC8InitDataD1Ev>
}
 801b4be:	bf00      	nop
 801b4c0:	3768      	adds	r7, #104	; 0x68
 801b4c2:	46bd      	mov	sp, r7
 801b4c4:	bd80      	pop	{r7, pc}
 801b4c6:	bf00      	nop
 801b4c8:	58026000 	.word	0x58026000
 801b4cc:	2400139c 	.word	0x2400139c

0801b4d0 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801b4d0:	b480      	push	{r7}
 801b4d2:	b083      	sub	sp, #12
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
 801b4d8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681a      	ldr	r2, [r3, #0]
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d201      	bcs.n	801b4ea <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 801b4e6:	683b      	ldr	r3, [r7, #0]
 801b4e8:	e000      	b.n	801b4ec <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 801b4ea:	687b      	ldr	r3, [r7, #4]
    }
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	370c      	adds	r7, #12
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f6:	4770      	bx	lr

0801b4f8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b082      	sub	sp, #8
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	f000 fa33 	bl	801b96c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	4618      	mov	r0, r3
 801b50a:	f000 fa3b 	bl	801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	3304      	adds	r3, #4
 801b512:	4618      	mov	r0, r3
 801b514:	f7ff fc9b 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	4618      	mov	r0, r3
 801b51c:	3708      	adds	r7, #8
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}

0801b522 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801b522:	b480      	push	{r7}
 801b524:	b083      	sub	sp, #12
 801b526:	af00      	add	r7, sp, #0
 801b528:	6078      	str	r0, [r7, #4]
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	4618      	mov	r0, r3
 801b52e:	370c      	adds	r7, #12
 801b530:	46bd      	mov	sp, r7
 801b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b536:	4770      	bx	lr

0801b538 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801b538:	b580      	push	{r7, lr}
 801b53a:	b082      	sub	sp, #8
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f000 fa49 	bl	801b9d8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801b546:	4603      	mov	r3, r0
 801b548:	4619      	mov	r1, r3
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f000 fa25 	bl	801b99a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	4618      	mov	r0, r3
 801b554:	f7ff fc8a 	bl	801ae6c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	4618      	mov	r0, r3
 801b55c:	3708      	adds	r7, #8
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}

0801b562 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801b562:	b580      	push	{r7, lr}
 801b564:	b082      	sub	sp, #8
 801b566:	af00      	add	r7, sp, #0
 801b568:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801b56a:	6878      	ldr	r0, [r7, #4]
 801b56c:	f000 fa40 	bl	801b9f0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	4618      	mov	r0, r3
 801b574:	f000 fa48 	bl	801ba08 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	3304      	adds	r3, #4
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7ff fc66 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	4618      	mov	r0, r3
 801b586:	3708      	adds	r7, #8
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}

0801b58c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
 801b58c:	b480      	push	{r7}
 801b58e:	b083      	sub	sp, #12
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4618      	mov	r0, r3
 801b598:	370c      	adds	r7, #12
 801b59a:	46bd      	mov	sp, r7
 801b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a0:	4770      	bx	lr

0801b5a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801b5a2:	b580      	push	{r7, lr}
 801b5a4:	b082      	sub	sp, #8
 801b5a6:	af00      	add	r7, sp, #0
 801b5a8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801b5aa:	6878      	ldr	r0, [r7, #4]
 801b5ac:	f7ed fca1 	bl	8008ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 801b5b0:	4603      	mov	r3, r0
 801b5b2:	4619      	mov	r1, r3
 801b5b4:	6878      	ldr	r0, [r7, #4]
 801b5b6:	f7e9 ffe5 	bl	8005584 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7ff fc88 	bl	801aed2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	3708      	adds	r7, #8
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	bd80      	pop	{r7, pc}

0801b5cc <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b084      	sub	sp, #16
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
 801b5d4:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6839      	ldr	r1, [r7, #0]
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f000 fa1f 	bl	801ba1e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	60bb      	str	r3, [r7, #8]
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	f000 fa55 	bl	801ba96 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801b5ec:	4603      	mov	r3, r0
 801b5ee:	60fb      	str	r3, [r7, #12]
 801b5f0:	f107 020c 	add.w	r2, r7, #12
 801b5f4:	f107 0308 	add.w	r3, r7, #8
 801b5f8:	4611      	mov	r1, r2
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f000 fa5c 	bl	801bab8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 801b600:	4603      	mov	r3, r0
 801b602:	f083 0301 	eor.w	r3, r3, #1
 801b606:	b2db      	uxtb	r3, r3
 801b608:	4618      	mov	r0, r3
 801b60a:	3710      	adds	r7, #16
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}

0801b610 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 801b610:	b480      	push	{r7}
 801b612:	b083      	sub	sp, #12
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	4618      	mov	r0, r3
 801b61c:	370c      	adds	r7, #12
 801b61e:	46bd      	mov	sp, r7
 801b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 801b626:	b580      	push	{r7, lr}
 801b628:	b082      	sub	sp, #8
 801b62a:	af00      	add	r7, sp, #0
 801b62c:	6078      	str	r0, [r7, #4]
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	4618      	mov	r0, r3
 801b632:	f7ff ffed 	bl	801b610 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2200      	movs	r2, #0
 801b63a:	705a      	strb	r2, [r3, #1]
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	4618      	mov	r0, r3
 801b640:	3708      	adds	r7, #8
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}

0801b646 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 801b646:	b580      	push	{r7, lr}
 801b648:	b082      	sub	sp, #8
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	6078      	str	r0, [r7, #4]
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	4618      	mov	r0, r3
 801b652:	f7ff ffe8 	bl	801b626 <_ZNSt22_Optional_payload_baseIhEC1Ev>
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	4618      	mov	r0, r3
 801b65a:	3708      	adds	r7, #8
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}

0801b660 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 801b660:	b580      	push	{r7, lr}
 801b662:	b082      	sub	sp, #8
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7ff ffeb 	bl	801b646 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	4618      	mov	r0, r3
 801b674:	3708      	adds	r7, #8
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}

0801b67a <_ZNSt8optionalIhEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 801b67a:	b580      	push	{r7, lr}
 801b67c:	b082      	sub	sp, #8
 801b67e:	af00      	add	r7, sp, #0
 801b680:	6078      	str	r0, [r7, #4]
 801b682:	7039      	strb	r1, [r7, #0]
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	4618      	mov	r0, r3
 801b688:	f7ff ffea 	bl	801b660 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	4618      	mov	r0, r3
 801b690:	3708      	adds	r7, #8
 801b692:	46bd      	mov	sp, r7
 801b694:	bd80      	pop	{r7, pc}
	...

0801b698 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>:
      operator[](const key_type& __k)
 801b698:	b590      	push	{r4, r7, lr}
 801b69a:	b08b      	sub	sp, #44	; 0x2c
 801b69c:	af02      	add	r7, sp, #8
 801b69e:	6078      	str	r0, [r7, #4]
 801b6a0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801b6a2:	6839      	ldr	r1, [r7, #0]
 801b6a4:	6878      	ldr	r0, [r7, #4]
 801b6a6:	f000 fa1b 	bl	801bae0 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801b6ae:	6878      	ldr	r0, [r7, #4]
 801b6b0:	f000 fa25 	bl	801bafe <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	60fb      	str	r3, [r7, #12]
 801b6b8:	f107 020c 	add.w	r2, r7, #12
 801b6bc:	f107 0308 	add.w	r3, r7, #8
 801b6c0:	4611      	mov	r1, r2
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f000 fa28 	bl	801bb18 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d112      	bne.n	801b6f4 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x5c>
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f000 fa36 	bl	801bb40 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 801b6d4:	f107 0308 	add.w	r3, r7, #8
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f000 fa3e 	bl	801bb5a <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 801b6de:	4603      	mov	r3, r0
 801b6e0:	461a      	mov	r2, r3
 801b6e2:	f107 0310 	add.w	r3, r7, #16
 801b6e6:	6839      	ldr	r1, [r7, #0]
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	f000 fa44 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d001      	beq.n	801b6f8 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x60>
 801b6f4:	2301      	movs	r3, #1
 801b6f6:	e000      	b.n	801b6fa <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x62>
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d01b      	beq.n	801b736 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801b6fe:	687c      	ldr	r4, [r7, #4]
 801b700:	f107 0208 	add.w	r2, r7, #8
 801b704:	f107 0314 	add.w	r3, r7, #20
 801b708:	4611      	mov	r1, r2
 801b70a:	4618      	mov	r0, r3
 801b70c:	f000 fa57 	bl	801bbbe <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 801b710:	f107 0318 	add.w	r3, r7, #24
 801b714:	6839      	ldr	r1, [r7, #0]
 801b716:	4618      	mov	r0, r3
 801b718:	f000 fa42 	bl	801bba0 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801b71c:	f107 0218 	add.w	r2, r7, #24
 801b720:	f107 031c 	add.w	r3, r7, #28
 801b724:	9300      	str	r3, [sp, #0]
 801b726:	4613      	mov	r3, r2
 801b728:	4a08      	ldr	r2, [pc, #32]	; (801b74c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0xb4>)
 801b72a:	6979      	ldr	r1, [r7, #20]
 801b72c:	4620      	mov	r0, r4
 801b72e:	f000 fa56 	bl	801bbde <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 801b732:	4603      	mov	r3, r0
 801b734:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801b736:	f107 0308 	add.w	r3, r7, #8
 801b73a:	4618      	mov	r0, r3
 801b73c:	f000 fa0d 	bl	801bb5a <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 801b740:	4603      	mov	r3, r0
 801b742:	3304      	adds	r3, #4
      }
 801b744:	4618      	mov	r0, r3
 801b746:	3724      	adds	r7, #36	; 0x24
 801b748:	46bd      	mov	sp, r7
 801b74a:	bd90      	pop	{r4, r7, pc}
 801b74c:	08023b34 	.word	0x08023b34

0801b750 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>:
      operator[](const key_type& __k)
 801b750:	b590      	push	{r4, r7, lr}
 801b752:	b08b      	sub	sp, #44	; 0x2c
 801b754:	af02      	add	r7, sp, #8
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801b75a:	6839      	ldr	r1, [r7, #0]
 801b75c:	6878      	ldr	r0, [r7, #4]
 801b75e:	f000 fa7c 	bl	801bc5a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>
 801b762:	4603      	mov	r3, r0
 801b764:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	f000 fa86 	bl	801bc78 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>
 801b76c:	4603      	mov	r3, r0
 801b76e:	60fb      	str	r3, [r7, #12]
 801b770:	f107 020c 	add.w	r2, r7, #12
 801b774:	f107 0308 	add.w	r3, r7, #8
 801b778:	4611      	mov	r1, r2
 801b77a:	4618      	mov	r0, r3
 801b77c:	f7ed fbd6 	bl	8008f2c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 801b780:	4603      	mov	r3, r0
 801b782:	2b00      	cmp	r3, #0
 801b784:	d112      	bne.n	801b7ac <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x5c>
 801b786:	6878      	ldr	r0, [r7, #4]
 801b788:	f000 fa83 	bl	801bc92 <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>
 801b78c:	f107 0308 	add.w	r3, r7, #8
 801b790:	4618      	mov	r0, r3
 801b792:	f000 fa8b 	bl	801bcac <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 801b796:	4603      	mov	r3, r0
 801b798:	461a      	mov	r2, r3
 801b79a:	f107 0310 	add.w	r3, r7, #16
 801b79e:	6839      	ldr	r1, [r7, #0]
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7eb fe80 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d001      	beq.n	801b7b0 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x60>
 801b7ac:	2301      	movs	r3, #1
 801b7ae:	e000      	b.n	801b7b2 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x62>
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d01b      	beq.n	801b7ee <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801b7b6:	687c      	ldr	r4, [r7, #4]
 801b7b8:	f107 0208 	add.w	r2, r7, #8
 801b7bc:	f107 0314 	add.w	r3, r7, #20
 801b7c0:	4611      	mov	r1, r2
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f7e8 fedf 	bl	8004586 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 801b7c8:	f107 0318 	add.w	r3, r7, #24
 801b7cc:	6839      	ldr	r1, [r7, #0]
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f000 fa7a 	bl	801bcc8 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801b7d4:	f107 0218 	add.w	r2, r7, #24
 801b7d8:	f107 031c 	add.w	r3, r7, #28
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	4613      	mov	r3, r2
 801b7e0:	4a08      	ldr	r2, [pc, #32]	; (801b804 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0xb4>)
 801b7e2:	6979      	ldr	r1, [r7, #20]
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	f000 fa7e 	bl	801bce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801b7ee:	f107 0308 	add.w	r3, r7, #8
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f000 fa5a 	bl	801bcac <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	3308      	adds	r3, #8
      }
 801b7fc:	4618      	mov	r0, r3
 801b7fe:	3724      	adds	r7, #36	; 0x24
 801b800:	46bd      	mov	sp, r7
 801b802:	bd90      	pop	{r4, r7, pc}
 801b804:	08023b34 	.word	0x08023b34

0801b808 <_ZNSt6vectorImSaImEE9push_backERKm>:
      push_back(const value_type& __x)
 801b808:	b580      	push	{r7, lr}
 801b80a:	b082      	sub	sp, #8
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
 801b810:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	685a      	ldr	r2, [r3, #4]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	689b      	ldr	r3, [r3, #8]
 801b81a:	429a      	cmp	r2, r3
 801b81c:	d00c      	beq.n	801b838 <_ZNSt6vectorImSaImEE9push_backERKm+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801b81e:	6878      	ldr	r0, [r7, #4]
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	685b      	ldr	r3, [r3, #4]
 801b824:	683a      	ldr	r2, [r7, #0]
 801b826:	4619      	mov	r1, r3
 801b828:	f000 fab0 	bl	801bd8c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	685b      	ldr	r3, [r3, #4]
 801b830:	1d1a      	adds	r2, r3, #4
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	605a      	str	r2, [r3, #4]
      }
 801b836:	e008      	b.n	801b84a <_ZNSt6vectorImSaImEE9push_backERKm+0x42>
	  _M_realloc_insert(end(), __x);
 801b838:	6878      	ldr	r0, [r7, #4]
 801b83a:	f7e8 fde7 	bl	800440c <_ZNSt6vectorImSaImEE3endEv>
 801b83e:	4603      	mov	r3, r0
 801b840:	683a      	ldr	r2, [r7, #0]
 801b842:	4619      	mov	r1, r3
 801b844:	6878      	ldr	r0, [r7, #4]
 801b846:	f000 fab3 	bl	801bdb0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 801b84a:	bf00      	nop
 801b84c:	3708      	adds	r7, #8
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}

0801b852 <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
	optional(_Up&& __t)
 801b852:	b5b0      	push	{r4, r5, r7, lr}
 801b854:	b082      	sub	sp, #8
 801b856:	af00      	add	r7, sp, #0
 801b858:	6078      	str	r0, [r7, #4]
 801b85a:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801b85c:	687c      	ldr	r4, [r7, #4]
 801b85e:	6838      	ldr	r0, [r7, #0]
 801b860:	f000 fb22 	bl	801bea8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801b864:	4603      	mov	r3, r0
 801b866:	461a      	mov	r2, r3
 801b868:	4629      	mov	r1, r5
 801b86a:	4620      	mov	r0, r4
 801b86c:	f000 fb38 	bl	801bee0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	4618      	mov	r0, r3
 801b874:	3708      	adds	r7, #8
 801b876:	46bd      	mov	sp, r7
 801b878:	bdb0      	pop	{r4, r5, r7, pc}

0801b87a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 801b87a:	b580      	push	{r7, lr}
 801b87c:	b084      	sub	sp, #16
 801b87e:	af00      	add	r7, sp, #0
 801b880:	6078      	str	r0, [r7, #4]
 801b882:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	6839      	ldr	r1, [r7, #0]
 801b888:	4618      	mov	r0, r3
 801b88a:	f000 fb3e 	bl	801bf0a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 801b88e:	4603      	mov	r3, r0
 801b890:	60bb      	str	r3, [r7, #8]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	4618      	mov	r0, r3
 801b896:	f000 fb74 	bl	801bf82 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 801b89a:	4603      	mov	r3, r0
 801b89c:	60fb      	str	r3, [r7, #12]
 801b89e:	f107 020c 	add.w	r2, r7, #12
 801b8a2:	f107 0308 	add.w	r3, r7, #8
 801b8a6:	4611      	mov	r1, r2
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f000 fb7b 	bl	801bfa4 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	f083 0301 	eor.w	r3, r3, #1
 801b8b4:	b2db      	uxtb	r3, r3
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	3710      	adds	r7, #16
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	bd80      	pop	{r7, pc}

0801b8be <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 801b8be:	b480      	push	{r7}
 801b8c0:	b083      	sub	sp, #12
 801b8c2:	af00      	add	r7, sp, #0
 801b8c4:	6078      	str	r0, [r7, #4]
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	370c      	adds	r7, #12
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d2:	4770      	bx	lr

0801b8d4 <_ZNSt22_Optional_payload_baseIfEC1Ev>:
      _Optional_payload_base() = default;
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b082      	sub	sp, #8
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f7ff ffed 	bl	801b8be <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	2200      	movs	r2, #0
 801b8e8:	711a      	strb	r2, [r3, #4]
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	3708      	adds	r7, #8
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	bd80      	pop	{r7, pc}

0801b8f4 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b082      	sub	sp, #8
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7ff ffe8 	bl	801b8d4 <_ZNSt22_Optional_payload_baseIfEC1Ev>
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	4618      	mov	r0, r3
 801b908:	3708      	adds	r7, #8
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}

0801b90e <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 801b90e:	b580      	push	{r7, lr}
 801b910:	b082      	sub	sp, #8
 801b912:	af00      	add	r7, sp, #0
 801b914:	6078      	str	r0, [r7, #4]
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	4618      	mov	r0, r3
 801b91a:	f7ff ffeb 	bl	801b8f4 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	4618      	mov	r0, r3
 801b922:	3708      	adds	r7, #8
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}

0801b928 <_ZNSt8optionalIfEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 801b928:	b580      	push	{r7, lr}
 801b92a:	b082      	sub	sp, #8
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
 801b930:	7039      	strb	r1, [r7, #0]
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	4618      	mov	r0, r3
 801b936:	f7ff ffea 	bl	801b90e <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	4618      	mov	r0, r3
 801b93e:	3708      	adds	r7, #8
 801b940:	46bd      	mov	sp, r7
 801b942:	bd80      	pop	{r7, pc}

0801b944 <_ZNSt8optionalIfEC1IdLb1EEEOT_>:
	optional(_Up&& __t)
 801b944:	b5b0      	push	{r4, r5, r7, lr}
 801b946:	b082      	sub	sp, #8
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
 801b94c:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801b94e:	687c      	ldr	r4, [r7, #4]
 801b950:	6838      	ldr	r0, [r7, #0]
 801b952:	f000 fb3b 	bl	801bfcc <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 801b956:	4603      	mov	r3, r0
 801b958:	461a      	mov	r2, r3
 801b95a:	4629      	mov	r1, r5
 801b95c:	4620      	mov	r0, r4
 801b95e:	f000 fb51 	bl	801c004 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	4618      	mov	r0, r3
 801b966:	3708      	adds	r7, #8
 801b968:	46bd      	mov	sp, r7
 801b96a:	bdb0      	pop	{r4, r5, r7, pc}

0801b96c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
 801b974:	6878      	ldr	r0, [r7, #4]
 801b976:	f000 fb5a 	bl	801c02e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	4618      	mov	r0, r3
 801b97e:	3708      	adds	r7, #8
 801b980:	46bd      	mov	sp, r7
 801b982:	bd80      	pop	{r7, pc}

0801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 801b984:	b480      	push	{r7}
 801b986:	b083      	sub	sp, #12
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
      { }
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	4618      	mov	r0, r3
 801b990:	370c      	adds	r7, #12
 801b992:	46bd      	mov	sp, r7
 801b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b998:	4770      	bx	lr

0801b99a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801b99a:	b580      	push	{r7, lr}
 801b99c:	b084      	sub	sp, #16
 801b99e:	af00      	add	r7, sp, #0
 801b9a0:	6078      	str	r0, [r7, #4]
 801b9a2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801b9a4:	683b      	ldr	r3, [r7, #0]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d012      	beq.n	801b9d0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 801b9aa:	6838      	ldr	r0, [r7, #0]
 801b9ac:	f000 fb4a 	bl	801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	4619      	mov	r1, r3
 801b9b4:	6878      	ldr	r0, [r7, #4]
 801b9b6:	f7ff fff0 	bl	801b99a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 801b9ba:	6838      	ldr	r0, [r7, #0]
 801b9bc:	f000 fb4e 	bl	801c05c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801b9c0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801b9c2:	6839      	ldr	r1, [r7, #0]
 801b9c4:	6878      	ldr	r0, [r7, #4]
 801b9c6:	f000 fb55 	bl	801c074 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801b9ce:	e7e9      	b.n	801b9a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801b9d0:	bf00      	nop
 801b9d2:	3710      	adds	r7, #16
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	bd80      	pop	{r7, pc}

0801b9d8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801b9d8:	b480      	push	{r7}
 801b9da:	b083      	sub	sp, #12
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	689b      	ldr	r3, [r3, #8]
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	370c      	adds	r7, #12
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ee:	4770      	bx	lr

0801b9f0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b082      	sub	sp, #8
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	f000 fb4c 	bl	801c096 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	4618      	mov	r0, r3
 801ba02:	3708      	adds	r7, #8
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}

0801ba08 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 801ba08:	b480      	push	{r7}
 801ba0a:	b083      	sub	sp, #12
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
      { }
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	4618      	mov	r0, r3
 801ba14:	370c      	adds	r7, #12
 801ba16:	46bd      	mov	sp, r7
 801ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba1c:	4770      	bx	lr

0801ba1e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ba1e:	b590      	push	{r4, r7, lr}
 801ba20:	b085      	sub	sp, #20
 801ba22:	af00      	add	r7, sp, #0
 801ba24:	6078      	str	r0, [r7, #4]
 801ba26:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801ba28:	6878      	ldr	r0, [r7, #4]
 801ba2a:	f000 fb3f 	bl	801c0ac <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 801ba2e:	4604      	mov	r4, r0
 801ba30:	6878      	ldr	r0, [r7, #4]
 801ba32:	f000 fb47 	bl	801c0c4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801ba36:	4602      	mov	r2, r0
 801ba38:	683b      	ldr	r3, [r7, #0]
 801ba3a:	4621      	mov	r1, r4
 801ba3c:	6878      	ldr	r0, [r7, #4]
 801ba3e:	f000 fb4d 	bl	801c0dc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>
 801ba42:	4603      	mov	r3, r0
 801ba44:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801ba46:	6878      	ldr	r0, [r7, #4]
 801ba48:	f000 f825 	bl	801ba96 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	60fb      	str	r3, [r7, #12]
 801ba50:	f107 020c 	add.w	r2, r7, #12
 801ba54:	f107 0308 	add.w	r3, r7, #8
 801ba58:	4611      	mov	r1, r2
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f000 f82c 	bl	801bab8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 801ba60:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d10d      	bne.n	801ba82 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x64>
	      || _M_impl._M_key_compare(__k,
 801ba66:	687c      	ldr	r4, [r7, #4]
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7eb fd0f 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801ba70:	4603      	mov	r3, r0
 801ba72:	461a      	mov	r2, r3
 801ba74:	6839      	ldr	r1, [r7, #0]
 801ba76:	4620      	mov	r0, r4
 801ba78:	f7eb fd15 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d004      	beq.n	801ba8c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801ba82:	6878      	ldr	r0, [r7, #4]
 801ba84:	f000 f807 	bl	801ba96 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801ba88:	4603      	mov	r3, r0
 801ba8a:	e000      	b.n	801ba8e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x70>
 801ba8c:	68bb      	ldr	r3, [r7, #8]
    }
 801ba8e:	4618      	mov	r0, r3
 801ba90:	3714      	adds	r7, #20
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd90      	pop	{r4, r7, pc}

0801ba96 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 801ba96:	b580      	push	{r7, lr}
 801ba98:	b084      	sub	sp, #16
 801ba9a:	af00      	add	r7, sp, #0
 801ba9c:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	1d1a      	adds	r2, r3, #4
 801baa2:	f107 030c 	add.w	r3, r7, #12
 801baa6:	4611      	mov	r1, r2
 801baa8:	4618      	mov	r0, r3
 801baaa:	f000 fb48 	bl	801c13e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	4618      	mov	r0, r3
 801bab2:	3710      	adds	r7, #16
 801bab4:	46bd      	mov	sp, r7
 801bab6:	bd80      	pop	{r7, pc}

0801bab8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801bab8:	b480      	push	{r7}
 801baba:	b083      	sub	sp, #12
 801babc:	af00      	add	r7, sp, #0
 801babe:	6078      	str	r0, [r7, #4]
 801bac0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	681a      	ldr	r2, [r3, #0]
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	429a      	cmp	r2, r3
 801bacc:	bf0c      	ite	eq
 801bace:	2301      	moveq	r3, #1
 801bad0:	2300      	movne	r3, #0
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	4618      	mov	r0, r3
 801bad6:	370c      	adds	r7, #12
 801bad8:	46bd      	mov	sp, r7
 801bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bade:	4770      	bx	lr

0801bae0 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b082      	sub	sp, #8
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	6839      	ldr	r1, [r7, #0]
 801baee:	4618      	mov	r0, r3
 801baf0:	f000 fb34 	bl	801c15c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 801baf4:	4603      	mov	r3, r0
 801baf6:	4618      	mov	r0, r3
 801baf8:	3708      	adds	r7, #8
 801bafa:	46bd      	mov	sp, r7
 801bafc:	bd80      	pop	{r7, pc}

0801bafe <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801bafe:	b580      	push	{r7, lr}
 801bb00:	b082      	sub	sp, #8
 801bb02:	af00      	add	r7, sp, #0
 801bb04:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f000 fb3e 	bl	801c18a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 801bb0e:	4603      	mov	r3, r0
 801bb10:	4618      	mov	r0, r3
 801bb12:	3708      	adds	r7, #8
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}

0801bb18 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801bb18:	b480      	push	{r7}
 801bb1a:	b083      	sub	sp, #12
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
 801bb20:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681a      	ldr	r2, [r3, #0]
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	bf0c      	ite	eq
 801bb2e:	2301      	moveq	r3, #1
 801bb30:	2300      	movne	r3, #0
 801bb32:	b2db      	uxtb	r3, r3
 801bb34:	4618      	mov	r0, r3
 801bb36:	370c      	adds	r7, #12
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3e:	4770      	bx	lr

0801bb40 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 801bb40:	b590      	push	{r4, r7, lr}
 801bb42:	b083      	sub	sp, #12
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	f000 fb2e 	bl	801c1ac <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 801bb50:	bf00      	nop
 801bb52:	4620      	mov	r0, r4
 801bb54:	370c      	adds	r7, #12
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd90      	pop	{r4, r7, pc}

0801bb5a <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801bb5a:	b580      	push	{r7, lr}
 801bb5c:	b082      	sub	sp, #8
 801bb5e:	af00      	add	r7, sp, #0
 801bb60:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	4618      	mov	r0, r3
 801bb68:	f000 fb2b 	bl	801c1c2 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 801bb6c:	4603      	mov	r3, r0
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3708      	adds	r7, #8
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <_ZNKSt4lessIhEclERKhS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 801bb76:	b480      	push	{r7}
 801bb78:	b085      	sub	sp, #20
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	60f8      	str	r0, [r7, #12]
 801bb7e:	60b9      	str	r1, [r7, #8]
 801bb80:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	781a      	ldrb	r2, [r3, #0]
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	781b      	ldrb	r3, [r3, #0]
 801bb8a:	429a      	cmp	r2, r3
 801bb8c:	bf34      	ite	cc
 801bb8e:	2301      	movcc	r3, #1
 801bb90:	2300      	movcs	r3, #0
 801bb92:	b2db      	uxtb	r3, r3
 801bb94:	4618      	mov	r0, r3
 801bb96:	3714      	adds	r7, #20
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9e:	4770      	bx	lr

0801bba0 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6839      	ldr	r1, [r7, #0]
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f000 fb15 	bl	801c1de <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3708      	adds	r7, #8
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}

0801bbbe <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801bbbe:	b480      	push	{r7}
 801bbc0:	b083      	sub	sp, #12
 801bbc2:	af00      	add	r7, sp, #0
 801bbc4:	6078      	str	r0, [r7, #4]
 801bbc6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801bbc8:	683b      	ldr	r3, [r7, #0]
 801bbca:	681a      	ldr	r2, [r3, #0]
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	601a      	str	r2, [r3, #0]
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	370c      	adds	r7, #12
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbdc:	4770      	bx	lr

0801bbde <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801bbde:	b5b0      	push	{r4, r5, r7, lr}
 801bbe0:	b088      	sub	sp, #32
 801bbe2:	af00      	add	r7, sp, #0
 801bbe4:	60f8      	str	r0, [r7, #12]
 801bbe6:	60b9      	str	r1, [r7, #8]
 801bbe8:	607a      	str	r2, [r7, #4]
 801bbea:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801bbec:	6878      	ldr	r0, [r7, #4]
 801bbee:	f000 fb05 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801bbf2:	4604      	mov	r4, r0
 801bbf4:	6838      	ldr	r0, [r7, #0]
 801bbf6:	f000 fb0c 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801bbfa:	4605      	mov	r5, r0
 801bbfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bbfe:	f000 fb13 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801bc02:	4603      	mov	r3, r0
 801bc04:	462a      	mov	r2, r5
 801bc06:	4621      	mov	r1, r4
 801bc08:	68f8      	ldr	r0, [r7, #12]
 801bc0a:	f000 fb18 	bl	801c23e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 801bc0e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801bc10:	69f8      	ldr	r0, [r7, #28]
 801bc12:	f000 fc5a 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801bc16:	4603      	mov	r3, r0
 801bc18:	f107 0010 	add.w	r0, r7, #16
 801bc1c:	68ba      	ldr	r2, [r7, #8]
 801bc1e:	68f9      	ldr	r1, [r7, #12]
 801bc20:	f000 fb30 	bl	801c284 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d007      	beq.n	801bc3a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801bc2a:	6939      	ldr	r1, [r7, #16]
 801bc2c:	697a      	ldr	r2, [r7, #20]
 801bc2e:	69fb      	ldr	r3, [r7, #28]
 801bc30:	68f8      	ldr	r0, [r7, #12]
 801bc32:	f000 fc5d 	bl	801c4f0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 801bc36:	4603      	mov	r3, r0
 801bc38:	e00b      	b.n	801bc52 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 801bc3a:	69f9      	ldr	r1, [r7, #28]
 801bc3c:	68f8      	ldr	r0, [r7, #12]
 801bc3e:	f000 fa19 	bl	801c074 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 801bc42:	693a      	ldr	r2, [r7, #16]
 801bc44:	f107 0318 	add.w	r3, r7, #24
 801bc48:	4611      	mov	r1, r2
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f000 fc8d 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801bc50:	69bb      	ldr	r3, [r7, #24]
      }
 801bc52:	4618      	mov	r0, r3
 801bc54:	3720      	adds	r7, #32
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bdb0      	pop	{r4, r5, r7, pc}

0801bc5a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b082      	sub	sp, #8
 801bc5e:	af00      	add	r7, sp, #0
 801bc60:	6078      	str	r0, [r7, #4]
 801bc62:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	6839      	ldr	r1, [r7, #0]
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f000 fc8d 	bl	801c588 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	4618      	mov	r0, r3
 801bc72:	3708      	adds	r7, #8
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b082      	sub	sp, #8
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7e8 fc6e 	bl	8004564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	3708      	adds	r7, #8
 801bc8e:	46bd      	mov	sp, r7
 801bc90:	bd80      	pop	{r7, pc}

0801bc92 <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>:
      key_comp() const
 801bc92:	b590      	push	{r4, r7, lr}
 801bc94:	b083      	sub	sp, #12
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f000 fc8a 	bl	801c5b6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 801bca2:	bf00      	nop
 801bca4:	4620      	mov	r0, r4
 801bca6:	370c      	adds	r7, #12
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd90      	pop	{r4, r7, pc}

0801bcac <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b082      	sub	sp, #8
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	4618      	mov	r0, r3
 801bcba:	f7ee fc24 	bl	800a506 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	3708      	adds	r7, #8
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}

0801bcc8 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>:
	tuple(const _Elements&... __elements)
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	6839      	ldr	r1, [r7, #0]
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	f000 fc78 	bl	801c5cc <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	4618      	mov	r0, r3
 801bce0:	3708      	adds	r7, #8
 801bce2:	46bd      	mov	sp, r7
 801bce4:	bd80      	pop	{r7, pc}

0801bce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801bce6:	b5b0      	push	{r4, r5, r7, lr}
 801bce8:	b088      	sub	sp, #32
 801bcea:	af00      	add	r7, sp, #0
 801bcec:	60f8      	str	r0, [r7, #12]
 801bcee:	60b9      	str	r1, [r7, #8]
 801bcf0:	607a      	str	r2, [r7, #4]
 801bcf2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	f000 fa81 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801bcfa:	4604      	mov	r4, r0
 801bcfc:	6838      	ldr	r0, [r7, #0]
 801bcfe:	f000 fc74 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801bd02:	4605      	mov	r5, r0
 801bd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bd06:	f000 fa8f 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	462a      	mov	r2, r5
 801bd0e:	4621      	mov	r1, r4
 801bd10:	68f8      	ldr	r0, [r7, #12]
 801bd12:	f000 fc75 	bl	801c600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801bd16:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801bd18:	69f8      	ldr	r0, [r7, #28]
 801bd1a:	f7ed f8cc 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	f107 0010 	add.w	r0, r7, #16
 801bd24:	68ba      	ldr	r2, [r7, #8]
 801bd26:	68f9      	ldr	r1, [r7, #12]
 801bd28:	f7e9 fc5a 	bl	80055e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
	    if (__res.second)
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d007      	beq.n	801bd42 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801bd32:	6939      	ldr	r1, [r7, #16]
 801bd34:	697a      	ldr	r2, [r7, #20]
 801bd36:	69fb      	ldr	r3, [r7, #28]
 801bd38:	68f8      	ldr	r0, [r7, #12]
 801bd3a:	f000 fc84 	bl	801c646 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	e00b      	b.n	801bd5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 801bd42:	69f9      	ldr	r1, [r7, #28]
 801bd44:	68f8      	ldr	r0, [r7, #12]
 801bd46:	f7eb fb68 	bl	800741a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 801bd4a:	693a      	ldr	r2, [r7, #16]
 801bd4c:	f107 0318 	add.w	r3, r7, #24
 801bd50:	4611      	mov	r1, r2
 801bd52:	4618      	mov	r0, r3
 801bd54:	f7e9 fc35 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801bd58:	69bb      	ldr	r3, [r7, #24]
      }
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3720      	adds	r7, #32
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bdb0      	pop	{r4, r5, r7, pc}

0801bd62 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801bd62:	b590      	push	{r4, r7, lr}
 801bd64:	b083      	sub	sp, #12
 801bd66:	af00      	add	r7, sp, #0
 801bd68:	6078      	str	r0, [r7, #4]
 801bd6a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801bd6c:	6838      	ldr	r0, [r7, #0]
 801bd6e:	f000 fca7 	bl	801c6c0 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801bd72:	4603      	mov	r3, r0
 801bd74:	681c      	ldr	r4, [r3, #0]
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	4619      	mov	r1, r3
 801bd7a:	2004      	movs	r0, #4
 801bd7c:	f7e4 fafe 	bl	800037c <_ZnwjPv>
 801bd80:	4603      	mov	r3, r0
 801bd82:	601c      	str	r4, [r3, #0]
 801bd84:	4618      	mov	r0, r3
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd90      	pop	{r4, r7, pc}

0801bd8c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b084      	sub	sp, #16
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f000 fc91 	bl	801c6c0 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	4619      	mov	r1, r3
 801bda2:	68b8      	ldr	r0, [r7, #8]
 801bda4:	f7ff ffdd 	bl	801bd62 <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801bda8:	bf00      	nop
 801bdaa:	3710      	adds	r7, #16
 801bdac:	46bd      	mov	sp, r7
 801bdae:	bd80      	pop	{r7, pc}

0801bdb0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 801bdb0:	b5b0      	push	{r4, r5, r7, lr}
 801bdb2:	b08c      	sub	sp, #48	; 0x30
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	60f8      	str	r0, [r7, #12]
 801bdb8:	60b9      	str	r1, [r7, #8]
 801bdba:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801bdbc:	4a39      	ldr	r2, [pc, #228]	; (801bea4 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xf4>)
 801bdbe:	2101      	movs	r1, #1
 801bdc0:	68f8      	ldr	r0, [r7, #12]
 801bdc2:	f000 fc88 	bl	801c6d6 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 801bdc6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	685b      	ldr	r3, [r3, #4]
 801bdd2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 801bdd4:	68f8      	ldr	r0, [r7, #12]
 801bdd6:	f7e8 faf1 	bl	80043bc <_ZNSt6vectorImSaImEE5beginEv>
 801bdda:	4603      	mov	r3, r0
 801bddc:	617b      	str	r3, [r7, #20]
 801bdde:	f107 0214 	add.w	r2, r7, #20
 801bde2:	f107 0308 	add.w	r3, r7, #8
 801bde6:	4611      	mov	r1, r2
 801bde8:	4618      	mov	r0, r3
 801bdea:	f000 fcbb 	bl	801c764 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f7e9 fb0d 	bl	8005416 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 801bdfc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801bdfe:	69fb      	ldr	r3, [r7, #28]
 801be00:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 801be02:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801be04:	6a3b      	ldr	r3, [r7, #32]
 801be06:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801be08:	69fa      	ldr	r2, [r7, #28]
 801be0a:	18d5      	adds	r5, r2, r3
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	f000 fc57 	bl	801c6c0 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801be12:	4603      	mov	r3, r0
 801be14:	461a      	mov	r2, r3
 801be16:	4629      	mov	r1, r5
 801be18:	4620      	mov	r0, r4
 801be1a:	f7ff ffb7 	bl	801bd8c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 801be1e:	2300      	movs	r3, #0
 801be20:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801be22:	f107 0308 	add.w	r3, r7, #8
 801be26:	4618      	mov	r0, r3
 801be28:	f7eb fa4e 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 801be2c:	4603      	mov	r3, r0
 801be2e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	4618      	mov	r0, r3
 801be34:	f7e7 fb99 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801be38:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801be3a:	69fa      	ldr	r2, [r7, #28]
 801be3c:	4621      	mov	r1, r4
 801be3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be40:	f000 fca5 	bl	801c78e <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 801be44:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 801be46:	69bb      	ldr	r3, [r7, #24]
 801be48:	3304      	adds	r3, #4
 801be4a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801be4c:	f107 0308 	add.w	r3, r7, #8
 801be50:	4618      	mov	r0, r3
 801be52:	f7eb fa39 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 801be56:	4603      	mov	r3, r0
 801be58:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	4618      	mov	r0, r3
 801be5e:	f7e7 fb84 	bl	800356a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801be62:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801be64:	69ba      	ldr	r2, [r7, #24]
 801be66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801be68:	4620      	mov	r0, r4
 801be6a:	f000 fc90 	bl	801c78e <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 801be6e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 801be70:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	689a      	ldr	r2, [r3, #8]
 801be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be78:	1ad3      	subs	r3, r2, r3
 801be7a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801be7c:	461a      	mov	r2, r3
 801be7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801be80:	f7e7 fb60 	bl	8003544 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	69fa      	ldr	r2, [r7, #28]
 801be88:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	69ba      	ldr	r2, [r7, #24]
 801be8e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be92:	009b      	lsls	r3, r3, #2
 801be94:	69fa      	ldr	r2, [r7, #28]
 801be96:	441a      	add	r2, r3
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	609a      	str	r2, [r3, #8]
    }
 801be9c:	bf00      	nop
 801be9e:	3730      	adds	r7, #48	; 0x30
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bdb0      	pop	{r4, r5, r7, pc}
 801bea4:	08023aec 	.word	0x08023aec

0801bea8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801bea8:	b480      	push	{r7}
 801beaa:	b083      	sub	sp, #12
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	4618      	mov	r0, r3
 801beb4:	370c      	adds	r7, #12
 801beb6:	46bd      	mov	sp, r7
 801beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bebc:	4770      	bx	lr

0801bebe <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 801bebe:	b590      	push	{r4, r7, lr}
 801bec0:	b085      	sub	sp, #20
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	60f8      	str	r0, [r7, #12]
 801bec6:	7239      	strb	r1, [r7, #8]
 801bec8:	607a      	str	r2, [r7, #4]
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	687a      	ldr	r2, [r7, #4]
 801bece:	4621      	mov	r1, r4
 801bed0:	4618      	mov	r0, r3
 801bed2:	f000 fc82 	bl	801c7da <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	4618      	mov	r0, r3
 801beda:	3714      	adds	r7, #20
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd90      	pop	{r4, r7, pc}

0801bee0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801bee0:	b5b0      	push	{r4, r5, r7, lr}
 801bee2:	b084      	sub	sp, #16
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	60f8      	str	r0, [r7, #12]
 801bee8:	7239      	strb	r1, [r7, #8]
 801beea:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801beec:	68fc      	ldr	r4, [r7, #12]
 801beee:	6878      	ldr	r0, [r7, #4]
 801bef0:	f7ff ffda 	bl	801bea8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801bef4:	4603      	mov	r3, r0
 801bef6:	461a      	mov	r2, r3
 801bef8:	4629      	mov	r1, r5
 801befa:	4620      	mov	r0, r4
 801befc:	f7ff ffdf 	bl	801bebe <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	4618      	mov	r0, r3
 801bf04:	3710      	adds	r7, #16
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bdb0      	pop	{r4, r5, r7, pc}

0801bf0a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801bf0a:	b590      	push	{r4, r7, lr}
 801bf0c:	b085      	sub	sp, #20
 801bf0e:	af00      	add	r7, sp, #0
 801bf10:	6078      	str	r0, [r7, #4]
 801bf12:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801bf14:	6878      	ldr	r0, [r7, #4]
 801bf16:	f000 fc78 	bl	801c80a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801bf1a:	4604      	mov	r4, r0
 801bf1c:	6878      	ldr	r0, [r7, #4]
 801bf1e:	f000 fc80 	bl	801c822 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801bf22:	4602      	mov	r2, r0
 801bf24:	683b      	ldr	r3, [r7, #0]
 801bf26:	4621      	mov	r1, r4
 801bf28:	6878      	ldr	r0, [r7, #4]
 801bf2a:	f000 fc86 	bl	801c83a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801bf32:	6878      	ldr	r0, [r7, #4]
 801bf34:	f000 f825 	bl	801bf82 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	60fb      	str	r3, [r7, #12]
 801bf3c:	f107 020c 	add.w	r2, r7, #12
 801bf40:	f107 0308 	add.w	r3, r7, #8
 801bf44:	4611      	mov	r1, r2
 801bf46:	4618      	mov	r0, r3
 801bf48:	f000 f82c 	bl	801bfa4 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 801bf4c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d10d      	bne.n	801bf6e <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801bf52:	687c      	ldr	r4, [r7, #4]
 801bf54:	68bb      	ldr	r3, [r7, #8]
 801bf56:	4618      	mov	r0, r3
 801bf58:	f000 fca0 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	461a      	mov	r2, r3
 801bf60:	6839      	ldr	r1, [r7, #0]
 801bf62:	4620      	mov	r0, r4
 801bf64:	f7ff fe07 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d004      	beq.n	801bf78 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801bf6e:	6878      	ldr	r0, [r7, #4]
 801bf70:	f000 f807 	bl	801bf82 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 801bf74:	4603      	mov	r3, r0
 801bf76:	e000      	b.n	801bf7a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 801bf78:	68bb      	ldr	r3, [r7, #8]
    }
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	3714      	adds	r7, #20
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	bd90      	pop	{r4, r7, pc}

0801bf82 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 801bf82:	b580      	push	{r7, lr}
 801bf84:	b084      	sub	sp, #16
 801bf86:	af00      	add	r7, sp, #0
 801bf88:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	1d1a      	adds	r2, r3, #4
 801bf8e:	f107 030c 	add.w	r3, r7, #12
 801bf92:	4611      	mov	r1, r2
 801bf94:	4618      	mov	r0, r3
 801bf96:	f000 fc8d 	bl	801c8b4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3710      	adds	r7, #16
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}

0801bfa4 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801bfa4:	b480      	push	{r7}
 801bfa6:	b083      	sub	sp, #12
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
 801bfac:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681a      	ldr	r2, [r3, #0]
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	429a      	cmp	r2, r3
 801bfb8:	bf0c      	ite	eq
 801bfba:	2301      	moveq	r3, #1
 801bfbc:	2300      	movne	r3, #0
 801bfbe:	b2db      	uxtb	r3, r3
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	370c      	adds	r7, #12
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfca:	4770      	bx	lr

0801bfcc <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801bfcc:	b480      	push	{r7}
 801bfce:	b083      	sub	sp, #12
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	370c      	adds	r7, #12
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe0:	4770      	bx	lr

0801bfe2 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 801bfe2:	b590      	push	{r4, r7, lr}
 801bfe4:	b085      	sub	sp, #20
 801bfe6:	af00      	add	r7, sp, #0
 801bfe8:	60f8      	str	r0, [r7, #12]
 801bfea:	7239      	strb	r1, [r7, #8]
 801bfec:	607a      	str	r2, [r7, #4]
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	687a      	ldr	r2, [r7, #4]
 801bff2:	4621      	mov	r1, r4
 801bff4:	4618      	mov	r0, r3
 801bff6:	f000 fc82 	bl	801c8fe <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	4618      	mov	r0, r3
 801bffe:	3714      	adds	r7, #20
 801c000:	46bd      	mov	sp, r7
 801c002:	bd90      	pop	{r4, r7, pc}

0801c004 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801c004:	b5b0      	push	{r4, r5, r7, lr}
 801c006:	b084      	sub	sp, #16
 801c008:	af00      	add	r7, sp, #0
 801c00a:	60f8      	str	r0, [r7, #12]
 801c00c:	7239      	strb	r1, [r7, #8]
 801c00e:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801c010:	68fc      	ldr	r4, [r7, #12]
 801c012:	6878      	ldr	r0, [r7, #4]
 801c014:	f7ff ffda 	bl	801bfcc <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 801c018:	4603      	mov	r3, r0
 801c01a:	461a      	mov	r2, r3
 801c01c:	4629      	mov	r1, r5
 801c01e:	4620      	mov	r0, r4
 801c020:	f7ff ffdf 	bl	801bfe2 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	4618      	mov	r0, r3
 801c028:	3710      	adds	r7, #16
 801c02a:	46bd      	mov	sp, r7
 801c02c:	bdb0      	pop	{r4, r5, r7, pc}

0801c02e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
 801c02e:	b480      	push	{r7}
 801c030:	b083      	sub	sp, #12
 801c032:	af00      	add	r7, sp, #0
 801c034:	6078      	str	r0, [r7, #4]
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	4618      	mov	r0, r3
 801c03a:	370c      	adds	r7, #12
 801c03c:	46bd      	mov	sp, r7
 801c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c042:	4770      	bx	lr

0801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c044:	b480      	push	{r7}
 801c046:	b083      	sub	sp, #12
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	68db      	ldr	r3, [r3, #12]
 801c050:	4618      	mov	r0, r3
 801c052:	370c      	adds	r7, #12
 801c054:	46bd      	mov	sp, r7
 801c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c05a:	4770      	bx	lr

0801c05c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c05c:	b480      	push	{r7}
 801c05e:	b083      	sub	sp, #12
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	689b      	ldr	r3, [r3, #8]
 801c068:	4618      	mov	r0, r3
 801c06a:	370c      	adds	r7, #12
 801c06c:	46bd      	mov	sp, r7
 801c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c072:	4770      	bx	lr

0801c074 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801c074:	b580      	push	{r7, lr}
 801c076:	b082      	sub	sp, #8
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
 801c07c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801c07e:	6839      	ldr	r1, [r7, #0]
 801c080:	6878      	ldr	r0, [r7, #4]
 801c082:	f000 fc54 	bl	801c92e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801c086:	6839      	ldr	r1, [r7, #0]
 801c088:	6878      	ldr	r0, [r7, #4]
 801c08a:	f000 fc65 	bl	801c958 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 801c08e:	bf00      	nop
 801c090:	3708      	adds	r7, #8
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}

0801c096 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 801c096:	b480      	push	{r7}
 801c098:	b083      	sub	sp, #12
 801c09a:	af00      	add	r7, sp, #0
 801c09c:	6078      	str	r0, [r7, #4]
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	370c      	adds	r7, #12
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0aa:	4770      	bx	lr

0801c0ac <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801c0ac:	b480      	push	{r7}
 801c0ae:	b083      	sub	sp, #12
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	689b      	ldr	r3, [r3, #8]
      }
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c2:	4770      	bx	lr

0801c0c4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801c0c4:	b480      	push	{r7}
 801c0c6:	b083      	sub	sp, #12
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	3304      	adds	r3, #4
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	370c      	adds	r7, #12
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0da:	4770      	bx	lr

0801c0dc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c0dc:	b590      	push	{r4, r7, lr}
 801c0de:	b087      	sub	sp, #28
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	60b9      	str	r1, [r7, #8]
 801c0e6:	607a      	str	r2, [r7, #4]
 801c0e8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801c0ea:	68bb      	ldr	r3, [r7, #8]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d01b      	beq.n	801c128 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801c0f0:	68fc      	ldr	r4, [r7, #12]
 801c0f2:	68b8      	ldr	r0, [r7, #8]
 801c0f4:	f7ec fedf 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	683a      	ldr	r2, [r7, #0]
 801c0fc:	4619      	mov	r1, r3
 801c0fe:	4620      	mov	r0, r4
 801c100:	f7eb f9d1 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801c104:	4603      	mov	r3, r0
 801c106:	f083 0301 	eor.w	r3, r3, #1
 801c10a:	b2db      	uxtb	r3, r3
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d006      	beq.n	801c11e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	607b      	str	r3, [r7, #4]
 801c114:	68b8      	ldr	r0, [r7, #8]
 801c116:	f000 fc31 	bl	801c97c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801c11a:	60b8      	str	r0, [r7, #8]
 801c11c:	e7e5      	b.n	801c0ea <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 801c11e:	68b8      	ldr	r0, [r7, #8]
 801c120:	f000 fc38 	bl	801c994 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801c124:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801c126:	e7e0      	b.n	801c0ea <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
      return const_iterator(__y);
 801c128:	f107 0314 	add.w	r3, r7, #20
 801c12c:	6879      	ldr	r1, [r7, #4]
 801c12e:	4618      	mov	r0, r3
 801c130:	f000 f805 	bl	801c13e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 801c134:	697b      	ldr	r3, [r7, #20]
    }
 801c136:	4618      	mov	r0, r3
 801c138:	371c      	adds	r7, #28
 801c13a:	46bd      	mov	sp, r7
 801c13c:	bd90      	pop	{r4, r7, pc}

0801c13e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c13e:	b480      	push	{r7}
 801c140:	b083      	sub	sp, #12
 801c142:	af00      	add	r7, sp, #0
 801c144:	6078      	str	r0, [r7, #4]
 801c146:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	683a      	ldr	r2, [r7, #0]
 801c14c:	601a      	str	r2, [r3, #0]
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	4618      	mov	r0, r3
 801c152:	370c      	adds	r7, #12
 801c154:	46bd      	mov	sp, r7
 801c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15a:	4770      	bx	lr

0801c15c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801c15c:	b590      	push	{r4, r7, lr}
 801c15e:	b083      	sub	sp, #12
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
 801c164:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f7ff fc36 	bl	801b9d8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801c16c:	4604      	mov	r4, r0
 801c16e:	6878      	ldr	r0, [r7, #4]
 801c170:	f000 fc1c 	bl	801c9ac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801c174:	4602      	mov	r2, r0
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	4621      	mov	r1, r4
 801c17a:	6878      	ldr	r0, [r7, #4]
 801c17c:	f000 fc22 	bl	801c9c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 801c180:	4603      	mov	r3, r0
 801c182:	4618      	mov	r0, r3
 801c184:	370c      	adds	r7, #12
 801c186:	46bd      	mov	sp, r7
 801c188:	bd90      	pop	{r4, r7, pc}

0801c18a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801c18a:	b580      	push	{r7, lr}
 801c18c:	b084      	sub	sp, #16
 801c18e:	af00      	add	r7, sp, #0
 801c190:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	1d1a      	adds	r2, r3, #4
 801c196:	f107 030c 	add.w	r3, r7, #12
 801c19a:	4611      	mov	r1, r2
 801c19c:	4618      	mov	r0, r3
 801c19e:	f000 f9e4 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	3710      	adds	r7, #16
 801c1a8:	46bd      	mov	sp, r7
 801c1aa:	bd80      	pop	{r7, pc}

0801c1ac <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 801c1ac:	b480      	push	{r7}
 801c1ae:	b083      	sub	sp, #12
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801c1b4:	bf00      	nop
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	370c      	adds	r7, #12
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c0:	4770      	bx	lr

0801c1c2 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801c1c2:	b580      	push	{r7, lr}
 801c1c4:	b082      	sub	sp, #8
 801c1c6:	af00      	add	r7, sp, #0
 801c1c8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	3310      	adds	r3, #16
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	f000 fc29 	bl	801ca26 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 801c1d4:	4603      	mov	r3, r0
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3708      	adds	r7, #8
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}

0801c1de <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801c1de:	b580      	push	{r7, lr}
 801c1e0:	b082      	sub	sp, #8
 801c1e2:	af00      	add	r7, sp, #0
 801c1e4:	6078      	str	r0, [r7, #4]
 801c1e6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	6839      	ldr	r1, [r7, #0]
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f000 fc26 	bl	801ca3e <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3708      	adds	r7, #8
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bd80      	pop	{r7, pc}

0801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c1fc:	b480      	push	{r7}
 801c1fe:	b083      	sub	sp, #12
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	4618      	mov	r0, r3
 801c208:	370c      	adds	r7, #12
 801c20a:	46bd      	mov	sp, r7
 801c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c210:	4770      	bx	lr

0801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c212:	b480      	push	{r7}
 801c214:	b083      	sub	sp, #12
 801c216:	af00      	add	r7, sp, #0
 801c218:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	4618      	mov	r0, r3
 801c21e:	370c      	adds	r7, #12
 801c220:	46bd      	mov	sp, r7
 801c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c226:	4770      	bx	lr

0801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c228:	b480      	push	{r7}
 801c22a:	b083      	sub	sp, #12
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	4618      	mov	r0, r3
 801c234:	370c      	adds	r7, #12
 801c236:	46bd      	mov	sp, r7
 801c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23c:	4770      	bx	lr

0801c23e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801c23e:	b5b0      	push	{r4, r5, r7, lr}
 801c240:	b088      	sub	sp, #32
 801c242:	af02      	add	r7, sp, #8
 801c244:	60f8      	str	r0, [r7, #12]
 801c246:	60b9      	str	r1, [r7, #8]
 801c248:	607a      	str	r2, [r7, #4]
 801c24a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801c24c:	68f8      	ldr	r0, [r7, #12]
 801c24e:	f000 fc05 	bl	801ca5c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 801c252:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801c254:	68b8      	ldr	r0, [r7, #8]
 801c256:	f7ff ffd1 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801c25a:	4604      	mov	r4, r0
 801c25c:	6878      	ldr	r0, [r7, #4]
 801c25e:	f7ff ffd8 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801c262:	4605      	mov	r5, r0
 801c264:	6838      	ldr	r0, [r7, #0]
 801c266:	f7ff ffdf 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801c26a:	4603      	mov	r3, r0
 801c26c:	9300      	str	r3, [sp, #0]
 801c26e:	462b      	mov	r3, r5
 801c270:	4622      	mov	r2, r4
 801c272:	6979      	ldr	r1, [r7, #20]
 801c274:	68f8      	ldr	r0, [r7, #12]
 801c276:	f000 fc02 	bl	801ca7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 801c27a:	697b      	ldr	r3, [r7, #20]
	}
 801c27c:	4618      	mov	r0, r3
 801c27e:	3718      	adds	r7, #24
 801c280:	46bd      	mov	sp, r7
 801c282:	bdb0      	pop	{r4, r5, r7, pc}

0801c284 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c284:	b590      	push	{r4, r7, lr}
 801c286:	b08d      	sub	sp, #52	; 0x34
 801c288:	af00      	add	r7, sp, #0
 801c28a:	60f8      	str	r0, [r7, #12]
 801c28c:	60b9      	str	r1, [r7, #8]
 801c28e:	607a      	str	r2, [r7, #4]
 801c290:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801c292:	1d3b      	adds	r3, r7, #4
 801c294:	4618      	mov	r0, r3
 801c296:	f000 fc1f 	bl	801cad8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>
 801c29a:	4603      	mov	r3, r0
 801c29c:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801c29e:	69bc      	ldr	r4, [r7, #24]
 801c2a0:	68b8      	ldr	r0, [r7, #8]
 801c2a2:	f000 fb83 	bl	801c9ac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801c2a6:	4603      	mov	r3, r0
 801c2a8:	429c      	cmp	r4, r3
 801c2aa:	bf0c      	ite	eq
 801c2ac:	2301      	moveq	r3, #1
 801c2ae:	2300      	movne	r3, #0
 801c2b0:	b2db      	uxtb	r3, r3
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d030      	beq.n	801c318 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 801c2b6:	68b8      	ldr	r0, [r7, #8]
 801c2b8:	f000 fc1f 	bl	801cafa <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 801c2bc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d013      	beq.n	801c2ea <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801c2c2:	68bc      	ldr	r4, [r7, #8]
 801c2c4:	68b8      	ldr	r0, [r7, #8]
 801c2c6:	f000 fc24 	bl	801cb12 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f000 fae4 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	683a      	ldr	r2, [r7, #0]
 801c2d8:	4619      	mov	r1, r3
 801c2da:	4620      	mov	r0, r4
 801c2dc:	f7ff fc4b 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c2e0:	4603      	mov	r3, r0
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d001      	beq.n	801c2ea <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801c2e6:	2301      	movs	r3, #1
 801c2e8:	e000      	b.n	801c2ec <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 801c2ea:	2300      	movs	r3, #0
	  if (size() > 0
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d00c      	beq.n	801c30a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	61fb      	str	r3, [r7, #28]
 801c2f4:	68b8      	ldr	r0, [r7, #8]
 801c2f6:	f000 fc0c 	bl	801cb12 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801c2fa:	4602      	mov	r2, r0
 801c2fc:	f107 031c 	add.w	r3, r7, #28
 801c300:	4619      	mov	r1, r3
 801c302:	68f8      	ldr	r0, [r7, #12]
 801c304:	f7eb f8de 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801c308:	e0db      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	683a      	ldr	r2, [r7, #0]
 801c30e:	68b9      	ldr	r1, [r7, #8]
 801c310:	4618      	mov	r0, r3
 801c312:	f000 fc0a 	bl	801cb2a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801c316:	e0d4      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801c318:	68bc      	ldr	r4, [r7, #8]
 801c31a:	69bb      	ldr	r3, [r7, #24]
 801c31c:	4618      	mov	r0, r3
 801c31e:	f000 fabd 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c322:	4603      	mov	r3, r0
 801c324:	461a      	mov	r2, r3
 801c326:	6839      	ldr	r1, [r7, #0]
 801c328:	4620      	mov	r0, r4
 801c32a:	f7ff fc24 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c32e:	4603      	mov	r3, r0
 801c330:	2b00      	cmp	r3, #0
 801c332:	d057      	beq.n	801c3e4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 801c334:	69bb      	ldr	r3, [r7, #24]
 801c336:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801c338:	69bc      	ldr	r4, [r7, #24]
 801c33a:	68b8      	ldr	r0, [r7, #8]
 801c33c:	f000 fc7a 	bl	801cc34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801c340:	4603      	mov	r3, r0
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	429c      	cmp	r4, r3
 801c346:	bf0c      	ite	eq
 801c348:	2301      	moveq	r3, #1
 801c34a:	2300      	movne	r3, #0
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d00d      	beq.n	801c36e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801c352:	68b8      	ldr	r0, [r7, #8]
 801c354:	f000 fc6e 	bl	801cc34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801c358:	4604      	mov	r4, r0
 801c35a:	68b8      	ldr	r0, [r7, #8]
 801c35c:	f000 fc6a 	bl	801cc34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801c360:	4603      	mov	r3, r0
 801c362:	461a      	mov	r2, r3
 801c364:	4621      	mov	r1, r4
 801c366:	68f8      	ldr	r0, [r7, #12]
 801c368:	f7eb f953 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801c36c:	e0a9      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801c36e:	68bc      	ldr	r4, [r7, #8]
 801c370:	f107 0314 	add.w	r3, r7, #20
 801c374:	4618      	mov	r0, r3
 801c376:	f000 fc69 	bl	801cc4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
 801c37a:	4603      	mov	r3, r0
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	4618      	mov	r0, r3
 801c380:	f000 fa8c 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c384:	4603      	mov	r3, r0
 801c386:	683a      	ldr	r2, [r7, #0]
 801c388:	4619      	mov	r1, r3
 801c38a:	4620      	mov	r0, r4
 801c38c:	f7ff fbf3 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c390:	4603      	mov	r3, r0
 801c392:	2b00      	cmp	r3, #0
 801c394:	d01f      	beq.n	801c3d6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801c396:	697b      	ldr	r3, [r7, #20]
 801c398:	4618      	mov	r0, r3
 801c39a:	f7ff fe53 	bl	801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	bf0c      	ite	eq
 801c3a4:	2301      	moveq	r3, #1
 801c3a6:	2300      	movne	r3, #0
 801c3a8:	b2db      	uxtb	r3, r3
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d00a      	beq.n	801c3c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	623b      	str	r3, [r7, #32]
 801c3b2:	f107 0214 	add.w	r2, r7, #20
 801c3b6:	f107 0320 	add.w	r3, r7, #32
 801c3ba:	4619      	mov	r1, r3
 801c3bc:	68f8      	ldr	r0, [r7, #12]
 801c3be:	f7eb f881 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801c3c2:	e07e      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801c3c4:	f107 0218 	add.w	r2, r7, #24
 801c3c8:	f107 0318 	add.w	r3, r7, #24
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	68f8      	ldr	r0, [r7, #12]
 801c3d0:	f7eb f91f 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801c3d4:	e075      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	683a      	ldr	r2, [r7, #0]
 801c3da:	68b9      	ldr	r1, [r7, #8]
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f000 fba4 	bl	801cb2a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801c3e2:	e06e      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801c3e4:	68bc      	ldr	r4, [r7, #8]
 801c3e6:	69bb      	ldr	r3, [r7, #24]
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	f000 fa57 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	683a      	ldr	r2, [r7, #0]
 801c3f2:	4619      	mov	r1, r3
 801c3f4:	4620      	mov	r0, r4
 801c3f6:	f7ff fbbe 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d056      	beq.n	801c4ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 801c400:	69bb      	ldr	r3, [r7, #24]
 801c402:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801c404:	69bc      	ldr	r4, [r7, #24]
 801c406:	68b8      	ldr	r0, [r7, #8]
 801c408:	f000 fb83 	bl	801cb12 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801c40c:	4603      	mov	r3, r0
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	429c      	cmp	r4, r3
 801c412:	bf0c      	ite	eq
 801c414:	2301      	moveq	r3, #1
 801c416:	2300      	movne	r3, #0
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d00c      	beq.n	801c438 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801c41e:	2300      	movs	r3, #0
 801c420:	627b      	str	r3, [r7, #36]	; 0x24
 801c422:	68b8      	ldr	r0, [r7, #8]
 801c424:	f000 fb75 	bl	801cb12 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801c428:	4602      	mov	r2, r0
 801c42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c42e:	4619      	mov	r1, r3
 801c430:	68f8      	ldr	r0, [r7, #12]
 801c432:	f7eb f847 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801c436:	e044      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801c438:	68bc      	ldr	r4, [r7, #8]
 801c43a:	f107 0310 	add.w	r3, r7, #16
 801c43e:	4618      	mov	r0, r3
 801c440:	f000 fc15 	bl	801cc6e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>
 801c444:	4603      	mov	r3, r0
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	4618      	mov	r0, r3
 801c44a:	f000 fa27 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c44e:	4603      	mov	r3, r0
 801c450:	461a      	mov	r2, r3
 801c452:	6839      	ldr	r1, [r7, #0]
 801c454:	4620      	mov	r0, r4
 801c456:	f7ff fb8e 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c45a:	4603      	mov	r3, r0
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d01f      	beq.n	801c4a0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801c460:	69bb      	ldr	r3, [r7, #24]
 801c462:	4618      	mov	r0, r3
 801c464:	f7ff fdee 	bl	801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801c468:	4603      	mov	r3, r0
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	bf0c      	ite	eq
 801c46e:	2301      	moveq	r3, #1
 801c470:	2300      	movne	r3, #0
 801c472:	b2db      	uxtb	r3, r3
 801c474:	2b00      	cmp	r3, #0
 801c476:	d00a      	beq.n	801c48e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801c478:	2300      	movs	r3, #0
 801c47a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c47c:	f107 0218 	add.w	r2, r7, #24
 801c480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c484:	4619      	mov	r1, r3
 801c486:	68f8      	ldr	r0, [r7, #12]
 801c488:	f7eb f81c 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801c48c:	e019      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801c48e:	f107 0210 	add.w	r2, r7, #16
 801c492:	f107 0310 	add.w	r3, r7, #16
 801c496:	4619      	mov	r1, r3
 801c498:	68f8      	ldr	r0, [r7, #12]
 801c49a:	f7eb f8ba 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801c49e:	e010      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	683a      	ldr	r2, [r7, #0]
 801c4a4:	68b9      	ldr	r1, [r7, #8]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f000 fb3f 	bl	801cb2a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801c4ac:	e009      	b.n	801c4c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c4b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c4b6:	f107 0318 	add.w	r3, r7, #24
 801c4ba:	4619      	mov	r1, r3
 801c4bc:	68f8      	ldr	r0, [r7, #12]
 801c4be:	f7eb f8e3 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801c4c2:	68f8      	ldr	r0, [r7, #12]
 801c4c4:	3734      	adds	r7, #52	; 0x34
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd90      	pop	{r4, r7, pc}

0801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801c4ca:	b580      	push	{r7, lr}
 801c4cc:	b084      	sub	sp, #16
 801c4ce:	af00      	add	r7, sp, #0
 801c4d0:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801c4d2:	6878      	ldr	r0, [r7, #4]
 801c4d4:	f000 fbdc 	bl	801cc90 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	f107 030c 	add.w	r3, r7, #12
 801c4de:	4611      	mov	r1, r2
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f000 fbe3 	bl	801ccac <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>
 801c4e6:	4603      	mov	r3, r0
      }
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	3710      	adds	r7, #16
 801c4ec:	46bd      	mov	sp, r7
 801c4ee:	bd80      	pop	{r7, pc}

0801c4f0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c4f0:	b5b0      	push	{r4, r5, r7, lr}
 801c4f2:	b086      	sub	sp, #24
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	60f8      	str	r0, [r7, #12]
 801c4f8:	60b9      	str	r1, [r7, #8]
 801c4fa:	607a      	str	r2, [r7, #4]
 801c4fc:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801c4fe:	68bb      	ldr	r3, [r7, #8]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d117      	bne.n	801c534 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801c504:	68f8      	ldr	r0, [r7, #12]
 801c506:	f000 fa51 	bl	801c9ac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801c50a:	4602      	mov	r2, r0
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	4293      	cmp	r3, r2
 801c510:	d010      	beq.n	801c534 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801c512:	68fc      	ldr	r4, [r7, #12]
 801c514:	6838      	ldr	r0, [r7, #0]
 801c516:	f7ff ffd8 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801c51a:	4605      	mov	r5, r0
 801c51c:	6878      	ldr	r0, [r7, #4]
 801c51e:	f000 f9bd 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c522:	4603      	mov	r3, r0
 801c524:	461a      	mov	r2, r3
 801c526:	4629      	mov	r1, r5
 801c528:	4620      	mov	r0, r4
 801c52a:	f7ff fb24 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c52e:	4603      	mov	r3, r0
 801c530:	2b00      	cmp	r3, #0
 801c532:	d001      	beq.n	801c538 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 801c534:	2301      	movs	r3, #1
 801c536:	e000      	b.n	801c53a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 801c538:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801c53a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801c540:	7df8      	ldrb	r0, [r7, #23]
 801c542:	687a      	ldr	r2, [r7, #4]
 801c544:	6839      	ldr	r1, [r7, #0]
 801c546:	f006 fe35 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	695b      	ldr	r3, [r3, #20]
 801c54e:	1c5a      	adds	r2, r3, #1
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801c554:	f107 0310 	add.w	r3, r7, #16
 801c558:	6839      	ldr	r1, [r7, #0]
 801c55a:	4618      	mov	r0, r3
 801c55c:	f000 f805 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801c560:	693b      	ldr	r3, [r7, #16]
    }
 801c562:	4618      	mov	r0, r3
 801c564:	3718      	adds	r7, #24
 801c566:	46bd      	mov	sp, r7
 801c568:	bdb0      	pop	{r4, r5, r7, pc}

0801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c56a:	b480      	push	{r7}
 801c56c:	b083      	sub	sp, #12
 801c56e:	af00      	add	r7, sp, #0
 801c570:	6078      	str	r0, [r7, #4]
 801c572:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	683a      	ldr	r2, [r7, #0]
 801c578:	601a      	str	r2, [r3, #0]
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	4618      	mov	r0, r3
 801c57e:	370c      	adds	r7, #12
 801c580:	46bd      	mov	sp, r7
 801c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c586:	4770      	bx	lr

0801c588 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 801c588:	b590      	push	{r4, r7, lr}
 801c58a:	b083      	sub	sp, #12
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6078      	str	r0, [r7, #4]
 801c590:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801c592:	6878      	ldr	r0, [r7, #4]
 801c594:	f7ec fcad 	bl	8008ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 801c598:	4604      	mov	r4, r0
 801c59a:	6878      	ldr	r0, [r7, #4]
 801c59c:	f7ea ff5f 	bl	800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801c5a0:	4602      	mov	r2, r0
 801c5a2:	683b      	ldr	r3, [r7, #0]
 801c5a4:	4621      	mov	r1, r4
 801c5a6:	6878      	ldr	r0, [r7, #4]
 801c5a8:	f000 fb8c 	bl	801ccc4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>
 801c5ac:	4603      	mov	r3, r0
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	370c      	adds	r7, #12
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	bd90      	pop	{r4, r7, pc}

0801c5b6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 801c5b6:	b480      	push	{r7}
 801c5b8:	b083      	sub	sp, #12
 801c5ba:	af00      	add	r7, sp, #0
 801c5bc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801c5be:	bf00      	nop
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	370c      	adds	r7, #12
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ca:	4770      	bx	lr

0801c5cc <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>:
      constexpr _Tuple_impl(const _Head& __head)
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
 801c5d4:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	6839      	ldr	r1, [r7, #0]
 801c5da:	4618      	mov	r0, r3
 801c5dc:	f000 fba3 	bl	801cd26 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	3708      	adds	r7, #8
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bd80      	pop	{r7, pc}

0801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c5ea:	b480      	push	{r7}
 801c5ec:	b083      	sub	sp, #12
 801c5ee:	af00      	add	r7, sp, #0
 801c5f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	370c      	adds	r7, #12
 801c5f8:	46bd      	mov	sp, r7
 801c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5fe:	4770      	bx	lr

0801c600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801c600:	b5b0      	push	{r4, r5, r7, lr}
 801c602:	b088      	sub	sp, #32
 801c604:	af02      	add	r7, sp, #8
 801c606:	60f8      	str	r0, [r7, #12]
 801c608:	60b9      	str	r1, [r7, #8]
 801c60a:	607a      	str	r2, [r7, #4]
 801c60c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801c60e:	68f8      	ldr	r0, [r7, #12]
 801c610:	f7ed fff6 	bl	800a600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 801c614:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801c616:	68b8      	ldr	r0, [r7, #8]
 801c618:	f7ff fdf0 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801c61c:	4604      	mov	r4, r0
 801c61e:	6878      	ldr	r0, [r7, #4]
 801c620:	f7ff ffe3 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801c624:	4605      	mov	r5, r0
 801c626:	6838      	ldr	r0, [r7, #0]
 801c628:	f7ff fdfe 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801c62c:	4603      	mov	r3, r0
 801c62e:	9300      	str	r3, [sp, #0]
 801c630:	462b      	mov	r3, r5
 801c632:	4622      	mov	r2, r4
 801c634:	6979      	ldr	r1, [r7, #20]
 801c636:	68f8      	ldr	r0, [r7, #12]
 801c638:	f000 fb84 	bl	801cd44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 801c63c:	697b      	ldr	r3, [r7, #20]
	}
 801c63e:	4618      	mov	r0, r3
 801c640:	3718      	adds	r7, #24
 801c642:	46bd      	mov	sp, r7
 801c644:	bdb0      	pop	{r4, r5, r7, pc}

0801c646 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c646:	b5b0      	push	{r4, r5, r7, lr}
 801c648:	b086      	sub	sp, #24
 801c64a:	af00      	add	r7, sp, #0
 801c64c:	60f8      	str	r0, [r7, #12]
 801c64e:	60b9      	str	r1, [r7, #8]
 801c650:	607a      	str	r2, [r7, #4]
 801c652:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d117      	bne.n	801c68a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801c65a:	68f8      	ldr	r0, [r7, #12]
 801c65c:	f7ea feff 	bl	800745e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801c660:	4602      	mov	r2, r0
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	4293      	cmp	r3, r2
 801c666:	d010      	beq.n	801c68a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801c668:	68fc      	ldr	r4, [r7, #12]
 801c66a:	6838      	ldr	r0, [r7, #0]
 801c66c:	f7ec fc23 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801c670:	4605      	mov	r5, r0
 801c672:	6878      	ldr	r0, [r7, #4]
 801c674:	f7ea ff0b 	bl	800748e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801c678:	4603      	mov	r3, r0
 801c67a:	461a      	mov	r2, r3
 801c67c:	4629      	mov	r1, r5
 801c67e:	4620      	mov	r0, r4
 801c680:	f7ea ff11 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801c684:	4603      	mov	r3, r0
 801c686:	2b00      	cmp	r3, #0
 801c688:	d001      	beq.n	801c68e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 801c68a:	2301      	movs	r3, #1
 801c68c:	e000      	b.n	801c690 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 801c68e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801c690:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801c696:	7df8      	ldrb	r0, [r7, #23]
 801c698:	687a      	ldr	r2, [r7, #4]
 801c69a:	6839      	ldr	r1, [r7, #0]
 801c69c:	f006 fd8a 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	695b      	ldr	r3, [r3, #20]
 801c6a4:	1c5a      	adds	r2, r3, #1
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801c6aa:	f107 0310 	add.w	r3, r7, #16
 801c6ae:	6839      	ldr	r1, [r7, #0]
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f7e8 ff86 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801c6b6:	693b      	ldr	r3, [r7, #16]
    }
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	3718      	adds	r7, #24
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	bdb0      	pop	{r4, r5, r7, pc}

0801c6c0 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c6c0:	b480      	push	{r7}
 801c6c2:	b083      	sub	sp, #12
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	370c      	adds	r7, #12
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d4:	4770      	bx	lr

0801c6d6 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801c6d6:	b590      	push	{r4, r7, lr}
 801c6d8:	b087      	sub	sp, #28
 801c6da:	af00      	add	r7, sp, #0
 801c6dc:	60f8      	str	r0, [r7, #12]
 801c6de:	60b9      	str	r1, [r7, #8]
 801c6e0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801c6e2:	68f8      	ldr	r0, [r7, #12]
 801c6e4:	f000 fb5b 	bl	801cd9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	68f8      	ldr	r0, [r7, #12]
 801c6ec:	f7e6 fb61 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	1ae2      	subs	r2, r4, r3
 801c6f4:	68bb      	ldr	r3, [r7, #8]
 801c6f6:	429a      	cmp	r2, r3
 801c6f8:	bf34      	ite	cc
 801c6fa:	2301      	movcc	r3, #1
 801c6fc:	2300      	movcs	r3, #0
 801c6fe:	b2db      	uxtb	r3, r3
 801c700:	2b00      	cmp	r3, #0
 801c702:	d002      	beq.n	801c70a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801c704:	6878      	ldr	r0, [r7, #4]
 801c706:	f006 fdb3 	bl	8023270 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801c70a:	68f8      	ldr	r0, [r7, #12]
 801c70c:	f7e6 fb51 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801c710:	4604      	mov	r4, r0
 801c712:	68f8      	ldr	r0, [r7, #12]
 801c714:	f7e6 fb4d 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801c718:	4603      	mov	r3, r0
 801c71a:	613b      	str	r3, [r7, #16]
 801c71c:	f107 0208 	add.w	r2, r7, #8
 801c720:	f107 0310 	add.w	r3, r7, #16
 801c724:	4611      	mov	r1, r2
 801c726:	4618      	mov	r0, r3
 801c728:	f7fe fed2 	bl	801b4d0 <_ZSt3maxIjERKT_S2_S2_>
 801c72c:	4603      	mov	r3, r0
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	4423      	add	r3, r4
 801c732:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c734:	68f8      	ldr	r0, [r7, #12]
 801c736:	f7e6 fb3c 	bl	8002db2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801c73a:	4602      	mov	r2, r0
 801c73c:	697b      	ldr	r3, [r7, #20]
 801c73e:	4293      	cmp	r3, r2
 801c740:	d306      	bcc.n	801c750 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 801c742:	68f8      	ldr	r0, [r7, #12]
 801c744:	f000 fb2b 	bl	801cd9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801c748:	4602      	mov	r2, r0
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	4293      	cmp	r3, r2
 801c74e:	d904      	bls.n	801c75a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 801c750:	68f8      	ldr	r0, [r7, #12]
 801c752:	f000 fb24 	bl	801cd9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801c756:	4603      	mov	r3, r0
 801c758:	e000      	b.n	801c75c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 801c75a:	697b      	ldr	r3, [r7, #20]
      }
 801c75c:	4618      	mov	r0, r3
 801c75e:	371c      	adds	r7, #28
 801c760:	46bd      	mov	sp, r7
 801c762:	bd90      	pop	{r4, r7, pc}

0801c764 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801c764:	b590      	push	{r4, r7, lr}
 801c766:	b083      	sub	sp, #12
 801c768:	af00      	add	r7, sp, #0
 801c76a:	6078      	str	r0, [r7, #4]
 801c76c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801c76e:	6878      	ldr	r0, [r7, #4]
 801c770:	f7ea fdaa 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 801c774:	4603      	mov	r3, r0
 801c776:	681c      	ldr	r4, [r3, #0]
 801c778:	6838      	ldr	r0, [r7, #0]
 801c77a:	f7ea fda5 	bl	80072c8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 801c77e:	4603      	mov	r3, r0
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	1ae3      	subs	r3, r4, r3
 801c784:	109b      	asrs	r3, r3, #2
 801c786:	4618      	mov	r0, r3
 801c788:	370c      	adds	r7, #12
 801c78a:	46bd      	mov	sp, r7
 801c78c:	bd90      	pop	{r4, r7, pc}

0801c78e <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801c78e:	b590      	push	{r4, r7, lr}
 801c790:	b087      	sub	sp, #28
 801c792:	af02      	add	r7, sp, #8
 801c794:	60f8      	str	r0, [r7, #12]
 801c796:	60b9      	str	r1, [r7, #8]
 801c798:	607a      	str	r2, [r7, #4]
 801c79a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801c79c:	f88d 4000 	strb.w	r4, [sp]
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	687a      	ldr	r2, [r7, #4]
 801c7a4:	68b9      	ldr	r1, [r7, #8]
 801c7a6:	68f8      	ldr	r0, [r7, #12]
 801c7a8:	f000 fb0a 	bl	801cdc0 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 801c7ac:	4603      	mov	r3, r0
      }
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	3714      	adds	r7, #20
 801c7b2:	46bd      	mov	sp, r7
 801c7b4:	bd90      	pop	{r4, r7, pc}

0801c7b6 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801c7b6:	b580      	push	{r7, lr}
 801c7b8:	b084      	sub	sp, #16
 801c7ba:	af00      	add	r7, sp, #0
 801c7bc:	60f8      	str	r0, [r7, #12]
 801c7be:	7239      	strb	r1, [r7, #8]
 801c7c0:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801c7c2:	6878      	ldr	r0, [r7, #4]
 801c7c4:	f7ff fb70 	bl	801bea8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	781a      	ldrb	r2, [r3, #0]
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	701a      	strb	r2, [r3, #0]
	    { }
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	3710      	adds	r7, #16
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	bd80      	pop	{r7, pc}

0801c7da <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801c7da:	b5b0      	push	{r4, r5, r7, lr}
 801c7dc:	b084      	sub	sp, #16
 801c7de:	af00      	add	r7, sp, #0
 801c7e0:	60f8      	str	r0, [r7, #12]
 801c7e2:	7239      	strb	r1, [r7, #8]
 801c7e4:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801c7e6:	68fc      	ldr	r4, [r7, #12]
 801c7e8:	6878      	ldr	r0, [r7, #4]
 801c7ea:	f7ff fb5d 	bl	801bea8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801c7ee:	4603      	mov	r3, r0
 801c7f0:	461a      	mov	r2, r3
 801c7f2:	4629      	mov	r1, r5
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	f7ff ffde 	bl	801c7b6 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	2201      	movs	r2, #1
 801c7fe:	705a      	strb	r2, [r3, #1]
	{ }
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	4618      	mov	r0, r3
 801c804:	3710      	adds	r7, #16
 801c806:	46bd      	mov	sp, r7
 801c808:	bdb0      	pop	{r4, r5, r7, pc}

0801c80a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801c80a:	b480      	push	{r7}
 801c80c:	b083      	sub	sp, #12
 801c80e:	af00      	add	r7, sp, #0
 801c810:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	689b      	ldr	r3, [r3, #8]
      }
 801c816:	4618      	mov	r0, r3
 801c818:	370c      	adds	r7, #12
 801c81a:	46bd      	mov	sp, r7
 801c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c820:	4770      	bx	lr

0801c822 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801c822:	b480      	push	{r7}
 801c824:	b083      	sub	sp, #12
 801c826:	af00      	add	r7, sp, #0
 801c828:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	3304      	adds	r3, #4
 801c82e:	4618      	mov	r0, r3
 801c830:	370c      	adds	r7, #12
 801c832:	46bd      	mov	sp, r7
 801c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c838:	4770      	bx	lr

0801c83a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c83a:	b590      	push	{r4, r7, lr}
 801c83c:	b087      	sub	sp, #28
 801c83e:	af00      	add	r7, sp, #0
 801c840:	60f8      	str	r0, [r7, #12]
 801c842:	60b9      	str	r1, [r7, #8]
 801c844:	607a      	str	r2, [r7, #4]
 801c846:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d01b      	beq.n	801c886 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801c84e:	68fc      	ldr	r4, [r7, #12]
 801c850:	68b8      	ldr	r0, [r7, #8]
 801c852:	f7ff fe3a 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801c856:	4603      	mov	r3, r0
 801c858:	683a      	ldr	r2, [r7, #0]
 801c85a:	4619      	mov	r1, r3
 801c85c:	4620      	mov	r0, r4
 801c85e:	f7ff f98a 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c862:	4603      	mov	r3, r0
 801c864:	f083 0301 	eor.w	r3, r3, #1
 801c868:	b2db      	uxtb	r3, r3
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d006      	beq.n	801c87c <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801c86e:	68bb      	ldr	r3, [r7, #8]
 801c870:	607b      	str	r3, [r7, #4]
 801c872:	68b8      	ldr	r0, [r7, #8]
 801c874:	f000 fab6 	bl	801cde4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801c878:	60b8      	str	r0, [r7, #8]
 801c87a:	e7e5      	b.n	801c848 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801c87c:	68b8      	ldr	r0, [r7, #8]
 801c87e:	f000 fabd 	bl	801cdfc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801c882:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801c884:	e7e0      	b.n	801c848 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 801c886:	f107 0314 	add.w	r3, r7, #20
 801c88a:	6879      	ldr	r1, [r7, #4]
 801c88c:	4618      	mov	r0, r3
 801c88e:	f000 f811 	bl	801c8b4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 801c892:	697b      	ldr	r3, [r7, #20]
    }
 801c894:	4618      	mov	r0, r3
 801c896:	371c      	adds	r7, #28
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd90      	pop	{r4, r7, pc}

0801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801c8a4:	6878      	ldr	r0, [r7, #4]
 801c8a6:	f7ff fe10 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	3708      	adds	r7, #8
 801c8b0:	46bd      	mov	sp, r7
 801c8b2:	bd80      	pop	{r7, pc}

0801c8b4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c8b4:	b480      	push	{r7}
 801c8b6:	b083      	sub	sp, #12
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
 801c8bc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	683a      	ldr	r2, [r7, #0]
 801c8c2:	601a      	str	r2, [r3, #0]
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	370c      	adds	r7, #12
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d0:	4770      	bx	lr

0801c8d2 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801c8d2:	b580      	push	{r7, lr}
 801c8d4:	b084      	sub	sp, #16
 801c8d6:	af00      	add	r7, sp, #0
 801c8d8:	60f8      	str	r0, [r7, #12]
 801c8da:	7239      	strb	r1, [r7, #8]
 801c8dc:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801c8de:	6878      	ldr	r0, [r7, #4]
 801c8e0:	f7ff fb74 	bl	801bfcc <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	ed93 7b00 	vldr	d7, [r3]
 801c8ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	edc3 7a00 	vstr	s15, [r3]
	    { }
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	3710      	adds	r7, #16
 801c8fa:	46bd      	mov	sp, r7
 801c8fc:	bd80      	pop	{r7, pc}

0801c8fe <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801c8fe:	b5b0      	push	{r4, r5, r7, lr}
 801c900:	b084      	sub	sp, #16
 801c902:	af00      	add	r7, sp, #0
 801c904:	60f8      	str	r0, [r7, #12]
 801c906:	7239      	strb	r1, [r7, #8]
 801c908:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801c90a:	68fc      	ldr	r4, [r7, #12]
 801c90c:	6878      	ldr	r0, [r7, #4]
 801c90e:	f7ff fb5d 	bl	801bfcc <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 801c912:	4603      	mov	r3, r0
 801c914:	461a      	mov	r2, r3
 801c916:	4629      	mov	r1, r5
 801c918:	4620      	mov	r0, r4
 801c91a:	f7ff ffda 	bl	801c8d2 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	2201      	movs	r2, #1
 801c922:	711a      	strb	r2, [r3, #4]
	{ }
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	4618      	mov	r0, r3
 801c928:	3710      	adds	r7, #16
 801c92a:	46bd      	mov	sp, r7
 801c92c:	bdb0      	pop	{r4, r5, r7, pc}

0801c92e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801c92e:	b590      	push	{r4, r7, lr}
 801c930:	b083      	sub	sp, #12
 801c932:	af00      	add	r7, sp, #0
 801c934:	6078      	str	r0, [r7, #4]
 801c936:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f000 fa6b 	bl	801ce14 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801c93e:	4604      	mov	r4, r0
 801c940:	6838      	ldr	r0, [r7, #0]
 801c942:	f7ff fc3e 	bl	801c1c2 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 801c946:	4603      	mov	r3, r0
 801c948:	4619      	mov	r1, r3
 801c94a:	4620      	mov	r0, r4
 801c94c:	f000 fa6d 	bl	801ce2a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 801c950:	bf00      	nop
 801c952:	370c      	adds	r7, #12
 801c954:	46bd      	mov	sp, r7
 801c956:	bd90      	pop	{r4, r7, pc}

0801c958 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
 801c960:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801c962:	6878      	ldr	r0, [r7, #4]
 801c964:	f000 fa56 	bl	801ce14 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801c968:	4603      	mov	r3, r0
 801c96a:	2201      	movs	r2, #1
 801c96c:	6839      	ldr	r1, [r7, #0]
 801c96e:	4618      	mov	r0, r3
 801c970:	f000 fa67 	bl	801ce42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 801c974:	bf00      	nop
 801c976:	3708      	adds	r7, #8
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}

0801c97c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c97c:	b480      	push	{r7}
 801c97e:	b083      	sub	sp, #12
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	689b      	ldr	r3, [r3, #8]
 801c988:	4618      	mov	r0, r3
 801c98a:	370c      	adds	r7, #12
 801c98c:	46bd      	mov	sp, r7
 801c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c992:	4770      	bx	lr

0801c994 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801c994:	b480      	push	{r7}
 801c996:	b083      	sub	sp, #12
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	68db      	ldr	r3, [r3, #12]
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	370c      	adds	r7, #12
 801c9a4:	46bd      	mov	sp, r7
 801c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9aa:	4770      	bx	lr

0801c9ac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801c9ac:	b480      	push	{r7}
 801c9ae:	b083      	sub	sp, #12
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	3304      	adds	r3, #4
 801c9b8:	4618      	mov	r0, r3
 801c9ba:	370c      	adds	r7, #12
 801c9bc:	46bd      	mov	sp, r7
 801c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c2:	4770      	bx	lr

0801c9c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801c9c4:	b590      	push	{r4, r7, lr}
 801c9c6:	b087      	sub	sp, #28
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	60f8      	str	r0, [r7, #12]
 801c9cc:	60b9      	str	r1, [r7, #8]
 801c9ce:	607a      	str	r2, [r7, #4]
 801c9d0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d01b      	beq.n	801ca10 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801c9d8:	68fc      	ldr	r4, [r7, #12]
 801c9da:	68b8      	ldr	r0, [r7, #8]
 801c9dc:	f7ff fd75 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801c9e0:	4603      	mov	r3, r0
 801c9e2:	683a      	ldr	r2, [r7, #0]
 801c9e4:	4619      	mov	r1, r3
 801c9e6:	4620      	mov	r0, r4
 801c9e8:	f7ff f8c5 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801c9ec:	4603      	mov	r3, r0
 801c9ee:	f083 0301 	eor.w	r3, r3, #1
 801c9f2:	b2db      	uxtb	r3, r3
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d006      	beq.n	801ca06 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	607b      	str	r3, [r7, #4]
 801c9fc:	68b8      	ldr	r0, [r7, #8]
 801c9fe:	f7ff fb2d 	bl	801c05c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ca02:	60b8      	str	r0, [r7, #8]
 801ca04:	e7e5      	b.n	801c9d2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801ca06:	68b8      	ldr	r0, [r7, #8]
 801ca08:	f7ff fb1c 	bl	801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801ca0c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801ca0e:	e7e0      	b.n	801c9d2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801ca10:	f107 0314 	add.w	r3, r7, #20
 801ca14:	6879      	ldr	r1, [r7, #4]
 801ca16:	4618      	mov	r0, r3
 801ca18:	f7ff fda7 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801ca1c:	697b      	ldr	r3, [r7, #20]
    }
 801ca1e:	4618      	mov	r0, r3
 801ca20:	371c      	adds	r7, #28
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd90      	pop	{r4, r7, pc}

0801ca26 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801ca26:	b580      	push	{r7, lr}
 801ca28:	b082      	sub	sp, #8
 801ca2a:	af00      	add	r7, sp, #0
 801ca2c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801ca2e:	6878      	ldr	r0, [r7, #4]
 801ca30:	f000 fa26 	bl	801ce80 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 801ca34:	4603      	mov	r3, r0
 801ca36:	4618      	mov	r0, r3
 801ca38:	3708      	adds	r7, #8
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}

0801ca3e <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 801ca3e:	b480      	push	{r7}
 801ca40:	b083      	sub	sp, #12
 801ca42:	af00      	add	r7, sp, #0
 801ca44:	6078      	str	r0, [r7, #4]
 801ca46:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	683a      	ldr	r2, [r7, #0]
 801ca4c:	601a      	str	r2, [r3, #0]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	4618      	mov	r0, r3
 801ca52:	370c      	adds	r7, #12
 801ca54:	46bd      	mov	sp, r7
 801ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca5a:	4770      	bx	lr

0801ca5c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b082      	sub	sp, #8
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801ca64:	6878      	ldr	r0, [r7, #4]
 801ca66:	f000 f9d5 	bl	801ce14 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	2101      	movs	r1, #1
 801ca6e:	4618      	mov	r0, r3
 801ca70:	f000 fa11 	bl	801ce96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>
 801ca74:	4603      	mov	r3, r0
 801ca76:	4618      	mov	r0, r3
 801ca78:	3708      	adds	r7, #8
 801ca7a:	46bd      	mov	sp, r7
 801ca7c:	bd80      	pop	{r7, pc}

0801ca7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca82:	b086      	sub	sp, #24
 801ca84:	af02      	add	r7, sp, #8
 801ca86:	60f8      	str	r0, [r7, #12]
 801ca88:	60b9      	str	r1, [r7, #8]
 801ca8a:	607a      	str	r2, [r7, #4]
 801ca8c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	4619      	mov	r1, r3
 801ca92:	2020      	movs	r0, #32
 801ca94:	f7e3 fc72 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801ca98:	68f8      	ldr	r0, [r7, #12]
 801ca9a:	f000 f9bb 	bl	801ce14 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801ca9e:	4604      	mov	r4, r0
 801caa0:	68b8      	ldr	r0, [r7, #8]
 801caa2:	f7ff fb8e 	bl	801c1c2 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 801caa6:	4605      	mov	r5, r0
 801caa8:	6878      	ldr	r0, [r7, #4]
 801caaa:	f7ff fba7 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801caae:	4606      	mov	r6, r0
 801cab0:	6838      	ldr	r0, [r7, #0]
 801cab2:	f7ff fbae 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801cab6:	4680      	mov	r8, r0
 801cab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801caba:	f7ff fbb5 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801cabe:	4603      	mov	r3, r0
 801cac0:	9300      	str	r3, [sp, #0]
 801cac2:	4643      	mov	r3, r8
 801cac4:	4632      	mov	r2, r6
 801cac6:	4629      	mov	r1, r5
 801cac8:	4620      	mov	r0, r4
 801caca:	f000 fa3e 	bl	801cf4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 801cace:	bf00      	nop
 801cad0:	3710      	adds	r7, #16
 801cad2:	46bd      	mov	sp, r7
 801cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cad8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801cad8:	b580      	push	{r7, lr}
 801cada:	b084      	sub	sp, #16
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	681a      	ldr	r2, [r3, #0]
 801cae4:	f107 030c 	add.w	r3, r7, #12
 801cae8:	4611      	mov	r1, r2
 801caea:	4618      	mov	r0, r3
 801caec:	f7ff fd3d 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	4618      	mov	r0, r3
 801caf4:	3710      	adds	r7, #16
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}

0801cafa <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801cafa:	b480      	push	{r7}
 801cafc:	b083      	sub	sp, #12
 801cafe:	af00      	add	r7, sp, #0
 801cb00:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	695b      	ldr	r3, [r3, #20]
 801cb06:	4618      	mov	r0, r3
 801cb08:	370c      	adds	r7, #12
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb10:	4770      	bx	lr

0801cb12 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801cb12:	b480      	push	{r7}
 801cb14:	b083      	sub	sp, #12
 801cb16:	af00      	add	r7, sp, #0
 801cb18:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	3310      	adds	r3, #16
 801cb1e:	4618      	mov	r0, r3
 801cb20:	370c      	adds	r7, #12
 801cb22:	46bd      	mov	sp, r7
 801cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb28:	4770      	bx	lr

0801cb2a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801cb2a:	b590      	push	{r4, r7, lr}
 801cb2c:	b08b      	sub	sp, #44	; 0x2c
 801cb2e:	af00      	add	r7, sp, #0
 801cb30:	60f8      	str	r0, [r7, #12]
 801cb32:	60b9      	str	r1, [r7, #8]
 801cb34:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801cb36:	68b8      	ldr	r0, [r7, #8]
 801cb38:	f7fe ff4e 	bl	801b9d8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801cb40:	68b8      	ldr	r0, [r7, #8]
 801cb42:	f7ff ff33 	bl	801c9ac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801cb46:	4603      	mov	r3, r0
 801cb48:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801cb50:	69bb      	ldr	r3, [r7, #24]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d020      	beq.n	801cb98 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801cb56:	69bb      	ldr	r3, [r7, #24]
 801cb58:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801cb5a:	68bc      	ldr	r4, [r7, #8]
 801cb5c:	69bb      	ldr	r3, [r7, #24]
 801cb5e:	4618      	mov	r0, r3
 801cb60:	f7ff fcb3 	bl	801c4ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801cb64:	4603      	mov	r3, r0
 801cb66:	461a      	mov	r2, r3
 801cb68:	6879      	ldr	r1, [r7, #4]
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	f7ff f803 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801cb70:	4603      	mov	r3, r0
 801cb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801cb76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d005      	beq.n	801cb8a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 801cb7e:	69bb      	ldr	r3, [r7, #24]
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ff fa6b 	bl	801c05c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801cb86:	4603      	mov	r3, r0
 801cb88:	e004      	b.n	801cb94 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 801cb8a:	69bb      	ldr	r3, [r7, #24]
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	f7ff fa59 	bl	801c044 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801cb92:	4603      	mov	r3, r0
 801cb94:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801cb96:	e7db      	b.n	801cb50 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801cb98:	697a      	ldr	r2, [r7, #20]
 801cb9a:	f107 0310 	add.w	r3, r7, #16
 801cb9e:	4611      	mov	r1, r2
 801cba0:	4618      	mov	r0, r3
 801cba2:	f7ff fce2 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801cba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d01d      	beq.n	801cbea <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801cbae:	68b8      	ldr	r0, [r7, #8]
 801cbb0:	f000 f9e7 	bl	801cf82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	61fb      	str	r3, [r7, #28]
 801cbb8:	f107 021c 	add.w	r2, r7, #28
 801cbbc:	f107 0310 	add.w	r3, r7, #16
 801cbc0:	4611      	mov	r1, r2
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f7fe ffa8 	bl	801bb18 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 801cbc8:	4603      	mov	r3, r0
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d008      	beq.n	801cbe0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801cbce:	f107 0214 	add.w	r2, r7, #20
 801cbd2:	f107 0318 	add.w	r3, r7, #24
 801cbd6:	4619      	mov	r1, r3
 801cbd8:	68f8      	ldr	r0, [r7, #12]
 801cbda:	f000 f9e3 	bl	801cfa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 801cbde:	e025      	b.n	801cc2c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801cbe0:	f107 0310 	add.w	r3, r7, #16
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	f000 f831 	bl	801cc4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801cbea:	68bc      	ldr	r4, [r7, #8]
 801cbec:	693b      	ldr	r3, [r7, #16]
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f7ff fe54 	bl	801c89c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	687a      	ldr	r2, [r7, #4]
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	f7fe ffbb 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801cc00:	4603      	mov	r3, r0
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d008      	beq.n	801cc18 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801cc06:	f107 0214 	add.w	r2, r7, #20
 801cc0a:	f107 0318 	add.w	r3, r7, #24
 801cc0e:	4619      	mov	r1, r3
 801cc10:	68f8      	ldr	r0, [r7, #12]
 801cc12:	f000 f9c7 	bl	801cfa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 801cc16:	e009      	b.n	801cc2c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801cc18:	2300      	movs	r3, #0
 801cc1a:	623b      	str	r3, [r7, #32]
 801cc1c:	f107 0220 	add.w	r2, r7, #32
 801cc20:	f107 0310 	add.w	r3, r7, #16
 801cc24:	4619      	mov	r1, r3
 801cc26:	68f8      	ldr	r0, [r7, #12]
 801cc28:	f7ea fd2e 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801cc2c:	68f8      	ldr	r0, [r7, #12]
 801cc2e:	372c      	adds	r7, #44	; 0x2c
 801cc30:	46bd      	mov	sp, r7
 801cc32:	bd90      	pop	{r4, r7, pc}

0801cc34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801cc34:	b480      	push	{r7}
 801cc36:	b083      	sub	sp, #12
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	330c      	adds	r3, #12
 801cc40:	4618      	mov	r0, r3
 801cc42:	370c      	adds	r7, #12
 801cc44:	46bd      	mov	sp, r7
 801cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4a:	4770      	bx	lr

0801cc4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f006 faa9 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801cc5e:	4602      	mov	r2, r0
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	601a      	str	r2, [r3, #0]
	return *this;
 801cc64:	687b      	ldr	r3, [r7, #4]
      }
 801cc66:	4618      	mov	r0, r3
 801cc68:	3708      	adds	r7, #8
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	bd80      	pop	{r7, pc}

0801cc6e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801cc6e:	b580      	push	{r7, lr}
 801cc70:	b082      	sub	sp, #8
 801cc72:	af00      	add	r7, sp, #0
 801cc74:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f006 fa96 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801cc80:	4602      	mov	r2, r0
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	601a      	str	r2, [r3, #0]
	return *this;
 801cc86:	687b      	ldr	r3, [r7, #4]
      }
 801cc88:	4618      	mov	r0, r3
 801cc8a:	3708      	adds	r7, #8
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}

0801cc90 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	3310      	adds	r3, #16
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f000 f99a 	bl	801cfd6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 801cca2:	4603      	mov	r3, r0
 801cca4:	4618      	mov	r0, r3
 801cca6:	3708      	adds	r7, #8
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}

0801ccac <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 801ccac:	b480      	push	{r7}
 801ccae:	b083      	sub	sp, #12
 801ccb0:	af00      	add	r7, sp, #0
 801ccb2:	6078      	str	r0, [r7, #4]
 801ccb4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	4618      	mov	r0, r3
 801ccba:	370c      	adds	r7, #12
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccc2:	4770      	bx	lr

0801ccc4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ccc4:	b590      	push	{r4, r7, lr}
 801ccc6:	b087      	sub	sp, #28
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	60f8      	str	r0, [r7, #12]
 801cccc:	60b9      	str	r1, [r7, #8]
 801ccce:	607a      	str	r2, [r7, #4]
 801ccd0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ccd2:	68bb      	ldr	r3, [r7, #8]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d01b      	beq.n	801cd10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801ccd8:	68fc      	ldr	r4, [r7, #12]
 801ccda:	68b8      	ldr	r0, [r7, #8]
 801ccdc:	f7ec f8eb 	bl	8008eb6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801cce0:	4603      	mov	r3, r0
 801cce2:	683a      	ldr	r2, [r7, #0]
 801cce4:	4619      	mov	r1, r3
 801cce6:	4620      	mov	r0, r4
 801cce8:	f7ea fbdd 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801ccec:	4603      	mov	r3, r0
 801ccee:	f083 0301 	eor.w	r3, r3, #1
 801ccf2:	b2db      	uxtb	r3, r3
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d006      	beq.n	801cd06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 801ccf8:	68bb      	ldr	r3, [r7, #8]
 801ccfa:	607b      	str	r3, [r7, #4]
 801ccfc:	68b8      	ldr	r0, [r7, #8]
 801ccfe:	f7ea fb80 	bl	8007402 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 801cd02:	60b8      	str	r0, [r7, #8]
 801cd04:	e7e5      	b.n	801ccd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 801cd06:	68b8      	ldr	r0, [r7, #8]
 801cd08:	f7ea fb6f 	bl	80073ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 801cd0c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801cd0e:	e7e0      	b.n	801ccd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 801cd10:	f107 0314 	add.w	r3, r7, #20
 801cd14:	6879      	ldr	r1, [r7, #4]
 801cd16:	4618      	mov	r0, r3
 801cd18:	f7e8 fc53 	bl	80055c2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801cd1c:	697b      	ldr	r3, [r7, #20]
    }
 801cd1e:	4618      	mov	r0, r3
 801cd20:	371c      	adds	r7, #28
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bd90      	pop	{r4, r7, pc}

0801cd26 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 801cd26:	b480      	push	{r7}
 801cd28:	b083      	sub	sp, #12
 801cd2a:	af00      	add	r7, sp, #0
 801cd2c:	6078      	str	r0, [r7, #4]
 801cd2e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	683a      	ldr	r2, [r7, #0]
 801cd34:	601a      	str	r2, [r3, #0]
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	4618      	mov	r0, r3
 801cd3a:	370c      	adds	r7, #12
 801cd3c:	46bd      	mov	sp, r7
 801cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd42:	4770      	bx	lr

0801cd44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd48:	b086      	sub	sp, #24
 801cd4a:	af02      	add	r7, sp, #8
 801cd4c:	60f8      	str	r0, [r7, #12]
 801cd4e:	60b9      	str	r1, [r7, #8]
 801cd50:	607a      	str	r2, [r7, #4]
 801cd52:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801cd54:	68bb      	ldr	r3, [r7, #8]
 801cd56:	4619      	mov	r1, r3
 801cd58:	2024      	movs	r0, #36	; 0x24
 801cd5a:	f7e3 fb0f 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801cd5e:	68f8      	ldr	r0, [r7, #12]
 801cd60:	f7ed fbc6 	bl	800a4f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 801cd64:	4604      	mov	r4, r0
 801cd66:	68b8      	ldr	r0, [r7, #8]
 801cd68:	f7ed fbcd 	bl	800a506 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 801cd6c:	4605      	mov	r5, r0
 801cd6e:	6878      	ldr	r0, [r7, #4]
 801cd70:	f7ff fa44 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801cd74:	4606      	mov	r6, r0
 801cd76:	6838      	ldr	r0, [r7, #0]
 801cd78:	f7ff fc37 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801cd7c:	4680      	mov	r8, r0
 801cd7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cd80:	f7ff fa52 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801cd84:	4603      	mov	r3, r0
 801cd86:	9300      	str	r3, [sp, #0]
 801cd88:	4643      	mov	r3, r8
 801cd8a:	4632      	mov	r2, r6
 801cd8c:	4629      	mov	r1, r5
 801cd8e:	4620      	mov	r0, r4
 801cd90:	f000 f967 	bl	801d062 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 801cd94:	bf00      	nop
 801cd96:	3710      	adds	r7, #16
 801cd98:	46bd      	mov	sp, r7
 801cd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd9e <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801cd9e:	b580      	push	{r7, lr}
 801cda0:	b082      	sub	sp, #8
 801cda2:	af00      	add	r7, sp, #0
 801cda4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7e6 fddd 	bl	8003968 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7fd ff1a 	bl	801abea <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	4618      	mov	r0, r3
 801cdba:	3708      	adds	r7, #8
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bd80      	pop	{r7, pc}

0801cdc0 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b084      	sub	sp, #16
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	60f8      	str	r0, [r7, #12]
 801cdc8:	60b9      	str	r1, [r7, #8]
 801cdca:	607a      	str	r2, [r7, #4]
 801cdcc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	687a      	ldr	r2, [r7, #4]
 801cdd2:	68b9      	ldr	r1, [r7, #8]
 801cdd4:	68f8      	ldr	r0, [r7, #12]
 801cdd6:	f000 f960 	bl	801d09a <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 801cdda:	4603      	mov	r3, r0
      }
 801cddc:	4618      	mov	r0, r3
 801cdde:	3710      	adds	r7, #16
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}

0801cde4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801cde4:	b480      	push	{r7}
 801cde6:	b083      	sub	sp, #12
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	689b      	ldr	r3, [r3, #8]
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	370c      	adds	r7, #12
 801cdf4:	46bd      	mov	sp, r7
 801cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdfa:	4770      	bx	lr

0801cdfc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801cdfc:	b480      	push	{r7}
 801cdfe:	b083      	sub	sp, #12
 801ce00:	af00      	add	r7, sp, #0
 801ce02:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	68db      	ldr	r3, [r3, #12]
 801ce08:	4618      	mov	r0, r3
 801ce0a:	370c      	adds	r7, #12
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce12:	4770      	bx	lr

0801ce14 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801ce14:	b480      	push	{r7}
 801ce16:	b083      	sub	sp, #12
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	4618      	mov	r0, r3
 801ce20:	370c      	adds	r7, #12
 801ce22:	46bd      	mov	sp, r7
 801ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce28:	4770      	bx	lr

0801ce2a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801ce2a:	b580      	push	{r7, lr}
 801ce2c:	b082      	sub	sp, #8
 801ce2e:	af00      	add	r7, sp, #0
 801ce30:	6078      	str	r0, [r7, #4]
 801ce32:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801ce34:	6838      	ldr	r0, [r7, #0]
 801ce36:	f000 f94d 	bl	801d0d4 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 801ce3a:	bf00      	nop
 801ce3c:	3708      	adds	r7, #8
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}

0801ce42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801ce42:	b580      	push	{r7, lr}
 801ce44:	b088      	sub	sp, #32
 801ce46:	af00      	add	r7, sp, #0
 801ce48:	60f8      	str	r0, [r7, #12]
 801ce4a:	60b9      	str	r1, [r7, #8]
 801ce4c:	607a      	str	r2, [r7, #4]
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	61fb      	str	r3, [r7, #28]
 801ce52:	68bb      	ldr	r3, [r7, #8]
 801ce54:	61bb      	str	r3, [r7, #24]
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801ce5a:	f7e3 fa59 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d003      	beq.n	801ce6c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 801ce64:	69b8      	ldr	r0, [r7, #24]
 801ce66:	f006 f938 	bl	80230da <_ZdlPv>
	    return;
 801ce6a:	e005      	b.n	801ce78 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801ce6c:	697a      	ldr	r2, [r7, #20]
 801ce6e:	69b9      	ldr	r1, [r7, #24]
 801ce70:	69f8      	ldr	r0, [r7, #28]
 801ce72:	f000 fa05 	bl	801d280 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 801ce76:	bf00      	nop
 801ce78:	bf00      	nop
 801ce7a:	3720      	adds	r7, #32
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}

0801ce80 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801ce80:	b480      	push	{r7}
 801ce82:	b083      	sub	sp, #12
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	370c      	adds	r7, #12
 801ce8e:	46bd      	mov	sp, r7
 801ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce94:	4770      	bx	lr

0801ce96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801ce96:	b580      	push	{r7, lr}
 801ce98:	b084      	sub	sp, #16
 801ce9a:	af00      	add	r7, sp, #0
 801ce9c:	6078      	str	r0, [r7, #4]
 801ce9e:	6039      	str	r1, [r7, #0]
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	60fb      	str	r3, [r7, #12]
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801cea8:	f7e3 fa32 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801ceac:	4603      	mov	r3, r0
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d006      	beq.n	801cec0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	015b      	lsls	r3, r3, #5
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f006 f913 	bl	80230e2 <_Znwj>
 801cebc:	4603      	mov	r3, r0
 801cebe:	e006      	b.n	801cece <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801cec0:	2200      	movs	r2, #0
 801cec2:	68b9      	ldr	r1, [r7, #8]
 801cec4:	68f8      	ldr	r0, [r7, #12]
 801cec6:	f000 f9ea 	bl	801d29e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>
 801ceca:	4603      	mov	r3, r0
 801cecc:	bf00      	nop
      { return __a.allocate(__n); }
 801cece:	4618      	mov	r0, r3
 801ced0:	3710      	adds	r7, #16
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd80      	pop	{r7, pc}

0801ced6 <_ZNSt5tupleIJRKhEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 801ced6:	b580      	push	{r7, lr}
 801ced8:	b082      	sub	sp, #8
 801ceda:	af00      	add	r7, sp, #0
 801cedc:	6078      	str	r0, [r7, #4]
 801cede:	6039      	str	r1, [r7, #0]
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	4611      	mov	r1, r2
 801cee6:	4618      	mov	r0, r3
 801cee8:	f000 f8fe 	bl	801d0e8 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	4618      	mov	r0, r3
 801cef0:	3708      	adds	r7, #8
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}

0801cef6 <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801cef6:	b5b0      	push	{r4, r5, r7, lr}
 801cef8:	b088      	sub	sp, #32
 801cefa:	af00      	add	r7, sp, #0
 801cefc:	60f8      	str	r0, [r7, #12]
 801cefe:	60b9      	str	r1, [r7, #8]
 801cf00:	607a      	str	r2, [r7, #4]
 801cf02:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801cf04:	68b8      	ldr	r0, [r7, #8]
 801cf06:	f7ff f979 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801cf0a:	6878      	ldr	r0, [r7, #4]
 801cf0c:	f7ff f981 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801cf10:	4602      	mov	r2, r0
 801cf12:	f107 0318 	add.w	r3, r7, #24
 801cf16:	4611      	mov	r1, r2
 801cf18:	4618      	mov	r0, r3
 801cf1a:	f7ff ffdc 	bl	801ced6 <_ZNSt5tupleIJRKhEEC1EOS2_>
 801cf1e:	f107 0418 	add.w	r4, r7, #24
 801cf22:	6838      	ldr	r0, [r7, #0]
 801cf24:	f7ff f980 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	4619      	mov	r1, r3
 801cf2c:	2010      	movs	r0, #16
 801cf2e:	f7e3 fa25 	bl	800037c <_ZnwjPv>
 801cf32:	4605      	mov	r5, r0
 801cf34:	7f3b      	ldrb	r3, [r7, #28]
 801cf36:	4622      	mov	r2, r4
 801cf38:	7d39      	ldrb	r1, [r7, #20]
 801cf3a:	4628      	mov	r0, r5
 801cf3c:	f000 f90b 	bl	801d156 <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 801cf40:	462b      	mov	r3, r5
 801cf42:	4618      	mov	r0, r3
 801cf44:	3720      	adds	r7, #32
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bdb0      	pop	{r4, r5, r7, pc}

0801cf4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801cf4a:	b5b0      	push	{r4, r5, r7, lr}
 801cf4c:	b084      	sub	sp, #16
 801cf4e:	af00      	add	r7, sp, #0
 801cf50:	60f8      	str	r0, [r7, #12]
 801cf52:	60b9      	str	r1, [r7, #8]
 801cf54:	607a      	str	r2, [r7, #4]
 801cf56:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801cf58:	6878      	ldr	r0, [r7, #4]
 801cf5a:	f7ff f94f 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801cf5e:	4604      	mov	r4, r0
 801cf60:	6838      	ldr	r0, [r7, #0]
 801cf62:	f7ff f956 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801cf66:	4605      	mov	r5, r0
 801cf68:	6a38      	ldr	r0, [r7, #32]
 801cf6a:	f7ff f95d 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	462a      	mov	r2, r5
 801cf72:	4621      	mov	r1, r4
 801cf74:	68b8      	ldr	r0, [r7, #8]
 801cf76:	f7ff ffbe 	bl	801cef6 <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801cf7a:	bf00      	nop
 801cf7c:	3710      	adds	r7, #16
 801cf7e:	46bd      	mov	sp, r7
 801cf80:	bdb0      	pop	{r4, r5, r7, pc}

0801cf82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801cf82:	b580      	push	{r7, lr}
 801cf84:	b084      	sub	sp, #16
 801cf86:	af00      	add	r7, sp, #0
 801cf88:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	68da      	ldr	r2, [r3, #12]
 801cf8e:	f107 030c 	add.w	r3, r7, #12
 801cf92:	4611      	mov	r1, r2
 801cf94:	4618      	mov	r0, r3
 801cf96:	f7ff fae8 	bl	801c56a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	3710      	adds	r7, #16
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	bd80      	pop	{r7, pc}

0801cfa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b084      	sub	sp, #16
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	60f8      	str	r0, [r7, #12]
 801cfac:	60b9      	str	r1, [r7, #8]
 801cfae:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801cfb0:	68b8      	ldr	r0, [r7, #8]
 801cfb2:	f000 f8e4 	bl	801d17e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	681a      	ldr	r2, [r3, #0]
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	601a      	str	r2, [r3, #0]
 801cfbe:	6878      	ldr	r0, [r7, #4]
 801cfc0:	f7eb ff8c 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801cfc4:	4603      	mov	r3, r0
 801cfc6:	681a      	ldr	r2, [r3, #0]
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	605a      	str	r2, [r3, #4]
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	4618      	mov	r0, r3
 801cfd0:	3710      	adds	r7, #16
 801cfd2:	46bd      	mov	sp, r7
 801cfd4:	bd80      	pop	{r7, pc}

0801cfd6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801cfd6:	b580      	push	{r7, lr}
 801cfd8:	b082      	sub	sp, #8
 801cfda:	af00      	add	r7, sp, #0
 801cfdc:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801cfde:	6878      	ldr	r0, [r7, #4]
 801cfe0:	f000 f8d8 	bl	801d194 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	3708      	adds	r7, #8
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}

0801cfee <_ZNSt5tupleIJRK3PinEEC1EOS3_>:
 801cfee:	b580      	push	{r7, lr}
 801cff0:	b082      	sub	sp, #8
 801cff2:	af00      	add	r7, sp, #0
 801cff4:	6078      	str	r0, [r7, #4]
 801cff6:	6039      	str	r1, [r7, #0]
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	683a      	ldr	r2, [r7, #0]
 801cffc:	4611      	mov	r1, r2
 801cffe:	4618      	mov	r0, r3
 801d000:	f000 f8d3 	bl	801d1aa <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	4618      	mov	r0, r3
 801d008:	3708      	adds	r7, #8
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bd80      	pop	{r7, pc}

0801d00e <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801d00e:	b5b0      	push	{r4, r5, r7, lr}
 801d010:	b088      	sub	sp, #32
 801d012:	af00      	add	r7, sp, #0
 801d014:	60f8      	str	r0, [r7, #12]
 801d016:	60b9      	str	r1, [r7, #8]
 801d018:	607a      	str	r2, [r7, #4]
 801d01a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801d01c:	68b8      	ldr	r0, [r7, #8]
 801d01e:	f7ff f8ed 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d022:	6878      	ldr	r0, [r7, #4]
 801d024:	f7ff fae1 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801d028:	4602      	mov	r2, r0
 801d02a:	f107 0318 	add.w	r3, r7, #24
 801d02e:	4611      	mov	r1, r2
 801d030:	4618      	mov	r0, r3
 801d032:	f7ff ffdc 	bl	801cfee <_ZNSt5tupleIJRK3PinEEC1EOS3_>
 801d036:	f107 0418 	add.w	r4, r7, #24
 801d03a:	6838      	ldr	r0, [r7, #0]
 801d03c:	f7ff f8f4 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	4619      	mov	r1, r3
 801d044:	2014      	movs	r0, #20
 801d046:	f7e3 f999 	bl	800037c <_ZnwjPv>
 801d04a:	4605      	mov	r5, r0
 801d04c:	7f3b      	ldrb	r3, [r7, #28]
 801d04e:	4622      	mov	r2, r4
 801d050:	7d39      	ldrb	r1, [r7, #20]
 801d052:	4628      	mov	r0, r5
 801d054:	f000 f8e2 	bl	801d21c <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 801d058:	462b      	mov	r3, r5
 801d05a:	4618      	mov	r0, r3
 801d05c:	3720      	adds	r7, #32
 801d05e:	46bd      	mov	sp, r7
 801d060:	bdb0      	pop	{r4, r5, r7, pc}

0801d062 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801d062:	b5b0      	push	{r4, r5, r7, lr}
 801d064:	b084      	sub	sp, #16
 801d066:	af00      	add	r7, sp, #0
 801d068:	60f8      	str	r0, [r7, #12]
 801d06a:	60b9      	str	r1, [r7, #8]
 801d06c:	607a      	str	r2, [r7, #4]
 801d06e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f7ff f8c3 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d076:	4604      	mov	r4, r0
 801d078:	6838      	ldr	r0, [r7, #0]
 801d07a:	f7ff fab6 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801d07e:	4605      	mov	r5, r0
 801d080:	6a38      	ldr	r0, [r7, #32]
 801d082:	f7ff f8d1 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d086:	4603      	mov	r3, r0
 801d088:	462a      	mov	r2, r5
 801d08a:	4621      	mov	r1, r4
 801d08c:	68b8      	ldr	r0, [r7, #8]
 801d08e:	f7ff ffbe 	bl	801d00e <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 801d092:	bf00      	nop
 801d094:	3710      	adds	r7, #16
 801d096:	46bd      	mov	sp, r7
 801d098:	bdb0      	pop	{r4, r5, r7, pc}

0801d09a <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801d09a:	b5b0      	push	{r4, r5, r7, lr}
 801d09c:	b084      	sub	sp, #16
 801d09e:	af00      	add	r7, sp, #0
 801d0a0:	60f8      	str	r0, [r7, #12]
 801d0a2:	60b9      	str	r1, [r7, #8]
 801d0a4:	607a      	str	r2, [r7, #4]
 801d0a6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 801d0a8:	68f8      	ldr	r0, [r7, #12]
 801d0aa:	f7e8 fa1a 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 801d0ae:	4604      	mov	r4, r0
 801d0b0:	68b8      	ldr	r0, [r7, #8]
 801d0b2:	f7e8 fa16 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 801d0b6:	4605      	mov	r5, r0
 801d0b8:	6878      	ldr	r0, [r7, #4]
 801d0ba:	f7e8 fa12 	bl	80054e2 <_ZSt12__niter_baseIPmET_S1_>
 801d0be:	4602      	mov	r2, r0
 801d0c0:	683b      	ldr	r3, [r7, #0]
 801d0c2:	4629      	mov	r1, r5
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	f000 f8bd 	bl	801d244 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 801d0ca:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	3710      	adds	r7, #16
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bdb0      	pop	{r4, r5, r7, pc}

0801d0d4 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801d0d4:	b480      	push	{r7}
 801d0d6:	b083      	sub	sp, #12
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
    }
 801d0dc:	bf00      	nop
 801d0de:	370c      	adds	r7, #12
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e6:	4770      	bx	lr

0801d0e8 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801d0e8:	b590      	push	{r4, r7, lr}
 801d0ea:	b083      	sub	sp, #12
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
 801d0f0:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801d0f2:	687c      	ldr	r4, [r7, #4]
 801d0f4:	6838      	ldr	r0, [r7, #0]
 801d0f6:	f000 f8f1 	bl	801d2dc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f000 f8fa 	bl	801d2f6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801d102:	4603      	mov	r3, r0
 801d104:	4619      	mov	r1, r3
 801d106:	4620      	mov	r0, r4
 801d108:	f7ff fc99 	bl	801ca3e <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	4618      	mov	r0, r3
 801d110:	370c      	adds	r7, #12
 801d112:	46bd      	mov	sp, r7
 801d114:	bd90      	pop	{r4, r7, pc}

0801d116 <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 801d116:	b580      	push	{r7, lr}
 801d118:	b084      	sub	sp, #16
 801d11a:	af00      	add	r7, sp, #0
 801d11c:	60f8      	str	r0, [r7, #12]
 801d11e:	60b9      	str	r1, [r7, #8]
 801d120:	607a      	str	r2, [r7, #4]
 801d122:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801d124:	68b8      	ldr	r0, [r7, #8]
 801d126:	f000 f8f1 	bl	801d30c <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801d12a:	4603      	mov	r3, r0
 801d12c:	4618      	mov	r0, r3
 801d12e:	f000 f8e2 	bl	801d2f6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801d132:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801d134:	781a      	ldrb	r2, [r3, #0]
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	701a      	strb	r2, [r3, #0]
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	2200      	movs	r2, #0
 801d13e:	605a      	str	r2, [r3, #4]
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	2200      	movs	r2, #0
 801d144:	609a      	str	r2, [r3, #8]
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	2200      	movs	r2, #0
 801d14a:	60da      	str	r2, [r3, #12]
      { }
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	4618      	mov	r0, r3
 801d150:	3710      	adds	r7, #16
 801d152:	46bd      	mov	sp, r7
 801d154:	bd80      	pop	{r7, pc}

0801d156 <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 801d156:	b5b0      	push	{r4, r5, r7, lr}
 801d158:	b086      	sub	sp, #24
 801d15a:	af02      	add	r7, sp, #8
 801d15c:	60f8      	str	r0, [r7, #12]
 801d15e:	7239      	strb	r1, [r7, #8]
 801d160:	607a      	str	r2, [r7, #4]
 801d162:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801d164:	463a      	mov	r2, r7
 801d166:	f88d 4000 	strb.w	r4, [sp]
 801d16a:	462b      	mov	r3, r5
 801d16c:	6879      	ldr	r1, [r7, #4]
 801d16e:	68f8      	ldr	r0, [r7, #12]
 801d170:	f7ff ffd1 	bl	801d116 <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	4618      	mov	r0, r3
 801d178:	3710      	adds	r7, #16
 801d17a:	46bd      	mov	sp, r7
 801d17c:	bdb0      	pop	{r4, r5, r7, pc}

0801d17e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d17e:	b480      	push	{r7}
 801d180:	b083      	sub	sp, #12
 801d182:	af00      	add	r7, sp, #0
 801d184:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	4618      	mov	r0, r3
 801d18a:	370c      	adds	r7, #12
 801d18c:	46bd      	mov	sp, r7
 801d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d192:	4770      	bx	lr

0801d194 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 801d194:	b480      	push	{r7}
 801d196:	b083      	sub	sp, #12
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	4618      	mov	r0, r3
 801d1a0:	370c      	adds	r7, #12
 801d1a2:	46bd      	mov	sp, r7
 801d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1a8:	4770      	bx	lr

0801d1aa <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801d1aa:	b590      	push	{r4, r7, lr}
 801d1ac:	b083      	sub	sp, #12
 801d1ae:	af00      	add	r7, sp, #0
 801d1b0:	6078      	str	r0, [r7, #4]
 801d1b2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801d1b4:	687c      	ldr	r4, [r7, #4]
 801d1b6:	6838      	ldr	r0, [r7, #0]
 801d1b8:	f000 f8b5 	bl	801d326 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 801d1bc:	4603      	mov	r3, r0
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f000 f8be 	bl	801d340 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	4619      	mov	r1, r3
 801d1c8:	4620      	mov	r0, r4
 801d1ca:	f7ff fdac 	bl	801cd26 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	370c      	adds	r7, #12
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bd90      	pop	{r4, r7, pc}

0801d1d8 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b084      	sub	sp, #16
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	60f8      	str	r0, [r7, #12]
 801d1e0:	60b9      	str	r1, [r7, #8]
 801d1e2:	607a      	str	r2, [r7, #4]
 801d1e4:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801d1e6:	68b8      	ldr	r0, [r7, #8]
 801d1e8:	f000 f8b5 	bl	801d356 <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 801d1ec:	4603      	mov	r3, r0
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f000 f8a6 	bl	801d340 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 801d1f4:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d1fc:	e883 0003 	stmia.w	r3, {r0, r1}
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	2200      	movs	r2, #0
 801d204:	609a      	str	r2, [r3, #8]
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	2200      	movs	r2, #0
 801d20a:	60da      	str	r2, [r3, #12]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	2200      	movs	r2, #0
 801d210:	611a      	str	r2, [r3, #16]
      { }
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	4618      	mov	r0, r3
 801d216:	3710      	adds	r7, #16
 801d218:	46bd      	mov	sp, r7
 801d21a:	bd80      	pop	{r7, pc}

0801d21c <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 801d21c:	b5b0      	push	{r4, r5, r7, lr}
 801d21e:	b086      	sub	sp, #24
 801d220:	af02      	add	r7, sp, #8
 801d222:	60f8      	str	r0, [r7, #12]
 801d224:	7239      	strb	r1, [r7, #8]
 801d226:	607a      	str	r2, [r7, #4]
 801d228:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801d22a:	463a      	mov	r2, r7
 801d22c:	f88d 4000 	strb.w	r4, [sp]
 801d230:	462b      	mov	r3, r5
 801d232:	6879      	ldr	r1, [r7, #4]
 801d234:	68f8      	ldr	r0, [r7, #12]
 801d236:	f7ff ffcf 	bl	801d1d8 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	4618      	mov	r0, r3
 801d23e:	3710      	adds	r7, #16
 801d240:	46bd      	mov	sp, r7
 801d242:	bdb0      	pop	{r4, r5, r7, pc}

0801d244 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801d244:	b580      	push	{r7, lr}
 801d246:	b086      	sub	sp, #24
 801d248:	af00      	add	r7, sp, #0
 801d24a:	60f8      	str	r0, [r7, #12]
 801d24c:	60b9      	str	r1, [r7, #8]
 801d24e:	607a      	str	r2, [r7, #4]
 801d250:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801d252:	68ba      	ldr	r2, [r7, #8]
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	1ad3      	subs	r3, r2, r3
 801d258:	109b      	asrs	r3, r3, #2
 801d25a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801d25c:	697b      	ldr	r3, [r7, #20]
 801d25e:	2b00      	cmp	r3, #0
 801d260:	dd06      	ble.n	801d270 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801d262:	697b      	ldr	r3, [r7, #20]
 801d264:	009b      	lsls	r3, r3, #2
 801d266:	461a      	mov	r2, r3
 801d268:	68f9      	ldr	r1, [r7, #12]
 801d26a:	6878      	ldr	r0, [r7, #4]
 801d26c:	f006 f92e 	bl	80234cc <memmove>
      return __result + __count;
 801d270:	697b      	ldr	r3, [r7, #20]
 801d272:	009b      	lsls	r3, r3, #2
 801d274:	687a      	ldr	r2, [r7, #4]
 801d276:	4413      	add	r3, r2
    }
 801d278:	4618      	mov	r0, r3
 801d27a:	3718      	adds	r7, #24
 801d27c:	46bd      	mov	sp, r7
 801d27e:	bd80      	pop	{r7, pc}

0801d280 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 801d280:	b580      	push	{r7, lr}
 801d282:	b084      	sub	sp, #16
 801d284:	af00      	add	r7, sp, #0
 801d286:	60f8      	str	r0, [r7, #12]
 801d288:	60b9      	str	r1, [r7, #8]
 801d28a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	015b      	lsls	r3, r3, #5
 801d290:	4619      	mov	r1, r3
 801d292:	68b8      	ldr	r0, [r7, #8]
 801d294:	f005 ff23 	bl	80230de <_ZdlPvj>
      }
 801d298:	3710      	adds	r7, #16
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bd80      	pop	{r7, pc}

0801d29e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801d29e:	b580      	push	{r7, lr}
 801d2a0:	b084      	sub	sp, #16
 801d2a2:	af00      	add	r7, sp, #0
 801d2a4:	60f8      	str	r0, [r7, #12]
 801d2a6:	60b9      	str	r1, [r7, #8]
 801d2a8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801d2aa:	68f8      	ldr	r0, [r7, #12]
 801d2ac:	f000 f860 	bl	801d370 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>
 801d2b0:	4602      	mov	r2, r0
 801d2b2:	68bb      	ldr	r3, [r7, #8]
 801d2b4:	4293      	cmp	r3, r2
 801d2b6:	bf8c      	ite	hi
 801d2b8:	2301      	movhi	r3, #1
 801d2ba:	2300      	movls	r3, #0
 801d2bc:	b2db      	uxtb	r3, r3
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d001      	beq.n	801d2c6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801d2c2:	f005 ffd2 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	015b      	lsls	r3, r3, #5
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f005 ff09 	bl	80230e2 <_Znwj>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	bf00      	nop
      }
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	3710      	adds	r7, #16
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	bd80      	pop	{r7, pc}

0801d2dc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b082      	sub	sp, #8
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f000 f84e 	bl	801d388 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	3708      	adds	r7, #8
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bd80      	pop	{r7, pc}

0801d2f6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d2f6:	b480      	push	{r7}
 801d2f8:	b083      	sub	sp, #12
 801d2fa:	af00      	add	r7, sp, #0
 801d2fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	4618      	mov	r0, r3
 801d302:	370c      	adds	r7, #12
 801d304:	46bd      	mov	sp, r7
 801d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d30a:	4770      	bx	lr

0801d30c <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	4618      	mov	r0, r3
 801d318:	f000 f842 	bl	801d3a0 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801d31c:	4603      	mov	r3, r0
 801d31e:	4618      	mov	r0, r3
 801d320:	3708      	adds	r7, #8
 801d322:	46bd      	mov	sp, r7
 801d324:	bd80      	pop	{r7, pc}

0801d326 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801d326:	b580      	push	{r7, lr}
 801d328:	b082      	sub	sp, #8
 801d32a:	af00      	add	r7, sp, #0
 801d32c:	6078      	str	r0, [r7, #4]
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	4618      	mov	r0, r3
 801d332:	f000 f841 	bl	801d3b8 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>
 801d336:	4603      	mov	r3, r0
 801d338:	4618      	mov	r0, r3
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}

0801d340 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d340:	b480      	push	{r7}
 801d342:	b083      	sub	sp, #12
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	4618      	mov	r0, r3
 801d34c:	370c      	adds	r7, #12
 801d34e:	46bd      	mov	sp, r7
 801d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d354:	4770      	bx	lr

0801d356 <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 801d356:	b580      	push	{r7, lr}
 801d358:	b082      	sub	sp, #8
 801d35a:	af00      	add	r7, sp, #0
 801d35c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	4618      	mov	r0, r3
 801d362:	f000 f835 	bl	801d3d0 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801d366:	4603      	mov	r3, r0
 801d368:	4618      	mov	r0, r3
 801d36a:	3708      	adds	r7, #8
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bd80      	pop	{r7, pc}

0801d370 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801d370:	b480      	push	{r7}
 801d372:	b083      	sub	sp, #12
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801d378:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 801d37c:	4618      	mov	r0, r3
 801d37e:	370c      	adds	r7, #12
 801d380:	46bd      	mov	sp, r7
 801d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d386:	4770      	bx	lr

0801d388 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801d388:	b480      	push	{r7}
 801d38a:	b083      	sub	sp, #12
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4618      	mov	r0, r3
 801d396:	370c      	adds	r7, #12
 801d398:	46bd      	mov	sp, r7
 801d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d39e:	4770      	bx	lr

0801d3a0 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b082      	sub	sp, #8
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801d3a8:	6878      	ldr	r0, [r7, #4]
 801d3aa:	f7ff ff97 	bl	801d2dc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	3708      	adds	r7, #8
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	bd80      	pop	{r7, pc}

0801d3b8 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801d3b8:	b480      	push	{r7}
 801d3ba:	b083      	sub	sp, #12
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	370c      	adds	r7, #12
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ce:	4770      	bx	lr

0801d3d0 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b082      	sub	sp, #8
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801d3d8:	6878      	ldr	r0, [r7, #4]
 801d3da:	f7ff ffa4 	bl	801d326 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 801d3de:	4603      	mov	r3, r0
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3708      	adds	r7, #8
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}

0801d3e8 <_Z41__static_initialization_and_destruction_0ii>:
 801d3e8:	b5b0      	push	{r4, r5, r7, lr}
 801d3ea:	b082      	sub	sp, #8
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	6039      	str	r1, [r7, #0]
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	2b01      	cmp	r3, #1
 801d3f6:	d127      	bne.n	801d448 <_Z41__static_initialization_and_destruction_0ii+0x60>
 801d3f8:	683b      	ldr	r3, [r7, #0]
 801d3fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d3fe:	4293      	cmp	r3, r2
 801d400:	d122      	bne.n	801d448 <_Z41__static_initialization_and_destruction_0ii+0x60>
map<uint8_t, ADC::Instance> ADC::active_instances = { };
 801d402:	4b1f      	ldr	r3, [pc, #124]	; (801d480 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801d404:	461a      	mov	r2, r3
 801d406:	2300      	movs	r3, #0
 801d408:	6013      	str	r3, [r2, #0]
 801d40a:	6053      	str	r3, [r2, #4]
 801d40c:	6093      	str	r3, [r2, #8]
 801d40e:	60d3      	str	r3, [r2, #12]
 801d410:	6113      	str	r3, [r2, #16]
 801d412:	6153      	str	r3, [r2, #20]
 801d414:	481a      	ldr	r0, [pc, #104]	; (801d480 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801d416:	f7fd fd42 	bl	801ae9e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
map<Pin, ADC::Instance> ADC::available_instances = { };
 801d41a:	4b1a      	ldr	r3, [pc, #104]	; (801d484 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801d41c:	461a      	mov	r2, r3
 801d41e:	2300      	movs	r3, #0
 801d420:	6013      	str	r3, [r2, #0]
 801d422:	6053      	str	r3, [r2, #4]
 801d424:	6093      	str	r3, [r2, #8]
 801d426:	60d3      	str	r3, [r2, #12]
 801d428:	6113      	str	r3, [r2, #16]
 801d42a:	6153      	str	r3, [r2, #20]
 801d42c:	4815      	ldr	r0, [pc, #84]	; (801d484 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801d42e:	f7fd fd69 	bl	801af04 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>
ADC::Peripheral ADC::peripherals[3];
 801d432:	4b15      	ldr	r3, [pc, #84]	; (801d488 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801d434:	2402      	movs	r4, #2
 801d436:	461d      	mov	r5, r3
 801d438:	2c00      	cmp	r4, #0
 801d43a:	db05      	blt.n	801d448 <_Z41__static_initialization_and_destruction_0ii+0x60>
 801d43c:	4628      	mov	r0, r5
 801d43e:	f7fd fd89 	bl	801af54 <_ZN3ADC10PeripheralC1Ev>
 801d442:	3530      	adds	r5, #48	; 0x30
 801d444:	3c01      	subs	r4, #1
 801d446:	e7f7      	b.n	801d438 <_Z41__static_initialization_and_destruction_0ii+0x50>
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d113      	bne.n	801d476 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d454:	4293      	cmp	r3, r2
 801d456:	d10e      	bne.n	801d476 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 801d458:	4c0c      	ldr	r4, [pc, #48]	; (801d48c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801d45a:	4b0b      	ldr	r3, [pc, #44]	; (801d488 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801d45c:	429c      	cmp	r4, r3
 801d45e:	d004      	beq.n	801d46a <_Z41__static_initialization_and_destruction_0ii+0x82>
 801d460:	3c30      	subs	r4, #48	; 0x30
 801d462:	4620      	mov	r0, r4
 801d464:	f7e3 f8ad 	bl	80005c2 <_ZN3ADC10PeripheralD1Ev>
 801d468:	e7f7      	b.n	801d45a <_Z41__static_initialization_and_destruction_0ii+0x72>
map<Pin, ADC::Instance> ADC::available_instances = { };
 801d46a:	4806      	ldr	r0, [pc, #24]	; (801d484 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801d46c:	f7fd fd57 	bl	801af1e <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = { };
 801d470:	4803      	ldr	r0, [pc, #12]	; (801d480 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801d472:	f7fd fd21 	bl	801aeb8 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
}
 801d476:	bf00      	nop
 801d478:	3708      	adds	r7, #8
 801d47a:	46bd      	mov	sp, r7
 801d47c:	bdb0      	pop	{r4, r5, r7, pc}
 801d47e:	bf00      	nop
 801d480:	2400136c 	.word	0x2400136c
 801d484:	24001384 	.word	0x24001384
 801d488:	240013dc 	.word	0x240013dc
 801d48c:	2400146c 	.word	0x2400146c

0801d490 <_GLOBAL__sub_I__ZN3ADC10id_counterE>:
 801d490:	b580      	push	{r7, lr}
 801d492:	af00      	add	r7, sp, #0
 801d494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d498:	2001      	movs	r0, #1
 801d49a:	f7ff ffa5 	bl	801d3e8 <_Z41__static_initialization_and_destruction_0ii>
 801d49e:	bd80      	pop	{r7, pc}

0801d4a0 <_GLOBAL__sub_D__ZN3ADC10id_counterE>:
 801d4a0:	b580      	push	{r7, lr}
 801d4a2:	af00      	add	r7, sp, #0
 801d4a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d4a8:	2000      	movs	r0, #0
 801d4aa:	f7ff ff9d 	bl	801d3e8 <_Z41__static_initialization_and_destruction_0ii>
 801d4ae:	bd80      	pop	{r7, pc}

0801d4b0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
    _Prime_rehash_policy(float __z = 1.0) noexcept
 801d4b0:	b480      	push	{r7}
 801d4b2:	b083      	sub	sp, #12
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	6078      	str	r0, [r7, #4]
 801d4b8:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	683a      	ldr	r2, [r7, #0]
 801d4c0:	601a      	str	r2, [r3, #0]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	605a      	str	r2, [r3, #4]
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	370c      	adds	r7, #12
 801d4ce:	46bd      	mov	sp, r7
 801d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4d4:	4770      	bx	lr

0801d4d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 801d4d6:	b580      	push	{r7, lr}
 801d4d8:	b082      	sub	sp, #8
 801d4da:	af00      	add	r7, sp, #0
 801d4dc:	6078      	str	r0, [r7, #4]
 801d4de:	6878      	ldr	r0, [r7, #4]
 801d4e0:	f000 f8e1 	bl	801d6a6 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEC1Ev>
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3708      	adds	r7, #8
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd80      	pop	{r7, pc}

0801d4ee <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 801d4ee:	b580      	push	{r7, lr}
 801d4f0:	b082      	sub	sp, #8
 801d4f2:	af00      	add	r7, sp, #0
 801d4f4:	6078      	str	r0, [r7, #4]
 801d4f6:	6878      	ldr	r0, [r7, #4]
 801d4f8:	f000 f8e1 	bl	801d6be <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEED1Ev>
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	4618      	mov	r0, r3
 801d500:	3708      	adds	r7, #8
 801d502:	46bd      	mov	sp, r7
 801d504:	bd80      	pop	{r7, pc}

0801d506 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 801d506:	b580      	push	{r7, lr}
 801d508:	b082      	sub	sp, #8
 801d50a:	af00      	add	r7, sp, #0
 801d50c:	6078      	str	r0, [r7, #4]
 801d50e:	6878      	ldr	r0, [r7, #4]
 801d510:	f7ff ffe1 	bl	801d4d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EEC1Ev>
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	4618      	mov	r0, r3
 801d518:	3708      	adds	r7, #8
 801d51a:	46bd      	mov	sp, r7
 801d51c:	bd80      	pop	{r7, pc}

0801d51e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 801d51e:	b580      	push	{r7, lr}
 801d520:	b082      	sub	sp, #8
 801d522:	af00      	add	r7, sp, #0
 801d524:	6078      	str	r0, [r7, #4]
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	f7ff ffe1 	bl	801d4ee <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EED1Ev>
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	4618      	mov	r0, r3
 801d530:	3708      	adds	r7, #8
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}

0801d536 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 801d536:	b580      	push	{r7, lr}
 801d538:	b082      	sub	sp, #8
 801d53a:	af00      	add	r7, sp, #0
 801d53c:	6078      	str	r0, [r7, #4]
 801d53e:	6878      	ldr	r0, [r7, #4]
 801d540:	f7ff ffe1 	bl	801d506 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEEC1Ev>
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	f103 0218 	add.w	r2, r3, #24
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	601a      	str	r2, [r3, #0]
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	2201      	movs	r2, #1
 801d552:	605a      	str	r2, [r3, #4]
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	3308      	adds	r3, #8
 801d558:	4618      	mov	r0, r3
 801d55a:	f7e2 ff5a 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	2200      	movs	r2, #0
 801d562:	60da      	str	r2, [r3, #12]
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	3310      	adds	r3, #16
 801d568:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d56c:	4618      	mov	r0, r3
 801d56e:	f7ff ff9f 	bl	801d4b0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2200      	movs	r2, #0
 801d576:	619a      	str	r2, [r3, #24]
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	4618      	mov	r0, r3
 801d57c:	3708      	adds	r7, #8
 801d57e:	46bd      	mov	sp, r7
 801d580:	bd80      	pop	{r7, pc}

0801d582 <_ZNSt13unordered_mapIhPN3SPI8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEEC1Ev>:
      unordered_map() = default;
 801d582:	b580      	push	{r7, lr}
 801d584:	b082      	sub	sp, #8
 801d586:	af00      	add	r7, sp, #0
 801d588:	6078      	str	r0, [r7, #4]
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7ff ffd2 	bl	801d536 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	4618      	mov	r0, r3
 801d596:	3708      	adds	r7, #8
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd80      	pop	{r7, pc}

0801d59c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b082      	sub	sp, #8
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
 801d5a4:	6878      	ldr	r0, [r7, #4]
 801d5a6:	f000 f8a7 	bl	801d6f8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEEEC1Ev>
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	3708      	adds	r7, #8
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bd80      	pop	{r7, pc}

0801d5b4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 801d5b4:	b580      	push	{r7, lr}
 801d5b6:	b082      	sub	sp, #8
 801d5b8:	af00      	add	r7, sp, #0
 801d5ba:	6078      	str	r0, [r7, #4]
 801d5bc:	6878      	ldr	r0, [r7, #4]
 801d5be:	f000 f8a7 	bl	801d710 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEEED1Ev>
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	3708      	adds	r7, #8
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}

0801d5cc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b082      	sub	sp, #8
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	6078      	str	r0, [r7, #4]
 801d5d4:	6878      	ldr	r0, [r7, #4]
 801d5d6:	f7ff ffe1 	bl	801d59c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EEC1Ev>
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	4618      	mov	r0, r3
 801d5de:	3708      	adds	r7, #8
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	bd80      	pop	{r7, pc}

0801d5e4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b082      	sub	sp, #8
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	6078      	str	r0, [r7, #4]
 801d5ec:	6878      	ldr	r0, [r7, #4]
 801d5ee:	f7ff ffe1 	bl	801d5b4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEELb1EED1Ev>
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}

0801d5fc <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b082      	sub	sp, #8
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
 801d604:	6878      	ldr	r0, [r7, #4]
 801d606:	f7ff ffe1 	bl	801d5cc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEEC1Ev>
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	f103 0218 	add.w	r2, r3, #24
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	601a      	str	r2, [r3, #0]
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	2201      	movs	r2, #1
 801d618:	605a      	str	r2, [r3, #4]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	3308      	adds	r3, #8
 801d61e:	4618      	mov	r0, r3
 801d620:	f7e2 fef7 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2200      	movs	r2, #0
 801d628:	60da      	str	r2, [r3, #12]
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	3310      	adds	r3, #16
 801d62e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d632:	4618      	mov	r0, r3
 801d634:	f7ff ff3c 	bl	801d4b0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	2200      	movs	r2, #0
 801d63c:	619a      	str	r2, [r3, #24]
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	4618      	mov	r0, r3
 801d642:	3708      	adds	r7, #8
 801d644:	46bd      	mov	sp, r7
 801d646:	bd80      	pop	{r7, pc}

0801d648 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 801d648:	b580      	push	{r7, lr}
 801d64a:	b082      	sub	sp, #8
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	4618      	mov	r0, r3
 801d654:	f7ff ffd2 	bl	801d5fc <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	4618      	mov	r0, r3
 801d65c:	3708      	adds	r7, #8
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd80      	pop	{r7, pc}

0801d662 <_ZN3SPI8InstanceC1Ev>:
     * @brief Struct which defines all data refering to SPI peripherals. It is
     *        declared private in order to prevent unwanted use. Only 
     *        predefined instances should be used.
     *           
     */
    struct Instance{
 801d662:	b480      	push	{r7}
 801d664:	b083      	sub	sp, #12
 801d666:	af00      	add	r7, sp, #0
 801d668:	6078      	str	r0, [r7, #4]
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801d670:	61da      	str	r2, [r3, #28]
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	2207      	movs	r2, #7
 801d676:	621a      	str	r2, [r3, #32]
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	2200      	movs	r2, #0
 801d67c:	625a      	str	r2, [r3, #36]	; 0x24
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	2200      	movs	r2, #0
 801d682:	629a      	str	r2, [r3, #40]	; 0x28
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	2200      	movs	r2, #0
 801d688:	62da      	str	r2, [r3, #44]	; 0x2c
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	2200      	movs	r2, #0
 801d68e:	631a      	str	r2, [r3, #48]	; 0x30
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	2200      	movs	r2, #0
 801d694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	4618      	mov	r0, r3
 801d69c:	370c      	adds	r7, #12
 801d69e:	46bd      	mov	sp, r7
 801d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a4:	4770      	bx	lr

0801d6a6 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801d6a6:	b580      	push	{r7, lr}
 801d6a8:	b082      	sub	sp, #8
 801d6aa:	af00      	add	r7, sp, #0
 801d6ac:	6078      	str	r0, [r7, #4]
 801d6ae:	6878      	ldr	r0, [r7, #4]
 801d6b0:	f000 f84b 	bl	801d74a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEC1Ev>
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	3708      	adds	r7, #8
 801d6ba:	46bd      	mov	sp, r7
 801d6bc:	bd80      	pop	{r7, pc}

0801d6be <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801d6be:	b480      	push	{r7}
 801d6c0:	b083      	sub	sp, #12
 801d6c2:	af00      	add	r7, sp, #0
 801d6c4:	6078      	str	r0, [r7, #4]
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	370c      	adds	r7, #12
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6d2:	4770      	bx	lr

0801d6d4 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b082      	sub	sp, #8
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
      clear();
 801d6dc:	6878      	ldr	r0, [r7, #4]
 801d6de:	f000 f83f 	bl	801d760 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 801d6e2:	6878      	ldr	r0, [r7, #4]
 801d6e4:	f000 f85c 	bl	801d7a0 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 801d6e8:	6878      	ldr	r0, [r7, #4]
 801d6ea:	f7ff ff18 	bl	801d51e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEED1Ev>
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	3708      	adds	r7, #8
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	bd80      	pop	{r7, pc}

0801d6f8 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b082      	sub	sp, #8
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
 801d700:	6878      	ldr	r0, [r7, #4]
 801d702:	f000 f85d 	bl	801d7c0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEEC1Ev>
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	4618      	mov	r0, r3
 801d70a:	3708      	adds	r7, #8
 801d70c:	46bd      	mov	sp, r7
 801d70e:	bd80      	pop	{r7, pc}

0801d710 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS2_8InstanceEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801d710:	b480      	push	{r7}
 801d712:	b083      	sub	sp, #12
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	4618      	mov	r0, r3
 801d71c:	370c      	adds	r7, #12
 801d71e:	46bd      	mov	sp, r7
 801d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d724:	4770      	bx	lr

0801d726 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801d726:	b580      	push	{r7, lr}
 801d728:	b082      	sub	sp, #8
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	6078      	str	r0, [r7, #4]
      clear();
 801d72e:	6878      	ldr	r0, [r7, #4]
 801d730:	f7e7 faeb 	bl	8004d0a <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 801d734:	6878      	ldr	r0, [r7, #4]
 801d736:	f7ed ff3c 	bl	800b5b2 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 801d73a:	6878      	ldr	r0, [r7, #4]
 801d73c:	f7ff ff52 	bl	801d5e4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	4618      	mov	r0, r3
 801d744:	3708      	adds	r7, #8
 801d746:	46bd      	mov	sp, r7
 801d748:	bd80      	pop	{r7, pc}

0801d74a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801d74a:	b480      	push	{r7}
 801d74c:	b083      	sub	sp, #12
 801d74e:	af00      	add	r7, sp, #0
 801d750:	6078      	str	r0, [r7, #4]
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	4618      	mov	r0, r3
 801d756:	370c      	adds	r7, #12
 801d758:	46bd      	mov	sp, r7
 801d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d75e:	4770      	bx	lr

0801d760 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801d760:	b580      	push	{r7, lr}
 801d762:	b082      	sub	sp, #8
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 801d768:	6878      	ldr	r0, [r7, #4]
 801d76a:	f000 f834 	bl	801d7d6 <_ZNKSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 801d76e:	4603      	mov	r3, r0
 801d770:	4619      	mov	r1, r3
 801d772:	6878      	ldr	r0, [r7, #4]
 801d774:	f000 f83b 	bl	801d7ee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	681a      	ldr	r2, [r3, #0]
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	685b      	ldr	r3, [r3, #4]
 801d780:	009b      	lsls	r3, r3, #2
 801d782:	4610      	mov	r0, r2
 801d784:	461a      	mov	r2, r3
 801d786:	2100      	movs	r1, #0
 801d788:	f005 feba 	bl	8023500 <memset>
      _M_element_count = 0;
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	2200      	movs	r2, #0
 801d790:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	2200      	movs	r2, #0
 801d796:	609a      	str	r2, [r3, #8]
    }
 801d798:	bf00      	nop
 801d79a:	3708      	adds	r7, #8
 801d79c:	46bd      	mov	sp, r7
 801d79e:	bd80      	pop	{r7, pc}

0801d7a0 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b082      	sub	sp, #8
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	6819      	ldr	r1, [r3, #0]
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	685b      	ldr	r3, [r3, #4]
 801d7b0:	461a      	mov	r2, r3
 801d7b2:	6878      	ldr	r0, [r7, #4]
 801d7b4:	f000 f832 	bl	801d81c <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>
 801d7b8:	bf00      	nop
 801d7ba:	3708      	adds	r7, #8
 801d7bc:	46bd      	mov	sp, r7
 801d7be:	bd80      	pop	{r7, pc}

0801d7c0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN3SPI10PeripheralEPNS4_8InstanceEELb0EEEEC1Ev>:
 801d7c0:	b480      	push	{r7}
 801d7c2:	b083      	sub	sp, #12
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	6078      	str	r0, [r7, #4]
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	370c      	adds	r7, #12
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d4:	4770      	bx	lr

0801d7d6 <_ZNKSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 801d7d6:	b480      	push	{r7}
 801d7d8:	b083      	sub	sp, #12
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	689b      	ldr	r3, [r3, #8]
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	370c      	adds	r7, #12
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ec:	4770      	bx	lr

0801d7ee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 801d7ee:	b580      	push	{r7, lr}
 801d7f0:	b084      	sub	sp, #16
 801d7f2:	af00      	add	r7, sp, #0
 801d7f4:	6078      	str	r0, [r7, #4]
 801d7f6:	6039      	str	r1, [r7, #0]
      while (__n)
 801d7f8:	683b      	ldr	r3, [r7, #0]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d00a      	beq.n	801d814 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_+0x26>
	  __node_type* __tmp = __n;
 801d7fe:	683b      	ldr	r3, [r7, #0]
 801d800:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 801d802:	6838      	ldr	r0, [r7, #0]
 801d804:	f000 f821 	bl	801d84a <_ZNKSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EE7_M_nextEv>
 801d808:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 801d80a:	68f9      	ldr	r1, [r7, #12]
 801d80c:	6878      	ldr	r0, [r7, #4]
 801d80e:	f000 f836 	bl	801d87e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE18_M_deallocate_nodeEPS8_>
      while (__n)
 801d812:	e7f1      	b.n	801d7f8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_+0xa>
    }
 801d814:	bf00      	nop
 801d816:	3710      	adds	r7, #16
 801d818:	46bd      	mov	sp, r7
 801d81a:	bd80      	pop	{r7, pc}

0801d81c <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b084      	sub	sp, #16
 801d820:	af00      	add	r7, sp, #0
 801d822:	60f8      	str	r0, [r7, #12]
 801d824:	60b9      	str	r1, [r7, #8]
 801d826:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 801d828:	68b9      	ldr	r1, [r7, #8]
 801d82a:	68f8      	ldr	r0, [r7, #12]
 801d82c:	f000 f841 	bl	801d8b2 <_ZNKSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>
 801d830:	4603      	mov	r3, r0
 801d832:	2b00      	cmp	r3, #0
 801d834:	d105      	bne.n	801d842 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 801d836:	687a      	ldr	r2, [r7, #4]
 801d838:	68b9      	ldr	r1, [r7, #8]
 801d83a:	68f8      	ldr	r0, [r7, #12]
 801d83c:	f000 f851 	bl	801d8e2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 801d840:	e000      	b.n	801d844 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x28>
	  return;
 801d842:	bf00      	nop
      }
 801d844:	3710      	adds	r7, #16
 801d846:	46bd      	mov	sp, r7
 801d848:	bd80      	pop	{r7, pc}

0801d84a <_ZNKSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 801d84a:	b480      	push	{r7}
 801d84c:	b083      	sub	sp, #12
 801d84e:	af00      	add	r7, sp, #0
 801d850:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	4618      	mov	r0, r3
 801d858:	370c      	adds	r7, #12
 801d85a:	46bd      	mov	sp, r7
 801d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d860:	4770      	bx	lr

0801d862 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhPN3SPI8InstanceEEE9_M_valptrEv>:
      _M_valptr() noexcept
 801d862:	b580      	push	{r7, lr}
 801d864:	b082      	sub	sp, #8
 801d866:	af00      	add	r7, sp, #0
 801d868:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	3304      	adds	r3, #4
 801d86e:	4618      	mov	r0, r3
 801d870:	f000 f85b 	bl	801d92a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN3SPI8InstanceEEE6_M_ptrEv>
 801d874:	4603      	mov	r3, r0
 801d876:	4618      	mov	r0, r3
 801d878:	3708      	adds	r7, #8
 801d87a:	46bd      	mov	sp, r7
 801d87c:	bd80      	pop	{r7, pc}

0801d87e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE18_M_deallocate_nodeEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 801d87e:	b590      	push	{r4, r7, lr}
 801d880:	b083      	sub	sp, #12
 801d882:	af00      	add	r7, sp, #0
 801d884:	6078      	str	r0, [r7, #4]
 801d886:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 801d888:	6878      	ldr	r0, [r7, #4]
 801d88a:	f000 f85a 	bl	801d942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801d88e:	4604      	mov	r4, r0
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	4618      	mov	r0, r3
 801d894:	f7ff ffe5 	bl	801d862 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhPN3SPI8InstanceEEE9_M_valptrEv>
 801d898:	4603      	mov	r3, r0
 801d89a:	4619      	mov	r1, r3
 801d89c:	4620      	mov	r0, r4
 801d89e:	f000 f85c 	bl	801d95a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE7destroyIS7_EEvRS9_PT_>
      _M_deallocate_node_ptr(__n);
 801d8a2:	6839      	ldr	r1, [r7, #0]
 801d8a4:	6878      	ldr	r0, [r7, #4]
 801d8a6:	f000 f870 	bl	801d98a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS8_>
    }
 801d8aa:	bf00      	nop
 801d8ac:	370c      	adds	r7, #12
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bd90      	pop	{r4, r7, pc}

0801d8b2 <_ZNKSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 801d8b2:	b480      	push	{r7}
 801d8b4:	b083      	sub	sp, #12
 801d8b6:	af00      	add	r7, sp, #0
 801d8b8:	6078      	str	r0, [r7, #4]
 801d8ba:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	3318      	adds	r3, #24
 801d8c0:	683a      	ldr	r2, [r7, #0]
 801d8c2:	429a      	cmp	r2, r3
 801d8c4:	bf0c      	ite	eq
 801d8c6:	2301      	moveq	r3, #1
 801d8c8:	2300      	movne	r3, #0
 801d8ca:	b2db      	uxtb	r3, r3
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	bf14      	ite	ne
 801d8d0:	2301      	movne	r3, #1
 801d8d2:	2300      	moveq	r3, #0
 801d8d4:	b2db      	uxtb	r3, r3
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	370c      	adds	r7, #12
 801d8da:	46bd      	mov	sp, r7
 801d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8e0:	4770      	bx	lr

0801d8e2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 801d8e2:	b580      	push	{r7, lr}
 801d8e4:	b086      	sub	sp, #24
 801d8e6:	af00      	add	r7, sp, #0
 801d8e8:	60f8      	str	r0, [r7, #12]
 801d8ea:	60b9      	str	r1, [r7, #8]
 801d8ec:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 801d8ee:	68b8      	ldr	r0, [r7, #8]
 801d8f0:	f7ee fb4b 	bl	800bf8a <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 801d8f4:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 801d8f6:	68f8      	ldr	r0, [r7, #12]
 801d8f8:	f000 f823 	bl	801d942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	f107 0310 	add.w	r3, r7, #16
 801d902:	4611      	mov	r1, r2
 801d904:	4618      	mov	r0, r3
 801d906:	f000 f856 	bl	801d9b6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 801d90a:	f107 0310 	add.w	r3, r7, #16
 801d90e:	687a      	ldr	r2, [r7, #4]
 801d910:	6979      	ldr	r1, [r7, #20]
 801d912:	4618      	mov	r0, r3
 801d914:	f7ee fcaa 	bl	800c26c <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 801d918:	f107 0310 	add.w	r3, r7, #16
 801d91c:	4618      	mov	r0, r3
 801d91e:	f7ee fb06 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 801d922:	bf00      	nop
 801d924:	3718      	adds	r7, #24
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}

0801d92a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN3SPI8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801d92a:	b580      	push	{r7, lr}
 801d92c:	b082      	sub	sp, #8
 801d92e:	af00      	add	r7, sp, #0
 801d930:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801d932:	6878      	ldr	r0, [r7, #4]
 801d934:	f000 f86b 	bl	801da0e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN3SPI8InstanceEEE7_M_addrEv>
 801d938:	4603      	mov	r3, r0
 801d93a:	4618      	mov	r0, r3
 801d93c:	3708      	adds	r7, #8
 801d93e:	46bd      	mov	sp, r7
 801d940:	bd80      	pop	{r7, pc}

0801d942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 801d942:	b580      	push	{r7, lr}
 801d944:	b082      	sub	sp, #8
 801d946:	af00      	add	r7, sp, #0
 801d948:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 801d94a:	6878      	ldr	r0, [r7, #4]
 801d94c:	f000 f86a 	bl	801da24 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EE6_M_getEv>
 801d950:	4603      	mov	r3, r0
 801d952:	4618      	mov	r0, r3
 801d954:	3708      	adds	r7, #8
 801d956:	46bd      	mov	sp, r7
 801d958:	bd80      	pop	{r7, pc}

0801d95a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801d95a:	b580      	push	{r7, lr}
 801d95c:	b082      	sub	sp, #8
 801d95e:	af00      	add	r7, sp, #0
 801d960:	6078      	str	r0, [r7, #4]
 801d962:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801d964:	6838      	ldr	r0, [r7, #0]
 801d966:	f000 f868 	bl	801da3a <_ZSt10destroy_atISt4pairIKhPN3SPI8InstanceEEEvPT_>
	}
 801d96a:	bf00      	nop
 801d96c:	3708      	adds	r7, #8
 801d96e:	46bd      	mov	sp, r7
 801d970:	bd80      	pop	{r7, pc}

0801d972 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEE10pointer_toERS8_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 801d972:	b580      	push	{r7, lr}
 801d974:	b082      	sub	sp, #8
 801d976:	af00      	add	r7, sp, #0
 801d978:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 801d97a:	6878      	ldr	r0, [r7, #4]
 801d97c:	f000 f867 	bl	801da4e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEPT_RS9_>
 801d980:	4603      	mov	r3, r0
 801d982:	4618      	mov	r0, r3
 801d984:	3708      	adds	r7, #8
 801d986:	46bd      	mov	sp, r7
 801d988:	bd80      	pop	{r7, pc}

0801d98a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 801d98a:	b580      	push	{r7, lr}
 801d98c:	b084      	sub	sp, #16
 801d98e:	af00      	add	r7, sp, #0
 801d990:	6078      	str	r0, [r7, #4]
 801d992:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 801d994:	6838      	ldr	r0, [r7, #0]
 801d996:	f7ff ffec 	bl	801d972 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEE10pointer_toERS8_>
 801d99a:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 801d99c:	6878      	ldr	r0, [r7, #4]
 801d99e:	f7ff ffd0 	bl	801d942 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	2201      	movs	r2, #1
 801d9a6:	68f9      	ldr	r1, [r7, #12]
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f000 f811 	bl	801d9d0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE10deallocateERS9_PS8_j>
    }
 801d9ae:	bf00      	nop
 801d9b0:	3710      	adds	r7, #16
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}

0801d9b6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801d9b6:	b580      	push	{r7, lr}
 801d9b8:	b082      	sub	sp, #8
 801d9ba:	af00      	add	r7, sp, #0
 801d9bc:	6078      	str	r0, [r7, #4]
 801d9be:	6039      	str	r1, [r7, #0]
 801d9c0:	6878      	ldr	r0, [r7, #4]
 801d9c2:	f7ee fc1d 	bl	800c200 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	3708      	adds	r7, #8
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	bd80      	pop	{r7, pc}

0801d9d0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	b088      	sub	sp, #32
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	60f8      	str	r0, [r7, #12]
 801d9d8:	60b9      	str	r1, [r7, #8]
 801d9da:	607a      	str	r2, [r7, #4]
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	61fb      	str	r3, [r7, #28]
 801d9e0:	68bb      	ldr	r3, [r7, #8]
 801d9e2:	61bb      	str	r3, [r7, #24]
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801d9e8:	f7e2 fc92 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801d9ec:	4603      	mov	r3, r0
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d003      	beq.n	801d9fa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 801d9f2:	69b8      	ldr	r0, [r7, #24]
 801d9f4:	f005 fb71 	bl	80230da <_ZdlPv>
	    return;
 801d9f8:	e005      	b.n	801da06 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801d9fa:	697a      	ldr	r2, [r7, #20]
 801d9fc:	69b9      	ldr	r1, [r7, #24]
 801d9fe:	69f8      	ldr	r0, [r7, #28]
 801da00:	f000 f83c 	bl	801da7c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 801da04:	bf00      	nop
 801da06:	bf00      	nop
 801da08:	3720      	adds	r7, #32
 801da0a:	46bd      	mov	sp, r7
 801da0c:	bd80      	pop	{r7, pc}

0801da0e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN3SPI8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801da0e:	b480      	push	{r7}
 801da10:	b083      	sub	sp, #12
 801da12:	af00      	add	r7, sp, #0
 801da14:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801da16:	687b      	ldr	r3, [r7, #4]
      }
 801da18:	4618      	mov	r0, r3
 801da1a:	370c      	adds	r7, #12
 801da1c:	46bd      	mov	sp, r7
 801da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da22:	4770      	bx	lr

0801da24 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 801da24:	b480      	push	{r7}
 801da26:	b083      	sub	sp, #12
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	4618      	mov	r0, r3
 801da30:	370c      	adds	r7, #12
 801da32:	46bd      	mov	sp, r7
 801da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da38:	4770      	bx	lr

0801da3a <_ZSt10destroy_atISt4pairIKhPN3SPI8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801da3a:	b480      	push	{r7}
 801da3c:	b083      	sub	sp, #12
 801da3e:	af00      	add	r7, sp, #0
 801da40:	6078      	str	r0, [r7, #4]
    }
 801da42:	bf00      	nop
 801da44:	370c      	adds	r7, #12
 801da46:	46bd      	mov	sp, r7
 801da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da4c:	4770      	bx	lr

0801da4e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEPT_RS9_>:
    addressof(_Tp& __r) noexcept
 801da4e:	b580      	push	{r7, lr}
 801da50:	b082      	sub	sp, #8
 801da52:	af00      	add	r7, sp, #0
 801da54:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 801da56:	6878      	ldr	r0, [r7, #4]
 801da58:	f000 f805 	bl	801da66 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEPT_RS9_>
 801da5c:	4603      	mov	r3, r0
 801da5e:	4618      	mov	r0, r3
 801da60:	3708      	adds	r7, #8
 801da62:	46bd      	mov	sp, r7
 801da64:	bd80      	pop	{r7, pc}

0801da66 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801da66:	b480      	push	{r7}
 801da68:	b083      	sub	sp, #12
 801da6a:	af00      	add	r7, sp, #0
 801da6c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	4618      	mov	r0, r3
 801da72:	370c      	adds	r7, #12
 801da74:	46bd      	mov	sp, r7
 801da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da7a:	4770      	bx	lr

0801da7c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN3SPI8InstanceEELb0EEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b084      	sub	sp, #16
 801da80:	af00      	add	r7, sp, #0
 801da82:	60f8      	str	r0, [r7, #12]
 801da84:	60b9      	str	r1, [r7, #8]
 801da86:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801da88:	687a      	ldr	r2, [r7, #4]
 801da8a:	4613      	mov	r3, r2
 801da8c:	005b      	lsls	r3, r3, #1
 801da8e:	4413      	add	r3, r2
 801da90:	009b      	lsls	r3, r3, #2
 801da92:	4619      	mov	r1, r3
 801da94:	68b8      	ldr	r0, [r7, #8]
 801da96:	f005 fb22 	bl	80230de <_ZdlPvj>
      }
 801da9a:	3710      	adds	r7, #16
 801da9c:	46bd      	mov	sp, r7
 801da9e:	bd80      	pop	{r7, pc}

0801daa0 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
    class unordered_map
 801daa0:	b580      	push	{r7, lr}
 801daa2:	b082      	sub	sp, #8
 801daa4:	af00      	add	r7, sp, #0
 801daa6:	6078      	str	r0, [r7, #4]
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	4618      	mov	r0, r3
 801daac:	f7ff fe3b 	bl	801d726 <_ZNSt10_HashtableIN3SPI10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	4618      	mov	r0, r3
 801dab4:	3708      	adds	r7, #8
 801dab6:	46bd      	mov	sp, r7
 801dab8:	bd80      	pop	{r7, pc}

0801daba <_ZNSt13unordered_mapIhPN3SPI8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEED1Ev>:
 801daba:	b580      	push	{r7, lr}
 801dabc:	b082      	sub	sp, #8
 801dabe:	af00      	add	r7, sp, #0
 801dac0:	6078      	str	r0, [r7, #4]
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	4618      	mov	r0, r3
 801dac6:	f7ff fe05 	bl	801d6d4 <_ZNSt10_HashtableIhSt4pairIKhPN3SPI8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	4618      	mov	r0, r3
 801dace:	3708      	adds	r7, #8
 801dad0:	46bd      	mov	sp, r7
 801dad2:	bd80      	pop	{r7, pc}

0801dad4 <_Z41__static_initialization_and_destruction_0ii>:
	HAL_GPIO_WritePin(spi->SS->port, spi->SS->gpio_pin, (GPIO_PinState)PinState::ON);
}

void SPI::turn_off_chip_select(SPI::Instance* spi) {
	HAL_GPIO_WritePin(spi->SS->port, spi->SS->gpio_pin, (GPIO_PinState)PinState::OFF);
}
 801dad4:	b580      	push	{r7, lr}
 801dad6:	b082      	sub	sp, #8
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
 801dadc:	6039      	str	r1, [r7, #0]
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	2b01      	cmp	r3, #1
 801dae2:	d11c      	bne.n	801db1e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 801dae4:	683b      	ldr	r3, [r7, #0]
 801dae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801daea:	4293      	cmp	r3, r2
 801daec:	d117      	bne.n	801db1e <_Z41__static_initialization_and_destruction_0ii+0x4a>
unordered_map<uint8_t, SPI::Instance* > SPI::registered_spi;
 801daee:	4815      	ldr	r0, [pc, #84]	; (801db44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801daf0:	f7ff fd47 	bl	801d582 <_ZNSt13unordered_mapIhPN3SPI8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEEC1Ev>
unordered_map<SPI::Peripheral, SPI::Instance*> SPI::available_spi;
 801daf4:	4814      	ldr	r0, [pc, #80]	; (801db48 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801daf6:	f7ff fda7 	bl	801d648 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
SPI::Instance SPI::instance1;
 801dafa:	4814      	ldr	r0, [pc, #80]	; (801db4c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801dafc:	f7ff fdb1 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
SPI::Instance SPI::instance2;
 801db00:	4813      	ldr	r0, [pc, #76]	; (801db50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801db02:	f7ff fdae 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
SPI::Instance SPI::instance3;
 801db06:	4813      	ldr	r0, [pc, #76]	; (801db54 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801db08:	f7ff fdab 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
SPI::Instance SPI::instance4;
 801db0c:	4812      	ldr	r0, [pc, #72]	; (801db58 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801db0e:	f7ff fda8 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
SPI::Instance SPI::instance5;
 801db12:	4812      	ldr	r0, [pc, #72]	; (801db5c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801db14:	f7ff fda5 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
SPI::Instance SPI::instance6;
 801db18:	4811      	ldr	r0, [pc, #68]	; (801db60 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801db1a:	f7ff fda2 	bl	801d662 <_ZN3SPI8InstanceC1Ev>
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	2b00      	cmp	r3, #0
 801db22:	d10a      	bne.n	801db3a <_Z41__static_initialization_and_destruction_0ii+0x66>
 801db24:	683b      	ldr	r3, [r7, #0]
 801db26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db2a:	4293      	cmp	r3, r2
 801db2c:	d105      	bne.n	801db3a <_Z41__static_initialization_and_destruction_0ii+0x66>
unordered_map<SPI::Peripheral, SPI::Instance*> SPI::available_spi;
 801db2e:	4806      	ldr	r0, [pc, #24]	; (801db48 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801db30:	f7ff ffb6 	bl	801daa0 <_ZNSt13unordered_mapIN3SPI10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
unordered_map<uint8_t, SPI::Instance* > SPI::registered_spi;
 801db34:	4803      	ldr	r0, [pc, #12]	; (801db44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801db36:	f7ff ffc0 	bl	801daba <_ZNSt13unordered_mapIhPN3SPI8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEED1Ev>
}
 801db3a:	bf00      	nop
 801db3c:	3708      	adds	r7, #8
 801db3e:	46bd      	mov	sp, r7
 801db40:	bd80      	pop	{r7, pc}
 801db42:	bf00      	nop
 801db44:	2400146c 	.word	0x2400146c
 801db48:	24001488 	.word	0x24001488
 801db4c:	240014a8 	.word	0x240014a8
 801db50:	240014e0 	.word	0x240014e0
 801db54:	24001518 	.word	0x24001518
 801db58:	24001550 	.word	0x24001550
 801db5c:	24001588 	.word	0x24001588
 801db60:	240015c0 	.word	0x240015c0

0801db64 <_GLOBAL__sub_I__ZN3SPI10id_counterE>:
 801db64:	b580      	push	{r7, lr}
 801db66:	af00      	add	r7, sp, #0
 801db68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801db6c:	2001      	movs	r0, #1
 801db6e:	f7ff ffb1 	bl	801dad4 <_Z41__static_initialization_and_destruction_0ii>
 801db72:	bd80      	pop	{r7, pc}

0801db74 <_GLOBAL__sub_D__ZN3SPI10id_counterE>:
 801db74:	b580      	push	{r7, lr}
 801db76:	af00      	add	r7, sp, #0
 801db78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801db7c:	2000      	movs	r0, #0
 801db7e:	f7ff ffa9 	bl	801dad4 <_Z41__static_initialization_and_destruction_0ii>
 801db82:	bd80      	pop	{r7, pc}

0801db84 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 801db84:	b580      	push	{r7, lr}
 801db86:	b082      	sub	sp, #8
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	6878      	ldr	r0, [r7, #4]
 801db8e:	f000 f8d9 	bl	801dd44 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEC1Ev>
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	4618      	mov	r0, r3
 801db96:	3708      	adds	r7, #8
 801db98:	46bd      	mov	sp, r7
 801db9a:	bd80      	pop	{r7, pc}

0801db9c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 801db9c:	b580      	push	{r7, lr}
 801db9e:	b082      	sub	sp, #8
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
 801dba4:	6878      	ldr	r0, [r7, #4]
 801dba6:	f000 f8d9 	bl	801dd5c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEED1Ev>
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	4618      	mov	r0, r3
 801dbae:	3708      	adds	r7, #8
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd80      	pop	{r7, pc}

0801dbb4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b082      	sub	sp, #8
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	6078      	str	r0, [r7, #4]
 801dbbc:	6878      	ldr	r0, [r7, #4]
 801dbbe:	f7ff ffe1 	bl	801db84 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EEC1Ev>
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	3708      	adds	r7, #8
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	bd80      	pop	{r7, pc}

0801dbcc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 801dbcc:	b580      	push	{r7, lr}
 801dbce:	b082      	sub	sp, #8
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	6078      	str	r0, [r7, #4]
 801dbd4:	6878      	ldr	r0, [r7, #4]
 801dbd6:	f7ff ffe1 	bl	801db9c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EED1Ev>
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	4618      	mov	r0, r3
 801dbde:	3708      	adds	r7, #8
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	bd80      	pop	{r7, pc}

0801dbe4 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _Hashtable() = default;
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b082      	sub	sp, #8
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
 801dbec:	6878      	ldr	r0, [r7, #4]
 801dbee:	f7ff ffe1 	bl	801dbb4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEEC1Ev>
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	f103 0218 	add.w	r2, r3, #24
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	601a      	str	r2, [r3, #0]
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2201      	movs	r2, #1
 801dc00:	605a      	str	r2, [r3, #4]
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	3308      	adds	r3, #8
 801dc06:	4618      	mov	r0, r3
 801dc08:	f7e2 fc03 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	2200      	movs	r2, #0
 801dc10:	60da      	str	r2, [r3, #12]
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	3310      	adds	r3, #16
 801dc16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f7ff fc48 	bl	801d4b0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	2200      	movs	r2, #0
 801dc24:	619a      	str	r2, [r3, #24]
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	4618      	mov	r0, r3
 801dc2a:	3708      	adds	r7, #8
 801dc2c:	46bd      	mov	sp, r7
 801dc2e:	bd80      	pop	{r7, pc}

0801dc30 <_ZNSt13unordered_mapIhPN4UART8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEEC1Ev>:
      unordered_map() = default;
 801dc30:	b580      	push	{r7, lr}
 801dc32:	b082      	sub	sp, #8
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	6078      	str	r0, [r7, #4]
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	4618      	mov	r0, r3
 801dc3c:	f7ff ffd2 	bl	801dbe4 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	4618      	mov	r0, r3
 801dc44:	3708      	adds	r7, #8
 801dc46:	46bd      	mov	sp, r7
 801dc48:	bd80      	pop	{r7, pc}

0801dc4a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EEC1Ev>:
      _Hashtable_ebo_helper() = default;
 801dc4a:	b580      	push	{r7, lr}
 801dc4c:	b082      	sub	sp, #8
 801dc4e:	af00      	add	r7, sp, #0
 801dc50:	6078      	str	r0, [r7, #4]
 801dc52:	6878      	ldr	r0, [r7, #4]
 801dc54:	f000 f89f 	bl	801dd96 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEEEC1Ev>
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	3708      	adds	r7, #8
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	bd80      	pop	{r7, pc}

0801dc62 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 801dc62:	b580      	push	{r7, lr}
 801dc64:	b082      	sub	sp, #8
 801dc66:	af00      	add	r7, sp, #0
 801dc68:	6078      	str	r0, [r7, #4]
 801dc6a:	6878      	ldr	r0, [r7, #4]
 801dc6c:	f000 f89f 	bl	801ddae <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEEED1Ev>
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	4618      	mov	r0, r3
 801dc74:	3708      	adds	r7, #8
 801dc76:	46bd      	mov	sp, r7
 801dc78:	bd80      	pop	{r7, pc}

0801dc7a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEC1Ev>:
      _Hashtable_alloc() = default;
 801dc7a:	b580      	push	{r7, lr}
 801dc7c:	b082      	sub	sp, #8
 801dc7e:	af00      	add	r7, sp, #0
 801dc80:	6078      	str	r0, [r7, #4]
 801dc82:	6878      	ldr	r0, [r7, #4]
 801dc84:	f7ff ffe1 	bl	801dc4a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EEC1Ev>
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	3708      	adds	r7, #8
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	bd80      	pop	{r7, pc}

0801dc92 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 801dc92:	b580      	push	{r7, lr}
 801dc94:	b082      	sub	sp, #8
 801dc96:	af00      	add	r7, sp, #0
 801dc98:	6078      	str	r0, [r7, #4]
 801dc9a:	6878      	ldr	r0, [r7, #4]
 801dc9c:	f7ff ffe1 	bl	801dc62 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEELb1EED1Ev>
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	4618      	mov	r0, r3
 801dca4:	3708      	adds	r7, #8
 801dca6:	46bd      	mov	sp, r7
 801dca8:	bd80      	pop	{r7, pc}

0801dcaa <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
 801dcaa:	b580      	push	{r7, lr}
 801dcac:	b082      	sub	sp, #8
 801dcae:	af00      	add	r7, sp, #0
 801dcb0:	6078      	str	r0, [r7, #4]
 801dcb2:	6878      	ldr	r0, [r7, #4]
 801dcb4:	f7ff ffe1 	bl	801dc7a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEEC1Ev>
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	f103 0218 	add.w	r2, r3, #24
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	601a      	str	r2, [r3, #0]
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	2201      	movs	r2, #1
 801dcc6:	605a      	str	r2, [r3, #4]
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	3308      	adds	r3, #8
 801dccc:	4618      	mov	r0, r3
 801dcce:	f7e2 fba0 	bl	8000412 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	60da      	str	r2, [r3, #12]
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	3310      	adds	r3, #16
 801dcdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dce0:	4618      	mov	r0, r3
 801dce2:	f7ff fbe5 	bl	801d4b0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	2200      	movs	r2, #0
 801dcea:	619a      	str	r2, [r3, #24]
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	4618      	mov	r0, r3
 801dcf0:	3708      	adds	r7, #8
 801dcf2:	46bd      	mov	sp, r7
 801dcf4:	bd80      	pop	{r7, pc}

0801dcf6 <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 801dcf6:	b580      	push	{r7, lr}
 801dcf8:	b082      	sub	sp, #8
 801dcfa:	af00      	add	r7, sp, #0
 801dcfc:	6078      	str	r0, [r7, #4]
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	4618      	mov	r0, r3
 801dd02:	f7ff ffd2 	bl	801dcaa <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	4618      	mov	r0, r3
 801dd0a:	3708      	adds	r7, #8
 801dd0c:	46bd      	mov	sp, r7
 801dd0e:	bd80      	pop	{r7, pc}

0801dd10 <_ZN4UART8InstanceC1Ev>:
     * @brief Struct which defines all data referring to UART peripherals. It is
     *        declared private in order to prevent unwanted use. Only 
     *        predefined instances should be used.
     *           
     */
    struct Instance{
 801dd10:	b580      	push	{r7, lr}
 801dd12:	b082      	sub	sp, #8
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7fb f905 	bl	8018f2a <_ZN3PinC1Ev>
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	3308      	adds	r3, #8
 801dd24:	4618      	mov	r0, r3
 801dd26:	f7fb f900 	bl	8018f2a <_ZN3PinC1Ev>
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	f883 2020 	strb.w	r2, [r3, #32]
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	2200      	movs	r2, #0
 801dd36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	3708      	adds	r7, #8
 801dd40:	46bd      	mov	sp, r7
 801dd42:	bd80      	pop	{r7, pc}

0801dd44 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b082      	sub	sp, #8
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
 801dd4c:	6878      	ldr	r0, [r7, #4]
 801dd4e:	f000 f84b 	bl	801dde8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEC1Ev>
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	4618      	mov	r0, r3
 801dd56:	3708      	adds	r7, #8
 801dd58:	46bd      	mov	sp, r7
 801dd5a:	bd80      	pop	{r7, pc}

0801dd5c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801dd5c:	b480      	push	{r7}
 801dd5e:	b083      	sub	sp, #12
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	4618      	mov	r0, r3
 801dd68:	370c      	adds	r7, #12
 801dd6a:	46bd      	mov	sp, r7
 801dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd70:	4770      	bx	lr

0801dd72 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801dd72:	b580      	push	{r7, lr}
 801dd74:	b082      	sub	sp, #8
 801dd76:	af00      	add	r7, sp, #0
 801dd78:	6078      	str	r0, [r7, #4]
      clear();
 801dd7a:	6878      	ldr	r0, [r7, #4]
 801dd7c:	f000 f83f 	bl	801ddfe <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 801dd80:	6878      	ldr	r0, [r7, #4]
 801dd82:	f000 f85c 	bl	801de3e <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 801dd86:	6878      	ldr	r0, [r7, #4]
 801dd88:	f7ff ff20 	bl	801dbcc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEED1Ev>
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	4618      	mov	r0, r3
 801dd90:	3708      	adds	r7, #8
 801dd92:	46bd      	mov	sp, r7
 801dd94:	bd80      	pop	{r7, pc}

0801dd96 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801dd96:	b580      	push	{r7, lr}
 801dd98:	b082      	sub	sp, #8
 801dd9a:	af00      	add	r7, sp, #0
 801dd9c:	6078      	str	r0, [r7, #4]
 801dd9e:	6878      	ldr	r0, [r7, #4]
 801dda0:	f000 f85d 	bl	801de5e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEEC1Ev>
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	4618      	mov	r0, r3
 801dda8:	3708      	adds	r7, #8
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd80      	pop	{r7, pc}

0801ddae <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS2_8InstanceEELb0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801ddae:	b480      	push	{r7}
 801ddb0:	b083      	sub	sp, #12
 801ddb2:	af00      	add	r7, sp, #0
 801ddb4:	6078      	str	r0, [r7, #4]
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	4618      	mov	r0, r3
 801ddba:	370c      	adds	r7, #12
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc2:	4770      	bx	lr

0801ddc4 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b082      	sub	sp, #8
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
      clear();
 801ddcc:	6878      	ldr	r0, [r7, #4]
 801ddce:	f7e7 f841 	bl	8004e54 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 801ddd2:	6878      	ldr	r0, [r7, #4]
 801ddd4:	f7ed fca6 	bl	800b724 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 801ddd8:	6878      	ldr	r0, [r7, #4]
 801ddda:	f7ff ff5a 	bl	801dc92 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS3_8InstanceEELb0EEEEED1Ev>
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	4618      	mov	r0, r3
 801dde2:	3708      	adds	r7, #8
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd80      	pop	{r7, pc}

0801dde8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801dde8:	b480      	push	{r7}
 801ddea:	b083      	sub	sp, #12
 801ddec:	af00      	add	r7, sp, #0
 801ddee:	6078      	str	r0, [r7, #4]
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	370c      	adds	r7, #12
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddfc:	4770      	bx	lr

0801ddfe <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801ddfe:	b580      	push	{r7, lr}
 801de00:	b082      	sub	sp, #8
 801de02:	af00      	add	r7, sp, #0
 801de04:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 801de06:	6878      	ldr	r0, [r7, #4]
 801de08:	f000 f834 	bl	801de74 <_ZNKSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 801de0c:	4603      	mov	r3, r0
 801de0e:	4619      	mov	r1, r3
 801de10:	6878      	ldr	r0, [r7, #4]
 801de12:	f000 f83b 	bl	801de8c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681a      	ldr	r2, [r3, #0]
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	685b      	ldr	r3, [r3, #4]
 801de1e:	009b      	lsls	r3, r3, #2
 801de20:	4610      	mov	r0, r2
 801de22:	461a      	mov	r2, r3
 801de24:	2100      	movs	r1, #0
 801de26:	f005 fb6b 	bl	8023500 <memset>
      _M_element_count = 0;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	2200      	movs	r2, #0
 801de2e:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	2200      	movs	r2, #0
 801de34:	609a      	str	r2, [r3, #8]
    }
 801de36:	bf00      	nop
 801de38:	3708      	adds	r7, #8
 801de3a:	46bd      	mov	sp, r7
 801de3c:	bd80      	pop	{r7, pc}

0801de3e <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 801de3e:	b580      	push	{r7, lr}
 801de40:	b082      	sub	sp, #8
 801de42:	af00      	add	r7, sp, #0
 801de44:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	6819      	ldr	r1, [r3, #0]
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	685b      	ldr	r3, [r3, #4]
 801de4e:	461a      	mov	r2, r3
 801de50:	6878      	ldr	r0, [r7, #4]
 801de52:	f000 f832 	bl	801deba <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>
 801de56:	bf00      	nop
 801de58:	3708      	adds	r7, #8
 801de5a:	46bd      	mov	sp, r7
 801de5c:	bd80      	pop	{r7, pc}

0801de5e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4UART10PeripheralEPNS4_8InstanceEELb0EEEEC1Ev>:
 801de5e:	b480      	push	{r7}
 801de60:	b083      	sub	sp, #12
 801de62:	af00      	add	r7, sp, #0
 801de64:	6078      	str	r0, [r7, #4]
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	4618      	mov	r0, r3
 801de6a:	370c      	adds	r7, #12
 801de6c:	46bd      	mov	sp, r7
 801de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de72:	4770      	bx	lr

0801de74 <_ZNKSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 801de74:	b480      	push	{r7}
 801de76:	b083      	sub	sp, #12
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	689b      	ldr	r3, [r3, #8]
 801de80:	4618      	mov	r0, r3
 801de82:	370c      	adds	r7, #12
 801de84:	46bd      	mov	sp, r7
 801de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8a:	4770      	bx	lr

0801de8c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b084      	sub	sp, #16
 801de90:	af00      	add	r7, sp, #0
 801de92:	6078      	str	r0, [r7, #4]
 801de94:	6039      	str	r1, [r7, #0]
      while (__n)
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d00a      	beq.n	801deb2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_+0x26>
	  __node_type* __tmp = __n;
 801de9c:	683b      	ldr	r3, [r7, #0]
 801de9e:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 801dea0:	6838      	ldr	r0, [r7, #0]
 801dea2:	f000 f821 	bl	801dee8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EE7_M_nextEv>
 801dea6:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 801dea8:	68f9      	ldr	r1, [r7, #12]
 801deaa:	6878      	ldr	r0, [r7, #4]
 801deac:	f000 f836 	bl	801df1c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE18_M_deallocate_nodeEPS8_>
      while (__n)
 801deb0:	e7f1      	b.n	801de96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE19_M_deallocate_nodesEPS8_+0xa>
    }
 801deb2:	bf00      	nop
 801deb4:	3710      	adds	r7, #16
 801deb6:	46bd      	mov	sp, r7
 801deb8:	bd80      	pop	{r7, pc}

0801deba <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __bkt_count)
 801deba:	b580      	push	{r7, lr}
 801debc:	b084      	sub	sp, #16
 801debe:	af00      	add	r7, sp, #0
 801dec0:	60f8      	str	r0, [r7, #12]
 801dec2:	60b9      	str	r1, [r7, #8]
 801dec4:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 801dec6:	68b9      	ldr	r1, [r7, #8]
 801dec8:	68f8      	ldr	r0, [r7, #12]
 801deca:	f000 f841 	bl	801df50 <_ZNKSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>
 801dece:	4603      	mov	r3, r0
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d105      	bne.n	801dee0 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 801ded4:	687a      	ldr	r2, [r7, #4]
 801ded6:	68b9      	ldr	r1, [r7, #8]
 801ded8:	68f8      	ldr	r0, [r7, #12]
 801deda:	f000 f851 	bl	801df80 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 801dede:	e000      	b.n	801dee2 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x28>
	  return;
 801dee0:	bf00      	nop
      }
 801dee2:	3710      	adds	r7, #16
 801dee4:	46bd      	mov	sp, r7
 801dee6:	bd80      	pop	{r7, pc}

0801dee8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 801dee8:	b480      	push	{r7}
 801deea:	b083      	sub	sp, #12
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	4618      	mov	r0, r3
 801def6:	370c      	adds	r7, #12
 801def8:	46bd      	mov	sp, r7
 801defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801defe:	4770      	bx	lr

0801df00 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhPN4UART8InstanceEEE9_M_valptrEv>:
      _M_valptr() noexcept
 801df00:	b580      	push	{r7, lr}
 801df02:	b082      	sub	sp, #8
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	3304      	adds	r3, #4
 801df0c:	4618      	mov	r0, r3
 801df0e:	f000 f85b 	bl	801dfc8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN4UART8InstanceEEE6_M_ptrEv>
 801df12:	4603      	mov	r3, r0
 801df14:	4618      	mov	r0, r3
 801df16:	3708      	adds	r7, #8
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd80      	pop	{r7, pc}

0801df1c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE18_M_deallocate_nodeEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 801df1c:	b590      	push	{r4, r7, lr}
 801df1e:	b083      	sub	sp, #12
 801df20:	af00      	add	r7, sp, #0
 801df22:	6078      	str	r0, [r7, #4]
 801df24:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	f000 f85a 	bl	801dfe0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801df2c:	4604      	mov	r4, r0
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	4618      	mov	r0, r3
 801df32:	f7ff ffe5 	bl	801df00 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKhPN4UART8InstanceEEE9_M_valptrEv>
 801df36:	4603      	mov	r3, r0
 801df38:	4619      	mov	r1, r3
 801df3a:	4620      	mov	r0, r4
 801df3c:	f000 f85c 	bl	801dff8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE7destroyIS7_EEvRS9_PT_>
      _M_deallocate_node_ptr(__n);
 801df40:	6839      	ldr	r1, [r7, #0]
 801df42:	6878      	ldr	r0, [r7, #4]
 801df44:	f000 f870 	bl	801e028 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS8_>
    }
 801df48:	bf00      	nop
 801df4a:	370c      	adds	r7, #12
 801df4c:	46bd      	mov	sp, r7
 801df4e:	bd90      	pop	{r4, r7, pc}

0801df50 <_ZNKSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 801df50:	b480      	push	{r7}
 801df52:	b083      	sub	sp, #12
 801df54:	af00      	add	r7, sp, #0
 801df56:	6078      	str	r0, [r7, #4]
 801df58:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	3318      	adds	r3, #24
 801df5e:	683a      	ldr	r2, [r7, #0]
 801df60:	429a      	cmp	r2, r3
 801df62:	bf0c      	ite	eq
 801df64:	2301      	moveq	r3, #1
 801df66:	2300      	movne	r3, #0
 801df68:	b2db      	uxtb	r3, r3
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	bf14      	ite	ne
 801df6e:	2301      	movne	r3, #1
 801df70:	2300      	moveq	r3, #0
 801df72:	b2db      	uxtb	r3, r3
 801df74:	4618      	mov	r0, r3
 801df76:	370c      	adds	r7, #12
 801df78:	46bd      	mov	sp, r7
 801df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df7e:	4770      	bx	lr

0801df80 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 801df80:	b580      	push	{r7, lr}
 801df82:	b086      	sub	sp, #24
 801df84:	af00      	add	r7, sp, #0
 801df86:	60f8      	str	r0, [r7, #12]
 801df88:	60b9      	str	r1, [r7, #8]
 801df8a:	607a      	str	r2, [r7, #4]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 801df8c:	68b8      	ldr	r0, [r7, #8]
 801df8e:	f7ed fffc 	bl	800bf8a <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 801df92:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 801df94:	68f8      	ldr	r0, [r7, #12]
 801df96:	f000 f823 	bl	801dfe0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801df9a:	4602      	mov	r2, r0
 801df9c:	f107 0310 	add.w	r3, r7, #16
 801dfa0:	4611      	mov	r1, r2
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f000 f856 	bl	801e054 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 801dfa8:	f107 0310 	add.w	r3, r7, #16
 801dfac:	687a      	ldr	r2, [r7, #4]
 801dfae:	6979      	ldr	r1, [r7, #20]
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	f7ee f95b 	bl	800c26c <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 801dfb6:	f107 0310 	add.w	r3, r7, #16
 801dfba:	4618      	mov	r0, r3
 801dfbc:	f7ed ffb7 	bl	800bf2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 801dfc0:	bf00      	nop
 801dfc2:	3718      	adds	r7, #24
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bd80      	pop	{r7, pc}

0801dfc8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN4UART8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801dfc8:	b580      	push	{r7, lr}
 801dfca:	b082      	sub	sp, #8
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801dfd0:	6878      	ldr	r0, [r7, #4]
 801dfd2:	f000 f86b 	bl	801e0ac <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN4UART8InstanceEEE7_M_addrEv>
 801dfd6:	4603      	mov	r3, r0
 801dfd8:	4618      	mov	r0, r3
 801dfda:	3708      	adds	r7, #8
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	bd80      	pop	{r7, pc}

0801dfe0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 801dfe0:	b580      	push	{r7, lr}
 801dfe2:	b082      	sub	sp, #8
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 801dfe8:	6878      	ldr	r0, [r7, #4]
 801dfea:	f000 f86a 	bl	801e0c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EE6_M_getEv>
 801dfee:	4603      	mov	r3, r0
 801dff0:	4618      	mov	r0, r3
 801dff2:	3708      	adds	r7, #8
 801dff4:	46bd      	mov	sp, r7
 801dff6:	bd80      	pop	{r7, pc}

0801dff8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801dff8:	b580      	push	{r7, lr}
 801dffa:	b082      	sub	sp, #8
 801dffc:	af00      	add	r7, sp, #0
 801dffe:	6078      	str	r0, [r7, #4]
 801e000:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801e002:	6838      	ldr	r0, [r7, #0]
 801e004:	f000 f868 	bl	801e0d8 <_ZSt10destroy_atISt4pairIKhPN4UART8InstanceEEEvPT_>
	}
 801e008:	bf00      	nop
 801e00a:	3708      	adds	r7, #8
 801e00c:	46bd      	mov	sp, r7
 801e00e:	bd80      	pop	{r7, pc}

0801e010 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEE10pointer_toERS8_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 801e010:	b580      	push	{r7, lr}
 801e012:	b082      	sub	sp, #8
 801e014:	af00      	add	r7, sp, #0
 801e016:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 801e018:	6878      	ldr	r0, [r7, #4]
 801e01a:	f000 f867 	bl	801e0ec <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEPT_RS9_>
 801e01e:	4603      	mov	r3, r0
 801e020:	4618      	mov	r0, r3
 801e022:	3708      	adds	r7, #8
 801e024:	46bd      	mov	sp, r7
 801e026:	bd80      	pop	{r7, pc}

0801e028 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE22_M_deallocate_node_ptrEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 801e028:	b580      	push	{r7, lr}
 801e02a:	b084      	sub	sp, #16
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
 801e030:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 801e032:	6838      	ldr	r0, [r7, #0]
 801e034:	f7ff ffec 	bl	801e010 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEE10pointer_toERS8_>
 801e038:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 801e03a:	6878      	ldr	r0, [r7, #4]
 801e03c:	f7ff ffd0 	bl	801dfe0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE17_M_node_allocatorEv>
 801e040:	4603      	mov	r3, r0
 801e042:	2201      	movs	r2, #1
 801e044:	68f9      	ldr	r1, [r7, #12]
 801e046:	4618      	mov	r0, r3
 801e048:	f000 f811 	bl	801e06e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE10deallocateERS9_PS8_j>
    }
 801e04c:	bf00      	nop
 801e04e:	3710      	adds	r7, #16
 801e050:	46bd      	mov	sp, r7
 801e052:	bd80      	pop	{r7, pc}

0801e054 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801e054:	b580      	push	{r7, lr}
 801e056:	b082      	sub	sp, #8
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	6039      	str	r1, [r7, #0]
 801e05e:	6878      	ldr	r0, [r7, #4]
 801e060:	f7ee f8ce 	bl	800c200 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	4618      	mov	r0, r3
 801e068:	3708      	adds	r7, #8
 801e06a:	46bd      	mov	sp, r7
 801e06c:	bd80      	pop	{r7, pc}

0801e06e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801e06e:	b580      	push	{r7, lr}
 801e070:	b088      	sub	sp, #32
 801e072:	af00      	add	r7, sp, #0
 801e074:	60f8      	str	r0, [r7, #12]
 801e076:	60b9      	str	r1, [r7, #8]
 801e078:	607a      	str	r2, [r7, #4]
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	61fb      	str	r3, [r7, #28]
 801e07e:	68bb      	ldr	r3, [r7, #8]
 801e080:	61bb      	str	r3, [r7, #24]
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801e086:	f7e2 f943 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801e08a:	4603      	mov	r3, r0
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d003      	beq.n	801e098 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 801e090:	69b8      	ldr	r0, [r7, #24]
 801e092:	f005 f822 	bl	80230da <_ZdlPv>
	    return;
 801e096:	e005      	b.n	801e0a4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801e098:	697a      	ldr	r2, [r7, #20]
 801e09a:	69b9      	ldr	r1, [r7, #24]
 801e09c:	69f8      	ldr	r0, [r7, #28]
 801e09e:	f000 f83c 	bl	801e11a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 801e0a2:	bf00      	nop
 801e0a4:	bf00      	nop
 801e0a6:	3720      	adds	r7, #32
 801e0a8:	46bd      	mov	sp, r7
 801e0aa:	bd80      	pop	{r7, pc}

0801e0ac <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKhPN4UART8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801e0ac:	b480      	push	{r7}
 801e0ae:	b083      	sub	sp, #12
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801e0b4:	687b      	ldr	r3, [r7, #4]
      }
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	370c      	adds	r7, #12
 801e0ba:	46bd      	mov	sp, r7
 801e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0c0:	4770      	bx	lr

0801e0c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 801e0c2:	b480      	push	{r7}
 801e0c4:	b083      	sub	sp, #12
 801e0c6:	af00      	add	r7, sp, #0
 801e0c8:	6078      	str	r0, [r7, #4]
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	4618      	mov	r0, r3
 801e0ce:	370c      	adds	r7, #12
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0d6:	4770      	bx	lr

0801e0d8 <_ZSt10destroy_atISt4pairIKhPN4UART8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801e0d8:	b480      	push	{r7}
 801e0da:	b083      	sub	sp, #12
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	6078      	str	r0, [r7, #4]
    }
 801e0e0:	bf00      	nop
 801e0e2:	370c      	adds	r7, #12
 801e0e4:	46bd      	mov	sp, r7
 801e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ea:	4770      	bx	lr

0801e0ec <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEPT_RS9_>:
    addressof(_Tp& __r) noexcept
 801e0ec:	b580      	push	{r7, lr}
 801e0ee:	b082      	sub	sp, #8
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 801e0f4:	6878      	ldr	r0, [r7, #4]
 801e0f6:	f000 f805 	bl	801e104 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEPT_RS9_>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	3708      	adds	r7, #8
 801e100:	46bd      	mov	sp, r7
 801e102:	bd80      	pop	{r7, pc}

0801e104 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801e104:	b480      	push	{r7}
 801e106:	b083      	sub	sp, #12
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	4618      	mov	r0, r3
 801e110:	370c      	adds	r7, #12
 801e112:	46bd      	mov	sp, r7
 801e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e118:	4770      	bx	lr

0801e11a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKhPN4UART8InstanceEELb0EEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 801e11a:	b580      	push	{r7, lr}
 801e11c:	b084      	sub	sp, #16
 801e11e:	af00      	add	r7, sp, #0
 801e120:	60f8      	str	r0, [r7, #12]
 801e122:	60b9      	str	r1, [r7, #8]
 801e124:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801e126:	687a      	ldr	r2, [r7, #4]
 801e128:	4613      	mov	r3, r2
 801e12a:	005b      	lsls	r3, r3, #1
 801e12c:	4413      	add	r3, r2
 801e12e:	009b      	lsls	r3, r3, #2
 801e130:	4619      	mov	r1, r3
 801e132:	68b8      	ldr	r0, [r7, #8]
 801e134:	f004 ffd3 	bl	80230de <_ZdlPvj>
      }
 801e138:	3710      	adds	r7, #16
 801e13a:	46bd      	mov	sp, r7
 801e13c:	bd80      	pop	{r7, pc}

0801e13e <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
    class unordered_map
 801e13e:	b580      	push	{r7, lr}
 801e140:	b082      	sub	sp, #8
 801e142:	af00      	add	r7, sp, #0
 801e144:	6078      	str	r0, [r7, #4]
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	4618      	mov	r0, r3
 801e14a:	f7ff fe3b 	bl	801ddc4 <_ZNSt10_HashtableIN4UART10PeripheralESt4pairIKS1_PNS0_8InstanceEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	4618      	mov	r0, r3
 801e152:	3708      	adds	r7, #8
 801e154:	46bd      	mov	sp, r7
 801e156:	bd80      	pop	{r7, pc}

0801e158 <_ZNSt13unordered_mapIhPN4UART8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEED1Ev>:
 801e158:	b580      	push	{r7, lr}
 801e15a:	b082      	sub	sp, #8
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	4618      	mov	r0, r3
 801e164:	f7ff fe05 	bl	801dd72 <_ZNSt10_HashtableIhSt4pairIKhPN4UART8InstanceEESaIS5_ENSt8__detail10_Select1stESt8equal_toIhESt4hashIhENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	4618      	mov	r0, r3
 801e16c:	3708      	adds	r7, #8
 801e16e:	46bd      	mov	sp, r7
 801e170:	bd80      	pop	{r7, pc}
	...

0801e174 <_Z41__static_initialization_and_destruction_0ii>:

    return len;
}

#ifdef __cplusplus
}
 801e174:	b580      	push	{r7, lr}
 801e176:	b082      	sub	sp, #8
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
 801e17c:	6039      	str	r1, [r7, #0]
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	2b01      	cmp	r3, #1
 801e182:	d128      	bne.n	801e1d6 <_Z41__static_initialization_and_destruction_0ii+0x62>
 801e184:	683b      	ldr	r3, [r7, #0]
 801e186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e18a:	4293      	cmp	r3, r2
 801e18c:	d123      	bne.n	801e1d6 <_Z41__static_initialization_and_destruction_0ii+0x62>
unordered_map<uint8_t, UART::Instance*> UART::registered_uart;
 801e18e:	481b      	ldr	r0, [pc, #108]	; (801e1fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801e190:	f7ff fd4e 	bl	801dc30 <_ZNSt13unordered_mapIhPN4UART8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEEC1Ev>
unordered_map<UART::Peripheral, UART::Instance*> UART::available_uarts;
 801e194:	481a      	ldr	r0, [pc, #104]	; (801e200 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801e196:	f7ff fdae 	bl	801dcf6 <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
UART::Instance UART::instance1;
 801e19a:	481a      	ldr	r0, [pc, #104]	; (801e204 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801e19c:	f7ff fdb8 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance2;
 801e1a0:	4819      	ldr	r0, [pc, #100]	; (801e208 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 801e1a2:	f7ff fdb5 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance3;
 801e1a6:	4819      	ldr	r0, [pc, #100]	; (801e20c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801e1a8:	f7ff fdb2 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance4;
 801e1ac:	4818      	ldr	r0, [pc, #96]	; (801e210 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801e1ae:	f7ff fdaf 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance5;
 801e1b2:	4818      	ldr	r0, [pc, #96]	; (801e214 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801e1b4:	f7ff fdac 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance6;
 801e1b8:	4817      	ldr	r0, [pc, #92]	; (801e218 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801e1ba:	f7ff fda9 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance7;
 801e1be:	4817      	ldr	r0, [pc, #92]	; (801e21c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801e1c0:	f7ff fda6 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance8;
 801e1c4:	4816      	ldr	r0, [pc, #88]	; (801e220 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801e1c6:	f7ff fda3 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance9;
 801e1ca:	4816      	ldr	r0, [pc, #88]	; (801e224 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801e1cc:	f7ff fda0 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
UART::Instance UART::instance10;
 801e1d0:	4815      	ldr	r0, [pc, #84]	; (801e228 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801e1d2:	f7ff fd9d 	bl	801dd10 <_ZN4UART8InstanceC1Ev>
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d10a      	bne.n	801e1f2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 801e1dc:	683b      	ldr	r3, [r7, #0]
 801e1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e1e2:	4293      	cmp	r3, r2
 801e1e4:	d105      	bne.n	801e1f2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
unordered_map<UART::Peripheral, UART::Instance*> UART::available_uarts;
 801e1e6:	4806      	ldr	r0, [pc, #24]	; (801e200 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801e1e8:	f7ff ffa9 	bl	801e13e <_ZNSt13unordered_mapIN4UART10PeripheralEPNS0_8InstanceESt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_S3_EEED1Ev>
unordered_map<uint8_t, UART::Instance*> UART::registered_uart;
 801e1ec:	4803      	ldr	r0, [pc, #12]	; (801e1fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801e1ee:	f7ff ffb3 	bl	801e158 <_ZNSt13unordered_mapIhPN4UART8InstanceESt4hashIhESt8equal_toIhESaISt4pairIKhS2_EEED1Ev>
}
 801e1f2:	bf00      	nop
 801e1f4:	3708      	adds	r7, #8
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bd80      	pop	{r7, pc}
 801e1fa:	bf00      	nop
 801e1fc:	240015f8 	.word	0x240015f8
 801e200:	24001614 	.word	0x24001614
 801e204:	24001634 	.word	0x24001634
 801e208:	24001658 	.word	0x24001658
 801e20c:	2400167c 	.word	0x2400167c
 801e210:	240016a0 	.word	0x240016a0
 801e214:	240016c4 	.word	0x240016c4
 801e218:	240016e8 	.word	0x240016e8
 801e21c:	2400170c 	.word	0x2400170c
 801e220:	24001730 	.word	0x24001730
 801e224:	24001754 	.word	0x24001754
 801e228:	24001778 	.word	0x24001778

0801e22c <_GLOBAL__sub_I__ZN4UART15registered_uartE>:
 801e22c:	b580      	push	{r7, lr}
 801e22e:	af00      	add	r7, sp, #0
 801e230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e234:	2001      	movs	r0, #1
 801e236:	f7ff ff9d 	bl	801e174 <_Z41__static_initialization_and_destruction_0ii>
 801e23a:	bd80      	pop	{r7, pc}

0801e23c <_GLOBAL__sub_D__ZN4UART15registered_uartE>:
 801e23c:	b580      	push	{r7, lr}
 801e23e:	af00      	add	r7, sp, #0
 801e240:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e244:	2000      	movs	r0, #0
 801e246:	f7ff ff95 	bl	801e174 <_Z41__static_initialization_and_destruction_0ii>
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801e24c:	b580      	push	{r7, lr}
 801e24e:	b082      	sub	sp, #8
 801e250:	af00      	add	r7, sp, #0
 801e252:	6078      	str	r0, [r7, #4]
 801e254:	6878      	ldr	r0, [r7, #4]
 801e256:	f000 f8a6 	bl	801e3a6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	4618      	mov	r0, r3
 801e25e:	3708      	adds	r7, #8
 801e260:	46bd      	mov	sp, r7
 801e262:	bd80      	pop	{r7, pc}

0801e264 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
      _Rb_tree() = default;
 801e264:	b580      	push	{r7, lr}
 801e266:	b082      	sub	sp, #8
 801e268:	af00      	add	r7, sp, #0
 801e26a:	6078      	str	r0, [r7, #4]
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	4618      	mov	r0, r3
 801e270:	f000 f884 	bl	801e37c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	4618      	mov	r0, r3
 801e278:	3708      	adds	r7, #8
 801e27a:	46bd      	mov	sp, r7
 801e27c:	bd80      	pop	{r7, pc}

0801e27e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
      map() = default;
 801e27e:	b580      	push	{r7, lr}
 801e280:	b082      	sub	sp, #8
 801e282:	af00      	add	r7, sp, #0
 801e284:	6078      	str	r0, [r7, #4]
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	4618      	mov	r0, r3
 801e28a:	f7ff ffeb 	bl	801e264 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	4618      	mov	r0, r3
 801e292:	3708      	adds	r7, #8
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}

0801e298 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      ~map() = default;
 801e298:	b580      	push	{r7, lr}
 801e29a:	b082      	sub	sp, #8
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	f000 f88a 	bl	801e3bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	3708      	adds	r7, #8
 801e2ae:	46bd      	mov	sp, r7
 801e2b0:	bd80      	pop	{r7, pc}
	...

0801e2b4 <_ZN12DigitalInput8inscribeER3Pin>:
#include "DigitalInputService/DigitalInputService.hpp"

uint8_t DigitalInput::id_counter = 0;
map<uint8_t,Pin> DigitalInput::service_ids = {};

uint8_t DigitalInput::inscribe(Pin& pin){
 801e2b4:	b580      	push	{r7, lr}
 801e2b6:	b082      	sub	sp, #8
 801e2b8:	af00      	add	r7, sp, #0
 801e2ba:	6078      	str	r0, [r7, #4]
		Pin::inscribe(pin, INPUT);
 801e2bc:	2101      	movs	r1, #1
 801e2be:	6878      	ldr	r0, [r7, #4]
 801e2c0:	f7fa fe76 	bl	8018fb0 <_ZN3Pin8inscribeERS_13OperationMode>
		DigitalInput::service_ids[id_counter] = pin;
 801e2c4:	4909      	ldr	r1, [pc, #36]	; (801e2ec <_ZN12DigitalInput8inscribeER3Pin+0x38>)
 801e2c6:	480a      	ldr	r0, [pc, #40]	; (801e2f0 <_ZN12DigitalInput8inscribeER3Pin+0x3c>)
 801e2c8:	f000 f88e 	bl	801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801e2cc:	4603      	mov	r3, r0
 801e2ce:	687a      	ldr	r2, [r7, #4]
 801e2d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e2d4:	e883 0003 	stmia.w	r3, {r0, r1}
		return id_counter++;
 801e2d8:	4b04      	ldr	r3, [pc, #16]	; (801e2ec <_ZN12DigitalInput8inscribeER3Pin+0x38>)
 801e2da:	781b      	ldrb	r3, [r3, #0]
 801e2dc:	1c5a      	adds	r2, r3, #1
 801e2de:	b2d1      	uxtb	r1, r2
 801e2e0:	4a02      	ldr	r2, [pc, #8]	; (801e2ec <_ZN12DigitalInput8inscribeER3Pin+0x38>)
 801e2e2:	7011      	strb	r1, [r2, #0]
}
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	3708      	adds	r7, #8
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bd80      	pop	{r7, pc}
 801e2ec:	2400179c 	.word	0x2400179c
 801e2f0:	240017a0 	.word	0x240017a0

0801e2f4 <_ZN12DigitalInput14read_pin_stateEh>:

optional<PinState> DigitalInput::read_pin_state(uint8_t id){
 801e2f4:	b590      	push	{r4, r7, lr}
 801e2f6:	b089      	sub	sp, #36	; 0x24
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	71fb      	strb	r3, [r7, #7]
	if (not DigitalInput::service_ids.contains(id))
 801e2fe:	1dfb      	adds	r3, r7, #7
 801e300:	4619      	mov	r1, r3
 801e302:	481d      	ldr	r0, [pc, #116]	; (801e378 <_ZN12DigitalInput14read_pin_stateEh+0x84>)
 801e304:	f000 f8cc 	bl	801e4a0 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 801e308:	4603      	mov	r3, r0
 801e30a:	f083 0301 	eor.w	r3, r3, #1
 801e30e:	b2db      	uxtb	r3, r3
 801e310:	2b00      	cmp	r3, #0
 801e312:	d008      	beq.n	801e326 <_ZN12DigitalInput14read_pin_stateEh+0x32>
		return nullopt;
 801e314:	f107 0318 	add.w	r3, r7, #24
 801e318:	4621      	mov	r1, r4
 801e31a:	4618      	mov	r0, r3
 801e31c:	f000 f917 	bl	801e54e <_ZNSt8optionalI8PinStateEC1ESt9nullopt_t>
 801e320:	8b3b      	ldrh	r3, [r7, #24]
 801e322:	82bb      	strh	r3, [r7, #20]
 801e324:	e01d      	b.n	801e362 <_ZN12DigitalInput14read_pin_stateEh+0x6e>

	Pin pin = DigitalInput::service_ids[id];
 801e326:	1dfb      	adds	r3, r7, #7
 801e328:	4619      	mov	r1, r3
 801e32a:	4813      	ldr	r0, [pc, #76]	; (801e378 <_ZN12DigitalInput14read_pin_stateEh+0x84>)
 801e32c:	f000 f85c 	bl	801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801e330:	4602      	mov	r2, r0
 801e332:	f107 030c 	add.w	r3, r7, #12
 801e336:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e33a:	e883 0003 	stmia.w	r3, {r0, r1}
	return (PinState)HAL_GPIO_ReadPin(pin.port, pin.gpio_pin);
 801e33e:	68fb      	ldr	r3, [r7, #12]
 801e340:	8a3a      	ldrh	r2, [r7, #16]
 801e342:	4611      	mov	r1, r2
 801e344:	4618      	mov	r0, r3
 801e346:	f7f4 ffa1 	bl	801328c <HAL_GPIO_ReadPin>
 801e34a:	4603      	mov	r3, r0
 801e34c:	77fb      	strb	r3, [r7, #31]
 801e34e:	f107 021f 	add.w	r2, r7, #31
 801e352:	f107 031c 	add.w	r3, r7, #28
 801e356:	4611      	mov	r1, r2
 801e358:	4618      	mov	r0, r3
 801e35a:	f000 f906 	bl	801e56a <_ZNSt8optionalI8PinStateEC1IS0_Lb1EEEOT_>
 801e35e:	8bbb      	ldrh	r3, [r7, #28]
 801e360:	82bb      	strh	r3, [r7, #20]
}
 801e362:	2300      	movs	r3, #0
 801e364:	7d3a      	ldrb	r2, [r7, #20]
 801e366:	f362 0307 	bfi	r3, r2, #0, #8
 801e36a:	7d7a      	ldrb	r2, [r7, #21]
 801e36c:	f362 230f 	bfi	r3, r2, #8, #8
 801e370:	4618      	mov	r0, r3
 801e372:	3724      	adds	r7, #36	; 0x24
 801e374:	46bd      	mov	sp, r7
 801e376:	bd90      	pop	{r4, r7, pc}
 801e378:	240017a0 	.word	0x240017a0

0801e37c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801e37c:	b580      	push	{r7, lr}
 801e37e:	b082      	sub	sp, #8
 801e380:	af00      	add	r7, sp, #0
 801e382:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f000 f904 	bl	801e592 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	4618      	mov	r0, r3
 801e38e:	f7fd faf9 	bl	801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	3304      	adds	r3, #4
 801e396:	4618      	mov	r0, r3
 801e398:	f7fc fd59 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	4618      	mov	r0, r3
 801e3a0:	3708      	adds	r7, #8
 801e3a2:	46bd      	mov	sp, r7
 801e3a4:	bd80      	pop	{r7, pc}

0801e3a6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801e3a6:	b480      	push	{r7}
 801e3a8:	b083      	sub	sp, #12
 801e3aa:	af00      	add	r7, sp, #0
 801e3ac:	6078      	str	r0, [r7, #4]
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	370c      	adds	r7, #12
 801e3b4:	46bd      	mov	sp, r7
 801e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3ba:	4770      	bx	lr

0801e3bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801e3bc:	b580      	push	{r7, lr}
 801e3be:	b082      	sub	sp, #8
 801e3c0:	af00      	add	r7, sp, #0
 801e3c2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801e3c4:	6878      	ldr	r0, [r7, #4]
 801e3c6:	f000 f90f 	bl	801e5e8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	4619      	mov	r1, r3
 801e3ce:	6878      	ldr	r0, [r7, #4]
 801e3d0:	f000 f8eb 	bl	801e5aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7ff ff38 	bl	801e24c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	4618      	mov	r0, r3
 801e3e0:	3708      	adds	r7, #8
 801e3e2:	46bd      	mov	sp, r7
 801e3e4:	bd80      	pop	{r7, pc}
	...

0801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 801e3e8:	b590      	push	{r4, r7, lr}
 801e3ea:	b08b      	sub	sp, #44	; 0x2c
 801e3ec:	af02      	add	r7, sp, #8
 801e3ee:	6078      	str	r0, [r7, #4]
 801e3f0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801e3f2:	6839      	ldr	r1, [r7, #0]
 801e3f4:	6878      	ldr	r0, [r7, #4]
 801e3f6:	f000 f903 	bl	801e600 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 801e3fa:	4603      	mov	r3, r0
 801e3fc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801e3fe:	6878      	ldr	r0, [r7, #4]
 801e400:	f000 f90d 	bl	801e61e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 801e404:	4603      	mov	r3, r0
 801e406:	60fb      	str	r3, [r7, #12]
 801e408:	f107 020c 	add.w	r2, r7, #12
 801e40c:	f107 0308 	add.w	r3, r7, #8
 801e410:	4611      	mov	r1, r2
 801e412:	4618      	mov	r0, r3
 801e414:	f000 f910 	bl	801e638 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 801e418:	4603      	mov	r3, r0
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d112      	bne.n	801e444 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 801e41e:	6878      	ldr	r0, [r7, #4]
 801e420:	f000 f91e 	bl	801e660 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 801e424:	f107 0308 	add.w	r3, r7, #8
 801e428:	4618      	mov	r0, r3
 801e42a:	f000 f926 	bl	801e67a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 801e42e:	4603      	mov	r3, r0
 801e430:	461a      	mov	r2, r3
 801e432:	f107 0310 	add.w	r3, r7, #16
 801e436:	6839      	ldr	r1, [r7, #0]
 801e438:	4618      	mov	r0, r3
 801e43a:	f7fd fb9c 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801e43e:	4603      	mov	r3, r0
 801e440:	2b00      	cmp	r3, #0
 801e442:	d001      	beq.n	801e448 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 801e444:	2301      	movs	r3, #1
 801e446:	e000      	b.n	801e44a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 801e448:	2300      	movs	r3, #0
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d01b      	beq.n	801e486 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801e44e:	687c      	ldr	r4, [r7, #4]
 801e450:	f107 0208 	add.w	r2, r7, #8
 801e454:	f107 0314 	add.w	r3, r7, #20
 801e458:	4611      	mov	r1, r2
 801e45a:	4618      	mov	r0, r3
 801e45c:	f000 f91b 	bl	801e696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 801e460:	f107 0318 	add.w	r3, r7, #24
 801e464:	6839      	ldr	r1, [r7, #0]
 801e466:	4618      	mov	r0, r3
 801e468:	f7fd fb9a 	bl	801bba0 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801e46c:	f107 0218 	add.w	r2, r7, #24
 801e470:	f107 031c 	add.w	r3, r7, #28
 801e474:	9300      	str	r3, [sp, #0]
 801e476:	4613      	mov	r3, r2
 801e478:	4a08      	ldr	r2, [pc, #32]	; (801e49c <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 801e47a:	6979      	ldr	r1, [r7, #20]
 801e47c:	4620      	mov	r0, r4
 801e47e:	f000 f91a 	bl	801e6b6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 801e482:	4603      	mov	r3, r0
 801e484:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801e486:	f107 0308 	add.w	r3, r7, #8
 801e48a:	4618      	mov	r0, r3
 801e48c:	f000 f8f5 	bl	801e67a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 801e490:	4603      	mov	r3, r0
 801e492:	3304      	adds	r3, #4
      }
 801e494:	4618      	mov	r0, r3
 801e496:	3724      	adds	r7, #36	; 0x24
 801e498:	46bd      	mov	sp, r7
 801e49a:	bd90      	pop	{r4, r7, pc}
 801e49c:	08023b34 	.word	0x08023b34

0801e4a0 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>:
      contains(const key_type& __x) const
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b084      	sub	sp, #16
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
 801e4a8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	6839      	ldr	r1, [r7, #0]
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	f000 f93f 	bl	801e732 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>
 801e4b4:	4603      	mov	r3, r0
 801e4b6:	60bb      	str	r3, [r7, #8]
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	4618      	mov	r0, r3
 801e4bc:	f000 f975 	bl	801e7aa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801e4c0:	4603      	mov	r3, r0
 801e4c2:	60fb      	str	r3, [r7, #12]
 801e4c4:	f107 020c 	add.w	r2, r7, #12
 801e4c8:	f107 0308 	add.w	r3, r7, #8
 801e4cc:	4611      	mov	r1, r2
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f000 f97c 	bl	801e7cc <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 801e4d4:	4603      	mov	r3, r0
 801e4d6:	f083 0301 	eor.w	r3, r3, #1
 801e4da:	b2db      	uxtb	r3, r3
 801e4dc:	4618      	mov	r0, r3
 801e4de:	3710      	adds	r7, #16
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	bd80      	pop	{r7, pc}

0801e4e4 <_ZNSt22_Optional_payload_baseI8PinStateE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 801e4e4:	b480      	push	{r7}
 801e4e6:	b083      	sub	sp, #12
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	6078      	str	r0, [r7, #4]
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	370c      	adds	r7, #12
 801e4f2:	46bd      	mov	sp, r7
 801e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4f8:	4770      	bx	lr

0801e4fa <_ZNSt22_Optional_payload_baseI8PinStateEC1Ev>:
      _Optional_payload_base() = default;
 801e4fa:	b580      	push	{r7, lr}
 801e4fc:	b082      	sub	sp, #8
 801e4fe:	af00      	add	r7, sp, #0
 801e500:	6078      	str	r0, [r7, #4]
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	4618      	mov	r0, r3
 801e506:	f7ff ffed 	bl	801e4e4 <_ZNSt22_Optional_payload_baseI8PinStateE8_StorageIS0_Lb1EEC1Ev>
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	2200      	movs	r2, #0
 801e50e:	705a      	strb	r2, [r3, #1]
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	4618      	mov	r0, r3
 801e514:	3708      	adds	r7, #8
 801e516:	46bd      	mov	sp, r7
 801e518:	bd80      	pop	{r7, pc}

0801e51a <_ZNSt17_Optional_payloadI8PinStateLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 801e51a:	b580      	push	{r7, lr}
 801e51c:	b082      	sub	sp, #8
 801e51e:	af00      	add	r7, sp, #0
 801e520:	6078      	str	r0, [r7, #4]
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	4618      	mov	r0, r3
 801e526:	f7ff ffe8 	bl	801e4fa <_ZNSt22_Optional_payload_baseI8PinStateEC1Ev>
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	4618      	mov	r0, r3
 801e52e:	3708      	adds	r7, #8
 801e530:	46bd      	mov	sp, r7
 801e532:	bd80      	pop	{r7, pc}

0801e534 <_ZNSt14_Optional_baseI8PinStateLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 801e534:	b580      	push	{r7, lr}
 801e536:	b082      	sub	sp, #8
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	4618      	mov	r0, r3
 801e540:	f7ff ffeb 	bl	801e51a <_ZNSt17_Optional_payloadI8PinStateLb1ELb1ELb1EEC1Ev>
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	4618      	mov	r0, r3
 801e548:	3708      	adds	r7, #8
 801e54a:	46bd      	mov	sp, r7
 801e54c:	bd80      	pop	{r7, pc}

0801e54e <_ZNSt8optionalI8PinStateEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 801e54e:	b580      	push	{r7, lr}
 801e550:	b082      	sub	sp, #8
 801e552:	af00      	add	r7, sp, #0
 801e554:	6078      	str	r0, [r7, #4]
 801e556:	7039      	strb	r1, [r7, #0]
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	4618      	mov	r0, r3
 801e55c:	f7ff ffea 	bl	801e534 <_ZNSt14_Optional_baseI8PinStateLb1ELb1EEC1Ev>
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	4618      	mov	r0, r3
 801e564:	3708      	adds	r7, #8
 801e566:	46bd      	mov	sp, r7
 801e568:	bd80      	pop	{r7, pc}

0801e56a <_ZNSt8optionalI8PinStateEC1IS0_Lb1EEEOT_>:
	optional(_Up&& __t)
 801e56a:	b5b0      	push	{r4, r5, r7, lr}
 801e56c:	b082      	sub	sp, #8
 801e56e:	af00      	add	r7, sp, #0
 801e570:	6078      	str	r0, [r7, #4]
 801e572:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801e574:	687c      	ldr	r4, [r7, #4]
 801e576:	6838      	ldr	r0, [r7, #0]
 801e578:	f000 f93c 	bl	801e7f4 <_ZSt7forwardI8PinStateEOT_RNSt16remove_referenceIS1_E4typeE>
 801e57c:	4603      	mov	r3, r0
 801e57e:	461a      	mov	r2, r3
 801e580:	4629      	mov	r1, r5
 801e582:	4620      	mov	r0, r4
 801e584:	f000 f952 	bl	801e82c <_ZNSt14_Optional_baseI8PinStateLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	4618      	mov	r0, r3
 801e58c:	3708      	adds	r7, #8
 801e58e:	46bd      	mov	sp, r7
 801e590:	bdb0      	pop	{r4, r5, r7, pc}

0801e592 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801e592:	b580      	push	{r7, lr}
 801e594:	b082      	sub	sp, #8
 801e596:	af00      	add	r7, sp, #0
 801e598:	6078      	str	r0, [r7, #4]
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f000 f95b 	bl	801e856 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	4618      	mov	r0, r3
 801e5a4:	3708      	adds	r7, #8
 801e5a6:	46bd      	mov	sp, r7
 801e5a8:	bd80      	pop	{r7, pc}

0801e5aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e5aa:	b580      	push	{r7, lr}
 801e5ac:	b084      	sub	sp, #16
 801e5ae:	af00      	add	r7, sp, #0
 801e5b0:	6078      	str	r0, [r7, #4]
 801e5b2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801e5b4:	683b      	ldr	r3, [r7, #0]
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d012      	beq.n	801e5e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 801e5ba:	6838      	ldr	r0, [r7, #0]
 801e5bc:	f000 f956 	bl	801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e5c0:	4603      	mov	r3, r0
 801e5c2:	4619      	mov	r1, r3
 801e5c4:	6878      	ldr	r0, [r7, #4]
 801e5c6:	f7ff fff0 	bl	801e5aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 801e5ca:	6838      	ldr	r0, [r7, #0]
 801e5cc:	f000 f95a 	bl	801e884 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801e5d0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801e5d2:	6839      	ldr	r1, [r7, #0]
 801e5d4:	6878      	ldr	r0, [r7, #4]
 801e5d6:	f000 f961 	bl	801e89c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801e5de:	e7e9      	b.n	801e5b4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 801e5e0:	bf00      	nop
 801e5e2:	3710      	adds	r7, #16
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}

0801e5e8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801e5e8:	b480      	push	{r7}
 801e5ea:	b083      	sub	sp, #12
 801e5ec:	af00      	add	r7, sp, #0
 801e5ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	689b      	ldr	r3, [r3, #8]
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	370c      	adds	r7, #12
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5fe:	4770      	bx	lr

0801e600 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 801e600:	b580      	push	{r7, lr}
 801e602:	b082      	sub	sp, #8
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
 801e608:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	6839      	ldr	r1, [r7, #0]
 801e60e:	4618      	mov	r0, r3
 801e610:	f000 f955 	bl	801e8be <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 801e614:	4603      	mov	r3, r0
 801e616:	4618      	mov	r0, r3
 801e618:	3708      	adds	r7, #8
 801e61a:	46bd      	mov	sp, r7
 801e61c:	bd80      	pop	{r7, pc}

0801e61e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801e61e:	b580      	push	{r7, lr}
 801e620:	b082      	sub	sp, #8
 801e622:	af00      	add	r7, sp, #0
 801e624:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	4618      	mov	r0, r3
 801e62a:	f000 f95f 	bl	801e8ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801e62e:	4603      	mov	r3, r0
 801e630:	4618      	mov	r0, r3
 801e632:	3708      	adds	r7, #8
 801e634:	46bd      	mov	sp, r7
 801e636:	bd80      	pop	{r7, pc}

0801e638 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801e638:	b480      	push	{r7}
 801e63a:	b083      	sub	sp, #12
 801e63c:	af00      	add	r7, sp, #0
 801e63e:	6078      	str	r0, [r7, #4]
 801e640:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681a      	ldr	r2, [r3, #0]
 801e646:	683b      	ldr	r3, [r7, #0]
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	429a      	cmp	r2, r3
 801e64c:	bf0c      	ite	eq
 801e64e:	2301      	moveq	r3, #1
 801e650:	2300      	movne	r3, #0
 801e652:	b2db      	uxtb	r3, r3
 801e654:	4618      	mov	r0, r3
 801e656:	370c      	adds	r7, #12
 801e658:	46bd      	mov	sp, r7
 801e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e65e:	4770      	bx	lr

0801e660 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 801e660:	b590      	push	{r4, r7, lr}
 801e662:	b083      	sub	sp, #12
 801e664:	af00      	add	r7, sp, #0
 801e666:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	4618      	mov	r0, r3
 801e66c:	f000 f94f 	bl	801e90e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 801e670:	bf00      	nop
 801e672:	4620      	mov	r0, r4
 801e674:	370c      	adds	r7, #12
 801e676:	46bd      	mov	sp, r7
 801e678:	bd90      	pop	{r4, r7, pc}

0801e67a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801e67a:	b580      	push	{r7, lr}
 801e67c:	b082      	sub	sp, #8
 801e67e:	af00      	add	r7, sp, #0
 801e680:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	4618      	mov	r0, r3
 801e688:	f000 f94c 	bl	801e924 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801e68c:	4603      	mov	r3, r0
 801e68e:	4618      	mov	r0, r3
 801e690:	3708      	adds	r7, #8
 801e692:	46bd      	mov	sp, r7
 801e694:	bd80      	pop	{r7, pc}

0801e696 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801e696:	b480      	push	{r7}
 801e698:	b083      	sub	sp, #12
 801e69a:	af00      	add	r7, sp, #0
 801e69c:	6078      	str	r0, [r7, #4]
 801e69e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801e6a0:	683b      	ldr	r3, [r7, #0]
 801e6a2:	681a      	ldr	r2, [r3, #0]
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	601a      	str	r2, [r3, #0]
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	370c      	adds	r7, #12
 801e6ae:	46bd      	mov	sp, r7
 801e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6b4:	4770      	bx	lr

0801e6b6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e6b6:	b5b0      	push	{r4, r5, r7, lr}
 801e6b8:	b088      	sub	sp, #32
 801e6ba:	af00      	add	r7, sp, #0
 801e6bc:	60f8      	str	r0, [r7, #12]
 801e6be:	60b9      	str	r1, [r7, #8]
 801e6c0:	607a      	str	r2, [r7, #4]
 801e6c2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801e6c4:	6878      	ldr	r0, [r7, #4]
 801e6c6:	f7fd fd99 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801e6ca:	4604      	mov	r4, r0
 801e6cc:	6838      	ldr	r0, [r7, #0]
 801e6ce:	f7fd fda0 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e6d2:	4605      	mov	r5, r0
 801e6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e6d6:	f7fd fda7 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e6da:	4603      	mov	r3, r0
 801e6dc:	462a      	mov	r2, r5
 801e6de:	4621      	mov	r1, r4
 801e6e0:	68f8      	ldr	r0, [r7, #12]
 801e6e2:	f000 f92d 	bl	801e940 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 801e6e6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801e6e8:	69f8      	ldr	r0, [r7, #28]
 801e6ea:	f000 fa6f 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801e6ee:	4603      	mov	r3, r0
 801e6f0:	f107 0010 	add.w	r0, r7, #16
 801e6f4:	68ba      	ldr	r2, [r7, #8]
 801e6f6:	68f9      	ldr	r1, [r7, #12]
 801e6f8:	f000 f945 	bl	801e986 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 801e6fc:	697b      	ldr	r3, [r7, #20]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d007      	beq.n	801e712 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801e702:	6939      	ldr	r1, [r7, #16]
 801e704:	697a      	ldr	r2, [r7, #20]
 801e706:	69fb      	ldr	r3, [r7, #28]
 801e708:	68f8      	ldr	r0, [r7, #12]
 801e70a:	f000 fa72 	bl	801ebf2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 801e70e:	4603      	mov	r3, r0
 801e710:	e00b      	b.n	801e72a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 801e712:	69f9      	ldr	r1, [r7, #28]
 801e714:	68f8      	ldr	r0, [r7, #12]
 801e716:	f000 f8c1 	bl	801e89c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 801e71a:	693a      	ldr	r2, [r7, #16]
 801e71c:	f107 0318 	add.w	r3, r7, #24
 801e720:	4611      	mov	r1, r2
 801e722:	4618      	mov	r0, r3
 801e724:	f000 faa2 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801e728:	69bb      	ldr	r3, [r7, #24]
      }
 801e72a:	4618      	mov	r0, r3
 801e72c:	3720      	adds	r7, #32
 801e72e:	46bd      	mov	sp, r7
 801e730:	bdb0      	pop	{r4, r5, r7, pc}

0801e732 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e732:	b590      	push	{r4, r7, lr}
 801e734:	b085      	sub	sp, #20
 801e736:	af00      	add	r7, sp, #0
 801e738:	6078      	str	r0, [r7, #4]
 801e73a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801e73c:	6878      	ldr	r0, [r7, #4]
 801e73e:	f000 faa4 	bl	801ec8a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801e742:	4604      	mov	r4, r0
 801e744:	6878      	ldr	r0, [r7, #4]
 801e746:	f000 faac 	bl	801eca2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801e74a:	4602      	mov	r2, r0
 801e74c:	683b      	ldr	r3, [r7, #0]
 801e74e:	4621      	mov	r1, r4
 801e750:	6878      	ldr	r0, [r7, #4]
 801e752:	f000 fab2 	bl	801ecba <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 801e756:	4603      	mov	r3, r0
 801e758:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801e75a:	6878      	ldr	r0, [r7, #4]
 801e75c:	f000 f825 	bl	801e7aa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801e760:	4603      	mov	r3, r0
 801e762:	60fb      	str	r3, [r7, #12]
 801e764:	f107 020c 	add.w	r2, r7, #12
 801e768:	f107 0308 	add.w	r3, r7, #8
 801e76c:	4611      	mov	r1, r2
 801e76e:	4618      	mov	r0, r3
 801e770:	f000 f82c 	bl	801e7cc <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 801e774:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801e776:	2b00      	cmp	r3, #0
 801e778:	d10d      	bne.n	801e796 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801e77a:	687c      	ldr	r4, [r7, #4]
 801e77c:	68bb      	ldr	r3, [r7, #8]
 801e77e:	4618      	mov	r0, r3
 801e780:	f000 facc 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e784:	4603      	mov	r3, r0
 801e786:	461a      	mov	r2, r3
 801e788:	6839      	ldr	r1, [r7, #0]
 801e78a:	4620      	mov	r0, r4
 801e78c:	f7fd f9f3 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801e790:	4603      	mov	r3, r0
 801e792:	2b00      	cmp	r3, #0
 801e794:	d004      	beq.n	801e7a0 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801e796:	6878      	ldr	r0, [r7, #4]
 801e798:	f000 f807 	bl	801e7aa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801e79c:	4603      	mov	r3, r0
 801e79e:	e000      	b.n	801e7a2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x70>
 801e7a0:	68bb      	ldr	r3, [r7, #8]
    }
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	3714      	adds	r7, #20
 801e7a6:	46bd      	mov	sp, r7
 801e7a8:	bd90      	pop	{r4, r7, pc}

0801e7aa <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 801e7aa:	b580      	push	{r7, lr}
 801e7ac:	b084      	sub	sp, #16
 801e7ae:	af00      	add	r7, sp, #0
 801e7b0:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	1d1a      	adds	r2, r3, #4
 801e7b6:	f107 030c 	add.w	r3, r7, #12
 801e7ba:	4611      	mov	r1, r2
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f000 fab9 	bl	801ed34 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	4618      	mov	r0, r3
 801e7c6:	3710      	adds	r7, #16
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	bd80      	pop	{r7, pc}

0801e7cc <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801e7cc:	b480      	push	{r7}
 801e7ce:	b083      	sub	sp, #12
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	681a      	ldr	r2, [r3, #0]
 801e7da:	683b      	ldr	r3, [r7, #0]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	429a      	cmp	r2, r3
 801e7e0:	bf0c      	ite	eq
 801e7e2:	2301      	moveq	r3, #1
 801e7e4:	2300      	movne	r3, #0
 801e7e6:	b2db      	uxtb	r3, r3
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	370c      	adds	r7, #12
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f2:	4770      	bx	lr

0801e7f4 <_ZSt7forwardI8PinStateEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e7f4:	b480      	push	{r7}
 801e7f6:	b083      	sub	sp, #12
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	4618      	mov	r0, r3
 801e800:	370c      	adds	r7, #12
 801e802:	46bd      	mov	sp, r7
 801e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e808:	4770      	bx	lr

0801e80a <_ZNSt17_Optional_payloadI8PinStateLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 801e80a:	b590      	push	{r4, r7, lr}
 801e80c:	b085      	sub	sp, #20
 801e80e:	af00      	add	r7, sp, #0
 801e810:	60f8      	str	r0, [r7, #12]
 801e812:	7239      	strb	r1, [r7, #8]
 801e814:	607a      	str	r2, [r7, #4]
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	687a      	ldr	r2, [r7, #4]
 801e81a:	4621      	mov	r1, r4
 801e81c:	4618      	mov	r0, r3
 801e81e:	f000 faaa 	bl	801ed76 <_ZNSt22_Optional_payload_baseI8PinStateEC1IJS0_EEESt10in_place_tDpOT_>
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	4618      	mov	r0, r3
 801e826:	3714      	adds	r7, #20
 801e828:	46bd      	mov	sp, r7
 801e82a:	bd90      	pop	{r4, r7, pc}

0801e82c <_ZNSt14_Optional_baseI8PinStateLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801e82c:	b5b0      	push	{r4, r5, r7, lr}
 801e82e:	b084      	sub	sp, #16
 801e830:	af00      	add	r7, sp, #0
 801e832:	60f8      	str	r0, [r7, #12]
 801e834:	7239      	strb	r1, [r7, #8]
 801e836:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801e838:	68fc      	ldr	r4, [r7, #12]
 801e83a:	6878      	ldr	r0, [r7, #4]
 801e83c:	f7ff ffda 	bl	801e7f4 <_ZSt7forwardI8PinStateEOT_RNSt16remove_referenceIS1_E4typeE>
 801e840:	4603      	mov	r3, r0
 801e842:	461a      	mov	r2, r3
 801e844:	4629      	mov	r1, r5
 801e846:	4620      	mov	r0, r4
 801e848:	f7ff ffdf 	bl	801e80a <_ZNSt17_Optional_payloadI8PinStateLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	4618      	mov	r0, r3
 801e850:	3710      	adds	r7, #16
 801e852:	46bd      	mov	sp, r7
 801e854:	bdb0      	pop	{r4, r5, r7, pc}

0801e856 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801e856:	b480      	push	{r7}
 801e858:	b083      	sub	sp, #12
 801e85a:	af00      	add	r7, sp, #0
 801e85c:	6078      	str	r0, [r7, #4]
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	4618      	mov	r0, r3
 801e862:	370c      	adds	r7, #12
 801e864:	46bd      	mov	sp, r7
 801e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e86a:	4770      	bx	lr

0801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801e86c:	b480      	push	{r7}
 801e86e:	b083      	sub	sp, #12
 801e870:	af00      	add	r7, sp, #0
 801e872:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	68db      	ldr	r3, [r3, #12]
 801e878:	4618      	mov	r0, r3
 801e87a:	370c      	adds	r7, #12
 801e87c:	46bd      	mov	sp, r7
 801e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e882:	4770      	bx	lr

0801e884 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801e884:	b480      	push	{r7}
 801e886:	b083      	sub	sp, #12
 801e888:	af00      	add	r7, sp, #0
 801e88a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	689b      	ldr	r3, [r3, #8]
 801e890:	4618      	mov	r0, r3
 801e892:	370c      	adds	r7, #12
 801e894:	46bd      	mov	sp, r7
 801e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e89a:	4770      	bx	lr

0801e89c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801e89c:	b580      	push	{r7, lr}
 801e89e:	b082      	sub	sp, #8
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	6078      	str	r0, [r7, #4]
 801e8a4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801e8a6:	6839      	ldr	r1, [r7, #0]
 801e8a8:	6878      	ldr	r0, [r7, #4]
 801e8aa:	f000 fa7c 	bl	801eda6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 801e8ae:	6839      	ldr	r1, [r7, #0]
 801e8b0:	6878      	ldr	r0, [r7, #4]
 801e8b2:	f000 fa8d 	bl	801edd0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 801e8b6:	bf00      	nop
 801e8b8:	3708      	adds	r7, #8
 801e8ba:	46bd      	mov	sp, r7
 801e8bc:	bd80      	pop	{r7, pc}

0801e8be <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801e8be:	b590      	push	{r4, r7, lr}
 801e8c0:	b083      	sub	sp, #12
 801e8c2:	af00      	add	r7, sp, #0
 801e8c4:	6078      	str	r0, [r7, #4]
 801e8c6:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801e8c8:	6878      	ldr	r0, [r7, #4]
 801e8ca:	f7ff fe8d 	bl	801e5e8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801e8ce:	4604      	mov	r4, r0
 801e8d0:	6878      	ldr	r0, [r7, #4]
 801e8d2:	f000 fa8f 	bl	801edf4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801e8d6:	4602      	mov	r2, r0
 801e8d8:	683b      	ldr	r3, [r7, #0]
 801e8da:	4621      	mov	r1, r4
 801e8dc:	6878      	ldr	r0, [r7, #4]
 801e8de:	f000 fa95 	bl	801ee0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	370c      	adds	r7, #12
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	bd90      	pop	{r4, r7, pc}

0801e8ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801e8ec:	b580      	push	{r7, lr}
 801e8ee:	b084      	sub	sp, #16
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	1d1a      	adds	r2, r3, #4
 801e8f8:	f107 030c 	add.w	r3, r7, #12
 801e8fc:	4611      	mov	r1, r2
 801e8fe:	4618      	mov	r0, r3
 801e900:	f000 f9b4 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	4618      	mov	r0, r3
 801e908:	3710      	adds	r7, #16
 801e90a:	46bd      	mov	sp, r7
 801e90c:	bd80      	pop	{r7, pc}

0801e90e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 801e90e:	b480      	push	{r7}
 801e910:	b083      	sub	sp, #12
 801e912:	af00      	add	r7, sp, #0
 801e914:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801e916:	bf00      	nop
 801e918:	4618      	mov	r0, r3
 801e91a:	370c      	adds	r7, #12
 801e91c:	46bd      	mov	sp, r7
 801e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e922:	4770      	bx	lr

0801e924 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr()
 801e924:	b580      	push	{r7, lr}
 801e926:	b082      	sub	sp, #8
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	3310      	adds	r3, #16
 801e930:	4618      	mov	r0, r3
 801e932:	f000 fa9c 	bl	801ee6e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 801e936:	4603      	mov	r3, r0
 801e938:	4618      	mov	r0, r3
 801e93a:	3708      	adds	r7, #8
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd80      	pop	{r7, pc}

0801e940 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801e940:	b5b0      	push	{r4, r5, r7, lr}
 801e942:	b088      	sub	sp, #32
 801e944:	af02      	add	r7, sp, #8
 801e946:	60f8      	str	r0, [r7, #12]
 801e948:	60b9      	str	r1, [r7, #8]
 801e94a:	607a      	str	r2, [r7, #4]
 801e94c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801e94e:	68f8      	ldr	r0, [r7, #12]
 801e950:	f000 fa99 	bl	801ee86 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 801e954:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801e956:	68b8      	ldr	r0, [r7, #8]
 801e958:	f7fd fc50 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801e95c:	4604      	mov	r4, r0
 801e95e:	6878      	ldr	r0, [r7, #4]
 801e960:	f7fd fc57 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e964:	4605      	mov	r5, r0
 801e966:	6838      	ldr	r0, [r7, #0]
 801e968:	f7fd fc5e 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e96c:	4603      	mov	r3, r0
 801e96e:	9300      	str	r3, [sp, #0]
 801e970:	462b      	mov	r3, r5
 801e972:	4622      	mov	r2, r4
 801e974:	6979      	ldr	r1, [r7, #20]
 801e976:	68f8      	ldr	r0, [r7, #12]
 801e978:	f000 fa96 	bl	801eea8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 801e97c:	697b      	ldr	r3, [r7, #20]
	}
 801e97e:	4618      	mov	r0, r3
 801e980:	3718      	adds	r7, #24
 801e982:	46bd      	mov	sp, r7
 801e984:	bdb0      	pop	{r4, r5, r7, pc}

0801e986 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e986:	b590      	push	{r4, r7, lr}
 801e988:	b08d      	sub	sp, #52	; 0x34
 801e98a:	af00      	add	r7, sp, #0
 801e98c:	60f8      	str	r0, [r7, #12]
 801e98e:	60b9      	str	r1, [r7, #8]
 801e990:	607a      	str	r2, [r7, #4]
 801e992:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801e994:	1d3b      	adds	r3, r7, #4
 801e996:	4618      	mov	r0, r3
 801e998:	f000 fab3 	bl	801ef02 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>
 801e99c:	4603      	mov	r3, r0
 801e99e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801e9a0:	69bc      	ldr	r4, [r7, #24]
 801e9a2:	68b8      	ldr	r0, [r7, #8]
 801e9a4:	f000 fa26 	bl	801edf4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	429c      	cmp	r4, r3
 801e9ac:	bf0c      	ite	eq
 801e9ae:	2301      	moveq	r3, #1
 801e9b0:	2300      	movne	r3, #0
 801e9b2:	b2db      	uxtb	r3, r3
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d030      	beq.n	801ea1a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 801e9b8:	68b8      	ldr	r0, [r7, #8]
 801e9ba:	f000 fab3 	bl	801ef24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 801e9be:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d013      	beq.n	801e9ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 801e9c4:	68bc      	ldr	r4, [r7, #8]
 801e9c6:	68b8      	ldr	r0, [r7, #8]
 801e9c8:	f000 fab8 	bl	801ef3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801e9cc:	4603      	mov	r3, r0
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	f000 f9a3 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e9d6:	4603      	mov	r3, r0
 801e9d8:	683a      	ldr	r2, [r7, #0]
 801e9da:	4619      	mov	r1, r3
 801e9dc:	4620      	mov	r0, r4
 801e9de:	f7fd f8ca 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d001      	beq.n	801e9ec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 801e9e8:	2301      	movs	r3, #1
 801e9ea:	e000      	b.n	801e9ee <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 801e9ec:	2300      	movs	r3, #0
	  if (size() > 0
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d00c      	beq.n	801ea0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	61fb      	str	r3, [r7, #28]
 801e9f6:	68b8      	ldr	r0, [r7, #8]
 801e9f8:	f000 faa0 	bl	801ef3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801e9fc:	4602      	mov	r2, r0
 801e9fe:	f107 031c 	add.w	r3, r7, #28
 801ea02:	4619      	mov	r1, r3
 801ea04:	68f8      	ldr	r0, [r7, #12]
 801ea06:	f7e8 fd5d 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801ea0a:	e0db      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	683a      	ldr	r2, [r7, #0]
 801ea10:	68b9      	ldr	r1, [r7, #8]
 801ea12:	4618      	mov	r0, r3
 801ea14:	f000 fa9e 	bl	801ef54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801ea18:	e0d4      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801ea1a:	68bc      	ldr	r4, [r7, #8]
 801ea1c:	69bb      	ldr	r3, [r7, #24]
 801ea1e:	4618      	mov	r0, r3
 801ea20:	f000 f97c 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801ea24:	4603      	mov	r3, r0
 801ea26:	461a      	mov	r2, r3
 801ea28:	6839      	ldr	r1, [r7, #0]
 801ea2a:	4620      	mov	r0, r4
 801ea2c:	f7fd f8a3 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ea30:	4603      	mov	r3, r0
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d057      	beq.n	801eae6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 801ea36:	69bb      	ldr	r3, [r7, #24]
 801ea38:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801ea3a:	69bc      	ldr	r4, [r7, #24]
 801ea3c:	68b8      	ldr	r0, [r7, #8]
 801ea3e:	f000 fb0e 	bl	801f05e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801ea42:	4603      	mov	r3, r0
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	429c      	cmp	r4, r3
 801ea48:	bf0c      	ite	eq
 801ea4a:	2301      	moveq	r3, #1
 801ea4c:	2300      	movne	r3, #0
 801ea4e:	b2db      	uxtb	r3, r3
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d00d      	beq.n	801ea70 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801ea54:	68b8      	ldr	r0, [r7, #8]
 801ea56:	f000 fb02 	bl	801f05e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801ea5a:	4604      	mov	r4, r0
 801ea5c:	68b8      	ldr	r0, [r7, #8]
 801ea5e:	f000 fafe 	bl	801f05e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801ea62:	4603      	mov	r3, r0
 801ea64:	461a      	mov	r2, r3
 801ea66:	4621      	mov	r1, r4
 801ea68:	68f8      	ldr	r0, [r7, #12]
 801ea6a:	f7e8 fdd2 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801ea6e:	e0a9      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801ea70:	68bc      	ldr	r4, [r7, #8]
 801ea72:	f107 0314 	add.w	r3, r7, #20
 801ea76:	4618      	mov	r0, r3
 801ea78:	f000 fafd 	bl	801f076 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
 801ea7c:	4603      	mov	r3, r0
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	4618      	mov	r0, r3
 801ea82:	f000 f94b 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801ea86:	4603      	mov	r3, r0
 801ea88:	683a      	ldr	r2, [r7, #0]
 801ea8a:	4619      	mov	r1, r3
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	f7fd f872 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ea92:	4603      	mov	r3, r0
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d01f      	beq.n	801ead8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801ea98:	697b      	ldr	r3, [r7, #20]
 801ea9a:	4618      	mov	r0, r3
 801ea9c:	f7ff fee6 	bl	801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801eaa0:	4603      	mov	r3, r0
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	bf0c      	ite	eq
 801eaa6:	2301      	moveq	r3, #1
 801eaa8:	2300      	movne	r3, #0
 801eaaa:	b2db      	uxtb	r3, r3
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d00a      	beq.n	801eac6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801eab0:	2300      	movs	r3, #0
 801eab2:	623b      	str	r3, [r7, #32]
 801eab4:	f107 0214 	add.w	r2, r7, #20
 801eab8:	f107 0320 	add.w	r3, r7, #32
 801eabc:	4619      	mov	r1, r3
 801eabe:	68f8      	ldr	r0, [r7, #12]
 801eac0:	f7e8 fd00 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801eac4:	e07e      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801eac6:	f107 0218 	add.w	r2, r7, #24
 801eaca:	f107 0318 	add.w	r3, r7, #24
 801eace:	4619      	mov	r1, r3
 801ead0:	68f8      	ldr	r0, [r7, #12]
 801ead2:	f7e8 fd9e 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801ead6:	e075      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	683a      	ldr	r2, [r7, #0]
 801eadc:	68b9      	ldr	r1, [r7, #8]
 801eade:	4618      	mov	r0, r3
 801eae0:	f000 fa38 	bl	801ef54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801eae4:	e06e      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801eae6:	68bc      	ldr	r4, [r7, #8]
 801eae8:	69bb      	ldr	r3, [r7, #24]
 801eaea:	4618      	mov	r0, r3
 801eaec:	f000 f916 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801eaf0:	4603      	mov	r3, r0
 801eaf2:	683a      	ldr	r2, [r7, #0]
 801eaf4:	4619      	mov	r1, r3
 801eaf6:	4620      	mov	r0, r4
 801eaf8:	f7fd f83d 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801eafc:	4603      	mov	r3, r0
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d056      	beq.n	801ebb0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 801eb02:	69bb      	ldr	r3, [r7, #24]
 801eb04:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801eb06:	69bc      	ldr	r4, [r7, #24]
 801eb08:	68b8      	ldr	r0, [r7, #8]
 801eb0a:	f000 fa17 	bl	801ef3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801eb0e:	4603      	mov	r3, r0
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	429c      	cmp	r4, r3
 801eb14:	bf0c      	ite	eq
 801eb16:	2301      	moveq	r3, #1
 801eb18:	2300      	movne	r3, #0
 801eb1a:	b2db      	uxtb	r3, r3
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d00c      	beq.n	801eb3a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801eb20:	2300      	movs	r3, #0
 801eb22:	627b      	str	r3, [r7, #36]	; 0x24
 801eb24:	68b8      	ldr	r0, [r7, #8]
 801eb26:	f000 fa09 	bl	801ef3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801eb2a:	4602      	mov	r2, r0
 801eb2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801eb30:	4619      	mov	r1, r3
 801eb32:	68f8      	ldr	r0, [r7, #12]
 801eb34:	f7e8 fcc6 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801eb38:	e044      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801eb3a:	68bc      	ldr	r4, [r7, #8]
 801eb3c:	f107 0310 	add.w	r3, r7, #16
 801eb40:	4618      	mov	r0, r3
 801eb42:	f000 faa9 	bl	801f098 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>
 801eb46:	4603      	mov	r3, r0
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	f000 f8e6 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801eb50:	4603      	mov	r3, r0
 801eb52:	461a      	mov	r2, r3
 801eb54:	6839      	ldr	r1, [r7, #0]
 801eb56:	4620      	mov	r0, r4
 801eb58:	f7fd f80d 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d01f      	beq.n	801eba2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801eb62:	69bb      	ldr	r3, [r7, #24]
 801eb64:	4618      	mov	r0, r3
 801eb66:	f7ff fe81 	bl	801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801eb6a:	4603      	mov	r3, r0
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	bf0c      	ite	eq
 801eb70:	2301      	moveq	r3, #1
 801eb72:	2300      	movne	r3, #0
 801eb74:	b2db      	uxtb	r3, r3
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d00a      	beq.n	801eb90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	62bb      	str	r3, [r7, #40]	; 0x28
 801eb7e:	f107 0218 	add.w	r2, r7, #24
 801eb82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eb86:	4619      	mov	r1, r3
 801eb88:	68f8      	ldr	r0, [r7, #12]
 801eb8a:	f7e8 fc9b 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801eb8e:	e019      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801eb90:	f107 0210 	add.w	r2, r7, #16
 801eb94:	f107 0310 	add.w	r3, r7, #16
 801eb98:	4619      	mov	r1, r3
 801eb9a:	68f8      	ldr	r0, [r7, #12]
 801eb9c:	f7e8 fd39 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801eba0:	e010      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	683a      	ldr	r2, [r7, #0]
 801eba6:	68b9      	ldr	r1, [r7, #8]
 801eba8:	4618      	mov	r0, r3
 801ebaa:	f000 f9d3 	bl	801ef54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801ebae:	e009      	b.n	801ebc4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801ebb0:	2300      	movs	r3, #0
 801ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ebb4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801ebb8:	f107 0318 	add.w	r3, r7, #24
 801ebbc:	4619      	mov	r1, r3
 801ebbe:	68f8      	ldr	r0, [r7, #12]
 801ebc0:	f7e8 fd62 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801ebc4:	68f8      	ldr	r0, [r7, #12]
 801ebc6:	3734      	adds	r7, #52	; 0x34
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	bd90      	pop	{r4, r7, pc}

0801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b084      	sub	sp, #16
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801ebd4:	6878      	ldr	r0, [r7, #4]
 801ebd6:	f000 fa70 	bl	801f0ba <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801ebda:	4602      	mov	r2, r0
 801ebdc:	f107 030c 	add.w	r3, r7, #12
 801ebe0:	4611      	mov	r1, r2
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	f000 fa77 	bl	801f0d6 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>
 801ebe8:	4603      	mov	r3, r0
      }
 801ebea:	4618      	mov	r0, r3
 801ebec:	3710      	adds	r7, #16
 801ebee:	46bd      	mov	sp, r7
 801ebf0:	bd80      	pop	{r7, pc}

0801ebf2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ebf2:	b5b0      	push	{r4, r5, r7, lr}
 801ebf4:	b086      	sub	sp, #24
 801ebf6:	af00      	add	r7, sp, #0
 801ebf8:	60f8      	str	r0, [r7, #12]
 801ebfa:	60b9      	str	r1, [r7, #8]
 801ebfc:	607a      	str	r2, [r7, #4]
 801ebfe:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801ec00:	68bb      	ldr	r3, [r7, #8]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d117      	bne.n	801ec36 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801ec06:	68f8      	ldr	r0, [r7, #12]
 801ec08:	f000 f8f4 	bl	801edf4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801ec0c:	4602      	mov	r2, r0
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	4293      	cmp	r3, r2
 801ec12:	d010      	beq.n	801ec36 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801ec14:	68fc      	ldr	r4, [r7, #12]
 801ec16:	6838      	ldr	r0, [r7, #0]
 801ec18:	f7ff ffd8 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ec1c:	4605      	mov	r5, r0
 801ec1e:	6878      	ldr	r0, [r7, #4]
 801ec20:	f000 f87c 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801ec24:	4603      	mov	r3, r0
 801ec26:	461a      	mov	r2, r3
 801ec28:	4629      	mov	r1, r5
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	f7fc ffa3 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ec30:	4603      	mov	r3, r0
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d001      	beq.n	801ec3a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 801ec36:	2301      	movs	r3, #1
 801ec38:	e000      	b.n	801ec3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 801ec3a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801ec3c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801ec3e:	68fb      	ldr	r3, [r7, #12]
 801ec40:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801ec42:	7df8      	ldrb	r0, [r7, #23]
 801ec44:	687a      	ldr	r2, [r7, #4]
 801ec46:	6839      	ldr	r1, [r7, #0]
 801ec48:	f004 fab4 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801ec4c:	68fb      	ldr	r3, [r7, #12]
 801ec4e:	695b      	ldr	r3, [r3, #20]
 801ec50:	1c5a      	adds	r2, r3, #1
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801ec56:	f107 0310 	add.w	r3, r7, #16
 801ec5a:	6839      	ldr	r1, [r7, #0]
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	f000 f805 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801ec62:	693b      	ldr	r3, [r7, #16]
    }
 801ec64:	4618      	mov	r0, r3
 801ec66:	3718      	adds	r7, #24
 801ec68:	46bd      	mov	sp, r7
 801ec6a:	bdb0      	pop	{r4, r5, r7, pc}

0801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801ec6c:	b480      	push	{r7}
 801ec6e:	b083      	sub	sp, #12
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
 801ec74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	683a      	ldr	r2, [r7, #0]
 801ec7a:	601a      	str	r2, [r3, #0]
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	4618      	mov	r0, r3
 801ec80:	370c      	adds	r7, #12
 801ec82:	46bd      	mov	sp, r7
 801ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec88:	4770      	bx	lr

0801ec8a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801ec8a:	b480      	push	{r7}
 801ec8c:	b083      	sub	sp, #12
 801ec8e:	af00      	add	r7, sp, #0
 801ec90:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	689b      	ldr	r3, [r3, #8]
      }
 801ec96:	4618      	mov	r0, r3
 801ec98:	370c      	adds	r7, #12
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca0:	4770      	bx	lr

0801eca2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801eca2:	b480      	push	{r7}
 801eca4:	b083      	sub	sp, #12
 801eca6:	af00      	add	r7, sp, #0
 801eca8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	3304      	adds	r3, #4
 801ecae:	4618      	mov	r0, r3
 801ecb0:	370c      	adds	r7, #12
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb8:	4770      	bx	lr

0801ecba <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ecba:	b590      	push	{r4, r7, lr}
 801ecbc:	b087      	sub	sp, #28
 801ecbe:	af00      	add	r7, sp, #0
 801ecc0:	60f8      	str	r0, [r7, #12]
 801ecc2:	60b9      	str	r1, [r7, #8]
 801ecc4:	607a      	str	r2, [r7, #4]
 801ecc6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ecc8:	68bb      	ldr	r3, [r7, #8]
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d01b      	beq.n	801ed06 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801ecce:	68fc      	ldr	r4, [r7, #12]
 801ecd0:	68b8      	ldr	r0, [r7, #8]
 801ecd2:	f7ff ff7b 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	683a      	ldr	r2, [r7, #0]
 801ecda:	4619      	mov	r1, r3
 801ecdc:	4620      	mov	r0, r4
 801ecde:	f7fc ff4a 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ece2:	4603      	mov	r3, r0
 801ece4:	f083 0301 	eor.w	r3, r3, #1
 801ece8:	b2db      	uxtb	r3, r3
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	d006      	beq.n	801ecfc <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801ecee:	68bb      	ldr	r3, [r7, #8]
 801ecf0:	607b      	str	r3, [r7, #4]
 801ecf2:	68b8      	ldr	r0, [r7, #8]
 801ecf4:	f000 f9fb 	bl	801f0ee <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801ecf8:	60b8      	str	r0, [r7, #8]
 801ecfa:	e7e5      	b.n	801ecc8 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801ecfc:	68b8      	ldr	r0, [r7, #8]
 801ecfe:	f000 fa02 	bl	801f106 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801ed02:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801ed04:	e7e0      	b.n	801ecc8 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 801ed06:	f107 0314 	add.w	r3, r7, #20
 801ed0a:	6879      	ldr	r1, [r7, #4]
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	f000 f811 	bl	801ed34 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 801ed12:	697b      	ldr	r3, [r7, #20]
    }
 801ed14:	4618      	mov	r0, r3
 801ed16:	371c      	adds	r7, #28
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bd90      	pop	{r4, r7, pc}

0801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	b082      	sub	sp, #8
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801ed24:	6878      	ldr	r0, [r7, #4]
 801ed26:	f7ff ff51 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ed2a:	4603      	mov	r3, r0
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	3708      	adds	r7, #8
 801ed30:	46bd      	mov	sp, r7
 801ed32:	bd80      	pop	{r7, pc}

0801ed34 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801ed34:	b480      	push	{r7}
 801ed36:	b083      	sub	sp, #12
 801ed38:	af00      	add	r7, sp, #0
 801ed3a:	6078      	str	r0, [r7, #4]
 801ed3c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	683a      	ldr	r2, [r7, #0]
 801ed42:	601a      	str	r2, [r3, #0]
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	4618      	mov	r0, r3
 801ed48:	370c      	adds	r7, #12
 801ed4a:	46bd      	mov	sp, r7
 801ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed50:	4770      	bx	lr

0801ed52 <_ZNSt22_Optional_payload_baseI8PinStateE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801ed52:	b580      	push	{r7, lr}
 801ed54:	b084      	sub	sp, #16
 801ed56:	af00      	add	r7, sp, #0
 801ed58:	60f8      	str	r0, [r7, #12]
 801ed5a:	7239      	strb	r1, [r7, #8]
 801ed5c:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801ed5e:	6878      	ldr	r0, [r7, #4]
 801ed60:	f7ff fd48 	bl	801e7f4 <_ZSt7forwardI8PinStateEOT_RNSt16remove_referenceIS1_E4typeE>
 801ed64:	4603      	mov	r3, r0
 801ed66:	781a      	ldrb	r2, [r3, #0]
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	701a      	strb	r2, [r3, #0]
	    { }
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	4618      	mov	r0, r3
 801ed70:	3710      	adds	r7, #16
 801ed72:	46bd      	mov	sp, r7
 801ed74:	bd80      	pop	{r7, pc}

0801ed76 <_ZNSt22_Optional_payload_baseI8PinStateEC1IJS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801ed76:	b5b0      	push	{r4, r5, r7, lr}
 801ed78:	b084      	sub	sp, #16
 801ed7a:	af00      	add	r7, sp, #0
 801ed7c:	60f8      	str	r0, [r7, #12]
 801ed7e:	7239      	strb	r1, [r7, #8]
 801ed80:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801ed82:	68fc      	ldr	r4, [r7, #12]
 801ed84:	6878      	ldr	r0, [r7, #4]
 801ed86:	f7ff fd35 	bl	801e7f4 <_ZSt7forwardI8PinStateEOT_RNSt16remove_referenceIS1_E4typeE>
 801ed8a:	4603      	mov	r3, r0
 801ed8c:	461a      	mov	r2, r3
 801ed8e:	4629      	mov	r1, r5
 801ed90:	4620      	mov	r0, r4
 801ed92:	f7ff ffde 	bl	801ed52 <_ZNSt22_Optional_payload_baseI8PinStateE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	2201      	movs	r2, #1
 801ed9a:	705a      	strb	r2, [r3, #1]
	{ }
 801ed9c:	68fb      	ldr	r3, [r7, #12]
 801ed9e:	4618      	mov	r0, r3
 801eda0:	3710      	adds	r7, #16
 801eda2:	46bd      	mov	sp, r7
 801eda4:	bdb0      	pop	{r4, r5, r7, pc}

0801eda6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801eda6:	b590      	push	{r4, r7, lr}
 801eda8:	b083      	sub	sp, #12
 801edaa:	af00      	add	r7, sp, #0
 801edac:	6078      	str	r0, [r7, #4]
 801edae:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801edb0:	6878      	ldr	r0, [r7, #4]
 801edb2:	f000 f9b4 	bl	801f11e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801edb6:	4604      	mov	r4, r0
 801edb8:	6838      	ldr	r0, [r7, #0]
 801edba:	f7ff fdb3 	bl	801e924 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801edbe:	4603      	mov	r3, r0
 801edc0:	4619      	mov	r1, r3
 801edc2:	4620      	mov	r0, r4
 801edc4:	f000 f9b6 	bl	801f134 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>
      }
 801edc8:	bf00      	nop
 801edca:	370c      	adds	r7, #12
 801edcc:	46bd      	mov	sp, r7
 801edce:	bd90      	pop	{r4, r7, pc}

0801edd0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801edd0:	b580      	push	{r7, lr}
 801edd2:	b082      	sub	sp, #8
 801edd4:	af00      	add	r7, sp, #0
 801edd6:	6078      	str	r0, [r7, #4]
 801edd8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801edda:	6878      	ldr	r0, [r7, #4]
 801eddc:	f000 f99f 	bl	801f11e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801ede0:	4603      	mov	r3, r0
 801ede2:	2201      	movs	r2, #1
 801ede4:	6839      	ldr	r1, [r7, #0]
 801ede6:	4618      	mov	r0, r3
 801ede8:	f000 f9b0 	bl	801f14c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>
 801edec:	bf00      	nop
 801edee:	3708      	adds	r7, #8
 801edf0:	46bd      	mov	sp, r7
 801edf2:	bd80      	pop	{r7, pc}

0801edf4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801edf4:	b480      	push	{r7}
 801edf6:	b083      	sub	sp, #12
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	3304      	adds	r3, #4
 801ee00:	4618      	mov	r0, r3
 801ee02:	370c      	adds	r7, #12
 801ee04:	46bd      	mov	sp, r7
 801ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee0a:	4770      	bx	lr

0801ee0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ee0c:	b590      	push	{r4, r7, lr}
 801ee0e:	b087      	sub	sp, #28
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	60f8      	str	r0, [r7, #12]
 801ee14:	60b9      	str	r1, [r7, #8]
 801ee16:	607a      	str	r2, [r7, #4]
 801ee18:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ee1a:	68bb      	ldr	r3, [r7, #8]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d01b      	beq.n	801ee58 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801ee20:	68fc      	ldr	r4, [r7, #12]
 801ee22:	68b8      	ldr	r0, [r7, #8]
 801ee24:	f7ff fed2 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	683a      	ldr	r2, [r7, #0]
 801ee2c:	4619      	mov	r1, r3
 801ee2e:	4620      	mov	r0, r4
 801ee30:	f7fc fea1 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ee34:	4603      	mov	r3, r0
 801ee36:	f083 0301 	eor.w	r3, r3, #1
 801ee3a:	b2db      	uxtb	r3, r3
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d006      	beq.n	801ee4e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801ee40:	68bb      	ldr	r3, [r7, #8]
 801ee42:	607b      	str	r3, [r7, #4]
 801ee44:	68b8      	ldr	r0, [r7, #8]
 801ee46:	f7ff fd1d 	bl	801e884 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ee4a:	60b8      	str	r0, [r7, #8]
 801ee4c:	e7e5      	b.n	801ee1a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801ee4e:	68b8      	ldr	r0, [r7, #8]
 801ee50:	f7ff fd0c 	bl	801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801ee54:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801ee56:	e7e0      	b.n	801ee1a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801ee58:	f107 0314 	add.w	r3, r7, #20
 801ee5c:	6879      	ldr	r1, [r7, #4]
 801ee5e:	4618      	mov	r0, r3
 801ee60:	f7ff ff04 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801ee64:	697b      	ldr	r3, [r7, #20]
    }
 801ee66:	4618      	mov	r0, r3
 801ee68:	371c      	adds	r7, #28
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	bd90      	pop	{r4, r7, pc}

0801ee6e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() noexcept
 801ee6e:	b580      	push	{r7, lr}
 801ee70:	b082      	sub	sp, #8
 801ee72:	af00      	add	r7, sp, #0
 801ee74:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801ee76:	6878      	ldr	r0, [r7, #4]
 801ee78:	f000 f987 	bl	801f18a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 801ee7c:	4603      	mov	r3, r0
 801ee7e:	4618      	mov	r0, r3
 801ee80:	3708      	adds	r7, #8
 801ee82:	46bd      	mov	sp, r7
 801ee84:	bd80      	pop	{r7, pc}

0801ee86 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 801ee86:	b580      	push	{r7, lr}
 801ee88:	b082      	sub	sp, #8
 801ee8a:	af00      	add	r7, sp, #0
 801ee8c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801ee8e:	6878      	ldr	r0, [r7, #4]
 801ee90:	f000 f945 	bl	801f11e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801ee94:	4603      	mov	r3, r0
 801ee96:	2101      	movs	r1, #1
 801ee98:	4618      	mov	r0, r3
 801ee9a:	f000 f981 	bl	801f1a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	4618      	mov	r0, r3
 801eea2:	3708      	adds	r7, #8
 801eea4:	46bd      	mov	sp, r7
 801eea6:	bd80      	pop	{r7, pc}

0801eea8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801eea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eeac:	b086      	sub	sp, #24
 801eeae:	af02      	add	r7, sp, #8
 801eeb0:	60f8      	str	r0, [r7, #12]
 801eeb2:	60b9      	str	r1, [r7, #8]
 801eeb4:	607a      	str	r2, [r7, #4]
 801eeb6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801eeb8:	68bb      	ldr	r3, [r7, #8]
 801eeba:	4619      	mov	r1, r3
 801eebc:	201c      	movs	r0, #28
 801eebe:	f7e1 fa5d 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801eec2:	68f8      	ldr	r0, [r7, #12]
 801eec4:	f000 f92b 	bl	801f11e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801eec8:	4604      	mov	r4, r0
 801eeca:	68b8      	ldr	r0, [r7, #8]
 801eecc:	f7ff fd2a 	bl	801e924 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801eed0:	4605      	mov	r5, r0
 801eed2:	6878      	ldr	r0, [r7, #4]
 801eed4:	f7fd f992 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801eed8:	4606      	mov	r6, r0
 801eeda:	6838      	ldr	r0, [r7, #0]
 801eedc:	f7fd f999 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801eee0:	4680      	mov	r8, r0
 801eee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eee4:	f7fd f9a0 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801eee8:	4603      	mov	r3, r0
 801eeea:	9300      	str	r3, [sp, #0]
 801eeec:	4643      	mov	r3, r8
 801eeee:	4632      	mov	r2, r6
 801eef0:	4629      	mov	r1, r5
 801eef2:	4620      	mov	r0, r4
 801eef4:	f000 f9a1 	bl	801f23a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 801eef8:	bf00      	nop
 801eefa:	3710      	adds	r7, #16
 801eefc:	46bd      	mov	sp, r7
 801eefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ef02 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801ef02:	b580      	push	{r7, lr}
 801ef04:	b084      	sub	sp, #16
 801ef06:	af00      	add	r7, sp, #0
 801ef08:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681a      	ldr	r2, [r3, #0]
 801ef0e:	f107 030c 	add.w	r3, r7, #12
 801ef12:	4611      	mov	r1, r2
 801ef14:	4618      	mov	r0, r3
 801ef16:	f7ff fea9 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801ef1a:	68fb      	ldr	r3, [r7, #12]
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	3710      	adds	r7, #16
 801ef20:	46bd      	mov	sp, r7
 801ef22:	bd80      	pop	{r7, pc}

0801ef24 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801ef24:	b480      	push	{r7}
 801ef26:	b083      	sub	sp, #12
 801ef28:	af00      	add	r7, sp, #0
 801ef2a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	695b      	ldr	r3, [r3, #20]
 801ef30:	4618      	mov	r0, r3
 801ef32:	370c      	adds	r7, #12
 801ef34:	46bd      	mov	sp, r7
 801ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef3a:	4770      	bx	lr

0801ef3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801ef3c:	b480      	push	{r7}
 801ef3e:	b083      	sub	sp, #12
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	3310      	adds	r3, #16
 801ef48:	4618      	mov	r0, r3
 801ef4a:	370c      	adds	r7, #12
 801ef4c:	46bd      	mov	sp, r7
 801ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef52:	4770      	bx	lr

0801ef54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ef54:	b590      	push	{r4, r7, lr}
 801ef56:	b08b      	sub	sp, #44	; 0x2c
 801ef58:	af00      	add	r7, sp, #0
 801ef5a:	60f8      	str	r0, [r7, #12]
 801ef5c:	60b9      	str	r1, [r7, #8]
 801ef5e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801ef60:	68b8      	ldr	r0, [r7, #8]
 801ef62:	f7ff fb41 	bl	801e5e8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801ef66:	4603      	mov	r3, r0
 801ef68:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801ef6a:	68b8      	ldr	r0, [r7, #8]
 801ef6c:	f7ff ff42 	bl	801edf4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801ef70:	4603      	mov	r3, r0
 801ef72:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801ef74:	2301      	movs	r3, #1
 801ef76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801ef7a:	69bb      	ldr	r3, [r7, #24]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d020      	beq.n	801efc2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801ef80:	69bb      	ldr	r3, [r7, #24]
 801ef82:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801ef84:	68bc      	ldr	r4, [r7, #8]
 801ef86:	69bb      	ldr	r3, [r7, #24]
 801ef88:	4618      	mov	r0, r3
 801ef8a:	f7ff fe1f 	bl	801ebcc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ef8e:	4603      	mov	r3, r0
 801ef90:	461a      	mov	r2, r3
 801ef92:	6879      	ldr	r1, [r7, #4]
 801ef94:	4620      	mov	r0, r4
 801ef96:	f7fc fdee 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801ef9a:	4603      	mov	r3, r0
 801ef9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801efa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d005      	beq.n	801efb4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 801efa8:	69bb      	ldr	r3, [r7, #24]
 801efaa:	4618      	mov	r0, r3
 801efac:	f7ff fc6a 	bl	801e884 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801efb0:	4603      	mov	r3, r0
 801efb2:	e004      	b.n	801efbe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 801efb4:	69bb      	ldr	r3, [r7, #24]
 801efb6:	4618      	mov	r0, r3
 801efb8:	f7ff fc58 	bl	801e86c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801efbc:	4603      	mov	r3, r0
 801efbe:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801efc0:	e7db      	b.n	801ef7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801efc2:	697a      	ldr	r2, [r7, #20]
 801efc4:	f107 0310 	add.w	r3, r7, #16
 801efc8:	4611      	mov	r1, r2
 801efca:	4618      	mov	r0, r3
 801efcc:	f7ff fe4e 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801efd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d01d      	beq.n	801f014 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801efd8:	68b8      	ldr	r0, [r7, #8]
 801efda:	f000 f94a 	bl	801f272 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 801efde:	4603      	mov	r3, r0
 801efe0:	61fb      	str	r3, [r7, #28]
 801efe2:	f107 021c 	add.w	r2, r7, #28
 801efe6:	f107 0310 	add.w	r3, r7, #16
 801efea:	4611      	mov	r1, r2
 801efec:	4618      	mov	r0, r3
 801efee:	f7ff fb23 	bl	801e638 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 801eff2:	4603      	mov	r3, r0
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	d008      	beq.n	801f00a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801eff8:	f107 0214 	add.w	r2, r7, #20
 801effc:	f107 0318 	add.w	r3, r7, #24
 801f000:	4619      	mov	r1, r3
 801f002:	68f8      	ldr	r0, [r7, #12]
 801f004:	f000 f946 	bl	801f294 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 801f008:	e025      	b.n	801f056 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801f00a:	f107 0310 	add.w	r3, r7, #16
 801f00e:	4618      	mov	r0, r3
 801f010:	f000 f831 	bl	801f076 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801f014:	68bc      	ldr	r4, [r7, #8]
 801f016:	693b      	ldr	r3, [r7, #16]
 801f018:	4618      	mov	r0, r3
 801f01a:	f7ff fe7f 	bl	801ed1c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801f01e:	4603      	mov	r3, r0
 801f020:	687a      	ldr	r2, [r7, #4]
 801f022:	4619      	mov	r1, r3
 801f024:	4620      	mov	r0, r4
 801f026:	f7fc fda6 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 801f02a:	4603      	mov	r3, r0
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d008      	beq.n	801f042 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801f030:	f107 0214 	add.w	r2, r7, #20
 801f034:	f107 0318 	add.w	r3, r7, #24
 801f038:	4619      	mov	r1, r3
 801f03a:	68f8      	ldr	r0, [r7, #12]
 801f03c:	f000 f92a 	bl	801f294 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 801f040:	e009      	b.n	801f056 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801f042:	2300      	movs	r3, #0
 801f044:	623b      	str	r3, [r7, #32]
 801f046:	f107 0220 	add.w	r2, r7, #32
 801f04a:	f107 0310 	add.w	r3, r7, #16
 801f04e:	4619      	mov	r1, r3
 801f050:	68f8      	ldr	r0, [r7, #12]
 801f052:	f7e8 fb19 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801f056:	68f8      	ldr	r0, [r7, #12]
 801f058:	372c      	adds	r7, #44	; 0x2c
 801f05a:	46bd      	mov	sp, r7
 801f05c:	bd90      	pop	{r4, r7, pc}

0801f05e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801f05e:	b480      	push	{r7}
 801f060:	b083      	sub	sp, #12
 801f062:	af00      	add	r7, sp, #0
 801f064:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	330c      	adds	r3, #12
 801f06a:	4618      	mov	r0, r3
 801f06c:	370c      	adds	r7, #12
 801f06e:	46bd      	mov	sp, r7
 801f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f074:	4770      	bx	lr

0801f076 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801f076:	b580      	push	{r7, lr}
 801f078:	b082      	sub	sp, #8
 801f07a:	af00      	add	r7, sp, #0
 801f07c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	4618      	mov	r0, r3
 801f084:	f004 f894 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801f088:	4602      	mov	r2, r0
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	601a      	str	r2, [r3, #0]
	return *this;
 801f08e:	687b      	ldr	r3, [r7, #4]
      }
 801f090:	4618      	mov	r0, r3
 801f092:	3708      	adds	r7, #8
 801f094:	46bd      	mov	sp, r7
 801f096:	bd80      	pop	{r7, pc}

0801f098 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801f098:	b580      	push	{r7, lr}
 801f09a:	b082      	sub	sp, #8
 801f09c:	af00      	add	r7, sp, #0
 801f09e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	f004 f881 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801f0aa:	4602      	mov	r2, r0
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	601a      	str	r2, [r3, #0]
	return *this;
 801f0b0:	687b      	ldr	r3, [r7, #4]
      }
 801f0b2:	4618      	mov	r0, r3
 801f0b4:	3708      	adds	r7, #8
 801f0b6:	46bd      	mov	sp, r7
 801f0b8:	bd80      	pop	{r7, pc}

0801f0ba <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr() const
 801f0ba:	b580      	push	{r7, lr}
 801f0bc:	b082      	sub	sp, #8
 801f0be:	af00      	add	r7, sp, #0
 801f0c0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	3310      	adds	r3, #16
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	f000 f8fd 	bl	801f2c6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 801f0cc:	4603      	mov	r3, r0
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	3708      	adds	r7, #8
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	bd80      	pop	{r7, pc}

0801f0d6 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>:
      operator()(const _Pair& __x) const
 801f0d6:	b480      	push	{r7}
 801f0d8:	b083      	sub	sp, #12
 801f0da:	af00      	add	r7, sp, #0
 801f0dc:	6078      	str	r0, [r7, #4]
 801f0de:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801f0e0:	683b      	ldr	r3, [r7, #0]
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	370c      	adds	r7, #12
 801f0e6:	46bd      	mov	sp, r7
 801f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ec:	4770      	bx	lr

0801f0ee <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801f0ee:	b480      	push	{r7}
 801f0f0:	b083      	sub	sp, #12
 801f0f2:	af00      	add	r7, sp, #0
 801f0f4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	689b      	ldr	r3, [r3, #8]
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	370c      	adds	r7, #12
 801f0fe:	46bd      	mov	sp, r7
 801f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f104:	4770      	bx	lr

0801f106 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801f106:	b480      	push	{r7}
 801f108:	b083      	sub	sp, #12
 801f10a:	af00      	add	r7, sp, #0
 801f10c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	68db      	ldr	r3, [r3, #12]
 801f112:	4618      	mov	r0, r3
 801f114:	370c      	adds	r7, #12
 801f116:	46bd      	mov	sp, r7
 801f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f11c:	4770      	bx	lr

0801f11e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801f11e:	b480      	push	{r7}
 801f120:	b083      	sub	sp, #12
 801f122:	af00      	add	r7, sp, #0
 801f124:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	4618      	mov	r0, r3
 801f12a:	370c      	adds	r7, #12
 801f12c:	46bd      	mov	sp, r7
 801f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f132:	4770      	bx	lr

0801f134 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801f134:	b580      	push	{r7, lr}
 801f136:	b082      	sub	sp, #8
 801f138:	af00      	add	r7, sp, #0
 801f13a:	6078      	str	r0, [r7, #4]
 801f13c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801f13e:	6838      	ldr	r0, [r7, #0]
 801f140:	f000 f8cd 	bl	801f2de <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>
	}
 801f144:	bf00      	nop
 801f146:	3708      	adds	r7, #8
 801f148:	46bd      	mov	sp, r7
 801f14a:	bd80      	pop	{r7, pc}

0801f14c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801f14c:	b580      	push	{r7, lr}
 801f14e:	b088      	sub	sp, #32
 801f150:	af00      	add	r7, sp, #0
 801f152:	60f8      	str	r0, [r7, #12]
 801f154:	60b9      	str	r1, [r7, #8]
 801f156:	607a      	str	r2, [r7, #4]
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	61fb      	str	r3, [r7, #28]
 801f15c:	68bb      	ldr	r3, [r7, #8]
 801f15e:	61bb      	str	r3, [r7, #24]
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801f164:	f7e1 f8d4 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801f168:	4603      	mov	r3, r0
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d003      	beq.n	801f176 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 801f16e:	69b8      	ldr	r0, [r7, #24]
 801f170:	f003 ffb3 	bl	80230da <_ZdlPv>
	    return;
 801f174:	e005      	b.n	801f182 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801f176:	697a      	ldr	r2, [r7, #20]
 801f178:	69b9      	ldr	r1, [r7, #24]
 801f17a:	69f8      	ldr	r0, [r7, #28]
 801f17c:	f000 f8ff 	bl	801f37e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 801f180:	bf00      	nop
 801f182:	bf00      	nop
 801f184:	3720      	adds	r7, #32
 801f186:	46bd      	mov	sp, r7
 801f188:	bd80      	pop	{r7, pc}

0801f18a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() noexcept
 801f18a:	b480      	push	{r7}
 801f18c:	b083      	sub	sp, #12
 801f18e:	af00      	add	r7, sp, #0
 801f190:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	4618      	mov	r0, r3
 801f196:	370c      	adds	r7, #12
 801f198:	46bd      	mov	sp, r7
 801f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f19e:	4770      	bx	lr

0801f1a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801f1a0:	b580      	push	{r7, lr}
 801f1a2:	b084      	sub	sp, #16
 801f1a4:	af00      	add	r7, sp, #0
 801f1a6:	6078      	str	r0, [r7, #4]
 801f1a8:	6039      	str	r1, [r7, #0]
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	60fb      	str	r3, [r7, #12]
 801f1ae:	683b      	ldr	r3, [r7, #0]
 801f1b0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801f1b2:	f7e1 f8ad 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 801f1b6:	4603      	mov	r3, r0
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d009      	beq.n	801f1d0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801f1bc:	68ba      	ldr	r2, [r7, #8]
 801f1be:	4613      	mov	r3, r2
 801f1c0:	00db      	lsls	r3, r3, #3
 801f1c2:	1a9b      	subs	r3, r3, r2
 801f1c4:	009b      	lsls	r3, r3, #2
 801f1c6:	4618      	mov	r0, r3
 801f1c8:	f003 ff8b 	bl	80230e2 <_Znwj>
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	e006      	b.n	801f1de <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801f1d0:	2200      	movs	r2, #0
 801f1d2:	68b9      	ldr	r1, [r7, #8]
 801f1d4:	68f8      	ldr	r0, [r7, #12]
 801f1d6:	f000 f8e4 	bl	801f3a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	bf00      	nop
      { return __a.allocate(__n); }
 801f1de:	4618      	mov	r0, r3
 801f1e0:	3710      	adds	r7, #16
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}

0801f1e6 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801f1e6:	b5b0      	push	{r4, r5, r7, lr}
 801f1e8:	b088      	sub	sp, #32
 801f1ea:	af00      	add	r7, sp, #0
 801f1ec:	60f8      	str	r0, [r7, #12]
 801f1ee:	60b9      	str	r1, [r7, #8]
 801f1f0:	607a      	str	r2, [r7, #4]
 801f1f2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801f1f4:	68b8      	ldr	r0, [r7, #8]
 801f1f6:	f7fd f801 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f1fa:	6878      	ldr	r0, [r7, #4]
 801f1fc:	f7fd f809 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f200:	4602      	mov	r2, r0
 801f202:	f107 0318 	add.w	r3, r7, #24
 801f206:	4611      	mov	r1, r2
 801f208:	4618      	mov	r0, r3
 801f20a:	f7fd fe64 	bl	801ced6 <_ZNSt5tupleIJRKhEEC1EOS2_>
 801f20e:	f107 0418 	add.w	r4, r7, #24
 801f212:	6838      	ldr	r0, [r7, #0]
 801f214:	f7fd f808 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	4619      	mov	r1, r3
 801f21c:	200c      	movs	r0, #12
 801f21e:	f7e1 f8ad 	bl	800037c <_ZnwjPv>
 801f222:	4605      	mov	r5, r0
 801f224:	7f3b      	ldrb	r3, [r7, #28]
 801f226:	4622      	mov	r2, r4
 801f228:	7d39      	ldrb	r1, [r7, #20]
 801f22a:	4628      	mov	r0, r5
 801f22c:	f000 f87d 	bl	801f32a <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 801f230:	462b      	mov	r3, r5
 801f232:	4618      	mov	r0, r3
 801f234:	3720      	adds	r7, #32
 801f236:	46bd      	mov	sp, r7
 801f238:	bdb0      	pop	{r4, r5, r7, pc}

0801f23a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801f23a:	b5b0      	push	{r4, r5, r7, lr}
 801f23c:	b084      	sub	sp, #16
 801f23e:	af00      	add	r7, sp, #0
 801f240:	60f8      	str	r0, [r7, #12]
 801f242:	60b9      	str	r1, [r7, #8]
 801f244:	607a      	str	r2, [r7, #4]
 801f246:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801f248:	6878      	ldr	r0, [r7, #4]
 801f24a:	f7fc ffd7 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f24e:	4604      	mov	r4, r0
 801f250:	6838      	ldr	r0, [r7, #0]
 801f252:	f7fc ffde 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f256:	4605      	mov	r5, r0
 801f258:	6a38      	ldr	r0, [r7, #32]
 801f25a:	f7fc ffe5 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f25e:	4603      	mov	r3, r0
 801f260:	462a      	mov	r2, r5
 801f262:	4621      	mov	r1, r4
 801f264:	68b8      	ldr	r0, [r7, #8]
 801f266:	f7ff ffbe 	bl	801f1e6 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 801f26a:	bf00      	nop
 801f26c:	3710      	adds	r7, #16
 801f26e:	46bd      	mov	sp, r7
 801f270:	bdb0      	pop	{r4, r5, r7, pc}

0801f272 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801f272:	b580      	push	{r7, lr}
 801f274:	b084      	sub	sp, #16
 801f276:	af00      	add	r7, sp, #0
 801f278:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	68da      	ldr	r2, [r3, #12]
 801f27e:	f107 030c 	add.w	r3, r7, #12
 801f282:	4611      	mov	r1, r2
 801f284:	4618      	mov	r0, r3
 801f286:	f7ff fcf1 	bl	801ec6c <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	4618      	mov	r0, r3
 801f28e:	3710      	adds	r7, #16
 801f290:	46bd      	mov	sp, r7
 801f292:	bd80      	pop	{r7, pc}

0801f294 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801f294:	b580      	push	{r7, lr}
 801f296:	b084      	sub	sp, #16
 801f298:	af00      	add	r7, sp, #0
 801f29a:	60f8      	str	r0, [r7, #12]
 801f29c:	60b9      	str	r1, [r7, #8]
 801f29e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801f2a0:	68b8      	ldr	r0, [r7, #8]
 801f2a2:	f000 f856 	bl	801f352 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801f2a6:	4603      	mov	r3, r0
 801f2a8:	681a      	ldr	r2, [r3, #0]
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	601a      	str	r2, [r3, #0]
 801f2ae:	6878      	ldr	r0, [r7, #4]
 801f2b0:	f7e9 fe14 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801f2b4:	4603      	mov	r3, r0
 801f2b6:	681a      	ldr	r2, [r3, #0]
 801f2b8:	68fb      	ldr	r3, [r7, #12]
 801f2ba:	605a      	str	r2, [r3, #4]
 801f2bc:	68fb      	ldr	r3, [r7, #12]
 801f2be:	4618      	mov	r0, r3
 801f2c0:	3710      	adds	r7, #16
 801f2c2:	46bd      	mov	sp, r7
 801f2c4:	bd80      	pop	{r7, pc}

0801f2c6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801f2c6:	b580      	push	{r7, lr}
 801f2c8:	b082      	sub	sp, #8
 801f2ca:	af00      	add	r7, sp, #0
 801f2cc:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801f2ce:	6878      	ldr	r0, [r7, #4]
 801f2d0:	f000 f84a 	bl	801f368 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 801f2d4:	4603      	mov	r3, r0
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	3708      	adds	r7, #8
 801f2da:	46bd      	mov	sp, r7
 801f2dc:	bd80      	pop	{r7, pc}

0801f2de <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>:
    destroy_at(_Tp* __location)
 801f2de:	b480      	push	{r7}
 801f2e0:	b083      	sub	sp, #12
 801f2e2:	af00      	add	r7, sp, #0
 801f2e4:	6078      	str	r0, [r7, #4]
    }
 801f2e6:	bf00      	nop
 801f2e8:	370c      	adds	r7, #12
 801f2ea:	46bd      	mov	sp, r7
 801f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2f0:	4770      	bx	lr

0801f2f2 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801f2f2:	b580      	push	{r7, lr}
 801f2f4:	b084      	sub	sp, #16
 801f2f6:	af00      	add	r7, sp, #0
 801f2f8:	60f8      	str	r0, [r7, #12]
 801f2fa:	60b9      	str	r1, [r7, #8]
 801f2fc:	607a      	str	r2, [r7, #4]
 801f2fe:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801f300:	68b8      	ldr	r0, [r7, #8]
 801f302:	f7fe f803 	bl	801d30c <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801f306:	4603      	mov	r3, r0
 801f308:	4618      	mov	r0, r3
 801f30a:	f7fd fff4 	bl	801d2f6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801f30e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801f310:	781a      	ldrb	r2, [r3, #0]
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	701a      	strb	r2, [r3, #0]
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	3304      	adds	r3, #4
 801f31a:	4618      	mov	r0, r3
 801f31c:	f7f9 fe05 	bl	8018f2a <_ZN3PinC1Ev>
      { }
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	4618      	mov	r0, r3
 801f324:	3710      	adds	r7, #16
 801f326:	46bd      	mov	sp, r7
 801f328:	bd80      	pop	{r7, pc}

0801f32a <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801f32a:	b5b0      	push	{r4, r5, r7, lr}
 801f32c:	b086      	sub	sp, #24
 801f32e:	af02      	add	r7, sp, #8
 801f330:	60f8      	str	r0, [r7, #12]
 801f332:	7239      	strb	r1, [r7, #8]
 801f334:	607a      	str	r2, [r7, #4]
 801f336:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801f338:	463a      	mov	r2, r7
 801f33a:	f88d 4000 	strb.w	r4, [sp]
 801f33e:	462b      	mov	r3, r5
 801f340:	6879      	ldr	r1, [r7, #4]
 801f342:	68f8      	ldr	r0, [r7, #12]
 801f344:	f7ff ffd5 	bl	801f2f2 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 801f348:	68fb      	ldr	r3, [r7, #12]
 801f34a:	4618      	mov	r0, r3
 801f34c:	3710      	adds	r7, #16
 801f34e:	46bd      	mov	sp, r7
 801f350:	bdb0      	pop	{r4, r5, r7, pc}

0801f352 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801f352:	b480      	push	{r7}
 801f354:	b083      	sub	sp, #12
 801f356:	af00      	add	r7, sp, #0
 801f358:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	4618      	mov	r0, r3
 801f35e:	370c      	adds	r7, #12
 801f360:	46bd      	mov	sp, r7
 801f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f366:	4770      	bx	lr

0801f368 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() const noexcept
 801f368:	b480      	push	{r7}
 801f36a:	b083      	sub	sp, #12
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	4618      	mov	r0, r3
 801f374:	370c      	adds	r7, #12
 801f376:	46bd      	mov	sp, r7
 801f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37c:	4770      	bx	lr

0801f37e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 801f37e:	b580      	push	{r7, lr}
 801f380:	b084      	sub	sp, #16
 801f382:	af00      	add	r7, sp, #0
 801f384:	60f8      	str	r0, [r7, #12]
 801f386:	60b9      	str	r1, [r7, #8]
 801f388:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801f38a:	687a      	ldr	r2, [r7, #4]
 801f38c:	4613      	mov	r3, r2
 801f38e:	00db      	lsls	r3, r3, #3
 801f390:	1a9b      	subs	r3, r3, r2
 801f392:	009b      	lsls	r3, r3, #2
 801f394:	4619      	mov	r1, r3
 801f396:	68b8      	ldr	r0, [r7, #8]
 801f398:	f003 fea1 	bl	80230de <_ZdlPvj>
      }
 801f39c:	3710      	adds	r7, #16
 801f39e:	46bd      	mov	sp, r7
 801f3a0:	bd80      	pop	{r7, pc}

0801f3a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801f3a2:	b580      	push	{r7, lr}
 801f3a4:	b084      	sub	sp, #16
 801f3a6:	af00      	add	r7, sp, #0
 801f3a8:	60f8      	str	r0, [r7, #12]
 801f3aa:	60b9      	str	r1, [r7, #8]
 801f3ac:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801f3ae:	68f8      	ldr	r0, [r7, #12]
 801f3b0:	f000 f81a 	bl	801f3e8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>
 801f3b4:	4602      	mov	r2, r0
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	4293      	cmp	r3, r2
 801f3ba:	bf8c      	ite	hi
 801f3bc:	2301      	movhi	r3, #1
 801f3be:	2300      	movls	r3, #0
 801f3c0:	b2db      	uxtb	r3, r3
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d001      	beq.n	801f3ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801f3c6:	f003 ff50 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801f3ca:	68ba      	ldr	r2, [r7, #8]
 801f3cc:	4613      	mov	r3, r2
 801f3ce:	00db      	lsls	r3, r3, #3
 801f3d0:	1a9b      	subs	r3, r3, r2
 801f3d2:	009b      	lsls	r3, r3, #2
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f003 fe84 	bl	80230e2 <_Znwj>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	bf00      	nop
      }
 801f3de:	4618      	mov	r0, r3
 801f3e0:	3710      	adds	r7, #16
 801f3e2:	46bd      	mov	sp, r7
 801f3e4:	bd80      	pop	{r7, pc}
	...

0801f3e8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801f3e8:	b480      	push	{r7}
 801f3ea:	b083      	sub	sp, #12
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801f3f0:	4b03      	ldr	r3, [pc, #12]	; (801f400 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv+0x18>)
      }
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	370c      	adds	r7, #12
 801f3f6:	46bd      	mov	sp, r7
 801f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fc:	4770      	bx	lr
 801f3fe:	bf00      	nop
 801f400:	04924924 	.word	0x04924924

0801f404 <_Z41__static_initialization_and_destruction_0ii>:
 801f404:	b580      	push	{r7, lr}
 801f406:	b082      	sub	sp, #8
 801f408:	af00      	add	r7, sp, #0
 801f40a:	6078      	str	r0, [r7, #4]
 801f40c:	6039      	str	r1, [r7, #0]
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	2b01      	cmp	r3, #1
 801f412:	d110      	bne.n	801f436 <_Z41__static_initialization_and_destruction_0ii+0x32>
 801f414:	683b      	ldr	r3, [r7, #0]
 801f416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f41a:	4293      	cmp	r3, r2
 801f41c:	d10b      	bne.n	801f436 <_Z41__static_initialization_and_destruction_0ii+0x32>
map<uint8_t,Pin> DigitalInput::service_ids = {};
 801f41e:	4b0d      	ldr	r3, [pc, #52]	; (801f454 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f420:	461a      	mov	r2, r3
 801f422:	2300      	movs	r3, #0
 801f424:	6013      	str	r3, [r2, #0]
 801f426:	6053      	str	r3, [r2, #4]
 801f428:	6093      	str	r3, [r2, #8]
 801f42a:	60d3      	str	r3, [r2, #12]
 801f42c:	6113      	str	r3, [r2, #16]
 801f42e:	6153      	str	r3, [r2, #20]
 801f430:	4808      	ldr	r0, [pc, #32]	; (801f454 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f432:	f7fe ff24 	bl	801e27e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d107      	bne.n	801f44c <_Z41__static_initialization_and_destruction_0ii+0x48>
 801f43c:	683b      	ldr	r3, [r7, #0]
 801f43e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f442:	4293      	cmp	r3, r2
 801f444:	d102      	bne.n	801f44c <_Z41__static_initialization_and_destruction_0ii+0x48>
 801f446:	4803      	ldr	r0, [pc, #12]	; (801f454 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f448:	f7fe ff26 	bl	801e298 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
}
 801f44c:	bf00      	nop
 801f44e:	3708      	adds	r7, #8
 801f450:	46bd      	mov	sp, r7
 801f452:	bd80      	pop	{r7, pc}
 801f454:	240017a0 	.word	0x240017a0

0801f458 <_GLOBAL__sub_I__ZN12DigitalInput10id_counterE>:
 801f458:	b580      	push	{r7, lr}
 801f45a:	af00      	add	r7, sp, #0
 801f45c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f460:	2001      	movs	r0, #1
 801f462:	f7ff ffcf 	bl	801f404 <_Z41__static_initialization_and_destruction_0ii>
 801f466:	bd80      	pop	{r7, pc}

0801f468 <_GLOBAL__sub_D__ZN12DigitalInput10id_counterE>:
 801f468:	b580      	push	{r7, lr}
 801f46a:	af00      	add	r7, sp, #0
 801f46c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f470:	2000      	movs	r0, #0
 801f472:	f7ff ffc7 	bl	801f404 <_Z41__static_initialization_and_destruction_0ii>
 801f476:	bd80      	pop	{r7, pc}

0801f478 <_ZN20DigitalOutputService8inscribeER3Pin>:
#include "DigitalOutputService/DigitalOutputService.hpp"

uint8_t DigitalOutputService::id_counter = 0;
map<uint8_t,Pin> DigitalOutputService::service_ids = {};

uint8_t DigitalOutputService::inscribe(Pin& pin){
 801f478:	b580      	push	{r7, lr}
 801f47a:	b082      	sub	sp, #8
 801f47c:	af00      	add	r7, sp, #0
 801f47e:	6078      	str	r0, [r7, #4]
        Pin::inscribe(pin, OUTPUT);
 801f480:	2102      	movs	r1, #2
 801f482:	6878      	ldr	r0, [r7, #4]
 801f484:	f7f9 fd94 	bl	8018fb0 <_ZN3Pin8inscribeERS_13OperationMode>
		DigitalOutputService::service_ids[id_counter] = pin;
 801f488:	4909      	ldr	r1, [pc, #36]	; (801f4b0 <_ZN20DigitalOutputService8inscribeER3Pin+0x38>)
 801f48a:	480a      	ldr	r0, [pc, #40]	; (801f4b4 <_ZN20DigitalOutputService8inscribeER3Pin+0x3c>)
 801f48c:	f7fe ffac 	bl	801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801f490:	4603      	mov	r3, r0
 801f492:	687a      	ldr	r2, [r7, #4]
 801f494:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f498:	e883 0003 	stmia.w	r3, {r0, r1}
		return id_counter++;
 801f49c:	4b04      	ldr	r3, [pc, #16]	; (801f4b0 <_ZN20DigitalOutputService8inscribeER3Pin+0x38>)
 801f49e:	781b      	ldrb	r3, [r3, #0]
 801f4a0:	1c5a      	adds	r2, r3, #1
 801f4a2:	b2d1      	uxtb	r1, r2
 801f4a4:	4a02      	ldr	r2, [pc, #8]	; (801f4b0 <_ZN20DigitalOutputService8inscribeER3Pin+0x38>)
 801f4a6:	7011      	strb	r1, [r2, #0]
}
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	3708      	adds	r7, #8
 801f4ac:	46bd      	mov	sp, r7
 801f4ae:	bd80      	pop	{r7, pc}
 801f4b0:	240017b8 	.word	0x240017b8
 801f4b4:	240017bc 	.word	0x240017bc

0801f4b8 <_ZN20DigitalOutputService8turn_offEh>:

void DigitalOutputService::turn_off(uint8_t id){
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b084      	sub	sp, #16
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	4603      	mov	r3, r0
 801f4c0:	71fb      	strb	r3, [r7, #7]
	if (not DigitalOutputService::service_ids.contains(id))
 801f4c2:	1dfb      	adds	r3, r7, #7
 801f4c4:	4619      	mov	r1, r3
 801f4c6:	4810      	ldr	r0, [pc, #64]	; (801f508 <_ZN20DigitalOutputService8turn_offEh+0x50>)
 801f4c8:	f7fe ffea 	bl	801e4a0 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 801f4cc:	4603      	mov	r3, r0
 801f4ce:	f083 0301 	eor.w	r3, r3, #1
 801f4d2:	b2db      	uxtb	r3, r3
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d112      	bne.n	801f4fe <_ZN20DigitalOutputService8turn_offEh+0x46>
		return;

	Pin pin = DigitalOutputService::service_ids[id];
 801f4d8:	1dfb      	adds	r3, r7, #7
 801f4da:	4619      	mov	r1, r3
 801f4dc:	480a      	ldr	r0, [pc, #40]	; (801f508 <_ZN20DigitalOutputService8turn_offEh+0x50>)
 801f4de:	f7fe ff83 	bl	801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801f4e2:	4602      	mov	r2, r0
 801f4e4:	f107 0308 	add.w	r3, r7, #8
 801f4e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f4ec:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState)PinState::OFF);
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	89b9      	ldrh	r1, [r7, #12]
 801f4f4:	2200      	movs	r2, #0
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f7f3 fee0 	bl	80132bc <HAL_GPIO_WritePin>
 801f4fc:	e000      	b.n	801f500 <_ZN20DigitalOutputService8turn_offEh+0x48>
		return;
 801f4fe:	bf00      	nop
}
 801f500:	3710      	adds	r7, #16
 801f502:	46bd      	mov	sp, r7
 801f504:	bd80      	pop	{r7, pc}
 801f506:	bf00      	nop
 801f508:	240017bc 	.word	0x240017bc

0801f50c <_ZN20DigitalOutputService7turn_onEh>:

void DigitalOutputService::turn_on(uint8_t id){
 801f50c:	b580      	push	{r7, lr}
 801f50e:	b084      	sub	sp, #16
 801f510:	af00      	add	r7, sp, #0
 801f512:	4603      	mov	r3, r0
 801f514:	71fb      	strb	r3, [r7, #7]
	if (not DigitalOutputService::service_ids.contains(id))
 801f516:	1dfb      	adds	r3, r7, #7
 801f518:	4619      	mov	r1, r3
 801f51a:	4810      	ldr	r0, [pc, #64]	; (801f55c <_ZN20DigitalOutputService7turn_onEh+0x50>)
 801f51c:	f7fe ffc0 	bl	801e4a0 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 801f520:	4603      	mov	r3, r0
 801f522:	f083 0301 	eor.w	r3, r3, #1
 801f526:	b2db      	uxtb	r3, r3
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d112      	bne.n	801f552 <_ZN20DigitalOutputService7turn_onEh+0x46>
		return;

	Pin pin = DigitalOutputService::service_ids[id];
 801f52c:	1dfb      	adds	r3, r7, #7
 801f52e:	4619      	mov	r1, r3
 801f530:	480a      	ldr	r0, [pc, #40]	; (801f55c <_ZN20DigitalOutputService7turn_onEh+0x50>)
 801f532:	f7fe ff59 	bl	801e3e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801f536:	4602      	mov	r2, r0
 801f538:	f107 0308 	add.w	r3, r7, #8
 801f53c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f540:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState)PinState::ON);
 801f544:	68bb      	ldr	r3, [r7, #8]
 801f546:	89b9      	ldrh	r1, [r7, #12]
 801f548:	2201      	movs	r2, #1
 801f54a:	4618      	mov	r0, r3
 801f54c:	f7f3 feb6 	bl	80132bc <HAL_GPIO_WritePin>
 801f550:	e000      	b.n	801f554 <_ZN20DigitalOutputService7turn_onEh+0x48>
		return;
 801f552:	bf00      	nop
}
 801f554:	3710      	adds	r7, #16
 801f556:	46bd      	mov	sp, r7
 801f558:	bd80      	pop	{r7, pc}
 801f55a:	bf00      	nop
 801f55c:	240017bc 	.word	0x240017bc

0801f560 <_Z41__static_initialization_and_destruction_0ii>:
	if (not DigitalOutputService::service_ids.contains(id))
		return;

	Pin pin = DigitalOutputService::service_ids[id];
	HAL_GPIO_WritePin(pin.port, pin.gpio_pin, (GPIO_PinState) state);
}
 801f560:	b580      	push	{r7, lr}
 801f562:	b082      	sub	sp, #8
 801f564:	af00      	add	r7, sp, #0
 801f566:	6078      	str	r0, [r7, #4]
 801f568:	6039      	str	r1, [r7, #0]
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	2b01      	cmp	r3, #1
 801f56e:	d110      	bne.n	801f592 <_Z41__static_initialization_and_destruction_0ii+0x32>
 801f570:	683b      	ldr	r3, [r7, #0]
 801f572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f576:	4293      	cmp	r3, r2
 801f578:	d10b      	bne.n	801f592 <_Z41__static_initialization_and_destruction_0ii+0x32>
map<uint8_t,Pin> DigitalOutputService::service_ids = {};
 801f57a:	4b0d      	ldr	r3, [pc, #52]	; (801f5b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f57c:	461a      	mov	r2, r3
 801f57e:	2300      	movs	r3, #0
 801f580:	6013      	str	r3, [r2, #0]
 801f582:	6053      	str	r3, [r2, #4]
 801f584:	6093      	str	r3, [r2, #8]
 801f586:	60d3      	str	r3, [r2, #12]
 801f588:	6113      	str	r3, [r2, #16]
 801f58a:	6153      	str	r3, [r2, #20]
 801f58c:	4808      	ldr	r0, [pc, #32]	; (801f5b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f58e:	f7fe fe76 	bl	801e27e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	2b00      	cmp	r3, #0
 801f596:	d107      	bne.n	801f5a8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 801f598:	683b      	ldr	r3, [r7, #0]
 801f59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f59e:	4293      	cmp	r3, r2
 801f5a0:	d102      	bne.n	801f5a8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 801f5a2:	4803      	ldr	r0, [pc, #12]	; (801f5b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f5a4:	f7fe fe78 	bl	801e298 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
}
 801f5a8:	bf00      	nop
 801f5aa:	3708      	adds	r7, #8
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	bd80      	pop	{r7, pc}
 801f5b0:	240017bc 	.word	0x240017bc

0801f5b4 <_GLOBAL__sub_I__ZN20DigitalOutputService10id_counterE>:
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	af00      	add	r7, sp, #0
 801f5b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f5bc:	2001      	movs	r0, #1
 801f5be:	f7ff ffcf 	bl	801f560 <_Z41__static_initialization_and_destruction_0ii>
 801f5c2:	bd80      	pop	{r7, pc}

0801f5c4 <_GLOBAL__sub_D__ZN20DigitalOutputService10id_counterE>:
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	af00      	add	r7, sp, #0
 801f5c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f5cc:	2000      	movs	r0, #0
 801f5ce:	f7ff ffc7 	bl	801f560 <_Z41__static_initialization_and_destruction_0ii>
 801f5d2:	bd80      	pop	{r7, pc}

0801f5d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b082      	sub	sp, #8
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
 801f5dc:	6878      	ldr	r0, [r7, #4]
 801f5de:	f000 f874 	bl	801f6ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	4618      	mov	r0, r3
 801f5e6:	3708      	adds	r7, #8
 801f5e8:	46bd      	mov	sp, r7
 801f5ea:	bd80      	pop	{r7, pc}

0801f5ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801f5ec:	b580      	push	{r7, lr}
 801f5ee:	b082      	sub	sp, #8
 801f5f0:	af00      	add	r7, sp, #0
 801f5f2:	6078      	str	r0, [r7, #4]
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f000 f852 	bl	801f6a0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	4618      	mov	r0, r3
 801f600:	3708      	adds	r7, #8
 801f602:	46bd      	mov	sp, r7
 801f604:	bd80      	pop	{r7, pc}

0801f606 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 801f606:	b580      	push	{r7, lr}
 801f608:	b082      	sub	sp, #8
 801f60a:	af00      	add	r7, sp, #0
 801f60c:	6078      	str	r0, [r7, #4]
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	4618      	mov	r0, r3
 801f612:	f7ff ffeb 	bl	801f5ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	4618      	mov	r0, r3
 801f61a:	3708      	adds	r7, #8
 801f61c:	46bd      	mov	sp, r7
 801f61e:	bd80      	pop	{r7, pc}

0801f620 <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>:

map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances;
uint8_t ExternalInterrupt::id_counter = 0;

ExternalInterrupt::Instance::Instance(IRQn_Type interrupt_request_number) :
 801f620:	b580      	push	{r7, lr}
 801f622:	b082      	sub	sp, #8
 801f624:	af00      	add	r7, sp, #0
 801f626:	6078      	str	r0, [r7, #4]
 801f628:	460b      	mov	r3, r1
 801f62a:	807b      	strh	r3, [r7, #2]
		interrupt_request_number(interrupt_request_number) {}
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	887a      	ldrh	r2, [r7, #2]
 801f630:	801a      	strh	r2, [r3, #0]
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	3304      	adds	r3, #4
 801f636:	2100      	movs	r1, #0
 801f638:	4618      	mov	r0, r3
 801f63a:	f000 f823 	bl	801f684 <_ZNSt8functionIFvvEEC1EDn>
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	2201      	movs	r2, #1
 801f642:	751a      	strb	r2, [r3, #20]
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	4618      	mov	r0, r3
 801f648:	3708      	adds	r7, #8
 801f64a:	46bd      	mov	sp, r7
 801f64c:	bd80      	pop	{r7, pc}
	...

0801f650 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 801f650:	b580      	push	{r7, lr}
 801f652:	b084      	sub	sp, #16
 801f654:	af00      	add	r7, sp, #0
 801f656:	4603      	mov	r3, r0
 801f658:	80fb      	strh	r3, [r7, #6]
	ExternalInterrupt::Instance& exti = ExternalInterrupt::instances[GPIO_Pin];
 801f65a:	1dbb      	adds	r3, r7, #6
 801f65c:	4619      	mov	r1, r3
 801f65e:	4808      	ldr	r0, [pc, #32]	; (801f680 <HAL_GPIO_EXTI_Callback+0x30>)
 801f660:	f000 f854 	bl	801f70c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801f664:	60f8      	str	r0, [r7, #12]
	if (exti.is_on) {
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	7d1b      	ldrb	r3, [r3, #20]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d004      	beq.n	801f678 <HAL_GPIO_EXTI_Callback+0x28>
		exti.action();
 801f66e:	68fb      	ldr	r3, [r7, #12]
 801f670:	3304      	adds	r3, #4
 801f672:	4618      	mov	r0, r3
 801f674:	f000 f8a6 	bl	801f7c4 <_ZNKSt8functionIFvvEEclEv>
	}
}
 801f678:	bf00      	nop
 801f67a:	3710      	adds	r7, #16
 801f67c:	46bd      	mov	sp, r7
 801f67e:	bd80      	pop	{r7, pc}
 801f680:	240017ec 	.word	0x240017ec

0801f684 <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 801f684:	b580      	push	{r7, lr}
 801f686:	b082      	sub	sp, #8
 801f688:	af00      	add	r7, sp, #0
 801f68a:	6078      	str	r0, [r7, #4]
 801f68c:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	4618      	mov	r0, r3
 801f692:	f7e0 fe8c 	bl	80003ae <_ZNSt14_Function_baseC1Ev>
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	4618      	mov	r0, r3
 801f69a:	3708      	adds	r7, #8
 801f69c:	46bd      	mov	sp, r7
 801f69e:	bd80      	pop	{r7, pc}

0801f6a0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801f6a0:	b580      	push	{r7, lr}
 801f6a2:	b082      	sub	sp, #8
 801f6a4:	af00      	add	r7, sp, #0
 801f6a6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801f6a8:	6878      	ldr	r0, [r7, #4]
 801f6aa:	f000 f8bc 	bl	801f826 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f000 f8c4 	bl	801f83e <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	3304      	adds	r3, #4
 801f6ba:	4618      	mov	r0, r3
 801f6bc:	f7fb fbc7 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	3708      	adds	r7, #8
 801f6c6:	46bd      	mov	sp, r7
 801f6c8:	bd80      	pop	{r7, pc}

0801f6ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801f6ca:	b480      	push	{r7}
 801f6cc:	b083      	sub	sp, #12
 801f6ce:	af00      	add	r7, sp, #0
 801f6d0:	6078      	str	r0, [r7, #4]
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	370c      	adds	r7, #12
 801f6d8:	46bd      	mov	sp, r7
 801f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6de:	4770      	bx	lr

0801f6e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801f6e0:	b580      	push	{r7, lr}
 801f6e2:	b082      	sub	sp, #8
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801f6e8:	6878      	ldr	r0, [r7, #4]
 801f6ea:	f7ea fdee 	bl	800a2ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801f6ee:	4603      	mov	r3, r0
 801f6f0:	4619      	mov	r1, r3
 801f6f2:	6878      	ldr	r0, [r7, #4]
 801f6f4:	f7e7 fbaf 	bl	8006e56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	4618      	mov	r0, r3
 801f6fc:	f7ff ff6a 	bl	801f5d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	4618      	mov	r0, r3
 801f704:	3708      	adds	r7, #8
 801f706:	46bd      	mov	sp, r7
 801f708:	bd80      	pop	{r7, pc}
	...

0801f70c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 801f70c:	b590      	push	{r4, r7, lr}
 801f70e:	b08b      	sub	sp, #44	; 0x2c
 801f710:	af02      	add	r7, sp, #8
 801f712:	6078      	str	r0, [r7, #4]
 801f714:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801f716:	6839      	ldr	r1, [r7, #0]
 801f718:	6878      	ldr	r0, [r7, #4]
 801f71a:	f000 f89b 	bl	801f854 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 801f71e:	4603      	mov	r3, r0
 801f720:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801f722:	6878      	ldr	r0, [r7, #4]
 801f724:	f000 f864 	bl	801f7f0 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 801f728:	4603      	mov	r3, r0
 801f72a:	60fb      	str	r3, [r7, #12]
 801f72c:	f107 020c 	add.w	r2, r7, #12
 801f730:	f107 0308 	add.w	r3, r7, #8
 801f734:	4611      	mov	r1, r2
 801f736:	4618      	mov	r0, r3
 801f738:	f7ea fde4 	bl	800a304 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 801f73c:	4603      	mov	r3, r0
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d112      	bne.n	801f768 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 801f742:	6878      	ldr	r0, [r7, #4]
 801f744:	f000 f895 	bl	801f872 <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 801f748:	f107 0308 	add.w	r3, r7, #8
 801f74c:	4618      	mov	r0, r3
 801f74e:	f000 f85c 	bl	801f80a <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 801f752:	4603      	mov	r3, r0
 801f754:	461a      	mov	r2, r3
 801f756:	f107 0310 	add.w	r3, r7, #16
 801f75a:	6839      	ldr	r1, [r7, #0]
 801f75c:	4618      	mov	r0, r3
 801f75e:	f7e9 f9f6 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 801f762:	4603      	mov	r3, r0
 801f764:	2b00      	cmp	r3, #0
 801f766:	d001      	beq.n	801f76c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 801f768:	2301      	movs	r3, #1
 801f76a:	e000      	b.n	801f76e <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 801f76c:	2300      	movs	r3, #0
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d01b      	beq.n	801f7aa <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801f772:	687c      	ldr	r4, [r7, #4]
 801f774:	f107 0208 	add.w	r2, r7, #8
 801f778:	f107 0314 	add.w	r3, r7, #20
 801f77c:	4611      	mov	r1, r2
 801f77e:	4618      	mov	r0, r3
 801f780:	f7e5 fda1 	bl	80052c6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 801f784:	f107 0318 	add.w	r3, r7, #24
 801f788:	6839      	ldr	r1, [r7, #0]
 801f78a:	4618      	mov	r0, r3
 801f78c:	f000 f87e 	bl	801f88c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801f790:	f107 0218 	add.w	r2, r7, #24
 801f794:	f107 031c 	add.w	r3, r7, #28
 801f798:	9300      	str	r3, [sp, #0]
 801f79a:	4613      	mov	r3, r2
 801f79c:	4a08      	ldr	r2, [pc, #32]	; (801f7c0 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 801f79e:	6979      	ldr	r1, [r7, #20]
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f000 f882 	bl	801f8aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 801f7a6:	4603      	mov	r3, r0
 801f7a8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801f7aa:	f107 0308 	add.w	r3, r7, #8
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	f000 f82b 	bl	801f80a <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 801f7b4:	4603      	mov	r3, r0
 801f7b6:	3304      	adds	r3, #4
      }
 801f7b8:	4618      	mov	r0, r3
 801f7ba:	3724      	adds	r7, #36	; 0x24
 801f7bc:	46bd      	mov	sp, r7
 801f7be:	bd90      	pop	{r4, r7, pc}
 801f7c0:	08023b34 	.word	0x08023b34

0801f7c4 <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b082      	sub	sp, #8
 801f7c8:	af00      	add	r7, sp, #0
 801f7ca:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	4618      	mov	r0, r3
 801f7d0:	f7e0 fe0e 	bl	80003f0 <_ZNKSt14_Function_base8_M_emptyEv>
 801f7d4:	4603      	mov	r3, r0
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d001      	beq.n	801f7de <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 801f7da:	f003 fd4c 	bl	8023276 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	68db      	ldr	r3, [r3, #12]
 801f7e2:	687a      	ldr	r2, [r7, #4]
 801f7e4:	4610      	mov	r0, r2
 801f7e6:	4798      	blx	r3
 801f7e8:	bf00      	nop
    }
 801f7ea:	3708      	adds	r7, #8
 801f7ec:	46bd      	mov	sp, r7
 801f7ee:	bd80      	pop	{r7, pc}

0801f7f0 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801f7f0:	b580      	push	{r7, lr}
 801f7f2:	b082      	sub	sp, #8
 801f7f4:	af00      	add	r7, sp, #0
 801f7f6:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	f7e5 fd52 	bl	80052a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 801f800:	4603      	mov	r3, r0
 801f802:	4618      	mov	r0, r3
 801f804:	3708      	adds	r7, #8
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}

0801f80a <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801f80a:	b580      	push	{r7, lr}
 801f80c:	b082      	sub	sp, #8
 801f80e:	af00      	add	r7, sp, #0
 801f810:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	4618      	mov	r0, r3
 801f818:	f7eb fc67 	bl	800b0ea <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 801f81c:	4603      	mov	r3, r0
 801f81e:	4618      	mov	r0, r3
 801f820:	3708      	adds	r7, #8
 801f822:	46bd      	mov	sp, r7
 801f824:	bd80      	pop	{r7, pc}

0801f826 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801f826:	b580      	push	{r7, lr}
 801f828:	b082      	sub	sp, #8
 801f82a:	af00      	add	r7, sp, #0
 801f82c:	6078      	str	r0, [r7, #4]
 801f82e:	6878      	ldr	r0, [r7, #4]
 801f830:	f000 f879 	bl	801f926 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	4618      	mov	r0, r3
 801f838:	3708      	adds	r7, #8
 801f83a:	46bd      	mov	sp, r7
 801f83c:	bd80      	pop	{r7, pc}

0801f83e <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 801f83e:	b480      	push	{r7}
 801f840:	b083      	sub	sp, #12
 801f842:	af00      	add	r7, sp, #0
 801f844:	6078      	str	r0, [r7, #4]
      { }
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	4618      	mov	r0, r3
 801f84a:	370c      	adds	r7, #12
 801f84c:	46bd      	mov	sp, r7
 801f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f852:	4770      	bx	lr

0801f854 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 801f854:	b580      	push	{r7, lr}
 801f856:	b082      	sub	sp, #8
 801f858:	af00      	add	r7, sp, #0
 801f85a:	6078      	str	r0, [r7, #4]
 801f85c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	6839      	ldr	r1, [r7, #0]
 801f862:	4618      	mov	r0, r3
 801f864:	f000 f86a 	bl	801f93c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 801f868:	4603      	mov	r3, r0
 801f86a:	4618      	mov	r0, r3
 801f86c:	3708      	adds	r7, #8
 801f86e:	46bd      	mov	sp, r7
 801f870:	bd80      	pop	{r7, pc}

0801f872 <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 801f872:	b590      	push	{r4, r7, lr}
 801f874:	b083      	sub	sp, #12
 801f876:	af00      	add	r7, sp, #0
 801f878:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	4618      	mov	r0, r3
 801f87e:	f000 f874 	bl	801f96a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 801f882:	bf00      	nop
 801f884:	4620      	mov	r0, r4
 801f886:	370c      	adds	r7, #12
 801f888:	46bd      	mov	sp, r7
 801f88a:	bd90      	pop	{r4, r7, pc}

0801f88c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 801f88c:	b580      	push	{r7, lr}
 801f88e:	b082      	sub	sp, #8
 801f890:	af00      	add	r7, sp, #0
 801f892:	6078      	str	r0, [r7, #4]
 801f894:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	6839      	ldr	r1, [r7, #0]
 801f89a:	4618      	mov	r0, r3
 801f89c:	f000 f870 	bl	801f980 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	3708      	adds	r7, #8
 801f8a6:	46bd      	mov	sp, r7
 801f8a8:	bd80      	pop	{r7, pc}

0801f8aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f8aa:	b5b0      	push	{r4, r5, r7, lr}
 801f8ac:	b088      	sub	sp, #32
 801f8ae:	af00      	add	r7, sp, #0
 801f8b0:	60f8      	str	r0, [r7, #12]
 801f8b2:	60b9      	str	r1, [r7, #8]
 801f8b4:	607a      	str	r2, [r7, #4]
 801f8b6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801f8b8:	6878      	ldr	r0, [r7, #4]
 801f8ba:	f7fc fc9f 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f8be:	4604      	mov	r4, r0
 801f8c0:	6838      	ldr	r0, [r7, #0]
 801f8c2:	f000 f86c 	bl	801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f8c6:	4605      	mov	r5, r0
 801f8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f8ca:	f7fc fcad 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	462a      	mov	r2, r5
 801f8d2:	4621      	mov	r1, r4
 801f8d4:	68f8      	ldr	r0, [r7, #12]
 801f8d6:	f000 f86d 	bl	801f9b4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 801f8da:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801f8dc:	69f8      	ldr	r0, [r7, #28]
 801f8de:	f7ea fce1 	bl	800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801f8e2:	4603      	mov	r3, r0
 801f8e4:	f107 0010 	add.w	r0, r7, #16
 801f8e8:	68ba      	ldr	r2, [r7, #8]
 801f8ea:	68f9      	ldr	r1, [r7, #12]
 801f8ec:	f7e7 fae1 	bl	8006eb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 801f8f0:	697b      	ldr	r3, [r7, #20]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d007      	beq.n	801f906 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801f8f6:	6939      	ldr	r1, [r7, #16]
 801f8f8:	697a      	ldr	r2, [r7, #20]
 801f8fa:	69fb      	ldr	r3, [r7, #28]
 801f8fc:	68f8      	ldr	r0, [r7, #12]
 801f8fe:	f000 f87c 	bl	801f9fa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 801f902:	4603      	mov	r3, r0
 801f904:	e00b      	b.n	801f91e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 801f906:	69f9      	ldr	r1, [r7, #28]
 801f908:	68f8      	ldr	r0, [r7, #12]
 801f90a:	f7e9 f8da 	bl	8008ac2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 801f90e:	693a      	ldr	r2, [r7, #16]
 801f910:	f107 0318 	add.w	r3, r7, #24
 801f914:	4611      	mov	r1, r2
 801f916:	4618      	mov	r0, r3
 801f918:	f7e7 fabc 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801f91c:	69bb      	ldr	r3, [r7, #24]
      }
 801f91e:	4618      	mov	r0, r3
 801f920:	3720      	adds	r7, #32
 801f922:	46bd      	mov	sp, r7
 801f924:	bdb0      	pop	{r4, r5, r7, pc}

0801f926 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801f926:	b480      	push	{r7}
 801f928:	b083      	sub	sp, #12
 801f92a:	af00      	add	r7, sp, #0
 801f92c:	6078      	str	r0, [r7, #4]
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	4618      	mov	r0, r3
 801f932:	370c      	adds	r7, #12
 801f934:	46bd      	mov	sp, r7
 801f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f93a:	4770      	bx	lr

0801f93c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801f93c:	b590      	push	{r4, r7, lr}
 801f93e:	b083      	sub	sp, #12
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801f946:	6878      	ldr	r0, [r7, #4]
 801f948:	f7ea fcbf 	bl	800a2ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801f94c:	4604      	mov	r4, r0
 801f94e:	6878      	ldr	r0, [r7, #4]
 801f950:	f7e9 f8d9 	bl	8008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801f954:	4602      	mov	r2, r0
 801f956:	683b      	ldr	r3, [r7, #0]
 801f958:	4621      	mov	r1, r4
 801f95a:	6878      	ldr	r0, [r7, #4]
 801f95c:	f000 f88a 	bl	801fa74 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 801f960:	4603      	mov	r3, r0
 801f962:	4618      	mov	r0, r3
 801f964:	370c      	adds	r7, #12
 801f966:	46bd      	mov	sp, r7
 801f968:	bd90      	pop	{r4, r7, pc}

0801f96a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 801f96a:	b480      	push	{r7}
 801f96c:	b083      	sub	sp, #12
 801f96e:	af00      	add	r7, sp, #0
 801f970:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801f972:	bf00      	nop
 801f974:	4618      	mov	r0, r3
 801f976:	370c      	adds	r7, #12
 801f978:	46bd      	mov	sp, r7
 801f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f97e:	4770      	bx	lr

0801f980 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801f980:	b580      	push	{r7, lr}
 801f982:	b082      	sub	sp, #8
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
 801f988:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	6839      	ldr	r1, [r7, #0]
 801f98e:	4618      	mov	r0, r3
 801f990:	f000 f8a1 	bl	801fad6 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	4618      	mov	r0, r3
 801f998:	3708      	adds	r7, #8
 801f99a:	46bd      	mov	sp, r7
 801f99c:	bd80      	pop	{r7, pc}

0801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801f99e:	b480      	push	{r7}
 801f9a0:	b083      	sub	sp, #12
 801f9a2:	af00      	add	r7, sp, #0
 801f9a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	370c      	adds	r7, #12
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9b2:	4770      	bx	lr

0801f9b4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801f9b4:	b5b0      	push	{r4, r5, r7, lr}
 801f9b6:	b088      	sub	sp, #32
 801f9b8:	af02      	add	r7, sp, #8
 801f9ba:	60f8      	str	r0, [r7, #12]
 801f9bc:	60b9      	str	r1, [r7, #8]
 801f9be:	607a      	str	r2, [r7, #4]
 801f9c0:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801f9c2:	68f8      	ldr	r0, [r7, #12]
 801f9c4:	f7eb fc3e 	bl	800b244 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 801f9c8:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801f9ca:	68b8      	ldr	r0, [r7, #8]
 801f9cc:	f7fc fc16 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f9d0:	4604      	mov	r4, r0
 801f9d2:	6878      	ldr	r0, [r7, #4]
 801f9d4:	f7ff ffe3 	bl	801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f9d8:	4605      	mov	r5, r0
 801f9da:	6838      	ldr	r0, [r7, #0]
 801f9dc:	f7fc fc24 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f9e0:	4603      	mov	r3, r0
 801f9e2:	9300      	str	r3, [sp, #0]
 801f9e4:	462b      	mov	r3, r5
 801f9e6:	4622      	mov	r2, r4
 801f9e8:	6979      	ldr	r1, [r7, #20]
 801f9ea:	68f8      	ldr	r0, [r7, #12]
 801f9ec:	f000 f882 	bl	801faf4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 801f9f0:	697b      	ldr	r3, [r7, #20]
	}
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	3718      	adds	r7, #24
 801f9f6:	46bd      	mov	sp, r7
 801f9f8:	bdb0      	pop	{r4, r5, r7, pc}

0801f9fa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f9fa:	b5b0      	push	{r4, r5, r7, lr}
 801f9fc:	b086      	sub	sp, #24
 801f9fe:	af00      	add	r7, sp, #0
 801fa00:	60f8      	str	r0, [r7, #12]
 801fa02:	60b9      	str	r1, [r7, #8]
 801fa04:	607a      	str	r2, [r7, #4]
 801fa06:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801fa08:	68bb      	ldr	r3, [r7, #8]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d117      	bne.n	801fa3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801fa0e:	68f8      	ldr	r0, [r7, #12]
 801fa10:	f7e9 f879 	bl	8008b06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801fa14:	4602      	mov	r2, r0
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	4293      	cmp	r3, r2
 801fa1a:	d010      	beq.n	801fa3e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801fa1c:	68fc      	ldr	r4, [r7, #12]
 801fa1e:	6838      	ldr	r0, [r7, #0]
 801fa20:	f7ea fc40 	bl	800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801fa24:	4605      	mov	r5, r0
 801fa26:	6878      	ldr	r0, [r7, #4]
 801fa28:	f7e9 f885 	bl	8008b36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801fa2c:	4603      	mov	r3, r0
 801fa2e:	461a      	mov	r2, r3
 801fa30:	4629      	mov	r1, r5
 801fa32:	4620      	mov	r0, r4
 801fa34:	f7e9 f88b 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 801fa38:	4603      	mov	r3, r0
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d001      	beq.n	801fa42 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 801fa3e:	2301      	movs	r3, #1
 801fa40:	e000      	b.n	801fa44 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 801fa42:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801fa44:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801fa4a:	7df8      	ldrb	r0, [r7, #23]
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	6839      	ldr	r1, [r7, #0]
 801fa50:	f003 fbb0 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	695b      	ldr	r3, [r3, #20]
 801fa58:	1c5a      	adds	r2, r3, #1
 801fa5a:	68fb      	ldr	r3, [r7, #12]
 801fa5c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801fa5e:	f107 0310 	add.w	r3, r7, #16
 801fa62:	6839      	ldr	r1, [r7, #0]
 801fa64:	4618      	mov	r0, r3
 801fa66:	f7e7 fa15 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801fa6a:	693b      	ldr	r3, [r7, #16]
    }
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	3718      	adds	r7, #24
 801fa70:	46bd      	mov	sp, r7
 801fa72:	bdb0      	pop	{r4, r5, r7, pc}

0801fa74 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801fa74:	b590      	push	{r4, r7, lr}
 801fa76:	b087      	sub	sp, #28
 801fa78:	af00      	add	r7, sp, #0
 801fa7a:	60f8      	str	r0, [r7, #12]
 801fa7c:	60b9      	str	r1, [r7, #8]
 801fa7e:	607a      	str	r2, [r7, #4]
 801fa80:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801fa82:	68bb      	ldr	r3, [r7, #8]
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d01b      	beq.n	801fac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801fa88:	68fc      	ldr	r4, [r7, #12]
 801fa8a:	68b8      	ldr	r0, [r7, #8]
 801fa8c:	f7ea fc0a 	bl	800a2a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801fa90:	4603      	mov	r3, r0
 801fa92:	683a      	ldr	r2, [r7, #0]
 801fa94:	4619      	mov	r1, r3
 801fa96:	4620      	mov	r0, r4
 801fa98:	f7e9 f859 	bl	8008b4e <_ZNKSt4lessItEclERKtS2_>
 801fa9c:	4603      	mov	r3, r0
 801fa9e:	f083 0301 	eor.w	r3, r3, #1
 801faa2:	b2db      	uxtb	r3, r3
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d006      	beq.n	801fab6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801faa8:	68bb      	ldr	r3, [r7, #8]
 801faaa:	607b      	str	r3, [r7, #4]
 801faac:	68b8      	ldr	r0, [r7, #8]
 801faae:	f7e8 fffc 	bl	8008aaa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801fab2:	60b8      	str	r0, [r7, #8]
 801fab4:	e7e5      	b.n	801fa82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801fab6:	68b8      	ldr	r0, [r7, #8]
 801fab8:	f7e8 ffeb 	bl	8008a92 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801fabc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801fabe:	e7e0      	b.n	801fa82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801fac0:	f107 0314 	add.w	r3, r7, #20
 801fac4:	6879      	ldr	r1, [r7, #4]
 801fac6:	4618      	mov	r0, r3
 801fac8:	f7e7 f9e4 	bl	8006e94 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801facc:	697b      	ldr	r3, [r7, #20]
    }
 801face:	4618      	mov	r0, r3
 801fad0:	371c      	adds	r7, #28
 801fad2:	46bd      	mov	sp, r7
 801fad4:	bd90      	pop	{r4, r7, pc}

0801fad6 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 801fad6:	b480      	push	{r7}
 801fad8:	b083      	sub	sp, #12
 801fada:	af00      	add	r7, sp, #0
 801fadc:	6078      	str	r0, [r7, #4]
 801fade:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	683a      	ldr	r2, [r7, #0]
 801fae4:	601a      	str	r2, [r3, #0]
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	4618      	mov	r0, r3
 801faea:	370c      	adds	r7, #12
 801faec:	46bd      	mov	sp, r7
 801faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faf2:	4770      	bx	lr

0801faf4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801faf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801faf8:	b086      	sub	sp, #24
 801fafa:	af02      	add	r7, sp, #8
 801fafc:	60f8      	str	r0, [r7, #12]
 801fafe:	60b9      	str	r1, [r7, #8]
 801fb00:	607a      	str	r2, [r7, #4]
 801fb02:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801fb04:	68bb      	ldr	r3, [r7, #8]
 801fb06:	4619      	mov	r1, r3
 801fb08:	202c      	movs	r0, #44	; 0x2c
 801fb0a:	f7e0 fc37 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801fb0e:	68f8      	ldr	r0, [r7, #12]
 801fb10:	f7eb fae0 	bl	800b0d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 801fb14:	4604      	mov	r4, r0
 801fb16:	68b8      	ldr	r0, [r7, #8]
 801fb18:	f7eb fae7 	bl	800b0ea <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 801fb1c:	4605      	mov	r5, r0
 801fb1e:	6878      	ldr	r0, [r7, #4]
 801fb20:	f7fc fb6c 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fb24:	4606      	mov	r6, r0
 801fb26:	6838      	ldr	r0, [r7, #0]
 801fb28:	f7ff ff39 	bl	801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fb2c:	4680      	mov	r8, r0
 801fb2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801fb30:	f7fc fb7a 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fb34:	4603      	mov	r3, r0
 801fb36:	9300      	str	r3, [sp, #0]
 801fb38:	4643      	mov	r3, r8
 801fb3a:	4632      	mov	r2, r6
 801fb3c:	4629      	mov	r1, r5
 801fb3e:	4620      	mov	r0, r4
 801fb40:	f000 f83f 	bl	801fbc2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 801fb44:	bf00      	nop
 801fb46:	3710      	adds	r7, #16
 801fb48:	46bd      	mov	sp, r7
 801fb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fb4e <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 801fb4e:	b580      	push	{r7, lr}
 801fb50:	b082      	sub	sp, #8
 801fb52:	af00      	add	r7, sp, #0
 801fb54:	6078      	str	r0, [r7, #4]
 801fb56:	6039      	str	r1, [r7, #0]
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	683a      	ldr	r2, [r7, #0]
 801fb5c:	4611      	mov	r1, r2
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f000 f84b 	bl	801fbfa <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	4618      	mov	r0, r3
 801fb68:	3708      	adds	r7, #8
 801fb6a:	46bd      	mov	sp, r7
 801fb6c:	bd80      	pop	{r7, pc}

0801fb6e <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801fb6e:	b5b0      	push	{r4, r5, r7, lr}
 801fb70:	b088      	sub	sp, #32
 801fb72:	af00      	add	r7, sp, #0
 801fb74:	60f8      	str	r0, [r7, #12]
 801fb76:	60b9      	str	r1, [r7, #8]
 801fb78:	607a      	str	r2, [r7, #4]
 801fb7a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801fb7c:	68b8      	ldr	r0, [r7, #8]
 801fb7e:	f7fc fb3d 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fb82:	6878      	ldr	r0, [r7, #4]
 801fb84:	f7ff ff0b 	bl	801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fb88:	4602      	mov	r2, r0
 801fb8a:	f107 0318 	add.w	r3, r7, #24
 801fb8e:	4611      	mov	r1, r2
 801fb90:	4618      	mov	r0, r3
 801fb92:	f7ff ffdc 	bl	801fb4e <_ZNSt5tupleIJRKtEEC1EOS2_>
 801fb96:	f107 0418 	add.w	r4, r7, #24
 801fb9a:	6838      	ldr	r0, [r7, #0]
 801fb9c:	f7fc fb44 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fba0:	68fb      	ldr	r3, [r7, #12]
 801fba2:	4619      	mov	r1, r3
 801fba4:	201c      	movs	r0, #28
 801fba6:	f7e0 fbe9 	bl	800037c <_ZnwjPv>
 801fbaa:	4605      	mov	r5, r0
 801fbac:	7f3b      	ldrb	r3, [r7, #28]
 801fbae:	4622      	mov	r2, r4
 801fbb0:	7d39      	ldrb	r1, [r7, #20]
 801fbb2:	4628      	mov	r0, r5
 801fbb4:	f000 f86f 	bl	801fc96 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 801fbb8:	462b      	mov	r3, r5
 801fbba:	4618      	mov	r0, r3
 801fbbc:	3720      	adds	r7, #32
 801fbbe:	46bd      	mov	sp, r7
 801fbc0:	bdb0      	pop	{r4, r5, r7, pc}

0801fbc2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801fbc2:	b5b0      	push	{r4, r5, r7, lr}
 801fbc4:	b084      	sub	sp, #16
 801fbc6:	af00      	add	r7, sp, #0
 801fbc8:	60f8      	str	r0, [r7, #12]
 801fbca:	60b9      	str	r1, [r7, #8]
 801fbcc:	607a      	str	r2, [r7, #4]
 801fbce:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801fbd0:	6878      	ldr	r0, [r7, #4]
 801fbd2:	f7fc fb13 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fbd6:	4604      	mov	r4, r0
 801fbd8:	6838      	ldr	r0, [r7, #0]
 801fbda:	f7ff fee0 	bl	801f99e <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fbde:	4605      	mov	r5, r0
 801fbe0:	6a38      	ldr	r0, [r7, #32]
 801fbe2:	f7fc fb21 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fbe6:	4603      	mov	r3, r0
 801fbe8:	462a      	mov	r2, r5
 801fbea:	4621      	mov	r1, r4
 801fbec:	68b8      	ldr	r0, [r7, #8]
 801fbee:	f7ff ffbe 	bl	801fb6e <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801fbf2:	bf00      	nop
 801fbf4:	3710      	adds	r7, #16
 801fbf6:	46bd      	mov	sp, r7
 801fbf8:	bdb0      	pop	{r4, r5, r7, pc}

0801fbfa <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801fbfa:	b590      	push	{r4, r7, lr}
 801fbfc:	b083      	sub	sp, #12
 801fbfe:	af00      	add	r7, sp, #0
 801fc00:	6078      	str	r0, [r7, #4]
 801fc02:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801fc04:	687c      	ldr	r4, [r7, #4]
 801fc06:	6838      	ldr	r0, [r7, #0]
 801fc08:	f000 f859 	bl	801fcbe <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 801fc0c:	4603      	mov	r3, r0
 801fc0e:	4618      	mov	r0, r3
 801fc10:	f000 f862 	bl	801fcd8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 801fc14:	4603      	mov	r3, r0
 801fc16:	4619      	mov	r1, r3
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f7ff ff5c 	bl	801fad6 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	4618      	mov	r0, r3
 801fc22:	370c      	adds	r7, #12
 801fc24:	46bd      	mov	sp, r7
 801fc26:	bd90      	pop	{r4, r7, pc}

0801fc28 <_ZN17ExternalInterrupt8InstanceC1Ev>:
	public:
		IRQn_Type interrupt_request_number;
		function<void()> action = nullptr;
		bool is_on = true;

		Instance() = default;
 801fc28:	b580      	push	{r7, lr}
 801fc2a:	b082      	sub	sp, #8
 801fc2c:	af00      	add	r7, sp, #0
 801fc2e:	6078      	str	r0, [r7, #4]
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	3304      	adds	r3, #4
 801fc34:	2100      	movs	r1, #0
 801fc36:	4618      	mov	r0, r3
 801fc38:	f7ff fd24 	bl	801f684 <_ZNSt8functionIFvvEEC1EDn>
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	2201      	movs	r2, #1
 801fc40:	751a      	strb	r2, [r3, #20]
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	4618      	mov	r0, r3
 801fc46:	3708      	adds	r7, #8
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}

0801fc4c <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b084      	sub	sp, #16
 801fc50:	af00      	add	r7, sp, #0
 801fc52:	60f8      	str	r0, [r7, #12]
 801fc54:	60b9      	str	r1, [r7, #8]
 801fc56:	607a      	str	r2, [r7, #4]
 801fc58:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801fc5a:	68b8      	ldr	r0, [r7, #8]
 801fc5c:	f000 f847 	bl	801fcee <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801fc60:	4603      	mov	r3, r0
 801fc62:	4618      	mov	r0, r3
 801fc64:	f000 f838 	bl	801fcd8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 801fc68:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801fc6a:	881a      	ldrh	r2, [r3, #0]
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	801a      	strh	r2, [r3, #0]
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	3304      	adds	r3, #4
 801fc74:	2200      	movs	r2, #0
 801fc76:	601a      	str	r2, [r3, #0]
 801fc78:	605a      	str	r2, [r3, #4]
 801fc7a:	609a      	str	r2, [r3, #8]
 801fc7c:	60da      	str	r2, [r3, #12]
 801fc7e:	611a      	str	r2, [r3, #16]
 801fc80:	615a      	str	r2, [r3, #20]
 801fc82:	68fb      	ldr	r3, [r7, #12]
 801fc84:	3304      	adds	r3, #4
 801fc86:	4618      	mov	r0, r3
 801fc88:	f7ff ffce 	bl	801fc28 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	4618      	mov	r0, r3
 801fc90:	3710      	adds	r7, #16
 801fc92:	46bd      	mov	sp, r7
 801fc94:	bd80      	pop	{r7, pc}

0801fc96 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 801fc96:	b5b0      	push	{r4, r5, r7, lr}
 801fc98:	b086      	sub	sp, #24
 801fc9a:	af02      	add	r7, sp, #8
 801fc9c:	60f8      	str	r0, [r7, #12]
 801fc9e:	7239      	strb	r1, [r7, #8]
 801fca0:	607a      	str	r2, [r7, #4]
 801fca2:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801fca4:	463a      	mov	r2, r7
 801fca6:	f88d 4000 	strb.w	r4, [sp]
 801fcaa:	462b      	mov	r3, r5
 801fcac:	6879      	ldr	r1, [r7, #4]
 801fcae:	68f8      	ldr	r0, [r7, #12]
 801fcb0:	f7ff ffcc 	bl	801fc4c <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	3710      	adds	r7, #16
 801fcba:	46bd      	mov	sp, r7
 801fcbc:	bdb0      	pop	{r4, r5, r7, pc}

0801fcbe <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801fcbe:	b580      	push	{r7, lr}
 801fcc0:	b082      	sub	sp, #8
 801fcc2:	af00      	add	r7, sp, #0
 801fcc4:	6078      	str	r0, [r7, #4]
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f000 f81d 	bl	801fd08 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	3708      	adds	r7, #8
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	bd80      	pop	{r7, pc}

0801fcd8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801fcd8:	b480      	push	{r7}
 801fcda:	b083      	sub	sp, #12
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	4618      	mov	r0, r3
 801fce4:	370c      	adds	r7, #12
 801fce6:	46bd      	mov	sp, r7
 801fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcec:	4770      	bx	lr

0801fcee <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 801fcee:	b580      	push	{r7, lr}
 801fcf0:	b082      	sub	sp, #8
 801fcf2:	af00      	add	r7, sp, #0
 801fcf4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	4618      	mov	r0, r3
 801fcfa:	f000 f811 	bl	801fd20 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801fcfe:	4603      	mov	r3, r0
 801fd00:	4618      	mov	r0, r3
 801fd02:	3708      	adds	r7, #8
 801fd04:	46bd      	mov	sp, r7
 801fd06:	bd80      	pop	{r7, pc}

0801fd08 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801fd08:	b480      	push	{r7}
 801fd0a:	b083      	sub	sp, #12
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	6078      	str	r0, [r7, #4]
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	4618      	mov	r0, r3
 801fd16:	370c      	adds	r7, #12
 801fd18:	46bd      	mov	sp, r7
 801fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd1e:	4770      	bx	lr

0801fd20 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b082      	sub	sp, #8
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801fd28:	6878      	ldr	r0, [r7, #4]
 801fd2a:	f7ff ffc8 	bl	801fcbe <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 801fd2e:	4603      	mov	r3, r0
 801fd30:	4618      	mov	r0, r3
 801fd32:	3708      	adds	r7, #8
 801fd34:	46bd      	mov	sp, r7
 801fd36:	bd80      	pop	{r7, pc}

0801fd38 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 801fd38:	b580      	push	{r7, lr}
 801fd3a:	b082      	sub	sp, #8
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	4618      	mov	r0, r3
 801fd44:	f7ff fccc 	bl	801f6e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	4618      	mov	r0, r3
 801fd4c:	3708      	adds	r7, #8
 801fd4e:	46bd      	mov	sp, r7
 801fd50:	bd80      	pop	{r7, pc}
	...

0801fd54 <_Z41__static_initialization_and_destruction_0ii>:
		return nullopt; //TODO: error handler
	}

	Pin& pin = service_ids[id];
	return HAL_GPIO_ReadPin(GPIO_PORT, pin.gpio_pin);
}
 801fd54:	b580      	push	{r7, lr}
 801fd56:	b082      	sub	sp, #8
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	6078      	str	r0, [r7, #4]
 801fd5c:	6039      	str	r1, [r7, #0]
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	2b01      	cmp	r3, #1
 801fd62:	d113      	bne.n	801fd8c <_Z41__static_initialization_and_destruction_0ii+0x38>
 801fd64:	683b      	ldr	r3, [r7, #0]
 801fd66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd6a:	4293      	cmp	r3, r2
 801fd6c:	d10e      	bne.n	801fd8c <_Z41__static_initialization_and_destruction_0ii+0x38>
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
 801fd6e:	4b10      	ldr	r3, [pc, #64]	; (801fdb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801fd70:	461a      	mov	r2, r3
 801fd72:	2300      	movs	r3, #0
 801fd74:	6013      	str	r3, [r2, #0]
 801fd76:	6053      	str	r3, [r2, #4]
 801fd78:	6093      	str	r3, [r2, #8]
 801fd7a:	60d3      	str	r3, [r2, #12]
 801fd7c:	6113      	str	r3, [r2, #16]
 801fd7e:	6153      	str	r3, [r2, #20]
 801fd80:	480b      	ldr	r0, [pc, #44]	; (801fdb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801fd82:	f7fe fa7c 	bl	801e27e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances;
 801fd86:	480b      	ldr	r0, [pc, #44]	; (801fdb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fd88:	f7ff fc3d 	bl	801f606 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1Ev>
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d10a      	bne.n	801fda8 <_Z41__static_initialization_and_destruction_0ii+0x54>
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd98:	4293      	cmp	r3, r2
 801fd9a:	d105      	bne.n	801fda8 <_Z41__static_initialization_and_destruction_0ii+0x54>
 801fd9c:	4805      	ldr	r0, [pc, #20]	; (801fdb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fd9e:	f7ff ffcb 	bl	801fd38 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
 801fda2:	4803      	ldr	r0, [pc, #12]	; (801fdb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801fda4:	f7fe fa78 	bl	801e298 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
}
 801fda8:	bf00      	nop
 801fdaa:	3708      	adds	r7, #8
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd80      	pop	{r7, pc}
 801fdb0:	240017d4 	.word	0x240017d4
 801fdb4:	240017ec 	.word	0x240017ec

0801fdb8 <_GLOBAL__sub_I__ZN17ExternalInterrupt11service_idsE>:
 801fdb8:	b580      	push	{r7, lr}
 801fdba:	af00      	add	r7, sp, #0
 801fdbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fdc0:	2001      	movs	r0, #1
 801fdc2:	f7ff ffc7 	bl	801fd54 <_Z41__static_initialization_and_destruction_0ii>
 801fdc6:	bd80      	pop	{r7, pc}

0801fdc8 <_GLOBAL__sub_D__ZN17ExternalInterrupt11service_idsE>:
 801fdc8:	b580      	push	{r7, lr}
 801fdca:	af00      	add	r7, sp, #0
 801fdcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fdd0:	2000      	movs	r0, #0
 801fdd2:	f7ff ffbf 	bl	801fd54 <_Z41__static_initialization_and_destruction_0ii>
 801fdd6:	bd80      	pop	{r7, pc}

0801fdd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801fdd8:	b580      	push	{r7, lr}
 801fdda:	b082      	sub	sp, #8
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	6078      	str	r0, [r7, #4]
 801fde0:	6878      	ldr	r0, [r7, #4]
 801fde2:	f000 f85a 	bl	801fe9a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEED1Ev>
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	4618      	mov	r0, r3
 801fdea:	3708      	adds	r7, #8
 801fdec:	46bd      	mov	sp, r7
 801fdee:	bd80      	pop	{r7, pc}

0801fdf0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 801fdf0:	b580      	push	{r7, lr}
 801fdf2:	b082      	sub	sp, #8
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f000 f838 	bl	801fe70 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	4618      	mov	r0, r3
 801fe04:	3708      	adds	r7, #8
 801fe06:	46bd      	mov	sp, r7
 801fe08:	bd80      	pop	{r7, pc}

0801fe0a <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEEC1Ev>:
      map() = default;
 801fe0a:	b580      	push	{r7, lr}
 801fe0c:	b082      	sub	sp, #8
 801fe0e:	af00      	add	r7, sp, #0
 801fe10:	6078      	str	r0, [r7, #4]
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	4618      	mov	r0, r3
 801fe16:	f7ff ffeb 	bl	801fdf0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1Ev>
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	4618      	mov	r0, r3
 801fe1e:	3708      	adds	r7, #8
 801fe20:	46bd      	mov	sp, r7
 801fe22:	bd80      	pop	{r7, pc}

0801fe24 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b082      	sub	sp, #8
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	6078      	str	r0, [r7, #4]
 801fe2c:	6878      	ldr	r0, [r7, #4]
 801fe2e:	f000 f869 	bl	801ff04 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEED1Ev>
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	4618      	mov	r0, r3
 801fe36:	3708      	adds	r7, #8
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	bd80      	pop	{r7, pc}

0801fe3c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801fe3c:	b580      	push	{r7, lr}
 801fe3e:	b082      	sub	sp, #8
 801fe40:	af00      	add	r7, sp, #0
 801fe42:	6078      	str	r0, [r7, #4]
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	4618      	mov	r0, r3
 801fe48:	f000 f847 	bl	801feda <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	4618      	mov	r0, r3
 801fe50:	3708      	adds	r7, #8
 801fe52:	46bd      	mov	sp, r7
 801fe54:	bd80      	pop	{r7, pc}

0801fe56 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEC1Ev>:
 801fe56:	b580      	push	{r7, lr}
 801fe58:	b082      	sub	sp, #8
 801fe5a:	af00      	add	r7, sp, #0
 801fe5c:	6078      	str	r0, [r7, #4]
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	4618      	mov	r0, r3
 801fe62:	f7ff ffeb 	bl	801fe3c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	4618      	mov	r0, r3
 801fe6a:	3708      	adds	r7, #8
 801fe6c:	46bd      	mov	sp, r7
 801fe6e:	bd80      	pop	{r7, pc}

0801fe70 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801fe70:	b580      	push	{r7, lr}
 801fe72:	b082      	sub	sp, #8
 801fe74:	af00      	add	r7, sp, #0
 801fe76:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801fe78:	6878      	ldr	r0, [r7, #4]
 801fe7a:	f000 f863 	bl	801ff44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEEC1Ev>
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	4618      	mov	r0, r3
 801fe82:	f000 f86b 	bl	801ff5c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1Ev>
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	3304      	adds	r3, #4
 801fe8a:	4618      	mov	r0, r3
 801fe8c:	f7fa ffdf 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	4618      	mov	r0, r3
 801fe94:	3708      	adds	r7, #8
 801fe96:	46bd      	mov	sp, r7
 801fe98:	bd80      	pop	{r7, pc}

0801fe9a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801fe9a:	b480      	push	{r7}
 801fe9c:	b083      	sub	sp, #12
 801fe9e:	af00      	add	r7, sp, #0
 801fea0:	6078      	str	r0, [r7, #4]
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	4618      	mov	r0, r3
 801fea6:	370c      	adds	r7, #12
 801fea8:	46bd      	mov	sp, r7
 801feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feae:	4770      	bx	lr

0801feb0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b082      	sub	sp, #8
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801feb8:	6878      	ldr	r0, [r7, #4]
 801feba:	f7e9 fff0 	bl	8009e9e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 801febe:	4603      	mov	r3, r0
 801fec0:	4619      	mov	r1, r3
 801fec2:	6878      	ldr	r0, [r7, #4]
 801fec4:	f7e6 fbd0 	bl	8006668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	4618      	mov	r0, r3
 801fecc:	f7ff ff84 	bl	801fdd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	4618      	mov	r0, r3
 801fed4:	3708      	adds	r7, #8
 801fed6:	46bd      	mov	sp, r7
 801fed8:	bd80      	pop	{r7, pc}

0801feda <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801feda:	b580      	push	{r7, lr}
 801fedc:	b082      	sub	sp, #8
 801fede:	af00      	add	r7, sp, #0
 801fee0:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801fee2:	6878      	ldr	r0, [r7, #4]
 801fee4:	f000 f845 	bl	801ff72 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEEC1Ev>
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	4618      	mov	r0, r3
 801feec:	f7fb fd4a 	bl	801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	3304      	adds	r3, #4
 801fef4:	4618      	mov	r0, r3
 801fef6:	f7fa ffaa 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	4618      	mov	r0, r3
 801fefe:	3708      	adds	r7, #8
 801ff00:	46bd      	mov	sp, r7
 801ff02:	bd80      	pop	{r7, pc}

0801ff04 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEED1Ev>:
 801ff04:	b480      	push	{r7}
 801ff06:	b083      	sub	sp, #12
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	6078      	str	r0, [r7, #4]
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	4618      	mov	r0, r3
 801ff10:	370c      	adds	r7, #12
 801ff12:	46bd      	mov	sp, r7
 801ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff18:	4770      	bx	lr

0801ff1a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801ff1a:	b580      	push	{r7, lr}
 801ff1c:	b082      	sub	sp, #8
 801ff1e:	af00      	add	r7, sp, #0
 801ff20:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801ff22:	6878      	ldr	r0, [r7, #4]
 801ff24:	f000 f850 	bl	801ffc8 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801ff28:	4603      	mov	r3, r0
 801ff2a:	4619      	mov	r1, r3
 801ff2c:	6878      	ldr	r0, [r7, #4]
 801ff2e:	f000 f82c 	bl	801ff8a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	4618      	mov	r0, r3
 801ff36:	f7ff ff75 	bl	801fe24 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	3708      	adds	r7, #8
 801ff40:	46bd      	mov	sp, r7
 801ff42:	bd80      	pop	{r7, pc}

0801ff44 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP15TimerPeripheralEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801ff44:	b580      	push	{r7, lr}
 801ff46:	b082      	sub	sp, #8
 801ff48:	af00      	add	r7, sp, #0
 801ff4a:	6078      	str	r0, [r7, #4]
 801ff4c:	6878      	ldr	r0, [r7, #4]
 801ff4e:	f000 f855 	bl	801fffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEEC1Ev>
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	4618      	mov	r0, r3
 801ff56:	3708      	adds	r7, #8
 801ff58:	46bd      	mov	sp, r7
 801ff5a:	bd80      	pop	{r7, pc}

0801ff5c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1Ev>:
      _Rb_tree_key_compare()
 801ff5c:	b480      	push	{r7}
 801ff5e:	b083      	sub	sp, #12
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	6078      	str	r0, [r7, #4]
      { }
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	4618      	mov	r0, r3
 801ff68:	370c      	adds	r7, #12
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff70:	4770      	bx	lr

0801ff72 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEEC1Ev>:
 801ff72:	b580      	push	{r7, lr}
 801ff74:	b082      	sub	sp, #8
 801ff76:	af00      	add	r7, sp, #0
 801ff78:	6078      	str	r0, [r7, #4]
 801ff7a:	6878      	ldr	r0, [r7, #4]
 801ff7c:	f000 f849 	bl	8020012 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEEC1Ev>
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	4618      	mov	r0, r3
 801ff84:	3708      	adds	r7, #8
 801ff86:	46bd      	mov	sp, r7
 801ff88:	bd80      	pop	{r7, pc}

0801ff8a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ff8a:	b580      	push	{r7, lr}
 801ff8c:	b084      	sub	sp, #16
 801ff8e:	af00      	add	r7, sp, #0
 801ff90:	6078      	str	r0, [r7, #4]
 801ff92:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801ff94:	683b      	ldr	r3, [r7, #0]
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d012      	beq.n	801ffc0 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 801ff9a:	6838      	ldr	r0, [r7, #0]
 801ff9c:	f000 f844 	bl	8020028 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	4619      	mov	r1, r3
 801ffa4:	6878      	ldr	r0, [r7, #4]
 801ffa6:	f7ff fff0 	bl	801ff8a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 801ffaa:	6838      	ldr	r0, [r7, #0]
 801ffac:	f000 f848 	bl	8020040 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ffb0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801ffb2:	6839      	ldr	r1, [r7, #0]
 801ffb4:	6878      	ldr	r0, [r7, #4]
 801ffb6:	f000 f84f 	bl	8020058 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ffbe:	e7e9      	b.n	801ff94 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801ffc0:	bf00      	nop
 801ffc2:	3710      	adds	r7, #16
 801ffc4:	46bd      	mov	sp, r7
 801ffc6:	bd80      	pop	{r7, pc}

0801ffc8 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801ffc8:	b480      	push	{r7}
 801ffca:	b083      	sub	sp, #12
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	689b      	ldr	r3, [r3, #8]
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	370c      	adds	r7, #12
 801ffd8:	46bd      	mov	sp, r7
 801ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffde:	4770      	bx	lr

0801ffe0 <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>:
      _M_valptr()
 801ffe0:	b580      	push	{r7, lr}
 801ffe2:	b082      	sub	sp, #8
 801ffe4:	af00      	add	r7, sp, #0
 801ffe6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801ffe8:	687b      	ldr	r3, [r7, #4]
 801ffea:	3310      	adds	r3, #16
 801ffec:	4618      	mov	r0, r3
 801ffee:	f000 f844 	bl	802007a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>
 801fff2:	4603      	mov	r3, r0
 801fff4:	4618      	mov	r0, r3
 801fff6:	3708      	adds	r7, #8
 801fff8:	46bd      	mov	sp, r7
 801fffa:	bd80      	pop	{r7, pc}

0801fffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP15TimerPeripheralEEEC1Ev>:
 801fffc:	b480      	push	{r7}
 801fffe:	b083      	sub	sp, #12
 8020000:	af00      	add	r7, sp, #0
 8020002:	6078      	str	r0, [r7, #4]
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	4618      	mov	r0, r3
 8020008:	370c      	adds	r7, #12
 802000a:	46bd      	mov	sp, r7
 802000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020010:	4770      	bx	lr

08020012 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEEC1Ev>:
 8020012:	b480      	push	{r7}
 8020014:	b083      	sub	sp, #12
 8020016:	af00      	add	r7, sp, #0
 8020018:	6078      	str	r0, [r7, #4]
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	4618      	mov	r0, r3
 802001e:	370c      	adds	r7, #12
 8020020:	46bd      	mov	sp, r7
 8020022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020026:	4770      	bx	lr

08020028 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8020028:	b480      	push	{r7}
 802002a:	b083      	sub	sp, #12
 802002c:	af00      	add	r7, sp, #0
 802002e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	68db      	ldr	r3, [r3, #12]
 8020034:	4618      	mov	r0, r3
 8020036:	370c      	adds	r7, #12
 8020038:	46bd      	mov	sp, r7
 802003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802003e:	4770      	bx	lr

08020040 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8020040:	b480      	push	{r7}
 8020042:	b083      	sub	sp, #12
 8020044:	af00      	add	r7, sp, #0
 8020046:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	689b      	ldr	r3, [r3, #8]
 802004c:	4618      	mov	r0, r3
 802004e:	370c      	adds	r7, #12
 8020050:	46bd      	mov	sp, r7
 8020052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020056:	4770      	bx	lr

08020058 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020058:	b580      	push	{r7, lr}
 802005a:	b082      	sub	sp, #8
 802005c:	af00      	add	r7, sp, #0
 802005e:	6078      	str	r0, [r7, #4]
 8020060:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8020062:	6839      	ldr	r1, [r7, #0]
 8020064:	6878      	ldr	r0, [r7, #4]
 8020066:	f000 f814 	bl	8020092 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 802006a:	6839      	ldr	r1, [r7, #0]
 802006c:	6878      	ldr	r0, [r7, #4]
 802006e:	f000 f825 	bl	80200bc <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8020072:	bf00      	nop
 8020074:	3708      	adds	r7, #8
 8020076:	46bd      	mov	sp, r7
 8020078:	bd80      	pop	{r7, pc}

0802007a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>:
      _M_ptr() noexcept
 802007a:	b580      	push	{r7, lr}
 802007c:	b082      	sub	sp, #8
 802007e:	af00      	add	r7, sp, #0
 8020080:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8020082:	6878      	ldr	r0, [r7, #4]
 8020084:	f000 f82c 	bl	80200e0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>
 8020088:	4603      	mov	r3, r0
 802008a:	4618      	mov	r0, r3
 802008c:	3708      	adds	r7, #8
 802008e:	46bd      	mov	sp, r7
 8020090:	bd80      	pop	{r7, pc}

08020092 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020092:	b590      	push	{r4, r7, lr}
 8020094:	b083      	sub	sp, #12
 8020096:	af00      	add	r7, sp, #0
 8020098:	6078      	str	r0, [r7, #4]
 802009a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 802009c:	6878      	ldr	r0, [r7, #4]
 802009e:	f000 f82a 	bl	80200f6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80200a2:	4604      	mov	r4, r0
 80200a4:	6838      	ldr	r0, [r7, #0]
 80200a6:	f7ff ff9b 	bl	801ffe0 <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>
 80200aa:	4603      	mov	r3, r0
 80200ac:	4619      	mov	r1, r3
 80200ae:	4620      	mov	r0, r4
 80200b0:	f000 f82c 	bl	802010c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE7destroyIS5_EEvRS7_PT_>
      }
 80200b4:	bf00      	nop
 80200b6:	370c      	adds	r7, #12
 80200b8:	46bd      	mov	sp, r7
 80200ba:	bd90      	pop	{r4, r7, pc}

080200bc <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80200bc:	b580      	push	{r7, lr}
 80200be:	b082      	sub	sp, #8
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	6078      	str	r0, [r7, #4]
 80200c4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80200c6:	6878      	ldr	r0, [r7, #4]
 80200c8:	f000 f815 	bl	80200f6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80200cc:	4603      	mov	r3, r0
 80200ce:	2201      	movs	r2, #1
 80200d0:	6839      	ldr	r1, [r7, #0]
 80200d2:	4618      	mov	r0, r3
 80200d4:	f000 f826 	bl	8020124 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j>
 80200d8:	bf00      	nop
 80200da:	3708      	adds	r7, #8
 80200dc:	46bd      	mov	sp, r7
 80200de:	bd80      	pop	{r7, pc}

080200e0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>:
      _M_addr() noexcept
 80200e0:	b480      	push	{r7}
 80200e2:	b083      	sub	sp, #12
 80200e4:	af00      	add	r7, sp, #0
 80200e6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	4618      	mov	r0, r3
 80200ec:	370c      	adds	r7, #12
 80200ee:	46bd      	mov	sp, r7
 80200f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200f4:	4770      	bx	lr

080200f6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80200f6:	b480      	push	{r7}
 80200f8:	b083      	sub	sp, #12
 80200fa:	af00      	add	r7, sp, #0
 80200fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	4618      	mov	r0, r3
 8020102:	370c      	adds	r7, #12
 8020104:	46bd      	mov	sp, r7
 8020106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802010a:	4770      	bx	lr

0802010c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802010c:	b580      	push	{r7, lr}
 802010e:	b082      	sub	sp, #8
 8020110:	af00      	add	r7, sp, #0
 8020112:	6078      	str	r0, [r7, #4]
 8020114:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8020116:	6838      	ldr	r0, [r7, #0]
 8020118:	f000 f823 	bl	8020162 <_ZSt10destroy_atISt4pairIKhS0_I3PinS2_EEEvPT_>
	}
 802011c:	bf00      	nop
 802011e:	3708      	adds	r7, #8
 8020120:	46bd      	mov	sp, r7
 8020122:	bd80      	pop	{r7, pc}

08020124 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8020124:	b580      	push	{r7, lr}
 8020126:	b088      	sub	sp, #32
 8020128:	af00      	add	r7, sp, #0
 802012a:	60f8      	str	r0, [r7, #12]
 802012c:	60b9      	str	r1, [r7, #8]
 802012e:	607a      	str	r2, [r7, #4]
 8020130:	68fb      	ldr	r3, [r7, #12]
 8020132:	61fb      	str	r3, [r7, #28]
 8020134:	68bb      	ldr	r3, [r7, #8]
 8020136:	61bb      	str	r3, [r7, #24]
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 802013c:	f7e0 f8e8 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8020140:	4603      	mov	r3, r0
 8020142:	2b00      	cmp	r3, #0
 8020144:	d003      	beq.n	802014e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8020146:	69b8      	ldr	r0, [r7, #24]
 8020148:	f002 ffc7 	bl	80230da <_ZdlPv>
	    return;
 802014c:	e005      	b.n	802015a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 802014e:	697a      	ldr	r2, [r7, #20]
 8020150:	69b9      	ldr	r1, [r7, #24]
 8020152:	69f8      	ldr	r0, [r7, #28]
 8020154:	f000 f80f 	bl	8020176 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8020158:	bf00      	nop
 802015a:	bf00      	nop
 802015c:	3720      	adds	r7, #32
 802015e:	46bd      	mov	sp, r7
 8020160:	bd80      	pop	{r7, pc}

08020162 <_ZSt10destroy_atISt4pairIKhS0_I3PinS2_EEEvPT_>:
    destroy_at(_Tp* __location)
 8020162:	b480      	push	{r7}
 8020164:	b083      	sub	sp, #12
 8020166:	af00      	add	r7, sp, #0
 8020168:	6078      	str	r0, [r7, #4]
    }
 802016a:	bf00      	nop
 802016c:	370c      	adds	r7, #12
 802016e:	46bd      	mov	sp, r7
 8020170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020174:	4770      	bx	lr

08020176 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8020176:	b580      	push	{r7, lr}
 8020178:	b084      	sub	sp, #16
 802017a:	af00      	add	r7, sp, #0
 802017c:	60f8      	str	r0, [r7, #12]
 802017e:	60b9      	str	r1, [r7, #8]
 8020180:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8020182:	687a      	ldr	r2, [r7, #4]
 8020184:	4613      	mov	r3, r2
 8020186:	00db      	lsls	r3, r3, #3
 8020188:	4413      	add	r3, r2
 802018a:	009b      	lsls	r3, r3, #2
 802018c:	4619      	mov	r1, r3
 802018e:	68b8      	ldr	r0, [r7, #8]
 8020190:	f002 ffa5 	bl	80230de <_ZdlPvj>
      }
 8020194:	3710      	adds	r7, #16
 8020196:	46bd      	mov	sp, r7
 8020198:	bd80      	pop	{r7, pc}

0802019a <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEED1Ev>:
      ~map() = default;
 802019a:	b580      	push	{r7, lr}
 802019c:	b082      	sub	sp, #8
 802019e:	af00      	add	r7, sp, #0
 80201a0:	6078      	str	r0, [r7, #4]
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	4618      	mov	r0, r3
 80201a6:	f7ff feb8 	bl	801ff1a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	4618      	mov	r0, r3
 80201ae:	3708      	adds	r7, #8
 80201b0:	46bd      	mov	sp, r7
 80201b2:	bd80      	pop	{r7, pc}

080201b4 <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
 80201b4:	b580      	push	{r7, lr}
 80201b6:	b082      	sub	sp, #8
 80201b8:	af00      	add	r7, sp, #0
 80201ba:	6078      	str	r0, [r7, #4]
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	4618      	mov	r0, r3
 80201c0:	f7ff fe76 	bl	801feb0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P15TimerPeripheralESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	4618      	mov	r0, r3
 80201c8:	3708      	adds	r7, #8
 80201ca:	46bd      	mov	sp, r7
 80201cc:	bd80      	pop	{r7, pc}
	...

080201d0 <_Z41__static_initialization_and_destruction_0ii>:
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(encoder->handle, &sMasterConfig) != HAL_OK){
		  //TODO: Error handler
	  }
}
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b082      	sub	sp, #8
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
 80201d8:	6039      	str	r1, [r7, #0]
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	2b01      	cmp	r3, #1
 80201de:	d10a      	bne.n	80201f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80201e0:	683b      	ldr	r3, [r7, #0]
 80201e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80201e6:	4293      	cmp	r3, r2
 80201e8:	d105      	bne.n	80201f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
map<pair<Pin, Pin>, TimerPeripheral*> Encoder::pin_timer_map;
 80201ea:	480c      	ldr	r0, [pc, #48]	; (802021c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80201ec:	f7ff fe0d 	bl	801fe0a <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEEC1Ev>
map<uint8_t, pair<Pin, Pin>> Encoder::registered_encoder;
 80201f0:	480b      	ldr	r0, [pc, #44]	; (8020220 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80201f2:	f7ff fe30 	bl	801fe56 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEC1Ev>
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d10a      	bne.n	8020212 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020202:	4293      	cmp	r3, r2
 8020204:	d105      	bne.n	8020212 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8020206:	4806      	ldr	r0, [pc, #24]	; (8020220 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8020208:	f7ff ffc7 	bl	802019a <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEED1Ev>
map<pair<Pin, Pin>, TimerPeripheral*> Encoder::pin_timer_map;
 802020c:	4803      	ldr	r0, [pc, #12]	; (802021c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 802020e:	f7ff ffd1 	bl	80201b4 <_ZNSt3mapISt4pairI3PinS1_EP15TimerPeripheralSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
}
 8020212:	bf00      	nop
 8020214:	3708      	adds	r7, #8
 8020216:	46bd      	mov	sp, r7
 8020218:	bd80      	pop	{r7, pc}
 802021a:	bf00      	nop
 802021c:	24001804 	.word	0x24001804
 8020220:	2400181c 	.word	0x2400181c

08020224 <_GLOBAL__sub_I__ZN7Encoder10id_counterE>:
 8020224:	b580      	push	{r7, lr}
 8020226:	af00      	add	r7, sp, #0
 8020228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802022c:	2001      	movs	r0, #1
 802022e:	f7ff ffcf 	bl	80201d0 <_Z41__static_initialization_and_destruction_0ii>
 8020232:	bd80      	pop	{r7, pc}

08020234 <_GLOBAL__sub_D__ZN7Encoder10id_counterE>:
 8020234:	b580      	push	{r7, lr}
 8020236:	af00      	add	r7, sp, #0
 8020238:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802023c:	2000      	movs	r0, #0
 802023e:	f7ff ffc7 	bl	80201d0 <_Z41__static_initialization_and_destruction_0ii>
 8020242:	bd80      	pop	{r7, pc}

08020244 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8020244:	b580      	push	{r7, lr}
 8020246:	b082      	sub	sp, #8
 8020248:	af00      	add	r7, sp, #0
 802024a:	6078      	str	r0, [r7, #4]
 802024c:	6878      	ldr	r0, [r7, #4]
 802024e:	f000 f8a0 	bl	8020392 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	4618      	mov	r0, r3
 8020256:	3708      	adds	r7, #8
 8020258:	46bd      	mov	sp, r7
 802025a:	bd80      	pop	{r7, pc}

0802025c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 802025c:	b580      	push	{r7, lr}
 802025e:	b082      	sub	sp, #8
 8020260:	af00      	add	r7, sp, #0
 8020262:	6078      	str	r0, [r7, #4]
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	4618      	mov	r0, r3
 8020268:	f000 f87e 	bl	8020368 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	4618      	mov	r0, r3
 8020270:	3708      	adds	r7, #8
 8020272:	46bd      	mov	sp, r7
 8020274:	bd80      	pop	{r7, pc}

08020276 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8020276:	b580      	push	{r7, lr}
 8020278:	b082      	sub	sp, #8
 802027a:	af00      	add	r7, sp, #0
 802027c:	6078      	str	r0, [r7, #4]
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	4618      	mov	r0, r3
 8020282:	f7ff ffeb 	bl	802025c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	4618      	mov	r0, r3
 802028a:	3708      	adds	r7, #8
 802028c:	46bd      	mov	sp, r7
 802028e:	bd80      	pop	{r7, pc}

08020290 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8020290:	b580      	push	{r7, lr}
 8020292:	b082      	sub	sp, #8
 8020294:	af00      	add	r7, sp, #0
 8020296:	6078      	str	r0, [r7, #4]
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	4618      	mov	r0, r3
 802029c:	f000 f884 	bl	80203a8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	4618      	mov	r0, r3
 80202a4:	3708      	adds	r7, #8
 80202a6:	46bd      	mov	sp, r7
 80202a8:	bd80      	pop	{r7, pc}

080202aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80202aa:	b580      	push	{r7, lr}
 80202ac:	b082      	sub	sp, #8
 80202ae:	af00      	add	r7, sp, #0
 80202b0:	6078      	str	r0, [r7, #4]
 80202b2:	6878      	ldr	r0, [r7, #4]
 80202b4:	f000 f8a2 	bl	80203fc <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	4618      	mov	r0, r3
 80202bc:	3708      	adds	r7, #8
 80202be:	46bd      	mov	sp, r7
 80202c0:	bd80      	pop	{r7, pc}

080202c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 80202c2:	b580      	push	{r7, lr}
 80202c4:	b082      	sub	sp, #8
 80202c6:	af00      	add	r7, sp, #0
 80202c8:	6078      	str	r0, [r7, #4]
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	4618      	mov	r0, r3
 80202ce:	f000 f880 	bl	80203d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	4618      	mov	r0, r3
 80202d6:	3708      	adds	r7, #8
 80202d8:	46bd      	mov	sp, r7
 80202da:	bd80      	pop	{r7, pc}

080202dc <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>:
      map() = default;
 80202dc:	b580      	push	{r7, lr}
 80202de:	b082      	sub	sp, #8
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	6078      	str	r0, [r7, #4]
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7ff ffeb 	bl	80202c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	4618      	mov	r0, r3
 80202f0:	3708      	adds	r7, #8
 80202f2:	46bd      	mov	sp, r7
 80202f4:	bd80      	pop	{r7, pc}

080202f6 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
      ~map() = default;
 80202f6:	b580      	push	{r7, lr}
 80202f8:	b082      	sub	sp, #8
 80202fa:	af00      	add	r7, sp, #0
 80202fc:	6078      	str	r0, [r7, #4]
 80202fe:	687b      	ldr	r3, [r7, #4]
 8020300:	4618      	mov	r0, r3
 8020302:	f000 f886 	bl	8020412 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	4618      	mov	r0, r3
 802030a:	3708      	adds	r7, #8
 802030c:	46bd      	mov	sp, r7
 802030e:	bd80      	pop	{r7, pc}

08020310 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 8020310:	b580      	push	{r7, lr}
 8020312:	b082      	sub	sp, #8
 8020314:	af00      	add	r7, sp, #0
 8020316:	6078      	str	r0, [r7, #4]
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	4618      	mov	r0, r3
 802031c:	f000 f8e1 	bl	80204e2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	4618      	mov	r0, r3
 8020324:	3708      	adds	r7, #8
 8020326:	46bd      	mov	sp, r7
 8020328:	bd80      	pop	{r7, pc}

0802032a <_ZN12InputCapture8InstanceC1E3PinP15TimerPeripheralmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TimerPeripheral* peripheral, uint32_t channel_rising, uint32_t channel_falling) :
 802032a:	b480      	push	{r7}
 802032c:	b085      	sub	sp, #20
 802032e:	af00      	add	r7, sp, #0
 8020330:	60f8      	str	r0, [r7, #12]
 8020332:	1d38      	adds	r0, r7, #4
 8020334:	e880 0006 	stmia.w	r0, {r1, r2}
 8020338:	603b      	str	r3, [r7, #0]
	pin(pin),
	peripheral(peripheral),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	3304      	adds	r3, #4
 802033e:	1d3a      	adds	r2, r7, #4
 8020340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020344:	e883 0003 	stmia.w	r3, {r0, r1}
 8020348:	68fb      	ldr	r3, [r7, #12]
 802034a:	683a      	ldr	r2, [r7, #0]
 802034c:	60da      	str	r2, [r3, #12]
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	69ba      	ldr	r2, [r7, #24]
 8020352:	611a      	str	r2, [r3, #16]
 8020354:	68fb      	ldr	r3, [r7, #12]
 8020356:	69fa      	ldr	r2, [r7, #28]
 8020358:	615a      	str	r2, [r3, #20]
	{ }
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	4618      	mov	r0, r3
 802035e:	3714      	adds	r7, #20
 8020360:	46bd      	mov	sp, r7
 8020362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020366:	4770      	bx	lr

08020368 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8020368:	b580      	push	{r7, lr}
 802036a:	b082      	sub	sp, #8
 802036c:	af00      	add	r7, sp, #0
 802036e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8020370:	6878      	ldr	r0, [r7, #4]
 8020372:	f000 f8cb 	bl	802050c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	4618      	mov	r0, r3
 802037a:	f7fb fb03 	bl	801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	3304      	adds	r3, #4
 8020382:	4618      	mov	r0, r3
 8020384:	f7fa fd63 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	4618      	mov	r0, r3
 802038c:	3708      	adds	r7, #8
 802038e:	46bd      	mov	sp, r7
 8020390:	bd80      	pop	{r7, pc}

08020392 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020392:	b480      	push	{r7}
 8020394:	b083      	sub	sp, #12
 8020396:	af00      	add	r7, sp, #0
 8020398:	6078      	str	r0, [r7, #4]
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	4618      	mov	r0, r3
 802039e:	370c      	adds	r7, #12
 80203a0:	46bd      	mov	sp, r7
 80203a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a6:	4770      	bx	lr

080203a8 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80203a8:	b580      	push	{r7, lr}
 80203aa:	b082      	sub	sp, #8
 80203ac:	af00      	add	r7, sp, #0
 80203ae:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80203b0:	6878      	ldr	r0, [r7, #4]
 80203b2:	f000 f8d6 	bl	8020562 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80203b6:	4603      	mov	r3, r0
 80203b8:	4619      	mov	r1, r3
 80203ba:	6878      	ldr	r0, [r7, #4]
 80203bc:	f000 f8b2 	bl	8020524 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	4618      	mov	r0, r3
 80203c4:	f7ff ff3e 	bl	8020244 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	4618      	mov	r0, r3
 80203cc:	3708      	adds	r7, #8
 80203ce:	46bd      	mov	sp, r7
 80203d0:	bd80      	pop	{r7, pc}

080203d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80203d2:	b580      	push	{r7, lr}
 80203d4:	b082      	sub	sp, #8
 80203d6:	af00      	add	r7, sp, #0
 80203d8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80203da:	6878      	ldr	r0, [r7, #4]
 80203dc:	f000 f8cd 	bl	802057a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	4618      	mov	r0, r3
 80203e4:	f7fb fb10 	bl	801ba08 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	3304      	adds	r3, #4
 80203ec:	4618      	mov	r0, r3
 80203ee:	f7fa fd2e 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	4618      	mov	r0, r3
 80203f6:	3708      	adds	r7, #8
 80203f8:	46bd      	mov	sp, r7
 80203fa:	bd80      	pop	{r7, pc}

080203fc <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
 80203fc:	b480      	push	{r7}
 80203fe:	b083      	sub	sp, #12
 8020400:	af00      	add	r7, sp, #0
 8020402:	6078      	str	r0, [r7, #4]
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	4618      	mov	r0, r3
 8020408:	370c      	adds	r7, #12
 802040a:	46bd      	mov	sp, r7
 802040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020410:	4770      	bx	lr

08020412 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8020412:	b580      	push	{r7, lr}
 8020414:	b082      	sub	sp, #8
 8020416:	af00      	add	r7, sp, #0
 8020418:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 802041a:	6878      	ldr	r0, [r7, #4]
 802041c:	f7e9 fe4a 	bl	800a0b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8020420:	4603      	mov	r3, r0
 8020422:	4619      	mov	r1, r3
 8020424:	6878      	ldr	r0, [r7, #4]
 8020426:	f7e6 fae8 	bl	80069fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	4618      	mov	r0, r3
 802042e:	f7ff ff3c 	bl	80202aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	4618      	mov	r0, r3
 8020436:	3708      	adds	r7, #8
 8020438:	46bd      	mov	sp, r7
 802043a:	bd80      	pop	{r7, pc}

0802043c <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802043c:	b580      	push	{r7, lr}
 802043e:	b082      	sub	sp, #8
 8020440:	af00      	add	r7, sp, #0
 8020442:	6078      	str	r0, [r7, #4]
 8020444:	6878      	ldr	r0, [r7, #4]
 8020446:	f000 f8a4 	bl	8020592 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	4618      	mov	r0, r3
 802044e:	3708      	adds	r7, #8
 8020450:	46bd      	mov	sp, r7
 8020452:	bd80      	pop	{r7, pc}

08020454 <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020454:	b480      	push	{r7}
 8020456:	b083      	sub	sp, #12
 8020458:	af00      	add	r7, sp, #0
 802045a:	6078      	str	r0, [r7, #4]
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	4618      	mov	r0, r3
 8020460:	370c      	adds	r7, #12
 8020462:	46bd      	mov	sp, r7
 8020464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020468:	4770      	bx	lr

0802046a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 802046a:	b5b0      	push	{r4, r5, r7, lr}
 802046c:	b086      	sub	sp, #24
 802046e:	af00      	add	r7, sp, #0
 8020470:	60f8      	str	r0, [r7, #12]
 8020472:	1d38      	adds	r0, r7, #4
 8020474:	e880 0006 	stmia.w	r0, {r1, r2}
 8020478:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 802047a:	68fc      	ldr	r4, [r7, #12]
 802047c:	f107 0314 	add.w	r3, r7, #20
 8020480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020482:	4618      	mov	r0, r3
 8020484:	f000 f890 	bl	80205a8 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 8020488:	f107 0314 	add.w	r3, r7, #20
 802048c:	461a      	mov	r2, r3
 802048e:	6839      	ldr	r1, [r7, #0]
 8020490:	4620      	mov	r0, r4
 8020492:	f000 f897 	bl	80205c4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 8020496:	f107 0314 	add.w	r3, r7, #20
 802049a:	4618      	mov	r0, r3
 802049c:	f7ff ffda 	bl	8020454 <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80204a0:	68fc      	ldr	r4, [r7, #12]
 80204a2:	1d3b      	adds	r3, r7, #4
 80204a4:	4618      	mov	r0, r3
 80204a6:	f000 f8ab 	bl	8020600 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 80204aa:	4605      	mov	r5, r0
 80204ac:	1d3b      	adds	r3, r7, #4
 80204ae:	4618      	mov	r0, r3
 80204b0:	f000 f8b2 	bl	8020618 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 80204b4:	4603      	mov	r3, r0
 80204b6:	461a      	mov	r2, r3
 80204b8:	4629      	mov	r1, r5
 80204ba:	4620      	mov	r0, r4
 80204bc:	f000 f8be 	bl	802063c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	4618      	mov	r0, r3
 80204c4:	3718      	adds	r7, #24
 80204c6:	46bd      	mov	sp, r7
 80204c8:	bdb0      	pop	{r4, r5, r7, pc}

080204ca <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80204ca:	b580      	push	{r7, lr}
 80204cc:	b082      	sub	sp, #8
 80204ce:	af00      	add	r7, sp, #0
 80204d0:	6078      	str	r0, [r7, #4]
 80204d2:	6878      	ldr	r0, [r7, #4]
 80204d4:	f000 f8de 	bl	8020694 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	4618      	mov	r0, r3
 80204dc:	3708      	adds	r7, #8
 80204de:	46bd      	mov	sp, r7
 80204e0:	bd80      	pop	{r7, pc}

080204e2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80204e2:	b580      	push	{r7, lr}
 80204e4:	b082      	sub	sp, #8
 80204e6:	af00      	add	r7, sp, #0
 80204e8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80204ea:	6878      	ldr	r0, [r7, #4]
 80204ec:	f000 f8fc 	bl	80206e8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 80204f0:	4603      	mov	r3, r0
 80204f2:	4619      	mov	r1, r3
 80204f4:	6878      	ldr	r0, [r7, #4]
 80204f6:	f000 f8d8 	bl	80206aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	4618      	mov	r0, r3
 80204fe:	f7ff ffe4 	bl	80204ca <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	4618      	mov	r0, r3
 8020506:	3708      	adds	r7, #8
 8020508:	46bd      	mov	sp, r7
 802050a:	bd80      	pop	{r7, pc}

0802050c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802050c:	b580      	push	{r7, lr}
 802050e:	b082      	sub	sp, #8
 8020510:	af00      	add	r7, sp, #0
 8020512:	6078      	str	r0, [r7, #4]
 8020514:	6878      	ldr	r0, [r7, #4]
 8020516:	f000 f93a 	bl	802078e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	4618      	mov	r0, r3
 802051e:	3708      	adds	r7, #8
 8020520:	46bd      	mov	sp, r7
 8020522:	bd80      	pop	{r7, pc}

08020524 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8020524:	b580      	push	{r7, lr}
 8020526:	b084      	sub	sp, #16
 8020528:	af00      	add	r7, sp, #0
 802052a:	6078      	str	r0, [r7, #4]
 802052c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 802052e:	683b      	ldr	r3, [r7, #0]
 8020530:	2b00      	cmp	r3, #0
 8020532:	d012      	beq.n	802055a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8020534:	6838      	ldr	r0, [r7, #0]
 8020536:	f000 f935 	bl	80207a4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 802053a:	4603      	mov	r3, r0
 802053c:	4619      	mov	r1, r3
 802053e:	6878      	ldr	r0, [r7, #4]
 8020540:	f7ff fff0 	bl	8020524 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8020544:	6838      	ldr	r0, [r7, #0]
 8020546:	f000 f939 	bl	80207bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 802054a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 802054c:	6839      	ldr	r1, [r7, #0]
 802054e:	6878      	ldr	r0, [r7, #4]
 8020550:	f000 f940 	bl	80207d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8020558:	e7e9      	b.n	802052e <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 802055a:	bf00      	nop
 802055c:	3710      	adds	r7, #16
 802055e:	46bd      	mov	sp, r7
 8020560:	bd80      	pop	{r7, pc}

08020562 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8020562:	b480      	push	{r7}
 8020564:	b083      	sub	sp, #12
 8020566:	af00      	add	r7, sp, #0
 8020568:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	689b      	ldr	r3, [r3, #8]
 802056e:	4618      	mov	r0, r3
 8020570:	370c      	adds	r7, #12
 8020572:	46bd      	mov	sp, r7
 8020574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020578:	4770      	bx	lr

0802057a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 802057a:	b580      	push	{r7, lr}
 802057c:	b082      	sub	sp, #8
 802057e:	af00      	add	r7, sp, #0
 8020580:	6078      	str	r0, [r7, #4]
 8020582:	6878      	ldr	r0, [r7, #4]
 8020584:	f000 f937 	bl	80207f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	4618      	mov	r0, r3
 802058c:	3708      	adds	r7, #8
 802058e:	46bd      	mov	sp, r7
 8020590:	bd80      	pop	{r7, pc}

08020592 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8020592:	b480      	push	{r7}
 8020594:	b083      	sub	sp, #12
 8020596:	af00      	add	r7, sp, #0
 8020598:	6078      	str	r0, [r7, #4]
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	4618      	mov	r0, r3
 802059e:	370c      	adds	r7, #12
 80205a0:	46bd      	mov	sp, r7
 80205a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a6:	4770      	bx	lr

080205a8 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80205a8:	b580      	push	{r7, lr}
 80205aa:	b082      	sub	sp, #8
 80205ac:	af00      	add	r7, sp, #0
 80205ae:	6078      	str	r0, [r7, #4]
 80205b0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80205b2:	6839      	ldr	r1, [r7, #0]
 80205b4:	6878      	ldr	r0, [r7, #4]
 80205b6:	f000 f929 	bl	802080c <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	4618      	mov	r0, r3
 80205be:	3708      	adds	r7, #8
 80205c0:	46bd      	mov	sp, r7
 80205c2:	bd80      	pop	{r7, pc}

080205c4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 80205c4:	b590      	push	{r4, r7, lr}
 80205c6:	b087      	sub	sp, #28
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	60f8      	str	r0, [r7, #12]
 80205cc:	60b9      	str	r1, [r7, #8]
 80205ce:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80205d0:	68fc      	ldr	r4, [r7, #12]
 80205d2:	f107 0314 	add.w	r3, r7, #20
 80205d6:	6879      	ldr	r1, [r7, #4]
 80205d8:	4618      	mov	r0, r3
 80205da:	f000 f923 	bl	8020824 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 80205de:	f107 0314 	add.w	r3, r7, #20
 80205e2:	461a      	mov	r2, r3
 80205e4:	68b9      	ldr	r1, [r7, #8]
 80205e6:	4620      	mov	r0, r4
 80205e8:	f000 f929 	bl	802083e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 80205ec:	f107 0314 	add.w	r3, r7, #20
 80205f0:	4618      	mov	r0, r3
 80205f2:	f000 f84f 	bl	8020694 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 80205f6:	68fb      	ldr	r3, [r7, #12]
 80205f8:	4618      	mov	r0, r3
 80205fa:	371c      	adds	r7, #28
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd90      	pop	{r4, r7, pc}

08020600 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8020600:	b480      	push	{r7}
 8020602:	b083      	sub	sp, #12
 8020604:	af00      	add	r7, sp, #0
 8020606:	6078      	str	r0, [r7, #4]
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	4618      	mov	r0, r3
 802060e:	370c      	adds	r7, #12
 8020610:	46bd      	mov	sp, r7
 8020612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020616:	4770      	bx	lr

08020618 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8020618:	b590      	push	{r4, r7, lr}
 802061a:	b083      	sub	sp, #12
 802061c:	af00      	add	r7, sp, #0
 802061e:	6078      	str	r0, [r7, #4]
 8020620:	6878      	ldr	r0, [r7, #4]
 8020622:	f7ff ffed 	bl	8020600 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 8020626:	4604      	mov	r4, r0
 8020628:	6878      	ldr	r0, [r7, #4]
 802062a:	f000 f925 	bl	8020878 <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 802062e:	4603      	mov	r3, r0
 8020630:	00db      	lsls	r3, r3, #3
 8020632:	4423      	add	r3, r4
 8020634:	4618      	mov	r0, r3
 8020636:	370c      	adds	r7, #12
 8020638:	46bd      	mov	sp, r7
 802063a:	bd90      	pop	{r4, r7, pc}

0802063c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 802063c:	b580      	push	{r7, lr}
 802063e:	b088      	sub	sp, #32
 8020640:	af00      	add	r7, sp, #0
 8020642:	60f8      	str	r0, [r7, #12]
 8020644:	60b9      	str	r1, [r7, #8]
 8020646:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8020648:	f107 0314 	add.w	r3, r7, #20
 802064c:	68f9      	ldr	r1, [r7, #12]
 802064e:	4618      	mov	r0, r3
 8020650:	f000 f91e 	bl	8020890 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 8020654:	68ba      	ldr	r2, [r7, #8]
 8020656:	687b      	ldr	r3, [r7, #4]
 8020658:	429a      	cmp	r2, r3
 802065a:	d017      	beq.n	802068c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 802065c:	68f8      	ldr	r0, [r7, #12]
 802065e:	f000 f926 	bl	80208ae <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 8020662:	4603      	mov	r3, r0
 8020664:	61fb      	str	r3, [r7, #28]
 8020666:	f107 021c 	add.w	r2, r7, #28
 802066a:	f107 0318 	add.w	r3, r7, #24
 802066e:	4611      	mov	r1, r2
 8020670:	4618      	mov	r0, r3
 8020672:	f000 f87c 	bl	802076e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 8020676:	f107 0314 	add.w	r3, r7, #20
 802067a:	68ba      	ldr	r2, [r7, #8]
 802067c:	69b9      	ldr	r1, [r7, #24]
 802067e:	68f8      	ldr	r0, [r7, #12]
 8020680:	f000 f926 	bl	80208d0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8020684:	68bb      	ldr	r3, [r7, #8]
 8020686:	3308      	adds	r3, #8
 8020688:	60bb      	str	r3, [r7, #8]
 802068a:	e7e3      	b.n	8020654 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 802068c:	bf00      	nop
 802068e:	3720      	adds	r7, #32
 8020690:	46bd      	mov	sp, r7
 8020692:	bd80      	pop	{r7, pc}

08020694 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020694:	b480      	push	{r7}
 8020696:	b083      	sub	sp, #12
 8020698:	af00      	add	r7, sp, #0
 802069a:	6078      	str	r0, [r7, #4]
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	4618      	mov	r0, r3
 80206a0:	370c      	adds	r7, #12
 80206a2:	46bd      	mov	sp, r7
 80206a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206a8:	4770      	bx	lr

080206aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80206aa:	b580      	push	{r7, lr}
 80206ac:	b084      	sub	sp, #16
 80206ae:	af00      	add	r7, sp, #0
 80206b0:	6078      	str	r0, [r7, #4]
 80206b2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80206b4:	683b      	ldr	r3, [r7, #0]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d012      	beq.n	80206e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 80206ba:	6838      	ldr	r0, [r7, #0]
 80206bc:	f000 f93b 	bl	8020936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80206c0:	4603      	mov	r3, r0
 80206c2:	4619      	mov	r1, r3
 80206c4:	6878      	ldr	r0, [r7, #4]
 80206c6:	f7ff fff0 	bl	80206aa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 80206ca:	6838      	ldr	r0, [r7, #0]
 80206cc:	f000 f93f 	bl	802094e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80206d0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80206d2:	6839      	ldr	r1, [r7, #0]
 80206d4:	6878      	ldr	r0, [r7, #4]
 80206d6:	f000 f946 	bl	8020966 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80206de:	e7e9      	b.n	80206b4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 80206e0:	bf00      	nop
 80206e2:	3710      	adds	r7, #16
 80206e4:	46bd      	mov	sp, r7
 80206e6:	bd80      	pop	{r7, pc}

080206e8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80206e8:	b480      	push	{r7}
 80206ea:	b083      	sub	sp, #12
 80206ec:	af00      	add	r7, sp, #0
 80206ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	689b      	ldr	r3, [r3, #8]
 80206f4:	4618      	mov	r0, r3
 80206f6:	370c      	adds	r7, #12
 80206f8:	46bd      	mov	sp, r7
 80206fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206fe:	4770      	bx	lr

08020700 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8020700:	b580      	push	{r7, lr}
 8020702:	b082      	sub	sp, #8
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	3310      	adds	r3, #16
 802070c:	4618      	mov	r0, r3
 802070e:	f000 f93b 	bl	8020988 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 8020712:	4603      	mov	r3, r0
 8020714:	4618      	mov	r0, r3
 8020716:	3708      	adds	r7, #8
 8020718:	46bd      	mov	sp, r7
 802071a:	bd80      	pop	{r7, pc}

0802071c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802071c:	b480      	push	{r7}
 802071e:	b083      	sub	sp, #12
 8020720:	af00      	add	r7, sp, #0
 8020722:	6078      	str	r0, [r7, #4]
 8020724:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	681a      	ldr	r2, [r3, #0]
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	429a      	cmp	r2, r3
 8020730:	bf0c      	ite	eq
 8020732:	2301      	moveq	r3, #1
 8020734:	2300      	movne	r3, #0
 8020736:	b2db      	uxtb	r3, r3
 8020738:	4618      	mov	r0, r3
 802073a:	370c      	adds	r7, #12
 802073c:	46bd      	mov	sp, r7
 802073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020742:	4770      	bx	lr

08020744 <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8020744:	b480      	push	{r7}
 8020746:	b085      	sub	sp, #20
 8020748:	af00      	add	r7, sp, #0
 802074a:	60f8      	str	r0, [r7, #12]
 802074c:	60b9      	str	r1, [r7, #8]
 802074e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8020750:	68bb      	ldr	r3, [r7, #8]
 8020752:	681a      	ldr	r2, [r3, #0]
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	429a      	cmp	r2, r3
 802075a:	bf34      	ite	cc
 802075c:	2301      	movcc	r3, #1
 802075e:	2300      	movcs	r3, #0
 8020760:	b2db      	uxtb	r3, r3
 8020762:	4618      	mov	r0, r3
 8020764:	3714      	adds	r7, #20
 8020766:	46bd      	mov	sp, r7
 8020768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802076c:	4770      	bx	lr

0802076e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 802076e:	b480      	push	{r7}
 8020770:	b083      	sub	sp, #12
 8020772:	af00      	add	r7, sp, #0
 8020774:	6078      	str	r0, [r7, #4]
 8020776:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8020778:	683b      	ldr	r3, [r7, #0]
 802077a:	681a      	ldr	r2, [r3, #0]
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	601a      	str	r2, [r3, #0]
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	4618      	mov	r0, r3
 8020784:	370c      	adds	r7, #12
 8020786:	46bd      	mov	sp, r7
 8020788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802078c:	4770      	bx	lr

0802078e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 802078e:	b480      	push	{r7}
 8020790:	b083      	sub	sp, #12
 8020792:	af00      	add	r7, sp, #0
 8020794:	6078      	str	r0, [r7, #4]
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	4618      	mov	r0, r3
 802079a:	370c      	adds	r7, #12
 802079c:	46bd      	mov	sp, r7
 802079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207a2:	4770      	bx	lr

080207a4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80207a4:	b480      	push	{r7}
 80207a6:	b083      	sub	sp, #12
 80207a8:	af00      	add	r7, sp, #0
 80207aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	68db      	ldr	r3, [r3, #12]
 80207b0:	4618      	mov	r0, r3
 80207b2:	370c      	adds	r7, #12
 80207b4:	46bd      	mov	sp, r7
 80207b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ba:	4770      	bx	lr

080207bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80207bc:	b480      	push	{r7}
 80207be:	b083      	sub	sp, #12
 80207c0:	af00      	add	r7, sp, #0
 80207c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80207c4:	687b      	ldr	r3, [r7, #4]
 80207c6:	689b      	ldr	r3, [r3, #8]
 80207c8:	4618      	mov	r0, r3
 80207ca:	370c      	adds	r7, #12
 80207cc:	46bd      	mov	sp, r7
 80207ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d2:	4770      	bx	lr

080207d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80207d4:	b580      	push	{r7, lr}
 80207d6:	b082      	sub	sp, #8
 80207d8:	af00      	add	r7, sp, #0
 80207da:	6078      	str	r0, [r7, #4]
 80207dc:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80207de:	6839      	ldr	r1, [r7, #0]
 80207e0:	6878      	ldr	r0, [r7, #4]
 80207e2:	f000 fa30 	bl	8020c46 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80207e6:	6839      	ldr	r1, [r7, #0]
 80207e8:	6878      	ldr	r0, [r7, #4]
 80207ea:	f000 fa41 	bl	8020c70 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80207ee:	bf00      	nop
 80207f0:	3708      	adds	r7, #8
 80207f2:	46bd      	mov	sp, r7
 80207f4:	bd80      	pop	{r7, pc}

080207f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 80207f6:	b480      	push	{r7}
 80207f8:	b083      	sub	sp, #12
 80207fa:	af00      	add	r7, sp, #0
 80207fc:	6078      	str	r0, [r7, #4]
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	4618      	mov	r0, r3
 8020802:	370c      	adds	r7, #12
 8020804:	46bd      	mov	sp, r7
 8020806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802080a:	4770      	bx	lr

0802080c <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 802080c:	b480      	push	{r7}
 802080e:	b083      	sub	sp, #12
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]
 8020814:	6039      	str	r1, [r7, #0]
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	4618      	mov	r0, r3
 802081a:	370c      	adds	r7, #12
 802081c:	46bd      	mov	sp, r7
 802081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020822:	4770      	bx	lr

08020824 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8020824:	b580      	push	{r7, lr}
 8020826:	b082      	sub	sp, #8
 8020828:	af00      	add	r7, sp, #0
 802082a:	6078      	str	r0, [r7, #4]
 802082c:	6039      	str	r1, [r7, #0]
 802082e:	6878      	ldr	r0, [r7, #4]
 8020830:	f000 fa30 	bl	8020c94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	4618      	mov	r0, r3
 8020838:	3708      	adds	r7, #8
 802083a:	46bd      	mov	sp, r7
 802083c:	bd80      	pop	{r7, pc}

0802083e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 802083e:	b580      	push	{r7, lr}
 8020840:	b084      	sub	sp, #16
 8020842:	af00      	add	r7, sp, #0
 8020844:	60f8      	str	r0, [r7, #12]
 8020846:	60b9      	str	r1, [r7, #8]
 8020848:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 802084a:	6878      	ldr	r0, [r7, #4]
 802084c:	f000 fa2d 	bl	8020caa <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8020850:	4603      	mov	r3, r0
 8020852:	4619      	mov	r1, r3
 8020854:	68f8      	ldr	r0, [r7, #12]
 8020856:	f000 fa33 	bl	8020cc0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	68b9      	ldr	r1, [r7, #8]
 802085e:	4618      	mov	r0, r3
 8020860:	f000 fa3c 	bl	8020cdc <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 8020864:	68fb      	ldr	r3, [r7, #12]
 8020866:	3304      	adds	r3, #4
 8020868:	4618      	mov	r0, r3
 802086a:	f7fa faf0 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 802086e:	68fb      	ldr	r3, [r7, #12]
 8020870:	4618      	mov	r0, r3
 8020872:	3710      	adds	r7, #16
 8020874:	46bd      	mov	sp, r7
 8020876:	bd80      	pop	{r7, pc}

08020878 <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8020878:	b480      	push	{r7}
 802087a:	b083      	sub	sp, #12
 802087c:	af00      	add	r7, sp, #0
 802087e:	6078      	str	r0, [r7, #4]
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	685b      	ldr	r3, [r3, #4]
 8020884:	4618      	mov	r0, r3
 8020886:	370c      	adds	r7, #12
 8020888:	46bd      	mov	sp, r7
 802088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088e:	4770      	bx	lr

08020890 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 8020890:	b480      	push	{r7}
 8020892:	b083      	sub	sp, #12
 8020894:	af00      	add	r7, sp, #0
 8020896:	6078      	str	r0, [r7, #4]
 8020898:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	683a      	ldr	r2, [r7, #0]
 802089e:	601a      	str	r2, [r3, #0]
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	4618      	mov	r0, r3
 80208a4:	370c      	adds	r7, #12
 80208a6:	46bd      	mov	sp, r7
 80208a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ac:	4770      	bx	lr

080208ae <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80208ae:	b580      	push	{r7, lr}
 80208b0:	b084      	sub	sp, #16
 80208b2:	af00      	add	r7, sp, #0
 80208b4:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	1d1a      	adds	r2, r3, #4
 80208ba:	f107 030c 	add.w	r3, r7, #12
 80208be:	4611      	mov	r1, r2
 80208c0:	4618      	mov	r0, r3
 80208c2:	f000 f9b1 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	4618      	mov	r0, r3
 80208ca:	3710      	adds	r7, #16
 80208cc:	46bd      	mov	sp, r7
 80208ce:	bd80      	pop	{r7, pc}

080208d0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80208d0:	b5b0      	push	{r4, r5, r7, lr}
 80208d2:	b08a      	sub	sp, #40	; 0x28
 80208d4:	af02      	add	r7, sp, #8
 80208d6:	60f8      	str	r0, [r7, #12]
 80208d8:	60b9      	str	r1, [r7, #8]
 80208da:	607a      	str	r2, [r7, #4]
 80208dc:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80208de:	f107 0318 	add.w	r3, r7, #24
 80208e2:	6879      	ldr	r1, [r7, #4]
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 fa05 	bl	8020cf4 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 80208ea:	4603      	mov	r3, r0
 80208ec:	f107 0010 	add.w	r0, r7, #16
 80208f0:	68ba      	ldr	r2, [r7, #8]
 80208f2:	68f9      	ldr	r1, [r7, #12]
 80208f4:	f000 f862 	bl	80209bc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d00f      	beq.n	802091e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80208fe:	693c      	ldr	r4, [r7, #16]
 8020900:	697d      	ldr	r5, [r7, #20]
 8020902:	6878      	ldr	r0, [r7, #4]
 8020904:	f000 fa02 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8020908:	4602      	mov	r2, r0
 802090a:	683b      	ldr	r3, [r7, #0]
 802090c:	9300      	str	r3, [sp, #0]
 802090e:	4613      	mov	r3, r2
 8020910:	462a      	mov	r2, r5
 8020912:	4621      	mov	r1, r4
 8020914:	68f8      	ldr	r0, [r7, #12]
 8020916:	f000 fa04 	bl	8020d22 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 802091a:	4603      	mov	r3, r0
			  __node_gen);
 802091c:	e007      	b.n	802092e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 802091e:	693a      	ldr	r2, [r7, #16]
 8020920:	f107 031c 	add.w	r3, r7, #28
 8020924:	4611      	mov	r1, r2
 8020926:	4618      	mov	r0, r3
 8020928:	f000 f97e 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 802092c:	69fb      	ldr	r3, [r7, #28]
    }
 802092e:	4618      	mov	r0, r3
 8020930:	3720      	adds	r7, #32
 8020932:	46bd      	mov	sp, r7
 8020934:	bdb0      	pop	{r4, r5, r7, pc}

08020936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8020936:	b480      	push	{r7}
 8020938:	b083      	sub	sp, #12
 802093a:	af00      	add	r7, sp, #0
 802093c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	68db      	ldr	r3, [r3, #12]
 8020942:	4618      	mov	r0, r3
 8020944:	370c      	adds	r7, #12
 8020946:	46bd      	mov	sp, r7
 8020948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094c:	4770      	bx	lr

0802094e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802094e:	b480      	push	{r7}
 8020950:	b083      	sub	sp, #12
 8020952:	af00      	add	r7, sp, #0
 8020954:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	689b      	ldr	r3, [r3, #8]
 802095a:	4618      	mov	r0, r3
 802095c:	370c      	adds	r7, #12
 802095e:	46bd      	mov	sp, r7
 8020960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020964:	4770      	bx	lr

08020966 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020966:	b580      	push	{r7, lr}
 8020968:	b082      	sub	sp, #8
 802096a:	af00      	add	r7, sp, #0
 802096c:	6078      	str	r0, [r7, #4]
 802096e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8020970:	6839      	ldr	r1, [r7, #0]
 8020972:	6878      	ldr	r0, [r7, #4]
 8020974:	f000 fa1e 	bl	8020db4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 8020978:	6839      	ldr	r1, [r7, #0]
 802097a:	6878      	ldr	r0, [r7, #4]
 802097c:	f000 fa2f 	bl	8020dde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8020980:	bf00      	nop
 8020982:	3708      	adds	r7, #8
 8020984:	46bd      	mov	sp, r7
 8020986:	bd80      	pop	{r7, pc}

08020988 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8020988:	b580      	push	{r7, lr}
 802098a:	b082      	sub	sp, #8
 802098c:	af00      	add	r7, sp, #0
 802098e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8020990:	6878      	ldr	r0, [r7, #4]
 8020992:	f000 fa36 	bl	8020e02 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8020996:	4603      	mov	r3, r0
 8020998:	4618      	mov	r0, r3
 802099a:	3708      	adds	r7, #8
 802099c:	46bd      	mov	sp, r7
 802099e:	bd80      	pop	{r7, pc}

080209a0 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 80209a0:	b580      	push	{r7, lr}
 80209a2:	b082      	sub	sp, #8
 80209a4:	af00      	add	r7, sp, #0
 80209a6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	3310      	adds	r3, #16
 80209ac:	4618      	mov	r0, r3
 80209ae:	f000 fa3f 	bl	8020e30 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 80209b2:	4603      	mov	r3, r0
 80209b4:	4618      	mov	r0, r3
 80209b6:	3708      	adds	r7, #8
 80209b8:	46bd      	mov	sp, r7
 80209ba:	bd80      	pop	{r7, pc}

080209bc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80209bc:	b590      	push	{r4, r7, lr}
 80209be:	b08d      	sub	sp, #52	; 0x34
 80209c0:	af00      	add	r7, sp, #0
 80209c2:	60f8      	str	r0, [r7, #12]
 80209c4:	60b9      	str	r1, [r7, #8]
 80209c6:	607a      	str	r2, [r7, #4]
 80209c8:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80209ca:	1d3b      	adds	r3, r7, #4
 80209cc:	4618      	mov	r0, r3
 80209ce:	f000 fa4c 	bl	8020e6a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 80209d2:	4603      	mov	r3, r0
 80209d4:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80209d6:	69bc      	ldr	r4, [r7, #24]
 80209d8:	68b8      	ldr	r0, [r7, #8]
 80209da:	f000 fa1d 	bl	8020e18 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 80209de:	4603      	mov	r3, r0
 80209e0:	429c      	cmp	r4, r3
 80209e2:	bf0c      	ite	eq
 80209e4:	2301      	moveq	r3, #1
 80209e6:	2300      	movne	r3, #0
 80209e8:	b2db      	uxtb	r3, r3
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d030      	beq.n	8020a50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 80209ee:	68b8      	ldr	r0, [r7, #8]
 80209f0:	f000 fa4c 	bl	8020e8c <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 80209f4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d013      	beq.n	8020a22 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80209fa:	68bc      	ldr	r4, [r7, #8]
 80209fc:	68b8      	ldr	r0, [r7, #8]
 80209fe:	f000 fa51 	bl	8020ea4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8020a02:	4603      	mov	r3, r0
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	4618      	mov	r0, r3
 8020a08:	f000 fa58 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020a0c:	4603      	mov	r3, r0
 8020a0e:	683a      	ldr	r2, [r7, #0]
 8020a10:	4619      	mov	r1, r3
 8020a12:	4620      	mov	r0, r4
 8020a14:	f7ff fe96 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020a18:	4603      	mov	r3, r0
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d001      	beq.n	8020a22 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8020a1e:	2301      	movs	r3, #1
 8020a20:	e000      	b.n	8020a24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 8020a22:	2300      	movs	r3, #0
	  if (size() > 0
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d00c      	beq.n	8020a42 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8020a28:	2300      	movs	r3, #0
 8020a2a:	61fb      	str	r3, [r7, #28]
 8020a2c:	68b8      	ldr	r0, [r7, #8]
 8020a2e:	f000 fa39 	bl	8020ea4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8020a32:	4602      	mov	r2, r0
 8020a34:	f107 031c 	add.w	r3, r7, #28
 8020a38:	4619      	mov	r1, r3
 8020a3a:	68f8      	ldr	r0, [r7, #12]
 8020a3c:	f7e6 fd42 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8020a40:	e0db      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8020a42:	68fb      	ldr	r3, [r7, #12]
 8020a44:	683a      	ldr	r2, [r7, #0]
 8020a46:	68b9      	ldr	r1, [r7, #8]
 8020a48:	4618      	mov	r0, r3
 8020a4a:	f000 fa43 	bl	8020ed4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8020a4e:	e0d4      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8020a50:	68bc      	ldr	r4, [r7, #8]
 8020a52:	69bb      	ldr	r3, [r7, #24]
 8020a54:	4618      	mov	r0, r3
 8020a56:	f000 fa31 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	461a      	mov	r2, r3
 8020a5e:	6839      	ldr	r1, [r7, #0]
 8020a60:	4620      	mov	r0, r4
 8020a62:	f7ff fe6f 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020a66:	4603      	mov	r3, r0
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d057      	beq.n	8020b1c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 8020a6c:	69bb      	ldr	r3, [r7, #24]
 8020a6e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8020a70:	69bc      	ldr	r4, [r7, #24]
 8020a72:	68b8      	ldr	r0, [r7, #8]
 8020a74:	f000 fab3 	bl	8020fde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8020a78:	4603      	mov	r3, r0
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	429c      	cmp	r4, r3
 8020a7e:	bf0c      	ite	eq
 8020a80:	2301      	moveq	r3, #1
 8020a82:	2300      	movne	r3, #0
 8020a84:	b2db      	uxtb	r3, r3
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d00d      	beq.n	8020aa6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8020a8a:	68b8      	ldr	r0, [r7, #8]
 8020a8c:	f000 faa7 	bl	8020fde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8020a90:	4604      	mov	r4, r0
 8020a92:	68b8      	ldr	r0, [r7, #8]
 8020a94:	f000 faa3 	bl	8020fde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8020a98:	4603      	mov	r3, r0
 8020a9a:	461a      	mov	r2, r3
 8020a9c:	4621      	mov	r1, r4
 8020a9e:	68f8      	ldr	r0, [r7, #12]
 8020aa0:	f7e6 fdb7 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8020aa4:	e0a9      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8020aa6:	68bc      	ldr	r4, [r7, #8]
 8020aa8:	f107 0314 	add.w	r3, r7, #20
 8020aac:	4618      	mov	r0, r3
 8020aae:	f000 faa2 	bl	8020ff6 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	4618      	mov	r0, r3
 8020ab8:	f000 fa00 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020abc:	4603      	mov	r3, r0
 8020abe:	683a      	ldr	r2, [r7, #0]
 8020ac0:	4619      	mov	r1, r3
 8020ac2:	4620      	mov	r0, r4
 8020ac4:	f7ff fe3e 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020ac8:	4603      	mov	r3, r0
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d01f      	beq.n	8020b0e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8020ace:	697b      	ldr	r3, [r7, #20]
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	f7ff ff30 	bl	8020936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8020ad6:	4603      	mov	r3, r0
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	bf0c      	ite	eq
 8020adc:	2301      	moveq	r3, #1
 8020ade:	2300      	movne	r3, #0
 8020ae0:	b2db      	uxtb	r3, r3
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d00a      	beq.n	8020afc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8020ae6:	2300      	movs	r3, #0
 8020ae8:	623b      	str	r3, [r7, #32]
 8020aea:	f107 0214 	add.w	r2, r7, #20
 8020aee:	f107 0320 	add.w	r3, r7, #32
 8020af2:	4619      	mov	r1, r3
 8020af4:	68f8      	ldr	r0, [r7, #12]
 8020af6:	f7e6 fce5 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8020afa:	e07e      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8020afc:	f107 0218 	add.w	r2, r7, #24
 8020b00:	f107 0318 	add.w	r3, r7, #24
 8020b04:	4619      	mov	r1, r3
 8020b06:	68f8      	ldr	r0, [r7, #12]
 8020b08:	f7e6 fd83 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8020b0c:	e075      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	683a      	ldr	r2, [r7, #0]
 8020b12:	68b9      	ldr	r1, [r7, #8]
 8020b14:	4618      	mov	r0, r3
 8020b16:	f000 f9dd 	bl	8020ed4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8020b1a:	e06e      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8020b1c:	68bc      	ldr	r4, [r7, #8]
 8020b1e:	69bb      	ldr	r3, [r7, #24]
 8020b20:	4618      	mov	r0, r3
 8020b22:	f000 f9cb 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020b26:	4603      	mov	r3, r0
 8020b28:	683a      	ldr	r2, [r7, #0]
 8020b2a:	4619      	mov	r1, r3
 8020b2c:	4620      	mov	r0, r4
 8020b2e:	f7ff fe09 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020b32:	4603      	mov	r3, r0
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	d056      	beq.n	8020be6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 8020b38:	69bb      	ldr	r3, [r7, #24]
 8020b3a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8020b3c:	69bc      	ldr	r4, [r7, #24]
 8020b3e:	68b8      	ldr	r0, [r7, #8]
 8020b40:	f000 f9b0 	bl	8020ea4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8020b44:	4603      	mov	r3, r0
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	429c      	cmp	r4, r3
 8020b4a:	bf0c      	ite	eq
 8020b4c:	2301      	moveq	r3, #1
 8020b4e:	2300      	movne	r3, #0
 8020b50:	b2db      	uxtb	r3, r3
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d00c      	beq.n	8020b70 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8020b56:	2300      	movs	r3, #0
 8020b58:	627b      	str	r3, [r7, #36]	; 0x24
 8020b5a:	68b8      	ldr	r0, [r7, #8]
 8020b5c:	f000 f9a2 	bl	8020ea4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8020b60:	4602      	mov	r2, r0
 8020b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b66:	4619      	mov	r1, r3
 8020b68:	68f8      	ldr	r0, [r7, #12]
 8020b6a:	f7e6 fcab 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8020b6e:	e044      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8020b70:	68bc      	ldr	r4, [r7, #8]
 8020b72:	f107 0310 	add.w	r3, r7, #16
 8020b76:	4618      	mov	r0, r3
 8020b78:	f000 fa4e 	bl	8021018 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	4618      	mov	r0, r3
 8020b82:	f000 f99b 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020b86:	4603      	mov	r3, r0
 8020b88:	461a      	mov	r2, r3
 8020b8a:	6839      	ldr	r1, [r7, #0]
 8020b8c:	4620      	mov	r0, r4
 8020b8e:	f7ff fdd9 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020b92:	4603      	mov	r3, r0
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d01f      	beq.n	8020bd8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8020b98:	69bb      	ldr	r3, [r7, #24]
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	f7ff fecb 	bl	8020936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	bf0c      	ite	eq
 8020ba6:	2301      	moveq	r3, #1
 8020ba8:	2300      	movne	r3, #0
 8020baa:	b2db      	uxtb	r3, r3
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	d00a      	beq.n	8020bc6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8020bb0:	2300      	movs	r3, #0
 8020bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8020bb4:	f107 0218 	add.w	r2, r7, #24
 8020bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020bbc:	4619      	mov	r1, r3
 8020bbe:	68f8      	ldr	r0, [r7, #12]
 8020bc0:	f7e6 fc80 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8020bc4:	e019      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8020bc6:	f107 0210 	add.w	r2, r7, #16
 8020bca:	f107 0310 	add.w	r3, r7, #16
 8020bce:	4619      	mov	r1, r3
 8020bd0:	68f8      	ldr	r0, [r7, #12]
 8020bd2:	f7e6 fd1e 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8020bd6:	e010      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8020bd8:	68fb      	ldr	r3, [r7, #12]
 8020bda:	683a      	ldr	r2, [r7, #0]
 8020bdc:	68b9      	ldr	r1, [r7, #8]
 8020bde:	4618      	mov	r0, r3
 8020be0:	f000 f978 	bl	8020ed4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8020be4:	e009      	b.n	8020bfa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8020be6:	2300      	movs	r3, #0
 8020be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020bea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8020bee:	f107 0318 	add.w	r3, r7, #24
 8020bf2:	4619      	mov	r1, r3
 8020bf4:	68f8      	ldr	r0, [r7, #12]
 8020bf6:	f7e6 fd47 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8020bfa:	68f8      	ldr	r0, [r7, #12]
 8020bfc:	3734      	adds	r7, #52	; 0x34
 8020bfe:	46bd      	mov	sp, r7
 8020c00:	bd90      	pop	{r4, r7, pc}

08020c02 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8020c02:	b580      	push	{r7, lr}
 8020c04:	b084      	sub	sp, #16
 8020c06:	af00      	add	r7, sp, #0
 8020c08:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8020c0a:	6878      	ldr	r0, [r7, #4]
 8020c0c:	f000 fa15 	bl	802103a <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8020c10:	4602      	mov	r2, r0
 8020c12:	f107 030c 	add.w	r3, r7, #12
 8020c16:	4611      	mov	r1, r2
 8020c18:	4618      	mov	r0, r3
 8020c1a:	f000 f86b 	bl	8020cf4 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8020c1e:	4603      	mov	r3, r0
      }
 8020c20:	4618      	mov	r0, r3
 8020c22:	3710      	adds	r7, #16
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd80      	pop	{r7, pc}

08020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8020c28:	b480      	push	{r7}
 8020c2a:	b083      	sub	sp, #12
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
 8020c30:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	683a      	ldr	r2, [r7, #0]
 8020c36:	601a      	str	r2, [r3, #0]
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	370c      	adds	r7, #12
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c44:	4770      	bx	lr

08020c46 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020c46:	b590      	push	{r4, r7, lr}
 8020c48:	b083      	sub	sp, #12
 8020c4a:	af00      	add	r7, sp, #0
 8020c4c:	6078      	str	r0, [r7, #4]
 8020c4e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8020c50:	6878      	ldr	r0, [r7, #4]
 8020c52:	f000 fa00 	bl	8021056 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8020c56:	4604      	mov	r4, r0
 8020c58:	6838      	ldr	r0, [r7, #0]
 8020c5a:	f7ff fd51 	bl	8020700 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 8020c5e:	4603      	mov	r3, r0
 8020c60:	4619      	mov	r1, r3
 8020c62:	4620      	mov	r0, r4
 8020c64:	f000 fa02 	bl	802106c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8020c68:	bf00      	nop
 8020c6a:	370c      	adds	r7, #12
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	bd90      	pop	{r4, r7, pc}

08020c70 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020c70:	b580      	push	{r7, lr}
 8020c72:	b082      	sub	sp, #8
 8020c74:	af00      	add	r7, sp, #0
 8020c76:	6078      	str	r0, [r7, #4]
 8020c78:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8020c7a:	6878      	ldr	r0, [r7, #4]
 8020c7c:	f000 f9eb 	bl	8021056 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8020c80:	4603      	mov	r3, r0
 8020c82:	2201      	movs	r2, #1
 8020c84:	6839      	ldr	r1, [r7, #0]
 8020c86:	4618      	mov	r0, r3
 8020c88:	f000 f9fc 	bl	8021084 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 8020c8c:	bf00      	nop
 8020c8e:	3708      	adds	r7, #8
 8020c90:	46bd      	mov	sp, r7
 8020c92:	bd80      	pop	{r7, pc}

08020c94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8020c94:	b480      	push	{r7}
 8020c96:	b083      	sub	sp, #12
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	6078      	str	r0, [r7, #4]
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	4618      	mov	r0, r3
 8020ca0:	370c      	adds	r7, #12
 8020ca2:	46bd      	mov	sp, r7
 8020ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ca8:	4770      	bx	lr

08020caa <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8020caa:	b480      	push	{r7}
 8020cac:	b083      	sub	sp, #12
 8020cae:	af00      	add	r7, sp, #0
 8020cb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	4618      	mov	r0, r3
 8020cb6:	370c      	adds	r7, #12
 8020cb8:	46bd      	mov	sp, r7
 8020cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cbe:	4770      	bx	lr

08020cc0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8020cc0:	b580      	push	{r7, lr}
 8020cc2:	b082      	sub	sp, #8
 8020cc4:	af00      	add	r7, sp, #0
 8020cc6:	6078      	str	r0, [r7, #4]
 8020cc8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8020cca:	6839      	ldr	r1, [r7, #0]
 8020ccc:	6878      	ldr	r0, [r7, #4]
 8020cce:	f000 f9f8 	bl	80210c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	3708      	adds	r7, #8
 8020cd8:	46bd      	mov	sp, r7
 8020cda:	bd80      	pop	{r7, pc}

08020cdc <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8020cdc:	b480      	push	{r7}
 8020cde:	b083      	sub	sp, #12
 8020ce0:	af00      	add	r7, sp, #0
 8020ce2:	6078      	str	r0, [r7, #4]
 8020ce4:	6039      	str	r1, [r7, #0]
      { }
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	4618      	mov	r0, r3
 8020cea:	370c      	adds	r7, #12
 8020cec:	46bd      	mov	sp, r7
 8020cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cf2:	4770      	bx	lr

08020cf4 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 8020cf4:	b480      	push	{r7}
 8020cf6:	b083      	sub	sp, #12
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8020cfe:	683b      	ldr	r3, [r7, #0]
 8020d00:	4618      	mov	r0, r3
 8020d02:	370c      	adds	r7, #12
 8020d04:	46bd      	mov	sp, r7
 8020d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0a:	4770      	bx	lr

08020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8020d0c:	b480      	push	{r7}
 8020d0e:	b083      	sub	sp, #12
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	4618      	mov	r0, r3
 8020d18:	370c      	adds	r7, #12
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d20:	4770      	bx	lr

08020d22 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8020d22:	b5b0      	push	{r4, r5, r7, lr}
 8020d24:	b088      	sub	sp, #32
 8020d26:	af00      	add	r7, sp, #0
 8020d28:	60f8      	str	r0, [r7, #12]
 8020d2a:	60b9      	str	r1, [r7, #8]
 8020d2c:	607a      	str	r2, [r7, #4]
 8020d2e:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8020d30:	68bb      	ldr	r3, [r7, #8]
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	d11a      	bne.n	8020d6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8020d36:	68f8      	ldr	r0, [r7, #12]
 8020d38:	f000 f86e 	bl	8020e18 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8020d3c:	4602      	mov	r2, r0
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	4293      	cmp	r3, r2
 8020d42:	d013      	beq.n	8020d6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8020d44:	68fc      	ldr	r4, [r7, #12]
 8020d46:	f107 0310 	add.w	r3, r7, #16
 8020d4a:	6839      	ldr	r1, [r7, #0]
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	f7ff ffd1 	bl	8020cf4 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8020d52:	4605      	mov	r5, r0
 8020d54:	6878      	ldr	r0, [r7, #4]
 8020d56:	f000 f8b1 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020d5a:	4603      	mov	r3, r0
 8020d5c:	461a      	mov	r2, r3
 8020d5e:	4629      	mov	r1, r5
 8020d60:	4620      	mov	r0, r4
 8020d62:	f7ff fcef 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020d66:	4603      	mov	r3, r0
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	d001      	beq.n	8020d70 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 8020d6c:	2301      	movs	r3, #1
 8020d6e:	e000      	b.n	8020d72 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8020d70:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8020d72:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8020d74:	6838      	ldr	r0, [r7, #0]
 8020d76:	f7ff ffc9 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	4619      	mov	r1, r3
 8020d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020d80:	f000 f9ab 	bl	80210da <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8020d84:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8020d86:	68fb      	ldr	r3, [r7, #12]
 8020d88:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8020d8a:	7ff8      	ldrb	r0, [r7, #31]
 8020d8c:	687a      	ldr	r2, [r7, #4]
 8020d8e:	69b9      	ldr	r1, [r7, #24]
 8020d90:	f002 fa10 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	695b      	ldr	r3, [r3, #20]
 8020d98:	1c5a      	adds	r2, r3, #1
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8020d9e:	f107 0314 	add.w	r3, r7, #20
 8020da2:	69b9      	ldr	r1, [r7, #24]
 8020da4:	4618      	mov	r0, r3
 8020da6:	f7ff ff3f 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8020daa:	697b      	ldr	r3, [r7, #20]
      }
 8020dac:	4618      	mov	r0, r3
 8020dae:	3720      	adds	r7, #32
 8020db0:	46bd      	mov	sp, r7
 8020db2:	bdb0      	pop	{r4, r5, r7, pc}

08020db4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020db4:	b590      	push	{r4, r7, lr}
 8020db6:	b083      	sub	sp, #12
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	6078      	str	r0, [r7, #4]
 8020dbc:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8020dbe:	6878      	ldr	r0, [r7, #4]
 8020dc0:	f000 f99f 	bl	8021102 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8020dc4:	4604      	mov	r4, r0
 8020dc6:	6838      	ldr	r0, [r7, #0]
 8020dc8:	f7ff fdea 	bl	80209a0 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8020dcc:	4603      	mov	r3, r0
 8020dce:	4619      	mov	r1, r3
 8020dd0:	4620      	mov	r0, r4
 8020dd2:	f000 f9a1 	bl	8021118 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 8020dd6:	bf00      	nop
 8020dd8:	370c      	adds	r7, #12
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	bd90      	pop	{r4, r7, pc}

08020dde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8020dde:	b580      	push	{r7, lr}
 8020de0:	b082      	sub	sp, #8
 8020de2:	af00      	add	r7, sp, #0
 8020de4:	6078      	str	r0, [r7, #4]
 8020de6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8020de8:	6878      	ldr	r0, [r7, #4]
 8020dea:	f000 f98a 	bl	8021102 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8020dee:	4603      	mov	r3, r0
 8020df0:	2201      	movs	r2, #1
 8020df2:	6839      	ldr	r1, [r7, #0]
 8020df4:	4618      	mov	r0, r3
 8020df6:	f000 f99b 	bl	8021130 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 8020dfa:	bf00      	nop
 8020dfc:	3708      	adds	r7, #8
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	bd80      	pop	{r7, pc}

08020e02 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8020e02:	b480      	push	{r7}
 8020e04:	b083      	sub	sp, #12
 8020e06:	af00      	add	r7, sp, #0
 8020e08:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	4618      	mov	r0, r3
 8020e0e:	370c      	adds	r7, #12
 8020e10:	46bd      	mov	sp, r7
 8020e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e16:	4770      	bx	lr

08020e18 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8020e18:	b480      	push	{r7}
 8020e1a:	b083      	sub	sp, #12
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	3304      	adds	r3, #4
 8020e24:	4618      	mov	r0, r3
 8020e26:	370c      	adds	r7, #12
 8020e28:	46bd      	mov	sp, r7
 8020e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e2e:	4770      	bx	lr

08020e30 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b082      	sub	sp, #8
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f000 f998 	bl	802116e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8020e3e:	4603      	mov	r3, r0
 8020e40:	4618      	mov	r0, r3
 8020e42:	3708      	adds	r7, #8
 8020e44:	46bd      	mov	sp, r7
 8020e46:	bd80      	pop	{r7, pc}

08020e48 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	b082      	sub	sp, #8
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8020e50:	6878      	ldr	r0, [r7, #4]
 8020e52:	f000 f956 	bl	8021102 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8020e56:	4603      	mov	r3, r0
 8020e58:	2101      	movs	r1, #1
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	f000 f992 	bl	8021184 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 8020e60:	4603      	mov	r3, r0
 8020e62:	4618      	mov	r0, r3
 8020e64:	3708      	adds	r7, #8
 8020e66:	46bd      	mov	sp, r7
 8020e68:	bd80      	pop	{r7, pc}

08020e6a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8020e6a:	b580      	push	{r7, lr}
 8020e6c:	b084      	sub	sp, #16
 8020e6e:	af00      	add	r7, sp, #0
 8020e70:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	681a      	ldr	r2, [r3, #0]
 8020e76:	f107 030c 	add.w	r3, r7, #12
 8020e7a:	4611      	mov	r1, r2
 8020e7c:	4618      	mov	r0, r3
 8020e7e:	f7ff fed3 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8020e82:	68fb      	ldr	r3, [r7, #12]
 8020e84:	4618      	mov	r0, r3
 8020e86:	3710      	adds	r7, #16
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd80      	pop	{r7, pc}

08020e8c <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8020e8c:	b480      	push	{r7}
 8020e8e:	b083      	sub	sp, #12
 8020e90:	af00      	add	r7, sp, #0
 8020e92:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	695b      	ldr	r3, [r3, #20]
 8020e98:	4618      	mov	r0, r3
 8020e9a:	370c      	adds	r7, #12
 8020e9c:	46bd      	mov	sp, r7
 8020e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ea2:	4770      	bx	lr

08020ea4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8020ea4:	b480      	push	{r7}
 8020ea6:	b083      	sub	sp, #12
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	3310      	adds	r3, #16
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	370c      	adds	r7, #12
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eba:	4770      	bx	lr

08020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	b082      	sub	sp, #8
 8020ec0:	af00      	add	r7, sp, #0
 8020ec2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8020ec4:	6878      	ldr	r0, [r7, #4]
 8020ec6:	f7ff fe9c 	bl	8020c02 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8020eca:	4603      	mov	r3, r0
 8020ecc:	4618      	mov	r0, r3
 8020ece:	3708      	adds	r7, #8
 8020ed0:	46bd      	mov	sp, r7
 8020ed2:	bd80      	pop	{r7, pc}

08020ed4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8020ed4:	b590      	push	{r4, r7, lr}
 8020ed6:	b08b      	sub	sp, #44	; 0x2c
 8020ed8:	af00      	add	r7, sp, #0
 8020eda:	60f8      	str	r0, [r7, #12]
 8020edc:	60b9      	str	r1, [r7, #8]
 8020ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8020ee0:	68b8      	ldr	r0, [r7, #8]
 8020ee2:	f7ff fc01 	bl	80206e8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8020ee6:	4603      	mov	r3, r0
 8020ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8020eea:	68b8      	ldr	r0, [r7, #8]
 8020eec:	f7ff ff94 	bl	8020e18 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8020ef0:	4603      	mov	r3, r0
 8020ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8020ef4:	2301      	movs	r3, #1
 8020ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8020efa:	69bb      	ldr	r3, [r7, #24]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d020      	beq.n	8020f42 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8020f00:	69bb      	ldr	r3, [r7, #24]
 8020f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8020f04:	68bc      	ldr	r4, [r7, #8]
 8020f06:	69bb      	ldr	r3, [r7, #24]
 8020f08:	4618      	mov	r0, r3
 8020f0a:	f7ff fe7a 	bl	8020c02 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8020f0e:	4603      	mov	r3, r0
 8020f10:	461a      	mov	r2, r3
 8020f12:	6879      	ldr	r1, [r7, #4]
 8020f14:	4620      	mov	r0, r4
 8020f16:	f7ff fc15 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8020f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d005      	beq.n	8020f34 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 8020f28:	69bb      	ldr	r3, [r7, #24]
 8020f2a:	4618      	mov	r0, r3
 8020f2c:	f7ff fd0f 	bl	802094e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8020f30:	4603      	mov	r3, r0
 8020f32:	e004      	b.n	8020f3e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 8020f34:	69bb      	ldr	r3, [r7, #24]
 8020f36:	4618      	mov	r0, r3
 8020f38:	f7ff fcfd 	bl	8020936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8020f3c:	4603      	mov	r3, r0
 8020f3e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8020f40:	e7db      	b.n	8020efa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8020f42:	697a      	ldr	r2, [r7, #20]
 8020f44:	f107 0310 	add.w	r3, r7, #16
 8020f48:	4611      	mov	r1, r2
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	f7ff fe6c 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8020f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d01d      	beq.n	8020f94 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8020f58:	68b8      	ldr	r0, [r7, #8]
 8020f5a:	f000 f936 	bl	80211ca <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 8020f5e:	4603      	mov	r3, r0
 8020f60:	61fb      	str	r3, [r7, #28]
 8020f62:	f107 021c 	add.w	r2, r7, #28
 8020f66:	f107 0310 	add.w	r3, r7, #16
 8020f6a:	4611      	mov	r1, r2
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f7ff fbd5 	bl	802071c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 8020f72:	4603      	mov	r3, r0
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d008      	beq.n	8020f8a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8020f78:	f107 0214 	add.w	r2, r7, #20
 8020f7c:	f107 0318 	add.w	r3, r7, #24
 8020f80:	4619      	mov	r1, r3
 8020f82:	68f8      	ldr	r0, [r7, #12]
 8020f84:	f000 f932 	bl	80211ec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8020f88:	e025      	b.n	8020fd6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8020f8a:	f107 0310 	add.w	r3, r7, #16
 8020f8e:	4618      	mov	r0, r3
 8020f90:	f000 f831 	bl	8020ff6 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8020f94:	68bc      	ldr	r4, [r7, #8]
 8020f96:	693b      	ldr	r3, [r7, #16]
 8020f98:	4618      	mov	r0, r3
 8020f9a:	f7ff ff8f 	bl	8020ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8020f9e:	4603      	mov	r3, r0
 8020fa0:	687a      	ldr	r2, [r7, #4]
 8020fa2:	4619      	mov	r1, r3
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	f7ff fbcd 	bl	8020744 <_ZNKSt4lessImEclERKmS2_>
 8020faa:	4603      	mov	r3, r0
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d008      	beq.n	8020fc2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8020fb0:	f107 0214 	add.w	r2, r7, #20
 8020fb4:	f107 0318 	add.w	r3, r7, #24
 8020fb8:	4619      	mov	r1, r3
 8020fba:	68f8      	ldr	r0, [r7, #12]
 8020fbc:	f000 f916 	bl	80211ec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8020fc0:	e009      	b.n	8020fd6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	623b      	str	r3, [r7, #32]
 8020fc6:	f107 0220 	add.w	r2, r7, #32
 8020fca:	f107 0310 	add.w	r3, r7, #16
 8020fce:	4619      	mov	r1, r3
 8020fd0:	68f8      	ldr	r0, [r7, #12]
 8020fd2:	f7e6 fb59 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8020fd6:	68f8      	ldr	r0, [r7, #12]
 8020fd8:	372c      	adds	r7, #44	; 0x2c
 8020fda:	46bd      	mov	sp, r7
 8020fdc:	bd90      	pop	{r4, r7, pc}

08020fde <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8020fde:	b480      	push	{r7}
 8020fe0:	b083      	sub	sp, #12
 8020fe2:	af00      	add	r7, sp, #0
 8020fe4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	330c      	adds	r3, #12
 8020fea:	4618      	mov	r0, r3
 8020fec:	370c      	adds	r7, #12
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff4:	4770      	bx	lr

08020ff6 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8020ff6:	b580      	push	{r7, lr}
 8020ff8:	b082      	sub	sp, #8
 8020ffa:	af00      	add	r7, sp, #0
 8020ffc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	4618      	mov	r0, r3
 8021004:	f002 f8d4 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8021008:	4602      	mov	r2, r0
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	601a      	str	r2, [r3, #0]
	return *this;
 802100e:	687b      	ldr	r3, [r7, #4]
      }
 8021010:	4618      	mov	r0, r3
 8021012:	3708      	adds	r7, #8
 8021014:	46bd      	mov	sp, r7
 8021016:	bd80      	pop	{r7, pc}

08021018 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8021018:	b580      	push	{r7, lr}
 802101a:	b082      	sub	sp, #8
 802101c:	af00      	add	r7, sp, #0
 802101e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	4618      	mov	r0, r3
 8021026:	f002 f8c1 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 802102a:	4602      	mov	r2, r0
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	601a      	str	r2, [r3, #0]
	return *this;
 8021030:	687b      	ldr	r3, [r7, #4]
      }
 8021032:	4618      	mov	r0, r3
 8021034:	3708      	adds	r7, #8
 8021036:	46bd      	mov	sp, r7
 8021038:	bd80      	pop	{r7, pc}

0802103a <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 802103a:	b580      	push	{r7, lr}
 802103c:	b082      	sub	sp, #8
 802103e:	af00      	add	r7, sp, #0
 8021040:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	3310      	adds	r3, #16
 8021046:	4618      	mov	r0, r3
 8021048:	f000 f8e9 	bl	802121e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 802104c:	4603      	mov	r3, r0
 802104e:	4618      	mov	r0, r3
 8021050:	3708      	adds	r7, #8
 8021052:	46bd      	mov	sp, r7
 8021054:	bd80      	pop	{r7, pc}

08021056 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8021056:	b480      	push	{r7}
 8021058:	b083      	sub	sp, #12
 802105a:	af00      	add	r7, sp, #0
 802105c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	4618      	mov	r0, r3
 8021062:	370c      	adds	r7, #12
 8021064:	46bd      	mov	sp, r7
 8021066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802106a:	4770      	bx	lr

0802106c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802106c:	b580      	push	{r7, lr}
 802106e:	b082      	sub	sp, #8
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
 8021074:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8021076:	6838      	ldr	r0, [r7, #0]
 8021078:	f000 f8dd 	bl	8021236 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 802107c:	bf00      	nop
 802107e:	3708      	adds	r7, #8
 8021080:	46bd      	mov	sp, r7
 8021082:	bd80      	pop	{r7, pc}

08021084 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8021084:	b580      	push	{r7, lr}
 8021086:	b088      	sub	sp, #32
 8021088:	af00      	add	r7, sp, #0
 802108a:	60f8      	str	r0, [r7, #12]
 802108c:	60b9      	str	r1, [r7, #8]
 802108e:	607a      	str	r2, [r7, #4]
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	61fb      	str	r3, [r7, #28]
 8021094:	68bb      	ldr	r3, [r7, #8]
 8021096:	61bb      	str	r3, [r7, #24]
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 802109c:	f7df f938 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 80210a0:	4603      	mov	r3, r0
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	d003      	beq.n	80210ae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80210a6:	69b8      	ldr	r0, [r7, #24]
 80210a8:	f002 f817 	bl	80230da <_ZdlPv>
	    return;
 80210ac:	e005      	b.n	80210ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80210ae:	697a      	ldr	r2, [r7, #20]
 80210b0:	69b9      	ldr	r1, [r7, #24]
 80210b2:	69f8      	ldr	r0, [r7, #28]
 80210b4:	f000 f900 	bl	80212b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80210b8:	bf00      	nop
 80210ba:	bf00      	nop
 80210bc:	3720      	adds	r7, #32
 80210be:	46bd      	mov	sp, r7
 80210c0:	bd80      	pop	{r7, pc}

080210c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80210c2:	b480      	push	{r7}
 80210c4:	b083      	sub	sp, #12
 80210c6:	af00      	add	r7, sp, #0
 80210c8:	6078      	str	r0, [r7, #4]
 80210ca:	6039      	str	r1, [r7, #0]
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	4618      	mov	r0, r3
 80210d0:	370c      	adds	r7, #12
 80210d2:	46bd      	mov	sp, r7
 80210d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d8:	4770      	bx	lr

080210da <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 80210da:	b590      	push	{r4, r7, lr}
 80210dc:	b083      	sub	sp, #12
 80210de:	af00      	add	r7, sp, #0
 80210e0:	6078      	str	r0, [r7, #4]
 80210e2:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	681c      	ldr	r4, [r3, #0]
 80210e8:	6838      	ldr	r0, [r7, #0]
 80210ea:	f7ff fe0f 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 80210ee:	4603      	mov	r3, r0
 80210f0:	4619      	mov	r1, r3
 80210f2:	4620      	mov	r0, r4
 80210f4:	f000 f8a9 	bl	802124a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 80210f8:	4603      	mov	r3, r0
 80210fa:	4618      	mov	r0, r3
 80210fc:	370c      	adds	r7, #12
 80210fe:	46bd      	mov	sp, r7
 8021100:	bd90      	pop	{r4, r7, pc}

08021102 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8021102:	b480      	push	{r7}
 8021104:	b083      	sub	sp, #12
 8021106:	af00      	add	r7, sp, #0
 8021108:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	4618      	mov	r0, r3
 802110e:	370c      	adds	r7, #12
 8021110:	46bd      	mov	sp, r7
 8021112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021116:	4770      	bx	lr

08021118 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8021118:	b580      	push	{r7, lr}
 802111a:	b082      	sub	sp, #8
 802111c:	af00      	add	r7, sp, #0
 802111e:	6078      	str	r0, [r7, #4]
 8021120:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8021122:	6838      	ldr	r0, [r7, #0]
 8021124:	f000 f8a8 	bl	8021278 <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 8021128:	bf00      	nop
 802112a:	3708      	adds	r7, #8
 802112c:	46bd      	mov	sp, r7
 802112e:	bd80      	pop	{r7, pc}

08021130 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8021130:	b580      	push	{r7, lr}
 8021132:	b088      	sub	sp, #32
 8021134:	af00      	add	r7, sp, #0
 8021136:	60f8      	str	r0, [r7, #12]
 8021138:	60b9      	str	r1, [r7, #8]
 802113a:	607a      	str	r2, [r7, #4]
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	61fb      	str	r3, [r7, #28]
 8021140:	68bb      	ldr	r3, [r7, #8]
 8021142:	61bb      	str	r3, [r7, #24]
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8021148:	f7df f8e2 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 802114c:	4603      	mov	r3, r0
 802114e:	2b00      	cmp	r3, #0
 8021150:	d003      	beq.n	802115a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8021152:	69b8      	ldr	r0, [r7, #24]
 8021154:	f001 ffc1 	bl	80230da <_ZdlPv>
	    return;
 8021158:	e005      	b.n	8021166 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 802115a:	697a      	ldr	r2, [r7, #20]
 802115c:	69b9      	ldr	r1, [r7, #24]
 802115e:	69f8      	ldr	r0, [r7, #28]
 8021160:	f000 f8db 	bl	802131a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8021164:	bf00      	nop
 8021166:	bf00      	nop
 8021168:	3720      	adds	r7, #32
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}

0802116e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 802116e:	b480      	push	{r7}
 8021170:	b083      	sub	sp, #12
 8021172:	af00      	add	r7, sp, #0
 8021174:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	4618      	mov	r0, r3
 802117a:	370c      	adds	r7, #12
 802117c:	46bd      	mov	sp, r7
 802117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021182:	4770      	bx	lr

08021184 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8021184:	b580      	push	{r7, lr}
 8021186:	b084      	sub	sp, #16
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
 802118c:	6039      	str	r1, [r7, #0]
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	60fb      	str	r3, [r7, #12]
 8021192:	683b      	ldr	r3, [r7, #0]
 8021194:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8021196:	f7df f8bb 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 802119a:	4603      	mov	r3, r0
 802119c:	2b00      	cmp	r3, #0
 802119e:	d009      	beq.n	80211b4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80211a0:	68ba      	ldr	r2, [r7, #8]
 80211a2:	4613      	mov	r3, r2
 80211a4:	005b      	lsls	r3, r3, #1
 80211a6:	4413      	add	r3, r2
 80211a8:	00db      	lsls	r3, r3, #3
 80211aa:	4618      	mov	r0, r3
 80211ac:	f001 ff99 	bl	80230e2 <_Znwj>
 80211b0:	4603      	mov	r3, r0
 80211b2:	e006      	b.n	80211c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80211b4:	2200      	movs	r2, #0
 80211b6:	68b9      	ldr	r1, [r7, #8]
 80211b8:	68f8      	ldr	r0, [r7, #12]
 80211ba:	f000 f8c0 	bl	802133e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 80211be:	4603      	mov	r3, r0
 80211c0:	bf00      	nop
      { return __a.allocate(__n); }
 80211c2:	4618      	mov	r0, r3
 80211c4:	3710      	adds	r7, #16
 80211c6:	46bd      	mov	sp, r7
 80211c8:	bd80      	pop	{r7, pc}

080211ca <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80211ca:	b580      	push	{r7, lr}
 80211cc:	b084      	sub	sp, #16
 80211ce:	af00      	add	r7, sp, #0
 80211d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	68da      	ldr	r2, [r3, #12]
 80211d6:	f107 030c 	add.w	r3, r7, #12
 80211da:	4611      	mov	r1, r2
 80211dc:	4618      	mov	r0, r3
 80211de:	f7ff fd23 	bl	8020c28 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	4618      	mov	r0, r3
 80211e6:	3710      	adds	r7, #16
 80211e8:	46bd      	mov	sp, r7
 80211ea:	bd80      	pop	{r7, pc}

080211ec <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80211ec:	b580      	push	{r7, lr}
 80211ee:	b084      	sub	sp, #16
 80211f0:	af00      	add	r7, sp, #0
 80211f2:	60f8      	str	r0, [r7, #12]
 80211f4:	60b9      	str	r1, [r7, #8]
 80211f6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80211f8:	68b8      	ldr	r0, [r7, #8]
 80211fa:	f000 f847 	bl	802128c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80211fe:	4603      	mov	r3, r0
 8021200:	681a      	ldr	r2, [r3, #0]
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	601a      	str	r2, [r3, #0]
 8021206:	6878      	ldr	r0, [r7, #4]
 8021208:	f7e7 fe68 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 802120c:	4603      	mov	r3, r0
 802120e:	681a      	ldr	r2, [r3, #0]
 8021210:	68fb      	ldr	r3, [r7, #12]
 8021212:	605a      	str	r2, [r3, #4]
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	4618      	mov	r0, r3
 8021218:	3710      	adds	r7, #16
 802121a:	46bd      	mov	sp, r7
 802121c:	bd80      	pop	{r7, pc}

0802121e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 802121e:	b580      	push	{r7, lr}
 8021220:	b082      	sub	sp, #8
 8021222:	af00      	add	r7, sp, #0
 8021224:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8021226:	6878      	ldr	r0, [r7, #4]
 8021228:	f000 f83b 	bl	80212a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 802122c:	4603      	mov	r3, r0
 802122e:	4618      	mov	r0, r3
 8021230:	3708      	adds	r7, #8
 8021232:	46bd      	mov	sp, r7
 8021234:	bd80      	pop	{r7, pc}

08021236 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8021236:	b480      	push	{r7}
 8021238:	b083      	sub	sp, #12
 802123a:	af00      	add	r7, sp, #0
 802123c:	6078      	str	r0, [r7, #4]
    }
 802123e:	bf00      	nop
 8021240:	370c      	adds	r7, #12
 8021242:	46bd      	mov	sp, r7
 8021244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021248:	4770      	bx	lr

0802124a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 802124a:	b580      	push	{r7, lr}
 802124c:	b084      	sub	sp, #16
 802124e:	af00      	add	r7, sp, #0
 8021250:	6078      	str	r0, [r7, #4]
 8021252:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8021254:	6878      	ldr	r0, [r7, #4]
 8021256:	f7ff fdf7 	bl	8020e48 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 802125a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 802125c:	6838      	ldr	r0, [r7, #0]
 802125e:	f7ff fd55 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8021262:	4603      	mov	r3, r0
 8021264:	461a      	mov	r2, r3
 8021266:	68f9      	ldr	r1, [r7, #12]
 8021268:	6878      	ldr	r0, [r7, #4]
 802126a:	f000 f836 	bl	80212da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 802126e:	68fb      	ldr	r3, [r7, #12]
	}
 8021270:	4618      	mov	r0, r3
 8021272:	3710      	adds	r7, #16
 8021274:	46bd      	mov	sp, r7
 8021276:	bd80      	pop	{r7, pc}

08021278 <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 8021278:	b480      	push	{r7}
 802127a:	b083      	sub	sp, #12
 802127c:	af00      	add	r7, sp, #0
 802127e:	6078      	str	r0, [r7, #4]
    }
 8021280:	bf00      	nop
 8021282:	370c      	adds	r7, #12
 8021284:	46bd      	mov	sp, r7
 8021286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802128a:	4770      	bx	lr

0802128c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802128c:	b480      	push	{r7}
 802128e:	b083      	sub	sp, #12
 8021290:	af00      	add	r7, sp, #0
 8021292:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	4618      	mov	r0, r3
 8021298:	370c      	adds	r7, #12
 802129a:	46bd      	mov	sp, r7
 802129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212a0:	4770      	bx	lr

080212a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 80212a2:	b480      	push	{r7}
 80212a4:	b083      	sub	sp, #12
 80212a6:	af00      	add	r7, sp, #0
 80212a8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	4618      	mov	r0, r3
 80212ae:	370c      	adds	r7, #12
 80212b0:	46bd      	mov	sp, r7
 80212b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b6:	4770      	bx	lr

080212b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80212b8:	b580      	push	{r7, lr}
 80212ba:	b084      	sub	sp, #16
 80212bc:	af00      	add	r7, sp, #0
 80212be:	60f8      	str	r0, [r7, #12]
 80212c0:	60b9      	str	r1, [r7, #8]
 80212c2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	2234      	movs	r2, #52	; 0x34
 80212c8:	fb02 f303 	mul.w	r3, r2, r3
 80212cc:	4619      	mov	r1, r3
 80212ce:	68b8      	ldr	r0, [r7, #8]
 80212d0:	f001 ff05 	bl	80230de <_ZdlPvj>
      }
 80212d4:	3710      	adds	r7, #16
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}

080212da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80212da:	b5b0      	push	{r4, r5, r7, lr}
 80212dc:	b084      	sub	sp, #16
 80212de:	af00      	add	r7, sp, #0
 80212e0:	60f8      	str	r0, [r7, #12]
 80212e2:	60b9      	str	r1, [r7, #8]
 80212e4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80212e6:	68bb      	ldr	r3, [r7, #8]
 80212e8:	4619      	mov	r1, r3
 80212ea:	2018      	movs	r0, #24
 80212ec:	f7df f846 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80212f0:	68f8      	ldr	r0, [r7, #12]
 80212f2:	f7ff ff06 	bl	8021102 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 80212f6:	4604      	mov	r4, r0
 80212f8:	68b8      	ldr	r0, [r7, #8]
 80212fa:	f7ff fb51 	bl	80209a0 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 80212fe:	4605      	mov	r5, r0
 8021300:	6878      	ldr	r0, [r7, #4]
 8021302:	f7ff fd03 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8021306:	4603      	mov	r3, r0
 8021308:	461a      	mov	r2, r3
 802130a:	4629      	mov	r1, r5
 802130c:	4620      	mov	r0, r4
 802130e:	f000 f852 	bl	80213b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 8021312:	bf00      	nop
 8021314:	3710      	adds	r7, #16
 8021316:	46bd      	mov	sp, r7
 8021318:	bdb0      	pop	{r4, r5, r7, pc}

0802131a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 802131a:	b580      	push	{r7, lr}
 802131c:	b084      	sub	sp, #16
 802131e:	af00      	add	r7, sp, #0
 8021320:	60f8      	str	r0, [r7, #12]
 8021322:	60b9      	str	r1, [r7, #8]
 8021324:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8021326:	687a      	ldr	r2, [r7, #4]
 8021328:	4613      	mov	r3, r2
 802132a:	005b      	lsls	r3, r3, #1
 802132c:	4413      	add	r3, r2
 802132e:	00db      	lsls	r3, r3, #3
 8021330:	4619      	mov	r1, r3
 8021332:	68b8      	ldr	r0, [r7, #8]
 8021334:	f001 fed3 	bl	80230de <_ZdlPvj>
      }
 8021338:	3710      	adds	r7, #16
 802133a:	46bd      	mov	sp, r7
 802133c:	bd80      	pop	{r7, pc}

0802133e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802133e:	b580      	push	{r7, lr}
 8021340:	b084      	sub	sp, #16
 8021342:	af00      	add	r7, sp, #0
 8021344:	60f8      	str	r0, [r7, #12]
 8021346:	60b9      	str	r1, [r7, #8]
 8021348:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802134a:	68f8      	ldr	r0, [r7, #12]
 802134c:	f000 f846 	bl	80213dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 8021350:	4602      	mov	r2, r0
 8021352:	68bb      	ldr	r3, [r7, #8]
 8021354:	4293      	cmp	r3, r2
 8021356:	bf8c      	ite	hi
 8021358:	2301      	movhi	r3, #1
 802135a:	2300      	movls	r3, #0
 802135c:	b2db      	uxtb	r3, r3
 802135e:	2b00      	cmp	r3, #0
 8021360:	d001      	beq.n	8021366 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8021362:	f001 ff82 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8021366:	68ba      	ldr	r2, [r7, #8]
 8021368:	4613      	mov	r3, r2
 802136a:	005b      	lsls	r3, r3, #1
 802136c:	4413      	add	r3, r2
 802136e:	00db      	lsls	r3, r3, #3
 8021370:	4618      	mov	r0, r3
 8021372:	f001 feb6 	bl	80230e2 <_Znwj>
 8021376:	4603      	mov	r3, r0
 8021378:	bf00      	nop
      }
 802137a:	4618      	mov	r0, r3
 802137c:	3710      	adds	r7, #16
 802137e:	46bd      	mov	sp, r7
 8021380:	bd80      	pop	{r7, pc}

08021382 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8021382:	b5b0      	push	{r4, r5, r7, lr}
 8021384:	b082      	sub	sp, #8
 8021386:	af00      	add	r7, sp, #0
 8021388:	6078      	str	r0, [r7, #4]
 802138a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 802138c:	6838      	ldr	r0, [r7, #0]
 802138e:	f7ff fcbd 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8021392:	4605      	mov	r5, r0
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	4619      	mov	r1, r3
 8021398:	2008      	movs	r0, #8
 802139a:	f7de ffef 	bl	800037c <_ZnwjPv>
 802139e:	4604      	mov	r4, r0
 80213a0:	4623      	mov	r3, r4
 80213a2:	462a      	mov	r2, r5
 80213a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80213a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80213ac:	4623      	mov	r3, r4
 80213ae:	4618      	mov	r0, r3
 80213b0:	3708      	adds	r7, #8
 80213b2:	46bd      	mov	sp, r7
 80213b4:	bdb0      	pop	{r4, r5, r7, pc}

080213b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80213b6:	b580      	push	{r7, lr}
 80213b8:	b084      	sub	sp, #16
 80213ba:	af00      	add	r7, sp, #0
 80213bc:	60f8      	str	r0, [r7, #12]
 80213be:	60b9      	str	r1, [r7, #8]
 80213c0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f7ff fca2 	bl	8020d0c <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 80213c8:	4603      	mov	r3, r0
 80213ca:	4619      	mov	r1, r3
 80213cc:	68b8      	ldr	r0, [r7, #8]
 80213ce:	f7ff ffd8 	bl	8021382 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 80213d2:	bf00      	nop
 80213d4:	3710      	adds	r7, #16
 80213d6:	46bd      	mov	sp, r7
 80213d8:	bd80      	pop	{r7, pc}
	...

080213dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80213dc:	b480      	push	{r7}
 80213de:	b083      	sub	sp, #12
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80213e4:	4b03      	ldr	r3, [pc, #12]	; (80213f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 80213e6:	4618      	mov	r0, r3
 80213e8:	370c      	adds	r7, #12
 80213ea:	46bd      	mov	sp, r7
 80213ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213f0:	4770      	bx	lr
 80213f2:	bf00      	nop
 80213f4:	05555555 	.word	0x05555555

080213f8 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::active_instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::active_instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b094      	sub	sp, #80	; 0x50
 80213fc:	af02      	add	r7, sp, #8
 80213fe:	6078      	str	r0, [r7, #4]
 8021400:	6039      	str	r1, [r7, #0]
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	2b01      	cmp	r3, #1
 8021406:	d154      	bne.n	80214b2 <_Z41__static_initialization_and_destruction_0ii+0xba>
 8021408:	683b      	ldr	r3, [r7, #0]
 802140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802140e:	4293      	cmp	r3, r2
 8021410:	d14f      	bne.n	80214b2 <_Z41__static_initialization_and_destruction_0ii+0xba>
map<uint8_t, InputCapture::Instance> InputCapture::active_instances = {};
 8021412:	4b32      	ldr	r3, [pc, #200]	; (80214dc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8021414:	461a      	mov	r2, r3
 8021416:	2300      	movs	r3, #0
 8021418:	6013      	str	r3, [r2, #0]
 802141a:	6053      	str	r3, [r2, #4]
 802141c:	6093      	str	r3, [r2, #8]
 802141e:	60d3      	str	r3, [r2, #12]
 8021420:	6113      	str	r3, [r2, #16]
 8021422:	6153      	str	r3, [r2, #20]
 8021424:	482d      	ldr	r0, [pc, #180]	; (80214dc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8021426:	f7fe ff26 	bl	8020276 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
map<Pin, InputCapture::Instance> InputCapture::available_instances = {};
 802142a:	4b2d      	ldr	r3, [pc, #180]	; (80214e0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 802142c:	461a      	mov	r2, r3
 802142e:	2300      	movs	r3, #0
 8021430:	6013      	str	r3, [r2, #0]
 8021432:	6053      	str	r3, [r2, #4]
 8021434:	6093      	str	r3, [r2, #8]
 8021436:	60d3      	str	r3, [r2, #12]
 8021438:	6113      	str	r3, [r2, #16]
 802143a:	6153      	str	r3, [r2, #20]
 802143c:	4828      	ldr	r0, [pc, #160]	; (80214e0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 802143e:	f7fe ff4d 	bl	80202dc <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 8021442:	f107 0310 	add.w	r3, r7, #16
 8021446:	2230      	movs	r2, #48	; 0x30
 8021448:	2100      	movs	r1, #0
 802144a:	4618      	mov	r0, r3
 802144c:	f002 f858 	bl	8023500 <memset>
 8021450:	2301      	movs	r3, #1
 8021452:	613b      	str	r3, [r7, #16]
 8021454:	2302      	movs	r3, #2
 8021456:	61bb      	str	r3, [r7, #24]
 8021458:	2304      	movs	r3, #4
 802145a:	61fb      	str	r3, [r7, #28]
 802145c:	2304      	movs	r3, #4
 802145e:	623b      	str	r3, [r7, #32]
 8021460:	2308      	movs	r3, #8
 8021462:	627b      	str	r3, [r7, #36]	; 0x24
 8021464:	2308      	movs	r3, #8
 8021466:	62bb      	str	r3, [r7, #40]	; 0x28
 8021468:	230c      	movs	r3, #12
 802146a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802146c:	2310      	movs	r3, #16
 802146e:	633b      	str	r3, [r7, #48]	; 0x30
 8021470:	2310      	movs	r3, #16
 8021472:	637b      	str	r3, [r7, #52]	; 0x34
 8021474:	2320      	movs	r3, #32
 8021476:	63bb      	str	r3, [r7, #56]	; 0x38
 8021478:	2314      	movs	r3, #20
 802147a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802147c:	f107 0310 	add.w	r3, r7, #16
 8021480:	60bb      	str	r3, [r7, #8]
 8021482:	2306      	movs	r3, #6
 8021484:	60fb      	str	r3, [r7, #12]
 8021486:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802148a:	4618      	mov	r0, r3
 802148c:	f7fe ffd6 	bl	802043c <_ZNSaISt4pairIKmmEEC1Ev>
 8021490:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8021498:	9300      	str	r3, [sp, #0]
 802149a:	4613      	mov	r3, r2
 802149c:	f107 0208 	add.w	r2, r7, #8
 80214a0:	ca06      	ldmia	r2, {r1, r2}
 80214a2:	4810      	ldr	r0, [pc, #64]	; (80214e4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80214a4:	f7fe ffe1 	bl	802046a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 80214a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80214ac:	4618      	mov	r0, r3
 80214ae:	f7fe ffd1 	bl	8020454 <_ZNSaISt4pairIKmmEED1Ev>
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d10d      	bne.n	80214d4 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 80214b8:	683b      	ldr	r3, [r7, #0]
 80214ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80214be:	4293      	cmp	r3, r2
 80214c0:	d108      	bne.n	80214d4 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 80214c2:	4808      	ldr	r0, [pc, #32]	; (80214e4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80214c4:	f7fe ff24 	bl	8020310 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::available_instances = {};
 80214c8:	4805      	ldr	r0, [pc, #20]	; (80214e0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80214ca:	f7fe ff14 	bl	80202f6 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::active_instances = {};
 80214ce:	4803      	ldr	r0, [pc, #12]	; (80214dc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80214d0:	f7fe fede 	bl	8020290 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
}
 80214d4:	bf00      	nop
 80214d6:	3748      	adds	r7, #72	; 0x48
 80214d8:	46bd      	mov	sp, r7
 80214da:	bd80      	pop	{r7, pc}
 80214dc:	24001834 	.word	0x24001834
 80214e0:	2400184c 	.word	0x2400184c
 80214e4:	24001864 	.word	0x24001864

080214e8 <_GLOBAL__sub_I__ZN12InputCapture16active_instancesE>:
 80214e8:	b580      	push	{r7, lr}
 80214ea:	af00      	add	r7, sp, #0
 80214ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80214f0:	2001      	movs	r0, #1
 80214f2:	f7ff ff81 	bl	80213f8 <_Z41__static_initialization_and_destruction_0ii>
 80214f6:	bd80      	pop	{r7, pc}

080214f8 <_GLOBAL__sub_D__ZN12InputCapture16active_instancesE>:
 80214f8:	b580      	push	{r7, lr}
 80214fa:	af00      	add	r7, sp, #0
 80214fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021500:	2000      	movs	r0, #0
 8021502:	f7ff ff79 	bl	80213f8 <_Z41__static_initialization_and_destruction_0ii>
 8021506:	bd80      	pop	{r7, pc}

08021508 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8021508:	b580      	push	{r7, lr}
 802150a:	b082      	sub	sp, #8
 802150c:	af00      	add	r7, sp, #0
 802150e:	6078      	str	r0, [r7, #4]
 8021510:	6878      	ldr	r0, [r7, #4]
 8021512:	f000 fa12 	bl	802193a <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEED1Ev>
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	4618      	mov	r0, r3
 802151a:	3708      	adds	r7, #8
 802151c:	46bd      	mov	sp, r7
 802151e:	bd80      	pop	{r7, pc}

08021520 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	4618      	mov	r0, r3
 802152c:	f000 f9f0 	bl	8021910 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	4618      	mov	r0, r3
 8021534:	3708      	adds	r7, #8
 8021536:	46bd      	mov	sp, r7
 8021538:	bd80      	pop	{r7, pc}

0802153a <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 802153a:	b580      	push	{r7, lr}
 802153c:	b082      	sub	sp, #8
 802153e:	af00      	add	r7, sp, #0
 8021540:	6078      	str	r0, [r7, #4]
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	4618      	mov	r0, r3
 8021546:	f7ff ffeb 	bl	8021520 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 802154a:	687b      	ldr	r3, [r7, #4]
 802154c:	4618      	mov	r0, r3
 802154e:	3708      	adds	r7, #8
 8021550:	46bd      	mov	sp, r7
 8021552:	bd80      	pop	{r7, pc}

08021554 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8021554:	b580      	push	{r7, lr}
 8021556:	b082      	sub	sp, #8
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	4618      	mov	r0, r3
 8021560:	f000 f9f6 	bl	8021950 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	4618      	mov	r0, r3
 8021568:	3708      	adds	r7, #8
 802156a:	46bd      	mov	sp, r7
 802156c:	bd80      	pop	{r7, pc}

0802156e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 802156e:	b580      	push	{r7, lr}
 8021570:	b082      	sub	sp, #8
 8021572:	af00      	add	r7, sp, #0
 8021574:	6078      	str	r0, [r7, #4]
 8021576:	6878      	ldr	r0, [r7, #4]
 8021578:	f000 fa14 	bl	80219a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEED1Ev>
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	4618      	mov	r0, r3
 8021580:	3708      	adds	r7, #8
 8021582:	46bd      	mov	sp, r7
 8021584:	bd80      	pop	{r7, pc}

08021586 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 8021586:	b580      	push	{r7, lr}
 8021588:	b082      	sub	sp, #8
 802158a:	af00      	add	r7, sp, #0
 802158c:	6078      	str	r0, [r7, #4]
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	4618      	mov	r0, r3
 8021592:	f000 f9f2 	bl	802197a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	4618      	mov	r0, r3
 802159a:	3708      	adds	r7, #8
 802159c:	46bd      	mov	sp, r7
 802159e:	bd80      	pop	{r7, pc}

080215a0 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>:
      map() = default;
 80215a0:	b580      	push	{r7, lr}
 80215a2:	b082      	sub	sp, #8
 80215a4:	af00      	add	r7, sp, #0
 80215a6:	6078      	str	r0, [r7, #4]
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	4618      	mov	r0, r3
 80215ac:	f7ff ffeb 	bl	8021586 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1Ev>
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	4618      	mov	r0, r3
 80215b4:	3708      	adds	r7, #8
 80215b6:	46bd      	mov	sp, r7
 80215b8:	bd80      	pop	{r7, pc}

080215ba <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
      ~map() = default;
 80215ba:	b580      	push	{r7, lr}
 80215bc:	b082      	sub	sp, #8
 80215be:	af00      	add	r7, sp, #0
 80215c0:	6078      	str	r0, [r7, #4]
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	4618      	mov	r0, r3
 80215c6:	f000 f9f8 	bl	80219ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	4618      	mov	r0, r3
 80215ce:	3708      	adds	r7, #8
 80215d0:	46bd      	mov	sp, r7
 80215d2:	bd80      	pop	{r7, pc}

080215d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80215d4:	b580      	push	{r7, lr}
 80215d6:	b082      	sub	sp, #8
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f000 fa16 	bl	8021a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEED1Ev>
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	4618      	mov	r0, r3
 80215e6:	3708      	adds	r7, #8
 80215e8:	46bd      	mov	sp, r7
 80215ea:	bd80      	pop	{r7, pc}

080215ec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 80215ec:	b580      	push	{r7, lr}
 80215ee:	b082      	sub	sp, #8
 80215f0:	af00      	add	r7, sp, #0
 80215f2:	6078      	str	r0, [r7, #4]
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	4618      	mov	r0, r3
 80215f8:	f000 f9f4 	bl	80219e4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	4618      	mov	r0, r3
 8021600:	3708      	adds	r7, #8
 8021602:	46bd      	mov	sp, r7
 8021604:	bd80      	pop	{r7, pc}

08021606 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEC1Ev>:
      map() = default;
 8021606:	b580      	push	{r7, lr}
 8021608:	b082      	sub	sp, #8
 802160a:	af00      	add	r7, sp, #0
 802160c:	6078      	str	r0, [r7, #4]
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	4618      	mov	r0, r3
 8021612:	f7ff ffeb 	bl	80215ec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1Ev>
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	4618      	mov	r0, r3
 802161a:	3708      	adds	r7, #8
 802161c:	46bd      	mov	sp, r7
 802161e:	bd80      	pop	{r7, pc}

08021620 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 8021620:	b580      	push	{r7, lr}
 8021622:	b082      	sub	sp, #8
 8021624:	af00      	add	r7, sp, #0
 8021626:	6078      	str	r0, [r7, #4]
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	4618      	mov	r0, r3
 802162c:	f000 f9fa 	bl	8021a24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	4618      	mov	r0, r3
 8021634:	3708      	adds	r7, #8
 8021636:	46bd      	mov	sp, r7
 8021638:	bd80      	pop	{r7, pc}

0802163a <_ZN10PWMservice8InstanceC1EP15TimerPeripheralmNS_4ModeE>:
map<uint8_t, PWMservice::Instance> PWMservice::active_instances = { };
map<Pin, PWMservice::Instance> PWMservice::available_instances = { };
map<Pin, PWMservice::Instance> PWMservice::available_instances_negated = {};
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = { };

PWMservice::Instance::Instance(TimerPeripheral* peripheral, uint32_t channel, PWMservice::Mode mode) :
 802163a:	b480      	push	{r7}
 802163c:	b085      	sub	sp, #20
 802163e:	af00      	add	r7, sp, #0
 8021640:	60f8      	str	r0, [r7, #12]
 8021642:	60b9      	str	r1, [r7, #8]
 8021644:	607a      	str	r2, [r7, #4]
 8021646:	70fb      	strb	r3, [r7, #3]
		peripheral(peripheral), channel(channel), mode(mode) {}
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	68ba      	ldr	r2, [r7, #8]
 802164c:	601a      	str	r2, [r3, #0]
 802164e:	68fb      	ldr	r3, [r7, #12]
 8021650:	687a      	ldr	r2, [r7, #4]
 8021652:	605a      	str	r2, [r3, #4]
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	78fa      	ldrb	r2, [r7, #3]
 8021658:	721a      	strb	r2, [r3, #8]
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	4618      	mov	r0, r3
 802165e:	3714      	adds	r7, #20
 8021660:	46bd      	mov	sp, r7
 8021662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021666:	4770      	bx	lr

08021668 <_ZN10PWMservice8inscribeER3Pin>:

optional<uint8_t> PWMservice::inscribe(Pin& pin){
 8021668:	b590      	push	{r4, r7, lr}
 802166a:	b087      	sub	sp, #28
 802166c:	af00      	add	r7, sp, #0
 802166e:	6078      	str	r0, [r7, #4]
	if (not available_instances.contains(pin)) {
 8021670:	6879      	ldr	r1, [r7, #4]
 8021672:	482c      	ldr	r0, [pc, #176]	; (8021724 <_ZN10PWMservice8inscribeER3Pin+0xbc>)
 8021674:	f000 f9eb 	bl	8021a4e <_ZNKSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>
 8021678:	4603      	mov	r3, r0
 802167a:	f083 0301 	eor.w	r3, r3, #1
 802167e:	b2db      	uxtb	r3, r3
 8021680:	2b00      	cmp	r3, #0
 8021682:	d008      	beq.n	8021696 <_ZN10PWMservice8inscribeER3Pin+0x2e>
		return nullopt; //TODO: error handler
 8021684:	f107 030c 	add.w	r3, r7, #12
 8021688:	4621      	mov	r1, r4
 802168a:	4618      	mov	r0, r3
 802168c:	f7f9 fff5 	bl	801b67a <_ZNSt8optionalIhEC1ESt9nullopt_t>
 8021690:	89bb      	ldrh	r3, [r7, #12]
 8021692:	813b      	strh	r3, [r7, #8]
 8021694:	e03a      	b.n	802170c <_ZN10PWMservice8inscribeER3Pin+0xa4>
	}

	Pin::inscribe(pin, TIMER_ALTERNATE_FUNCTION);
 8021696:	2105      	movs	r1, #5
 8021698:	6878      	ldr	r0, [r7, #4]
 802169a:	f7f7 fc89 	bl	8018fb0 <_ZN3Pin8inscribeERS_13OperationMode>
	active_instances[id_counter] = available_instances[pin];
 802169e:	6879      	ldr	r1, [r7, #4]
 80216a0:	4820      	ldr	r0, [pc, #128]	; (8021724 <_ZN10PWMservice8inscribeER3Pin+0xbc>)
 80216a2:	f000 fa53 	bl	8021b4c <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
 80216a6:	4604      	mov	r4, r0
 80216a8:	491f      	ldr	r1, [pc, #124]	; (8021728 <_ZN10PWMservice8inscribeER3Pin+0xc0>)
 80216aa:	4820      	ldr	r0, [pc, #128]	; (802172c <_ZN10PWMservice8inscribeER3Pin+0xc4>)
 80216ac:	f000 f9f2 	bl	8021a94 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80216b0:	4603      	mov	r3, r0
 80216b2:	4622      	mov	r2, r4
 80216b4:	6810      	ldr	r0, [r2, #0]
 80216b6:	6851      	ldr	r1, [r2, #4]
 80216b8:	6018      	str	r0, [r3, #0]
 80216ba:	6059      	str	r1, [r3, #4]
 80216bc:	7a12      	ldrb	r2, [r2, #8]
 80216be:	721a      	strb	r2, [r3, #8]

	TimerPeripheral::InitData& init_data = active_instances[id_counter].peripheral->init_data;
 80216c0:	4919      	ldr	r1, [pc, #100]	; (8021728 <_ZN10PWMservice8inscribeER3Pin+0xc0>)
 80216c2:	481a      	ldr	r0, [pc, #104]	; (802172c <_ZN10PWMservice8inscribeER3Pin+0xc4>)
 80216c4:	f000 f9e6 	bl	8021a94 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80216c8:	4603      	mov	r3, r0
 80216ca:	681b      	ldr	r3, [r3, #0]
 80216cc:	3304      	adds	r3, #4
 80216ce:	617b      	str	r3, [r7, #20]
	init_data.pwm_channels.push_back(active_instances[id_counter].channel);
 80216d0:	697b      	ldr	r3, [r7, #20]
 80216d2:	f103 0410 	add.w	r4, r3, #16
 80216d6:	4914      	ldr	r1, [pc, #80]	; (8021728 <_ZN10PWMservice8inscribeER3Pin+0xc0>)
 80216d8:	4814      	ldr	r0, [pc, #80]	; (802172c <_ZN10PWMservice8inscribeER3Pin+0xc4>)
 80216da:	f000 f9db 	bl	8021a94 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80216de:	4603      	mov	r3, r0
 80216e0:	3304      	adds	r3, #4
 80216e2:	4619      	mov	r1, r3
 80216e4:	4620      	mov	r0, r4
 80216e6:	f7fa f88f 	bl	801b808 <_ZNSt6vectorImSaImEE9push_backERKm>
	return id_counter++;
 80216ea:	4b0f      	ldr	r3, [pc, #60]	; (8021728 <_ZN10PWMservice8inscribeER3Pin+0xc0>)
 80216ec:	781b      	ldrb	r3, [r3, #0]
 80216ee:	1c5a      	adds	r2, r3, #1
 80216f0:	b2d1      	uxtb	r1, r2
 80216f2:	4a0d      	ldr	r2, [pc, #52]	; (8021728 <_ZN10PWMservice8inscribeER3Pin+0xc0>)
 80216f4:	7011      	strb	r1, [r2, #0]
 80216f6:	74fb      	strb	r3, [r7, #19]
 80216f8:	f107 0213 	add.w	r2, r7, #19
 80216fc:	f107 0310 	add.w	r3, r7, #16
 8021700:	4611      	mov	r1, r2
 8021702:	4618      	mov	r0, r3
 8021704:	f7fa f8a5 	bl	801b852 <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 8021708:	8a3b      	ldrh	r3, [r7, #16]
 802170a:	813b      	strh	r3, [r7, #8]
}
 802170c:	2300      	movs	r3, #0
 802170e:	7a3a      	ldrb	r2, [r7, #8]
 8021710:	f362 0307 	bfi	r3, r2, #0, #8
 8021714:	7a7a      	ldrb	r2, [r7, #9]
 8021716:	f362 230f 	bfi	r3, r2, #8, #8
 802171a:	4618      	mov	r0, r3
 802171c:	371c      	adds	r7, #28
 802171e:	46bd      	mov	sp, r7
 8021720:	bd90      	pop	{r4, r7, pc}
 8021722:	bf00      	nop
 8021724:	24001898 	.word	0x24001898
 8021728:	2400187c 	.word	0x2400187c
 802172c:	24001880 	.word	0x24001880

08021730 <_ZN10PWMservice7turn_onEh>:
	TimerPeripheral::InitData& init_data = active_instances[id_counter].peripheral->init_data;
	init_data.pwm_channels.push_back(active_instances[id_counter].channel);
	return id_counter++;
}

void PWMservice::turn_on(uint8_t id) {
 8021730:	b580      	push	{r7, lr}
 8021732:	b084      	sub	sp, #16
 8021734:	af00      	add	r7, sp, #0
 8021736:	4603      	mov	r3, r0
 8021738:	71fb      	strb	r3, [r7, #7]
	if (not instance_exists(id)) {
 802173a:	79fb      	ldrb	r3, [r7, #7]
 802173c:	4618      	mov	r0, r3
 802173e:	f000 f8bf 	bl	80218c0 <_ZN10PWMservice15instance_existsEh>
		//TODO: error handler
	}

	Instance& instance = get_instance(id);
 8021742:	79fb      	ldrb	r3, [r7, #7]
 8021744:	4618      	mov	r0, r3
 8021746:	f000 f8d1 	bl	80218ec <_ZN10PWMservice12get_instanceEh>
 802174a:	60f8      	str	r0, [r7, #12]

	if (instance.mode == NORMAL) {
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	7a1b      	ldrb	r3, [r3, #8]
 8021750:	2b00      	cmp	r3, #0
 8021752:	d109      	bne.n	8021768 <_ZN10PWMservice7turn_onEh+0x38>
		HAL_TIM_PWM_Start(instance.peripheral->handle, instance.channel);
 8021754:	68fb      	ldr	r3, [r7, #12]
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	681a      	ldr	r2, [r3, #0]
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	685b      	ldr	r3, [r3, #4]
 802175e:	4619      	mov	r1, r3
 8021760:	4610      	mov	r0, r2
 8021762:	f7f5 fe09 	bl	8017378 <HAL_TIM_PWM_Start>

	else if(instance.mode == DUAL) {
		HAL_TIM_PWM_Start(instance.peripheral->handle, instance.channel);
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
	}
}
 8021766:	e023      	b.n	80217b0 <_ZN10PWMservice7turn_onEh+0x80>
	else if (instance.mode == NEGATED) {
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	7a1b      	ldrb	r3, [r3, #8]
 802176c:	2b01      	cmp	r3, #1
 802176e:	d109      	bne.n	8021784 <_ZN10PWMservice7turn_onEh+0x54>
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
 8021770:	68fb      	ldr	r3, [r7, #12]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	681a      	ldr	r2, [r3, #0]
 8021776:	68fb      	ldr	r3, [r7, #12]
 8021778:	685b      	ldr	r3, [r3, #4]
 802177a:	4619      	mov	r1, r3
 802177c:	4610      	mov	r0, r2
 802177e:	f7f7 f985 	bl	8018a8c <HAL_TIMEx_PWMN_Start>
}
 8021782:	e015      	b.n	80217b0 <_ZN10PWMservice7turn_onEh+0x80>
	else if(instance.mode == DUAL) {
 8021784:	68fb      	ldr	r3, [r7, #12]
 8021786:	7a1b      	ldrb	r3, [r3, #8]
 8021788:	2b02      	cmp	r3, #2
 802178a:	d111      	bne.n	80217b0 <_ZN10PWMservice7turn_onEh+0x80>
		HAL_TIM_PWM_Start(instance.peripheral->handle, instance.channel);
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	681a      	ldr	r2, [r3, #0]
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	685b      	ldr	r3, [r3, #4]
 8021796:	4619      	mov	r1, r3
 8021798:	4610      	mov	r0, r2
 802179a:	f7f5 fded 	bl	8017378 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(instance.peripheral->handle, instance.channel);
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	681a      	ldr	r2, [r3, #0]
 80217a4:	68fb      	ldr	r3, [r7, #12]
 80217a6:	685b      	ldr	r3, [r3, #4]
 80217a8:	4619      	mov	r1, r3
 80217aa:	4610      	mov	r0, r2
 80217ac:	f7f7 f96e 	bl	8018a8c <HAL_TIMEx_PWMN_Start>
}
 80217b0:	bf00      	nop
 80217b2:	3710      	adds	r7, #16
 80217b4:	46bd      	mov	sp, r7
 80217b6:	bd80      	pop	{r7, pc}

080217b8 <_ZN10PWMservice14set_duty_cycleEhh>:
	else {
		//TODO: Error handler
	}
}

void PWMservice::set_duty_cycle(uint8_t id, uint8_t duty_cycle) {
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b084      	sub	sp, #16
 80217bc:	af00      	add	r7, sp, #0
 80217be:	4603      	mov	r3, r0
 80217c0:	460a      	mov	r2, r1
 80217c2:	71fb      	strb	r3, [r7, #7]
 80217c4:	4613      	mov	r3, r2
 80217c6:	71bb      	strb	r3, [r7, #6]
	if (not (duty_cycle >= 0 && duty_cycle <= 100)) {
 80217c8:	79bb      	ldrb	r3, [r7, #6]
 80217ca:	2b64      	cmp	r3, #100	; 0x64
 80217cc:	d86b      	bhi.n	80218a6 <_ZN10PWMservice14set_duty_cycleEhh+0xee>
		//TODO: error handlerr
		return;
	}
	if (not instance_exists(id)) {
 80217ce:	79fb      	ldrb	r3, [r7, #7]
 80217d0:	4618      	mov	r0, r3
 80217d2:	f000 f875 	bl	80218c0 <_ZN10PWMservice15instance_existsEh>
 80217d6:	4603      	mov	r3, r0
 80217d8:	f083 0301 	eor.w	r3, r3, #1
 80217dc:	b2db      	uxtb	r3, r3
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d163      	bne.n	80218aa <_ZN10PWMservice14set_duty_cycleEhh+0xf2>
		//TODO: error handlerr
		return;
	}

	Instance& instance = get_instance(id);
 80217e2:	79fb      	ldrb	r3, [r7, #7]
 80217e4:	4618      	mov	r0, r3
 80217e6:	f000 f881 	bl	80218ec <_ZN10PWMservice12get_instanceEh>
 80217ea:	60f8      	str	r0, [r7, #12]
	uint16_t raw_duty = round(__HAL_TIM_GET_AUTORELOAD(instance.peripheral->handle) / 100.0 * duty_cycle);
 80217ec:	68fb      	ldr	r3, [r7, #12]
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217f6:	ee07 3a90 	vmov	s15, r3
 80217fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80217fe:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80218b8 <_ZN10PWMservice14set_duty_cycleEhh+0x100>
 8021802:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8021806:	79bb      	ldrb	r3, [r7, #6]
 8021808:	ee07 3a90 	vmov	s15, r3
 802180c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021814:	eeb0 0b47 	vmov.f64	d0, d7
 8021818:	f001 fdc8 	bl	80233ac <round>
 802181c:	eeb0 7b40 	vmov.f64	d7, d0
 8021820:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8021824:	ee17 3a90 	vmov	r3, s15
 8021828:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(instance.peripheral->handle, instance.channel, raw_duty);
 802182a:	68fb      	ldr	r3, [r7, #12]
 802182c:	685b      	ldr	r3, [r3, #4]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d106      	bne.n	8021840 <_ZN10PWMservice14set_duty_cycleEhh+0x88>
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	681b      	ldr	r3, [r3, #0]
 8021836:	681b      	ldr	r3, [r3, #0]
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	897a      	ldrh	r2, [r7, #10]
 802183c:	635a      	str	r2, [r3, #52]	; 0x34
 802183e:	e035      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	685b      	ldr	r3, [r3, #4]
 8021844:	2b04      	cmp	r3, #4
 8021846:	d106      	bne.n	8021856 <_ZN10PWMservice14set_duty_cycleEhh+0x9e>
 8021848:	68fb      	ldr	r3, [r7, #12]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	681b      	ldr	r3, [r3, #0]
 802184e:	681b      	ldr	r3, [r3, #0]
 8021850:	897a      	ldrh	r2, [r7, #10]
 8021852:	639a      	str	r2, [r3, #56]	; 0x38
 8021854:	e02a      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	685b      	ldr	r3, [r3, #4]
 802185a:	2b08      	cmp	r3, #8
 802185c:	d106      	bne.n	802186c <_ZN10PWMservice14set_duty_cycleEhh+0xb4>
 802185e:	68fb      	ldr	r3, [r7, #12]
 8021860:	681b      	ldr	r3, [r3, #0]
 8021862:	681b      	ldr	r3, [r3, #0]
 8021864:	681b      	ldr	r3, [r3, #0]
 8021866:	897a      	ldrh	r2, [r7, #10]
 8021868:	63da      	str	r2, [r3, #60]	; 0x3c
 802186a:	e01f      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	685b      	ldr	r3, [r3, #4]
 8021870:	2b0c      	cmp	r3, #12
 8021872:	d106      	bne.n	8021882 <_ZN10PWMservice14set_duty_cycleEhh+0xca>
 8021874:	68fb      	ldr	r3, [r7, #12]
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	681b      	ldr	r3, [r3, #0]
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	897a      	ldrh	r2, [r7, #10]
 802187e:	641a      	str	r2, [r3, #64]	; 0x40
 8021880:	e014      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8021882:	68fb      	ldr	r3, [r7, #12]
 8021884:	685b      	ldr	r3, [r3, #4]
 8021886:	2b10      	cmp	r3, #16
 8021888:	d106      	bne.n	8021898 <_ZN10PWMservice14set_duty_cycleEhh+0xe0>
 802188a:	68fb      	ldr	r3, [r7, #12]
 802188c:	681b      	ldr	r3, [r3, #0]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	897a      	ldrh	r2, [r7, #10]
 8021894:	659a      	str	r2, [r3, #88]	; 0x58
 8021896:	e009      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
 8021898:	68fb      	ldr	r3, [r7, #12]
 802189a:	681b      	ldr	r3, [r3, #0]
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	897a      	ldrh	r2, [r7, #10]
 80218a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80218a4:	e002      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
		return;
 80218a6:	bf00      	nop
 80218a8:	e000      	b.n	80218ac <_ZN10PWMservice14set_duty_cycleEhh+0xf4>
		return;
 80218aa:	bf00      	nop
}
 80218ac:	3710      	adds	r7, #16
 80218ae:	46bd      	mov	sp, r7
 80218b0:	bd80      	pop	{r7, pc}
 80218b2:	bf00      	nop
 80218b4:	f3af 8000 	nop.w
 80218b8:	00000000 	.word	0x00000000
 80218bc:	40590000 	.word	0x40590000

080218c0 <_ZN10PWMservice15instance_existsEh>:

bool PWMservice::instance_exists(uint8_t id) {
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b082      	sub	sp, #8
 80218c4:	af00      	add	r7, sp, #0
 80218c6:	4603      	mov	r3, r0
 80218c8:	71fb      	strb	r3, [r7, #7]
	if (PWMservice::active_instances.contains(id)) {
 80218ca:	1dfb      	adds	r3, r7, #7
 80218cc:	4619      	mov	r1, r3
 80218ce:	4806      	ldr	r0, [pc, #24]	; (80218e8 <_ZN10PWMservice15instance_existsEh+0x28>)
 80218d0:	f000 f998 	bl	8021c04 <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 80218d4:	4603      	mov	r3, r0
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d001      	beq.n	80218de <_ZN10PWMservice15instance_existsEh+0x1e>
		return true;
 80218da:	2301      	movs	r3, #1
 80218dc:	e000      	b.n	80218e0 <_ZN10PWMservice15instance_existsEh+0x20>
	}

	return false;
 80218de:	2300      	movs	r3, #0
}
 80218e0:	4618      	mov	r0, r3
 80218e2:	3708      	adds	r7, #8
 80218e4:	46bd      	mov	sp, r7
 80218e6:	bd80      	pop	{r7, pc}
 80218e8:	24001880 	.word	0x24001880

080218ec <_ZN10PWMservice12get_instanceEh>:

PWMservice::Instance& PWMservice::get_instance(uint8_t id) {
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b082      	sub	sp, #8
 80218f0:	af00      	add	r7, sp, #0
 80218f2:	4603      	mov	r3, r0
 80218f4:	71fb      	strb	r3, [r7, #7]
	return PWMservice::active_instances[id];
 80218f6:	1dfb      	adds	r3, r7, #7
 80218f8:	4619      	mov	r1, r3
 80218fa:	4804      	ldr	r0, [pc, #16]	; (802190c <_ZN10PWMservice12get_instanceEh+0x20>)
 80218fc:	f000 f8ca 	bl	8021a94 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8021900:	4603      	mov	r3, r0
}
 8021902:	4618      	mov	r0, r3
 8021904:	3708      	adds	r7, #8
 8021906:	46bd      	mov	sp, r7
 8021908:	bd80      	pop	{r7, pc}
 802190a:	bf00      	nop
 802190c:	24001880 	.word	0x24001880

08021910 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8021910:	b580      	push	{r7, lr}
 8021912:	b082      	sub	sp, #8
 8021914:	af00      	add	r7, sp, #0
 8021916:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f000 f995 	bl	8021c48 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	4618      	mov	r0, r3
 8021922:	f7fa f82f 	bl	801b984 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	3304      	adds	r3, #4
 802192a:	4618      	mov	r0, r3
 802192c:	f7f9 fa8f 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	4618      	mov	r0, r3
 8021934:	3708      	adds	r7, #8
 8021936:	46bd      	mov	sp, r7
 8021938:	bd80      	pop	{r7, pc}

0802193a <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802193a:	b480      	push	{r7}
 802193c:	b083      	sub	sp, #12
 802193e:	af00      	add	r7, sp, #0
 8021940:	6078      	str	r0, [r7, #4]
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	4618      	mov	r0, r3
 8021946:	370c      	adds	r7, #12
 8021948:	46bd      	mov	sp, r7
 802194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802194e:	4770      	bx	lr

08021950 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8021950:	b580      	push	{r7, lr}
 8021952:	b082      	sub	sp, #8
 8021954:	af00      	add	r7, sp, #0
 8021956:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8021958:	6878      	ldr	r0, [r7, #4]
 802195a:	f000 f9a0 	bl	8021c9e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 802195e:	4603      	mov	r3, r0
 8021960:	4619      	mov	r1, r3
 8021962:	6878      	ldr	r0, [r7, #4]
 8021964:	f000 f97c 	bl	8021c60 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	4618      	mov	r0, r3
 802196c:	f7ff fdcc 	bl	8021508 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	4618      	mov	r0, r3
 8021974:	3708      	adds	r7, #8
 8021976:	46bd      	mov	sp, r7
 8021978:	bd80      	pop	{r7, pc}

0802197a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 802197a:	b580      	push	{r7, lr}
 802197c:	b082      	sub	sp, #8
 802197e:	af00      	add	r7, sp, #0
 8021980:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8021982:	6878      	ldr	r0, [r7, #4]
 8021984:	f000 f997 	bl	8021cb6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	4618      	mov	r0, r3
 802198c:	f7fa f83c 	bl	801ba08 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	3304      	adds	r3, #4
 8021994:	4618      	mov	r0, r3
 8021996:	f7f9 fa5a 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	4618      	mov	r0, r3
 802199e:	3708      	adds	r7, #8
 80219a0:	46bd      	mov	sp, r7
 80219a2:	bd80      	pop	{r7, pc}

080219a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEED1Ev>:
 80219a4:	b480      	push	{r7}
 80219a6:	b083      	sub	sp, #12
 80219a8:	af00      	add	r7, sp, #0
 80219aa:	6078      	str	r0, [r7, #4]
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	4618      	mov	r0, r3
 80219b0:	370c      	adds	r7, #12
 80219b2:	46bd      	mov	sp, r7
 80219b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b8:	4770      	bx	lr

080219ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80219ba:	b580      	push	{r7, lr}
 80219bc:	b082      	sub	sp, #8
 80219be:	af00      	add	r7, sp, #0
 80219c0:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80219c2:	6878      	ldr	r0, [r7, #4]
 80219c4:	f7e7 fd23 	bl	800940e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80219c8:	4603      	mov	r3, r0
 80219ca:	4619      	mov	r1, r3
 80219cc:	6878      	ldr	r0, [r7, #4]
 80219ce:	f7e4 fa4f 	bl	8005e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	4618      	mov	r0, r3
 80219d6:	f7ff fdca 	bl	802156e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	4618      	mov	r0, r3
 80219de:	3708      	adds	r7, #8
 80219e0:	46bd      	mov	sp, r7
 80219e2:	bd80      	pop	{r7, pc}

080219e4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80219e4:	b580      	push	{r7, lr}
 80219e6:	b082      	sub	sp, #8
 80219e8:	af00      	add	r7, sp, #0
 80219ea:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80219ec:	6878      	ldr	r0, [r7, #4]
 80219ee:	f000 f96e 	bl	8021cce <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1Ev>
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	4618      	mov	r0, r3
 80219f6:	f7fe fab1 	bl	801ff5c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1Ev>
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	3304      	adds	r3, #4
 80219fe:	4618      	mov	r0, r3
 8021a00:	f7f9 fa25 	bl	801ae4e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	4618      	mov	r0, r3
 8021a08:	3708      	adds	r7, #8
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	bd80      	pop	{r7, pc}

08021a0e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEED1Ev>:
 8021a0e:	b480      	push	{r7}
 8021a10:	b083      	sub	sp, #12
 8021a12:	af00      	add	r7, sp, #0
 8021a14:	6078      	str	r0, [r7, #4]
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	4618      	mov	r0, r3
 8021a1a:	370c      	adds	r7, #12
 8021a1c:	46bd      	mov	sp, r7
 8021a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a22:	4770      	bx	lr

08021a24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b082      	sub	sp, #8
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8021a2c:	6878      	ldr	r0, [r7, #4]
 8021a2e:	f7e7 fbe3 	bl	80091f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8021a32:	4603      	mov	r3, r0
 8021a34:	4619      	mov	r1, r3
 8021a36:	6878      	ldr	r0, [r7, #4]
 8021a38:	f7e4 f851 	bl	8005ade <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	4618      	mov	r0, r3
 8021a40:	f7ff fdc8 	bl	80215d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_N10PWMservice8InstanceEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	4618      	mov	r0, r3
 8021a48:	3708      	adds	r7, #8
 8021a4a:	46bd      	mov	sp, r7
 8021a4c:	bd80      	pop	{r7, pc}

08021a4e <_ZNKSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>:
      contains(const key_type& __x) const
 8021a4e:	b580      	push	{r7, lr}
 8021a50:	b084      	sub	sp, #16
 8021a52:	af00      	add	r7, sp, #0
 8021a54:	6078      	str	r0, [r7, #4]
 8021a56:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	6839      	ldr	r1, [r7, #0]
 8021a5c:	4618      	mov	r0, r3
 8021a5e:	f000 f942 	bl	8021ce6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>
 8021a62:	4603      	mov	r3, r0
 8021a64:	60bb      	str	r3, [r7, #8]
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	4618      	mov	r0, r3
 8021a6a:	f000 f978 	bl	8021d5e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8021a6e:	4603      	mov	r3, r0
 8021a70:	60fb      	str	r3, [r7, #12]
 8021a72:	f107 020c 	add.w	r2, r7, #12
 8021a76:	f107 0308 	add.w	r3, r7, #8
 8021a7a:	4611      	mov	r1, r2
 8021a7c:	4618      	mov	r0, r3
 8021a7e:	f000 f97f 	bl	8021d80 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>
 8021a82:	4603      	mov	r3, r0
 8021a84:	f083 0301 	eor.w	r3, r3, #1
 8021a88:	b2db      	uxtb	r3, r3
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	3710      	adds	r7, #16
 8021a8e:	46bd      	mov	sp, r7
 8021a90:	bd80      	pop	{r7, pc}
	...

08021a94 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8021a94:	b590      	push	{r4, r7, lr}
 8021a96:	b08b      	sub	sp, #44	; 0x2c
 8021a98:	af02      	add	r7, sp, #8
 8021a9a:	6078      	str	r0, [r7, #4]
 8021a9c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8021a9e:	6839      	ldr	r1, [r7, #0]
 8021aa0:	6878      	ldr	r0, [r7, #4]
 8021aa2:	f000 f981 	bl	8021da8 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 8021aa6:	4603      	mov	r3, r0
 8021aa8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8021aaa:	6878      	ldr	r0, [r7, #4]
 8021aac:	f000 f98b 	bl	8021dc6 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8021ab0:	4603      	mov	r3, r0
 8021ab2:	60fb      	str	r3, [r7, #12]
 8021ab4:	f107 020c 	add.w	r2, r7, #12
 8021ab8:	f107 0308 	add.w	r3, r7, #8
 8021abc:	4611      	mov	r1, r2
 8021abe:	4618      	mov	r0, r3
 8021ac0:	f000 f98e 	bl	8021de0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 8021ac4:	4603      	mov	r3, r0
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d112      	bne.n	8021af0 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x5c>
 8021aca:	6878      	ldr	r0, [r7, #4]
 8021acc:	f000 f99c 	bl	8021e08 <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 8021ad0:	f107 0308 	add.w	r3, r7, #8
 8021ad4:	4618      	mov	r0, r3
 8021ad6:	f000 f9a4 	bl	8021e22 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>
 8021ada:	4603      	mov	r3, r0
 8021adc:	461a      	mov	r2, r3
 8021ade:	f107 0310 	add.w	r3, r7, #16
 8021ae2:	6839      	ldr	r1, [r7, #0]
 8021ae4:	4618      	mov	r0, r3
 8021ae6:	f7fa f846 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8021aea:	4603      	mov	r3, r0
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d001      	beq.n	8021af4 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x60>
 8021af0:	2301      	movs	r3, #1
 8021af2:	e000      	b.n	8021af6 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x62>
 8021af4:	2300      	movs	r3, #0
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d01b      	beq.n	8021b32 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8021afa:	687c      	ldr	r4, [r7, #4]
 8021afc:	f107 0208 	add.w	r2, r7, #8
 8021b00:	f107 0314 	add.w	r3, r7, #20
 8021b04:	4611      	mov	r1, r2
 8021b06:	4618      	mov	r0, r3
 8021b08:	f000 f999 	bl	8021e3e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8021b0c:	f107 0318 	add.w	r3, r7, #24
 8021b10:	6839      	ldr	r1, [r7, #0]
 8021b12:	4618      	mov	r0, r3
 8021b14:	f7fa f844 	bl	801bba0 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8021b18:	f107 0218 	add.w	r2, r7, #24
 8021b1c:	f107 031c 	add.w	r3, r7, #28
 8021b20:	9300      	str	r3, [sp, #0]
 8021b22:	4613      	mov	r3, r2
 8021b24:	4a08      	ldr	r2, [pc, #32]	; (8021b48 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0xb4>)
 8021b26:	6979      	ldr	r1, [r7, #20]
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f000 f998 	bl	8021e5e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8021b2e:	4603      	mov	r3, r0
 8021b30:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8021b32:	f107 0308 	add.w	r3, r7, #8
 8021b36:	4618      	mov	r0, r3
 8021b38:	f000 f973 	bl	8021e22 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>
 8021b3c:	4603      	mov	r3, r0
 8021b3e:	3304      	adds	r3, #4
      }
 8021b40:	4618      	mov	r0, r3
 8021b42:	3724      	adds	r7, #36	; 0x24
 8021b44:	46bd      	mov	sp, r7
 8021b46:	bd90      	pop	{r4, r7, pc}
 8021b48:	08023b34 	.word	0x08023b34

08021b4c <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>:
      operator[](const key_type& __k)
 8021b4c:	b590      	push	{r4, r7, lr}
 8021b4e:	b08b      	sub	sp, #44	; 0x2c
 8021b50:	af02      	add	r7, sp, #8
 8021b52:	6078      	str	r0, [r7, #4]
 8021b54:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8021b56:	6839      	ldr	r1, [r7, #0]
 8021b58:	6878      	ldr	r0, [r7, #4]
 8021b5a:	f000 f9be 	bl	8021eda <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>
 8021b5e:	4603      	mov	r3, r0
 8021b60:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8021b62:	6878      	ldr	r0, [r7, #4]
 8021b64:	f000 f9c8 	bl	8021ef8 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>
 8021b68:	4603      	mov	r3, r0
 8021b6a:	60fb      	str	r3, [r7, #12]
 8021b6c:	f107 020c 	add.w	r2, r7, #12
 8021b70:	f107 0308 	add.w	r3, r7, #8
 8021b74:	4611      	mov	r1, r2
 8021b76:	4618      	mov	r0, r3
 8021b78:	f7e7 fc66 	bl	8009448 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>
 8021b7c:	4603      	mov	r3, r0
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d112      	bne.n	8021ba8 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x5c>
 8021b82:	6878      	ldr	r0, [r7, #4]
 8021b84:	f000 f9c5 	bl	8021f12 <_ZNKSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>
 8021b88:	f107 0308 	add.w	r3, r7, #8
 8021b8c:	4618      	mov	r0, r3
 8021b8e:	f000 f9cd 	bl	8021f2c <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEdeEv>
 8021b92:	4603      	mov	r3, r0
 8021b94:	461a      	mov	r2, r3
 8021b96:	f107 0310 	add.w	r3, r7, #16
 8021b9a:	6839      	ldr	r1, [r7, #0]
 8021b9c:	4618      	mov	r0, r3
 8021b9e:	f7e5 fc82 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8021ba2:	4603      	mov	r3, r0
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	d001      	beq.n	8021bac <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x60>
 8021ba8:	2301      	movs	r3, #1
 8021baa:	e000      	b.n	8021bae <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x62>
 8021bac:	2300      	movs	r3, #0
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d01b      	beq.n	8021bea <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8021bb2:	687c      	ldr	r4, [r7, #4]
 8021bb4:	f107 0208 	add.w	r2, r7, #8
 8021bb8:	f107 0314 	add.w	r3, r7, #20
 8021bbc:	4611      	mov	r1, r2
 8021bbe:	4618      	mov	r0, r3
 8021bc0:	f7e2 ff06 	bl	80049d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 8021bc4:	f107 0318 	add.w	r3, r7, #24
 8021bc8:	6839      	ldr	r1, [r7, #0]
 8021bca:	4618      	mov	r0, r3
 8021bcc:	f7fa f87c 	bl	801bcc8 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8021bd0:	f107 0218 	add.w	r2, r7, #24
 8021bd4:	f107 031c 	add.w	r3, r7, #28
 8021bd8:	9300      	str	r3, [sp, #0]
 8021bda:	4613      	mov	r3, r2
 8021bdc:	4a08      	ldr	r2, [pc, #32]	; (8021c00 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0xb4>)
 8021bde:	6979      	ldr	r1, [r7, #20]
 8021be0:	4620      	mov	r0, r4
 8021be2:	f000 f9b1 	bl	8021f48 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 8021be6:	4603      	mov	r3, r0
 8021be8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8021bea:	f107 0308 	add.w	r3, r7, #8
 8021bee:	4618      	mov	r0, r3
 8021bf0:	f000 f99c 	bl	8021f2c <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEdeEv>
 8021bf4:	4603      	mov	r3, r0
 8021bf6:	3308      	adds	r3, #8
      }
 8021bf8:	4618      	mov	r0, r3
 8021bfa:	3724      	adds	r7, #36	; 0x24
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	bd90      	pop	{r4, r7, pc}
 8021c00:	08023b34 	.word	0x08023b34

08021c04 <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b084      	sub	sp, #16
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	6078      	str	r0, [r7, #4]
 8021c0c:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	6839      	ldr	r1, [r7, #0]
 8021c12:	4618      	mov	r0, r3
 8021c14:	f000 f9d6 	bl	8021fc4 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 8021c18:	4603      	mov	r3, r0
 8021c1a:	60bb      	str	r3, [r7, #8]
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	4618      	mov	r0, r3
 8021c20:	f000 fa0c 	bl	802203c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8021c24:	4603      	mov	r3, r0
 8021c26:	60fb      	str	r3, [r7, #12]
 8021c28:	f107 020c 	add.w	r2, r7, #12
 8021c2c:	f107 0308 	add.w	r3, r7, #8
 8021c30:	4611      	mov	r1, r2
 8021c32:	4618      	mov	r0, r3
 8021c34:	f000 fa13 	bl	802205e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 8021c38:	4603      	mov	r3, r0
 8021c3a:	f083 0301 	eor.w	r3, r3, #1
 8021c3e:	b2db      	uxtb	r3, r3
 8021c40:	4618      	mov	r0, r3
 8021c42:	3710      	adds	r7, #16
 8021c44:	46bd      	mov	sp, r7
 8021c46:	bd80      	pop	{r7, pc}

08021c48 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8021c48:	b580      	push	{r7, lr}
 8021c4a:	b082      	sub	sp, #8
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	6078      	str	r0, [r7, #4]
 8021c50:	6878      	ldr	r0, [r7, #4]
 8021c52:	f000 fa18 	bl	8022086 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	4618      	mov	r0, r3
 8021c5a:	3708      	adds	r7, #8
 8021c5c:	46bd      	mov	sp, r7
 8021c5e:	bd80      	pop	{r7, pc}

08021c60 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021c60:	b580      	push	{r7, lr}
 8021c62:	b084      	sub	sp, #16
 8021c64:	af00      	add	r7, sp, #0
 8021c66:	6078      	str	r0, [r7, #4]
 8021c68:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8021c6a:	683b      	ldr	r3, [r7, #0]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d012      	beq.n	8021c96 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8021c70:	6838      	ldr	r0, [r7, #0]
 8021c72:	f000 fa13 	bl	802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8021c76:	4603      	mov	r3, r0
 8021c78:	4619      	mov	r1, r3
 8021c7a:	6878      	ldr	r0, [r7, #4]
 8021c7c:	f7ff fff0 	bl	8021c60 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8021c80:	6838      	ldr	r0, [r7, #0]
 8021c82:	f000 fa17 	bl	80220b4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8021c86:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8021c88:	6839      	ldr	r1, [r7, #0]
 8021c8a:	6878      	ldr	r0, [r7, #4]
 8021c8c:	f000 fa1e 	bl	80220cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8021c90:	68fb      	ldr	r3, [r7, #12]
 8021c92:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8021c94:	e7e9      	b.n	8021c6a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8021c96:	bf00      	nop
 8021c98:	3710      	adds	r7, #16
 8021c9a:	46bd      	mov	sp, r7
 8021c9c:	bd80      	pop	{r7, pc}

08021c9e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8021c9e:	b480      	push	{r7}
 8021ca0:	b083      	sub	sp, #12
 8021ca2:	af00      	add	r7, sp, #0
 8021ca4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	689b      	ldr	r3, [r3, #8]
 8021caa:	4618      	mov	r0, r3
 8021cac:	370c      	adds	r7, #12
 8021cae:	46bd      	mov	sp, r7
 8021cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb4:	4770      	bx	lr

08021cb6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>:
 8021cb6:	b580      	push	{r7, lr}
 8021cb8:	b082      	sub	sp, #8
 8021cba:	af00      	add	r7, sp, #0
 8021cbc:	6078      	str	r0, [r7, #4]
 8021cbe:	6878      	ldr	r0, [r7, #4]
 8021cc0:	f000 fa15 	bl	80220ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	4618      	mov	r0, r3
 8021cc8:	3708      	adds	r7, #8
 8021cca:	46bd      	mov	sp, r7
 8021ccc:	bd80      	pop	{r7, pc}

08021cce <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EN10PWMservice8InstanceEEEEC1Ev>:
 8021cce:	b580      	push	{r7, lr}
 8021cd0:	b082      	sub	sp, #8
 8021cd2:	af00      	add	r7, sp, #0
 8021cd4:	6078      	str	r0, [r7, #4]
 8021cd6:	6878      	ldr	r0, [r7, #4]
 8021cd8:	f000 fa14 	bl	8022104 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1Ev>
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	4618      	mov	r0, r3
 8021ce0:	3708      	adds	r7, #8
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	bd80      	pop	{r7, pc}

08021ce6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021ce6:	b590      	push	{r4, r7, lr}
 8021ce8:	b085      	sub	sp, #20
 8021cea:	af00      	add	r7, sp, #0
 8021cec:	6078      	str	r0, [r7, #4]
 8021cee:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8021cf0:	6878      	ldr	r0, [r7, #4]
 8021cf2:	f000 fa12 	bl	802211a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8021cf6:	4604      	mov	r4, r0
 8021cf8:	6878      	ldr	r0, [r7, #4]
 8021cfa:	f000 fa1a 	bl	8022132 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8021cfe:	4602      	mov	r2, r0
 8021d00:	683b      	ldr	r3, [r7, #0]
 8021d02:	4621      	mov	r1, r4
 8021d04:	6878      	ldr	r0, [r7, #4]
 8021d06:	f000 fa20 	bl	802214a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8021d0e:	6878      	ldr	r0, [r7, #4]
 8021d10:	f000 f825 	bl	8021d5e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8021d14:	4603      	mov	r3, r0
 8021d16:	60fb      	str	r3, [r7, #12]
 8021d18:	f107 020c 	add.w	r2, r7, #12
 8021d1c:	f107 0308 	add.w	r3, r7, #8
 8021d20:	4611      	mov	r1, r2
 8021d22:	4618      	mov	r0, r3
 8021d24:	f000 f82c 	bl	8021d80 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>
 8021d28:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d10d      	bne.n	8021d4a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x64>
	      || _M_impl._M_key_compare(__k,
 8021d2e:	687c      	ldr	r4, [r7, #4]
 8021d30:	68bb      	ldr	r3, [r7, #8]
 8021d32:	4618      	mov	r0, r3
 8021d34:	f7e5 ff58 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8021d38:	4603      	mov	r3, r0
 8021d3a:	461a      	mov	r2, r3
 8021d3c:	6839      	ldr	r1, [r7, #0]
 8021d3e:	4620      	mov	r0, r4
 8021d40:	f7e5 fbb1 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8021d44:	4603      	mov	r3, r0
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d004      	beq.n	8021d54 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8021d4a:	6878      	ldr	r0, [r7, #4]
 8021d4c:	f000 f807 	bl	8021d5e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8021d50:	4603      	mov	r3, r0
 8021d52:	e000      	b.n	8021d56 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x70>
 8021d54:	68bb      	ldr	r3, [r7, #8]
    }
 8021d56:	4618      	mov	r0, r3
 8021d58:	3714      	adds	r7, #20
 8021d5a:	46bd      	mov	sp, r7
 8021d5c:	bd90      	pop	{r4, r7, pc}

08021d5e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8021d5e:	b580      	push	{r7, lr}
 8021d60:	b084      	sub	sp, #16
 8021d62:	af00      	add	r7, sp, #0
 8021d64:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	1d1a      	adds	r2, r3, #4
 8021d6a:	f107 030c 	add.w	r3, r7, #12
 8021d6e:	4611      	mov	r1, r2
 8021d70:	4618      	mov	r0, r3
 8021d72:	f000 fa1b 	bl	80221ac <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	4618      	mov	r0, r3
 8021d7a:	3710      	adds	r7, #16
 8021d7c:	46bd      	mov	sp, r7
 8021d7e:	bd80      	pop	{r7, pc}

08021d80 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8021d80:	b480      	push	{r7}
 8021d82:	b083      	sub	sp, #12
 8021d84:	af00      	add	r7, sp, #0
 8021d86:	6078      	str	r0, [r7, #4]
 8021d88:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	681a      	ldr	r2, [r3, #0]
 8021d8e:	683b      	ldr	r3, [r7, #0]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	429a      	cmp	r2, r3
 8021d94:	bf0c      	ite	eq
 8021d96:	2301      	moveq	r3, #1
 8021d98:	2300      	movne	r3, #0
 8021d9a:	b2db      	uxtb	r3, r3
 8021d9c:	4618      	mov	r0, r3
 8021d9e:	370c      	adds	r7, #12
 8021da0:	46bd      	mov	sp, r7
 8021da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021da6:	4770      	bx	lr

08021da8 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8021da8:	b580      	push	{r7, lr}
 8021daa:	b082      	sub	sp, #8
 8021dac:	af00      	add	r7, sp, #0
 8021dae:	6078      	str	r0, [r7, #4]
 8021db0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	6839      	ldr	r1, [r7, #0]
 8021db6:	4618      	mov	r0, r3
 8021db8:	f000 fa07 	bl	80221ca <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 8021dbc:	4603      	mov	r3, r0
 8021dbe:	4618      	mov	r0, r3
 8021dc0:	3708      	adds	r7, #8
 8021dc2:	46bd      	mov	sp, r7
 8021dc4:	bd80      	pop	{r7, pc}

08021dc6 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8021dc6:	b580      	push	{r7, lr}
 8021dc8:	b082      	sub	sp, #8
 8021dca:	af00      	add	r7, sp, #0
 8021dcc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	f000 fa11 	bl	80221f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8021dd6:	4603      	mov	r3, r0
 8021dd8:	4618      	mov	r0, r3
 8021dda:	3708      	adds	r7, #8
 8021ddc:	46bd      	mov	sp, r7
 8021dde:	bd80      	pop	{r7, pc}

08021de0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8021de0:	b480      	push	{r7}
 8021de2:	b083      	sub	sp, #12
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
 8021de8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	681a      	ldr	r2, [r3, #0]
 8021dee:	683b      	ldr	r3, [r7, #0]
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	429a      	cmp	r2, r3
 8021df4:	bf0c      	ite	eq
 8021df6:	2301      	moveq	r3, #1
 8021df8:	2300      	movne	r3, #0
 8021dfa:	b2db      	uxtb	r3, r3
 8021dfc:	4618      	mov	r0, r3
 8021dfe:	370c      	adds	r7, #12
 8021e00:	46bd      	mov	sp, r7
 8021e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e06:	4770      	bx	lr

08021e08 <_ZNKSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 8021e08:	b590      	push	{r4, r7, lr}
 8021e0a:	b083      	sub	sp, #12
 8021e0c:	af00      	add	r7, sp, #0
 8021e0e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	4618      	mov	r0, r3
 8021e14:	f000 fa01 	bl	802221a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 8021e18:	bf00      	nop
 8021e1a:	4620      	mov	r0, r4
 8021e1c:	370c      	adds	r7, #12
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	bd90      	pop	{r4, r7, pc}

08021e22 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8021e22:	b580      	push	{r7, lr}
 8021e24:	b082      	sub	sp, #8
 8021e26:	af00      	add	r7, sp, #0
 8021e28:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	4618      	mov	r0, r3
 8021e30:	f000 f9fe 	bl	8022230 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 8021e34:	4603      	mov	r3, r0
 8021e36:	4618      	mov	r0, r3
 8021e38:	3708      	adds	r7, #8
 8021e3a:	46bd      	mov	sp, r7
 8021e3c:	bd80      	pop	{r7, pc}

08021e3e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8021e3e:	b480      	push	{r7}
 8021e40:	b083      	sub	sp, #12
 8021e42:	af00      	add	r7, sp, #0
 8021e44:	6078      	str	r0, [r7, #4]
 8021e46:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8021e48:	683b      	ldr	r3, [r7, #0]
 8021e4a:	681a      	ldr	r2, [r3, #0]
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	601a      	str	r2, [r3, #0]
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	4618      	mov	r0, r3
 8021e54:	370c      	adds	r7, #12
 8021e56:	46bd      	mov	sp, r7
 8021e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e5c:	4770      	bx	lr

08021e5e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021e5e:	b5b0      	push	{r4, r5, r7, lr}
 8021e60:	b088      	sub	sp, #32
 8021e62:	af00      	add	r7, sp, #0
 8021e64:	60f8      	str	r0, [r7, #12]
 8021e66:	60b9      	str	r1, [r7, #8]
 8021e68:	607a      	str	r2, [r7, #4]
 8021e6a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8021e6c:	6878      	ldr	r0, [r7, #4]
 8021e6e:	f7fa f9c5 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8021e72:	4604      	mov	r4, r0
 8021e74:	6838      	ldr	r0, [r7, #0]
 8021e76:	f7fa f9cc 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8021e7a:	4605      	mov	r5, r0
 8021e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021e7e:	f7fa f9d3 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8021e82:	4603      	mov	r3, r0
 8021e84:	462a      	mov	r2, r5
 8021e86:	4621      	mov	r1, r4
 8021e88:	68f8      	ldr	r0, [r7, #12]
 8021e8a:	f000 f9df 	bl	802224c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8021e8e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8021e90:	69f8      	ldr	r0, [r7, #28]
 8021e92:	f000 fb21 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8021e96:	4603      	mov	r3, r0
 8021e98:	f107 0010 	add.w	r0, r7, #16
 8021e9c:	68ba      	ldr	r2, [r7, #8]
 8021e9e:	68f9      	ldr	r1, [r7, #12]
 8021ea0:	f000 f9f7 	bl	8022292 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8021ea4:	697b      	ldr	r3, [r7, #20]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d007      	beq.n	8021eba <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8021eaa:	6939      	ldr	r1, [r7, #16]
 8021eac:	697a      	ldr	r2, [r7, #20]
 8021eae:	69fb      	ldr	r3, [r7, #28]
 8021eb0:	68f8      	ldr	r0, [r7, #12]
 8021eb2:	f000 fb24 	bl	80224fe <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8021eb6:	4603      	mov	r3, r0
 8021eb8:	e00b      	b.n	8021ed2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8021eba:	69f9      	ldr	r1, [r7, #28]
 8021ebc:	68f8      	ldr	r0, [r7, #12]
 8021ebe:	f000 f905 	bl	80220cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8021ec2:	693a      	ldr	r2, [r7, #16]
 8021ec4:	f107 0318 	add.w	r3, r7, #24
 8021ec8:	4611      	mov	r1, r2
 8021eca:	4618      	mov	r0, r3
 8021ecc:	f000 fb54 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021ed0:	69bb      	ldr	r3, [r7, #24]
      }
 8021ed2:	4618      	mov	r0, r3
 8021ed4:	3720      	adds	r7, #32
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	bdb0      	pop	{r4, r5, r7, pc}

08021eda <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 8021eda:	b580      	push	{r7, lr}
 8021edc:	b082      	sub	sp, #8
 8021ede:	af00      	add	r7, sp, #0
 8021ee0:	6078      	str	r0, [r7, #4]
 8021ee2:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	6839      	ldr	r1, [r7, #0]
 8021ee8:	4618      	mov	r0, r3
 8021eea:	f000 fb54 	bl	8022596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>
 8021eee:	4603      	mov	r3, r0
 8021ef0:	4618      	mov	r0, r3
 8021ef2:	3708      	adds	r7, #8
 8021ef4:	46bd      	mov	sp, r7
 8021ef6:	bd80      	pop	{r7, pc}

08021ef8 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8021ef8:	b580      	push	{r7, lr}
 8021efa:	b082      	sub	sp, #8
 8021efc:	af00      	add	r7, sp, #0
 8021efe:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	4618      	mov	r0, r3
 8021f04:	f7e2 fd53 	bl	80049ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8021f08:	4603      	mov	r3, r0
 8021f0a:	4618      	mov	r0, r3
 8021f0c:	3708      	adds	r7, #8
 8021f0e:	46bd      	mov	sp, r7
 8021f10:	bd80      	pop	{r7, pc}

08021f12 <_ZNKSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>:
      key_comp() const
 8021f12:	b590      	push	{r4, r7, lr}
 8021f14:	b083      	sub	sp, #12
 8021f16:	af00      	add	r7, sp, #0
 8021f18:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	4618      	mov	r0, r3
 8021f1e:	f000 fb51 	bl	80225c4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 8021f22:	bf00      	nop
 8021f24:	4620      	mov	r0, r4
 8021f26:	370c      	adds	r7, #12
 8021f28:	46bd      	mov	sp, r7
 8021f2a:	bd90      	pop	{r4, r7, pc}

08021f2c <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8021f2c:	b580      	push	{r7, lr}
 8021f2e:	b082      	sub	sp, #8
 8021f30:	af00      	add	r7, sp, #0
 8021f32:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	4618      	mov	r0, r3
 8021f3a:	f7e8 fc37 	bl	800a7ac <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 8021f3e:	4603      	mov	r3, r0
 8021f40:	4618      	mov	r0, r3
 8021f42:	3708      	adds	r7, #8
 8021f44:	46bd      	mov	sp, r7
 8021f46:	bd80      	pop	{r7, pc}

08021f48 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021f48:	b5b0      	push	{r4, r5, r7, lr}
 8021f4a:	b088      	sub	sp, #32
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	60f8      	str	r0, [r7, #12]
 8021f50:	60b9      	str	r1, [r7, #8]
 8021f52:	607a      	str	r2, [r7, #4]
 8021f54:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8021f56:	6878      	ldr	r0, [r7, #4]
 8021f58:	f7fa f950 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8021f5c:	4604      	mov	r4, r0
 8021f5e:	6838      	ldr	r0, [r7, #0]
 8021f60:	f7fa fb43 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8021f64:	4605      	mov	r5, r0
 8021f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021f68:	f7fa f95e 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8021f6c:	4603      	mov	r3, r0
 8021f6e:	462a      	mov	r2, r5
 8021f70:	4621      	mov	r1, r4
 8021f72:	68f8      	ldr	r0, [r7, #12]
 8021f74:	f000 fb31 	bl	80225da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8021f78:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8021f7a:	69f8      	ldr	r0, [r7, #28]
 8021f7c:	f7e7 fa34 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8021f80:	4603      	mov	r3, r0
 8021f82:	f107 0010 	add.w	r0, r7, #16
 8021f86:	68ba      	ldr	r2, [r7, #8]
 8021f88:	68f9      	ldr	r1, [r7, #12]
 8021f8a:	f7e3 ff9f 	bl	8005ecc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
	    if (__res.second)
 8021f8e:	697b      	ldr	r3, [r7, #20]
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d007      	beq.n	8021fa4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8021f94:	6939      	ldr	r1, [r7, #16]
 8021f96:	697a      	ldr	r2, [r7, #20]
 8021f98:	69fb      	ldr	r3, [r7, #28]
 8021f9a:	68f8      	ldr	r0, [r7, #12]
 8021f9c:	f000 fb40 	bl	8022620 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8021fa0:	4603      	mov	r3, r0
 8021fa2:	e00b      	b.n	8021fbc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 8021fa4:	69f9      	ldr	r1, [r7, #28]
 8021fa6:	68f8      	ldr	r0, [r7, #12]
 8021fa8:	f7e5 fde4 	bl	8007b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8021fac:	693a      	ldr	r2, [r7, #16]
 8021fae:	f107 0318 	add.w	r3, r7, #24
 8021fb2:	4611      	mov	r1, r2
 8021fb4:	4618      	mov	r0, r3
 8021fb6:	f7e3 ff7a 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021fba:	69bb      	ldr	r3, [r7, #24]
      }
 8021fbc:	4618      	mov	r0, r3
 8021fbe:	3720      	adds	r7, #32
 8021fc0:	46bd      	mov	sp, r7
 8021fc2:	bdb0      	pop	{r4, r5, r7, pc}

08021fc4 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021fc4:	b590      	push	{r4, r7, lr}
 8021fc6:	b085      	sub	sp, #20
 8021fc8:	af00      	add	r7, sp, #0
 8021fca:	6078      	str	r0, [r7, #4]
 8021fcc:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8021fce:	6878      	ldr	r0, [r7, #4]
 8021fd0:	f000 fb63 	bl	802269a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8021fd4:	4604      	mov	r4, r0
 8021fd6:	6878      	ldr	r0, [r7, #4]
 8021fd8:	f000 fb6b 	bl	80226b2 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8021fdc:	4602      	mov	r2, r0
 8021fde:	683b      	ldr	r3, [r7, #0]
 8021fe0:	4621      	mov	r1, r4
 8021fe2:	6878      	ldr	r0, [r7, #4]
 8021fe4:	f000 fb71 	bl	80226ca <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 8021fe8:	4603      	mov	r3, r0
 8021fea:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8021fec:	6878      	ldr	r0, [r7, #4]
 8021fee:	f000 f825 	bl	802203c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	60fb      	str	r3, [r7, #12]
 8021ff6:	f107 020c 	add.w	r2, r7, #12
 8021ffa:	f107 0308 	add.w	r3, r7, #8
 8021ffe:	4611      	mov	r1, r2
 8022000:	4618      	mov	r0, r3
 8022002:	f000 f82c 	bl	802205e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 8022006:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8022008:	2b00      	cmp	r3, #0
 802200a:	d10d      	bne.n	8022028 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 802200c:	687c      	ldr	r4, [r7, #4]
 802200e:	68bb      	ldr	r3, [r7, #8]
 8022010:	4618      	mov	r0, r3
 8022012:	f000 fb8b 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022016:	4603      	mov	r3, r0
 8022018:	461a      	mov	r2, r3
 802201a:	6839      	ldr	r1, [r7, #0]
 802201c:	4620      	mov	r0, r4
 802201e:	f7f9 fdaa 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022022:	4603      	mov	r3, r0
 8022024:	2b00      	cmp	r3, #0
 8022026:	d004      	beq.n	8022032 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8022028:	6878      	ldr	r0, [r7, #4]
 802202a:	f000 f807 	bl	802203c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 802202e:	4603      	mov	r3, r0
 8022030:	e000      	b.n	8022034 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 8022032:	68bb      	ldr	r3, [r7, #8]
    }
 8022034:	4618      	mov	r0, r3
 8022036:	3714      	adds	r7, #20
 8022038:	46bd      	mov	sp, r7
 802203a:	bd90      	pop	{r4, r7, pc}

0802203c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	1d1a      	adds	r2, r3, #4
 8022048:	f107 030c 	add.w	r3, r7, #12
 802204c:	4611      	mov	r1, r2
 802204e:	4618      	mov	r0, r3
 8022050:	f000 fb78 	bl	8022744 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8022054:	68fb      	ldr	r3, [r7, #12]
 8022056:	4618      	mov	r0, r3
 8022058:	3710      	adds	r7, #16
 802205a:	46bd      	mov	sp, r7
 802205c:	bd80      	pop	{r7, pc}

0802205e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802205e:	b480      	push	{r7}
 8022060:	b083      	sub	sp, #12
 8022062:	af00      	add	r7, sp, #0
 8022064:	6078      	str	r0, [r7, #4]
 8022066:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	681a      	ldr	r2, [r3, #0]
 802206c:	683b      	ldr	r3, [r7, #0]
 802206e:	681b      	ldr	r3, [r3, #0]
 8022070:	429a      	cmp	r2, r3
 8022072:	bf0c      	ite	eq
 8022074:	2301      	moveq	r3, #1
 8022076:	2300      	movne	r3, #0
 8022078:	b2db      	uxtb	r3, r3
 802207a:	4618      	mov	r0, r3
 802207c:	370c      	adds	r7, #12
 802207e:	46bd      	mov	sp, r7
 8022080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022084:	4770      	bx	lr

08022086 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8022086:	b480      	push	{r7}
 8022088:	b083      	sub	sp, #12
 802208a:	af00      	add	r7, sp, #0
 802208c:	6078      	str	r0, [r7, #4]
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	4618      	mov	r0, r3
 8022092:	370c      	adds	r7, #12
 8022094:	46bd      	mov	sp, r7
 8022096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802209a:	4770      	bx	lr

0802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802209c:	b480      	push	{r7}
 802209e:	b083      	sub	sp, #12
 80220a0:	af00      	add	r7, sp, #0
 80220a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	68db      	ldr	r3, [r3, #12]
 80220a8:	4618      	mov	r0, r3
 80220aa:	370c      	adds	r7, #12
 80220ac:	46bd      	mov	sp, r7
 80220ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b2:	4770      	bx	lr

080220b4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80220b4:	b480      	push	{r7}
 80220b6:	b083      	sub	sp, #12
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	689b      	ldr	r3, [r3, #8]
 80220c0:	4618      	mov	r0, r3
 80220c2:	370c      	adds	r7, #12
 80220c4:	46bd      	mov	sp, r7
 80220c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ca:	4770      	bx	lr

080220cc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80220cc:	b580      	push	{r7, lr}
 80220ce:	b082      	sub	sp, #8
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	6078      	str	r0, [r7, #4]
 80220d4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80220d6:	6839      	ldr	r1, [r7, #0]
 80220d8:	6878      	ldr	r0, [r7, #4]
 80220da:	f000 fb42 	bl	8022762 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80220de:	6839      	ldr	r1, [r7, #0]
 80220e0:	6878      	ldr	r0, [r7, #4]
 80220e2:	f000 fb53 	bl	802278c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80220e6:	bf00      	nop
 80220e8:	3708      	adds	r7, #8
 80220ea:	46bd      	mov	sp, r7
 80220ec:	bd80      	pop	{r7, pc}

080220ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEC1Ev>:
 80220ee:	b480      	push	{r7}
 80220f0:	b083      	sub	sp, #12
 80220f2:	af00      	add	r7, sp, #0
 80220f4:	6078      	str	r0, [r7, #4]
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	4618      	mov	r0, r3
 80220fa:	370c      	adds	r7, #12
 80220fc:	46bd      	mov	sp, r7
 80220fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022102:	4770      	bx	lr

08022104 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EN10PWMservice8InstanceEEEEC1Ev>:
 8022104:	b480      	push	{r7}
 8022106:	b083      	sub	sp, #12
 8022108:	af00      	add	r7, sp, #0
 802210a:	6078      	str	r0, [r7, #4]
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	4618      	mov	r0, r3
 8022110:	370c      	adds	r7, #12
 8022112:	46bd      	mov	sp, r7
 8022114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022118:	4770      	bx	lr

0802211a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 802211a:	b480      	push	{r7}
 802211c:	b083      	sub	sp, #12
 802211e:	af00      	add	r7, sp, #0
 8022120:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	689b      	ldr	r3, [r3, #8]
      }
 8022126:	4618      	mov	r0, r3
 8022128:	370c      	adds	r7, #12
 802212a:	46bd      	mov	sp, r7
 802212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022130:	4770      	bx	lr

08022132 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8022132:	b480      	push	{r7}
 8022134:	b083      	sub	sp, #12
 8022136:	af00      	add	r7, sp, #0
 8022138:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	3304      	adds	r3, #4
 802213e:	4618      	mov	r0, r3
 8022140:	370c      	adds	r7, #12
 8022142:	46bd      	mov	sp, r7
 8022144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022148:	4770      	bx	lr

0802214a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 802214a:	b590      	push	{r4, r7, lr}
 802214c:	b087      	sub	sp, #28
 802214e:	af00      	add	r7, sp, #0
 8022150:	60f8      	str	r0, [r7, #12]
 8022152:	60b9      	str	r1, [r7, #8]
 8022154:	607a      	str	r2, [r7, #4]
 8022156:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8022158:	68bb      	ldr	r3, [r7, #8]
 802215a:	2b00      	cmp	r3, #0
 802215c:	d01b      	beq.n	8022196 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 802215e:	68fc      	ldr	r4, [r7, #12]
 8022160:	68b8      	ldr	r0, [r7, #8]
 8022162:	f7e7 f941 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8022166:	4603      	mov	r3, r0
 8022168:	683a      	ldr	r2, [r7, #0]
 802216a:	4619      	mov	r1, r3
 802216c:	4620      	mov	r0, r4
 802216e:	f7e5 f99a 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022172:	4603      	mov	r3, r0
 8022174:	f083 0301 	eor.w	r3, r3, #1
 8022178:	b2db      	uxtb	r3, r3
 802217a:	2b00      	cmp	r3, #0
 802217c:	d006      	beq.n	802218c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 802217e:	68bb      	ldr	r3, [r7, #8]
 8022180:	607b      	str	r3, [r7, #4]
 8022182:	68b8      	ldr	r0, [r7, #8]
 8022184:	f000 fb14 	bl	80227b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8022188:	60b8      	str	r0, [r7, #8]
 802218a:	e7e5      	b.n	8022158 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 802218c:	68b8      	ldr	r0, [r7, #8]
 802218e:	f000 fb1b 	bl	80227c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8022192:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8022194:	e7e0      	b.n	8022158 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
      return const_iterator(__y);
 8022196:	f107 0314 	add.w	r3, r7, #20
 802219a:	6879      	ldr	r1, [r7, #4]
 802219c:	4618      	mov	r0, r3
 802219e:	f000 f805 	bl	80221ac <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80221a2:	697b      	ldr	r3, [r7, #20]
    }
 80221a4:	4618      	mov	r0, r3
 80221a6:	371c      	adds	r7, #28
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd90      	pop	{r4, r7, pc}

080221ac <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80221ac:	b480      	push	{r7}
 80221ae:	b083      	sub	sp, #12
 80221b0:	af00      	add	r7, sp, #0
 80221b2:	6078      	str	r0, [r7, #4]
 80221b4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	683a      	ldr	r2, [r7, #0]
 80221ba:	601a      	str	r2, [r3, #0]
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	4618      	mov	r0, r3
 80221c0:	370c      	adds	r7, #12
 80221c2:	46bd      	mov	sp, r7
 80221c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221c8:	4770      	bx	lr

080221ca <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 80221ca:	b590      	push	{r4, r7, lr}
 80221cc:	b083      	sub	sp, #12
 80221ce:	af00      	add	r7, sp, #0
 80221d0:	6078      	str	r0, [r7, #4]
 80221d2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80221d4:	6878      	ldr	r0, [r7, #4]
 80221d6:	f7ff fd62 	bl	8021c9e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80221da:	4604      	mov	r4, r0
 80221dc:	6878      	ldr	r0, [r7, #4]
 80221de:	f000 faff 	bl	80227e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80221e2:	4602      	mov	r2, r0
 80221e4:	683b      	ldr	r3, [r7, #0]
 80221e6:	4621      	mov	r1, r4
 80221e8:	6878      	ldr	r0, [r7, #4]
 80221ea:	f000 fb05 	bl	80227f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80221ee:	4603      	mov	r3, r0
 80221f0:	4618      	mov	r0, r3
 80221f2:	370c      	adds	r7, #12
 80221f4:	46bd      	mov	sp, r7
 80221f6:	bd90      	pop	{r4, r7, pc}

080221f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80221f8:	b580      	push	{r7, lr}
 80221fa:	b084      	sub	sp, #16
 80221fc:	af00      	add	r7, sp, #0
 80221fe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	1d1a      	adds	r2, r3, #4
 8022204:	f107 030c 	add.w	r3, r7, #12
 8022208:	4611      	mov	r1, r2
 802220a:	4618      	mov	r0, r3
 802220c:	f000 f9b4 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022210:	68fb      	ldr	r3, [r7, #12]
 8022212:	4618      	mov	r0, r3
 8022214:	3710      	adds	r7, #16
 8022216:	46bd      	mov	sp, r7
 8022218:	bd80      	pop	{r7, pc}

0802221a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 802221a:	b480      	push	{r7}
 802221c:	b083      	sub	sp, #12
 802221e:	af00      	add	r7, sp, #0
 8022220:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8022222:	bf00      	nop
 8022224:	4618      	mov	r0, r3
 8022226:	370c      	adds	r7, #12
 8022228:	46bd      	mov	sp, r7
 802222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802222e:	4770      	bx	lr

08022230 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8022230:	b580      	push	{r7, lr}
 8022232:	b082      	sub	sp, #8
 8022234:	af00      	add	r7, sp, #0
 8022236:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	3310      	adds	r3, #16
 802223c:	4618      	mov	r0, r3
 802223e:	f000 fb0c 	bl	802285a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>
 8022242:	4603      	mov	r3, r0
 8022244:	4618      	mov	r0, r3
 8022246:	3708      	adds	r7, #8
 8022248:	46bd      	mov	sp, r7
 802224a:	bd80      	pop	{r7, pc}

0802224c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 802224c:	b5b0      	push	{r4, r5, r7, lr}
 802224e:	b088      	sub	sp, #32
 8022250:	af02      	add	r7, sp, #8
 8022252:	60f8      	str	r0, [r7, #12]
 8022254:	60b9      	str	r1, [r7, #8]
 8022256:	607a      	str	r2, [r7, #4]
 8022258:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 802225a:	68f8      	ldr	r0, [r7, #12]
 802225c:	f000 fb09 	bl	8022872 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 8022260:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8022262:	68b8      	ldr	r0, [r7, #8]
 8022264:	f7f9 ffca 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022268:	4604      	mov	r4, r0
 802226a:	6878      	ldr	r0, [r7, #4]
 802226c:	f7f9 ffd1 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8022270:	4605      	mov	r5, r0
 8022272:	6838      	ldr	r0, [r7, #0]
 8022274:	f7f9 ffd8 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022278:	4603      	mov	r3, r0
 802227a:	9300      	str	r3, [sp, #0]
 802227c:	462b      	mov	r3, r5
 802227e:	4622      	mov	r2, r4
 8022280:	6979      	ldr	r1, [r7, #20]
 8022282:	68f8      	ldr	r0, [r7, #12]
 8022284:	f000 fb06 	bl	8022894 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8022288:	697b      	ldr	r3, [r7, #20]
	}
 802228a:	4618      	mov	r0, r3
 802228c:	3718      	adds	r7, #24
 802228e:	46bd      	mov	sp, r7
 8022290:	bdb0      	pop	{r4, r5, r7, pc}

08022292 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022292:	b590      	push	{r4, r7, lr}
 8022294:	b08d      	sub	sp, #52	; 0x34
 8022296:	af00      	add	r7, sp, #0
 8022298:	60f8      	str	r0, [r7, #12]
 802229a:	60b9      	str	r1, [r7, #8]
 802229c:	607a      	str	r2, [r7, #4]
 802229e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80222a0:	1d3b      	adds	r3, r7, #4
 80222a2:	4618      	mov	r0, r3
 80222a4:	f000 fb23 	bl	80228ee <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEE13_M_const_castEv>
 80222a8:	4603      	mov	r3, r0
 80222aa:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80222ac:	69bc      	ldr	r4, [r7, #24]
 80222ae:	68b8      	ldr	r0, [r7, #8]
 80222b0:	f000 fa96 	bl	80227e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80222b4:	4603      	mov	r3, r0
 80222b6:	429c      	cmp	r4, r3
 80222b8:	bf0c      	ite	eq
 80222ba:	2301      	moveq	r3, #1
 80222bc:	2300      	movne	r3, #0
 80222be:	b2db      	uxtb	r3, r3
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d030      	beq.n	8022326 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 80222c4:	68b8      	ldr	r0, [r7, #8]
 80222c6:	f000 fb23 	bl	8022910 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 80222ca:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d013      	beq.n	80222f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80222d0:	68bc      	ldr	r4, [r7, #8]
 80222d2:	68b8      	ldr	r0, [r7, #8]
 80222d4:	f000 fb28 	bl	8022928 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80222d8:	4603      	mov	r3, r0
 80222da:	681b      	ldr	r3, [r3, #0]
 80222dc:	4618      	mov	r0, r3
 80222de:	f000 fa25 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80222e2:	4603      	mov	r3, r0
 80222e4:	683a      	ldr	r2, [r7, #0]
 80222e6:	4619      	mov	r1, r3
 80222e8:	4620      	mov	r0, r4
 80222ea:	f7f9 fc44 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 80222ee:	4603      	mov	r3, r0
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d001      	beq.n	80222f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80222f4:	2301      	movs	r3, #1
 80222f6:	e000      	b.n	80222fa <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 80222f8:	2300      	movs	r3, #0
	  if (size() > 0
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d00c      	beq.n	8022318 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80222fe:	2300      	movs	r3, #0
 8022300:	61fb      	str	r3, [r7, #28]
 8022302:	68b8      	ldr	r0, [r7, #8]
 8022304:	f000 fb10 	bl	8022928 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8022308:	4602      	mov	r2, r0
 802230a:	f107 031c 	add.w	r3, r7, #28
 802230e:	4619      	mov	r1, r3
 8022310:	68f8      	ldr	r0, [r7, #12]
 8022312:	f7e5 f8d7 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022316:	e0db      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022318:	68fb      	ldr	r3, [r7, #12]
 802231a:	683a      	ldr	r2, [r7, #0]
 802231c:	68b9      	ldr	r1, [r7, #8]
 802231e:	4618      	mov	r0, r3
 8022320:	f000 fb0e 	bl	8022940 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8022324:	e0d4      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8022326:	68bc      	ldr	r4, [r7, #8]
 8022328:	69bb      	ldr	r3, [r7, #24]
 802232a:	4618      	mov	r0, r3
 802232c:	f000 f9fe 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022330:	4603      	mov	r3, r0
 8022332:	461a      	mov	r2, r3
 8022334:	6839      	ldr	r1, [r7, #0]
 8022336:	4620      	mov	r0, r4
 8022338:	f7f9 fc1d 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 802233c:	4603      	mov	r3, r0
 802233e:	2b00      	cmp	r3, #0
 8022340:	d057      	beq.n	80223f2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8022342:	69bb      	ldr	r3, [r7, #24]
 8022344:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8022346:	69bc      	ldr	r4, [r7, #24]
 8022348:	68b8      	ldr	r0, [r7, #8]
 802234a:	f000 fb7e 	bl	8022a4a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 802234e:	4603      	mov	r3, r0
 8022350:	681b      	ldr	r3, [r3, #0]
 8022352:	429c      	cmp	r4, r3
 8022354:	bf0c      	ite	eq
 8022356:	2301      	moveq	r3, #1
 8022358:	2300      	movne	r3, #0
 802235a:	b2db      	uxtb	r3, r3
 802235c:	2b00      	cmp	r3, #0
 802235e:	d00d      	beq.n	802237c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8022360:	68b8      	ldr	r0, [r7, #8]
 8022362:	f000 fb72 	bl	8022a4a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8022366:	4604      	mov	r4, r0
 8022368:	68b8      	ldr	r0, [r7, #8]
 802236a:	f000 fb6e 	bl	8022a4a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 802236e:	4603      	mov	r3, r0
 8022370:	461a      	mov	r2, r3
 8022372:	4621      	mov	r1, r4
 8022374:	68f8      	ldr	r0, [r7, #12]
 8022376:	f7e5 f94c 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 802237a:	e0a9      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 802237c:	68bc      	ldr	r4, [r7, #8]
 802237e:	f107 0314 	add.w	r3, r7, #20
 8022382:	4618      	mov	r0, r3
 8022384:	f000 fb6d 	bl	8022a62 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>
 8022388:	4603      	mov	r3, r0
 802238a:	681b      	ldr	r3, [r3, #0]
 802238c:	4618      	mov	r0, r3
 802238e:	f000 f9cd 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022392:	4603      	mov	r3, r0
 8022394:	683a      	ldr	r2, [r7, #0]
 8022396:	4619      	mov	r1, r3
 8022398:	4620      	mov	r0, r4
 802239a:	f7f9 fbec 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 802239e:	4603      	mov	r3, r0
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d01f      	beq.n	80223e4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80223a4:	697b      	ldr	r3, [r7, #20]
 80223a6:	4618      	mov	r0, r3
 80223a8:	f7ff fe78 	bl	802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80223ac:	4603      	mov	r3, r0
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	bf0c      	ite	eq
 80223b2:	2301      	moveq	r3, #1
 80223b4:	2300      	movne	r3, #0
 80223b6:	b2db      	uxtb	r3, r3
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	d00a      	beq.n	80223d2 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80223bc:	2300      	movs	r3, #0
 80223be:	623b      	str	r3, [r7, #32]
 80223c0:	f107 0214 	add.w	r2, r7, #20
 80223c4:	f107 0320 	add.w	r3, r7, #32
 80223c8:	4619      	mov	r1, r3
 80223ca:	68f8      	ldr	r0, [r7, #12]
 80223cc:	f7e5 f87a 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80223d0:	e07e      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80223d2:	f107 0218 	add.w	r2, r7, #24
 80223d6:	f107 0318 	add.w	r3, r7, #24
 80223da:	4619      	mov	r1, r3
 80223dc:	68f8      	ldr	r0, [r7, #12]
 80223de:	f7e5 f918 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80223e2:	e075      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80223e4:	68fb      	ldr	r3, [r7, #12]
 80223e6:	683a      	ldr	r2, [r7, #0]
 80223e8:	68b9      	ldr	r1, [r7, #8]
 80223ea:	4618      	mov	r0, r3
 80223ec:	f000 faa8 	bl	8022940 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 80223f0:	e06e      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80223f2:	68bc      	ldr	r4, [r7, #8]
 80223f4:	69bb      	ldr	r3, [r7, #24]
 80223f6:	4618      	mov	r0, r3
 80223f8:	f000 f998 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80223fc:	4603      	mov	r3, r0
 80223fe:	683a      	ldr	r2, [r7, #0]
 8022400:	4619      	mov	r1, r3
 8022402:	4620      	mov	r0, r4
 8022404:	f7f9 fbb7 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022408:	4603      	mov	r3, r0
 802240a:	2b00      	cmp	r3, #0
 802240c:	d056      	beq.n	80224bc <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 802240e:	69bb      	ldr	r3, [r7, #24]
 8022410:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8022412:	69bc      	ldr	r4, [r7, #24]
 8022414:	68b8      	ldr	r0, [r7, #8]
 8022416:	f000 fa87 	bl	8022928 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 802241a:	4603      	mov	r3, r0
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	429c      	cmp	r4, r3
 8022420:	bf0c      	ite	eq
 8022422:	2301      	moveq	r3, #1
 8022424:	2300      	movne	r3, #0
 8022426:	b2db      	uxtb	r3, r3
 8022428:	2b00      	cmp	r3, #0
 802242a:	d00c      	beq.n	8022446 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 802242c:	2300      	movs	r3, #0
 802242e:	627b      	str	r3, [r7, #36]	; 0x24
 8022430:	68b8      	ldr	r0, [r7, #8]
 8022432:	f000 fa79 	bl	8022928 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8022436:	4602      	mov	r2, r0
 8022438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802243c:	4619      	mov	r1, r3
 802243e:	68f8      	ldr	r0, [r7, #12]
 8022440:	f7e5 f840 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022444:	e044      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8022446:	68bc      	ldr	r4, [r7, #8]
 8022448:	f107 0310 	add.w	r3, r7, #16
 802244c:	4618      	mov	r0, r3
 802244e:	f000 fb19 	bl	8022a84 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEppEv>
 8022452:	4603      	mov	r3, r0
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	4618      	mov	r0, r3
 8022458:	f000 f968 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802245c:	4603      	mov	r3, r0
 802245e:	461a      	mov	r2, r3
 8022460:	6839      	ldr	r1, [r7, #0]
 8022462:	4620      	mov	r0, r4
 8022464:	f7f9 fb87 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022468:	4603      	mov	r3, r0
 802246a:	2b00      	cmp	r3, #0
 802246c:	d01f      	beq.n	80224ae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 802246e:	69bb      	ldr	r3, [r7, #24]
 8022470:	4618      	mov	r0, r3
 8022472:	f7ff fe13 	bl	802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022476:	4603      	mov	r3, r0
 8022478:	2b00      	cmp	r3, #0
 802247a:	bf0c      	ite	eq
 802247c:	2301      	moveq	r3, #1
 802247e:	2300      	movne	r3, #0
 8022480:	b2db      	uxtb	r3, r3
 8022482:	2b00      	cmp	r3, #0
 8022484:	d00a      	beq.n	802249c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8022486:	2300      	movs	r3, #0
 8022488:	62bb      	str	r3, [r7, #40]	; 0x28
 802248a:	f107 0218 	add.w	r2, r7, #24
 802248e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022492:	4619      	mov	r1, r3
 8022494:	68f8      	ldr	r0, [r7, #12]
 8022496:	f7e5 f815 	bl	80074c4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 802249a:	e019      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 802249c:	f107 0210 	add.w	r2, r7, #16
 80224a0:	f107 0310 	add.w	r3, r7, #16
 80224a4:	4619      	mov	r1, r3
 80224a6:	68f8      	ldr	r0, [r7, #12]
 80224a8:	f7e5 f8b3 	bl	8007612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80224ac:	e010      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80224ae:	68fb      	ldr	r3, [r7, #12]
 80224b0:	683a      	ldr	r2, [r7, #0]
 80224b2:	68b9      	ldr	r1, [r7, #8]
 80224b4:	4618      	mov	r0, r3
 80224b6:	f000 fa43 	bl	8022940 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 80224ba:	e009      	b.n	80224d0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80224bc:	2300      	movs	r3, #0
 80224be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80224c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80224c4:	f107 0318 	add.w	r3, r7, #24
 80224c8:	4619      	mov	r1, r3
 80224ca:	68f8      	ldr	r0, [r7, #12]
 80224cc:	f7e5 f8dc 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80224d0:	68f8      	ldr	r0, [r7, #12]
 80224d2:	3734      	adds	r7, #52	; 0x34
 80224d4:	46bd      	mov	sp, r7
 80224d6:	bd90      	pop	{r4, r7, pc}

080224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 80224d8:	b580      	push	{r7, lr}
 80224da:	b084      	sub	sp, #16
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80224e0:	6878      	ldr	r0, [r7, #4]
 80224e2:	f000 fae0 	bl	8022aa6 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 80224e6:	4602      	mov	r2, r0
 80224e8:	f107 030c 	add.w	r3, r7, #12
 80224ec:	4611      	mov	r1, r2
 80224ee:	4618      	mov	r0, r3
 80224f0:	f000 fae7 	bl	8022ac2 <_ZNKSt10_Select1stISt4pairIKhN10PWMservice8InstanceEEEclERKS4_>
 80224f4:	4603      	mov	r3, r0
      }
 80224f6:	4618      	mov	r0, r3
 80224f8:	3710      	adds	r7, #16
 80224fa:	46bd      	mov	sp, r7
 80224fc:	bd80      	pop	{r7, pc}

080224fe <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80224fe:	b5b0      	push	{r4, r5, r7, lr}
 8022500:	b086      	sub	sp, #24
 8022502:	af00      	add	r7, sp, #0
 8022504:	60f8      	str	r0, [r7, #12]
 8022506:	60b9      	str	r1, [r7, #8]
 8022508:	607a      	str	r2, [r7, #4]
 802250a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 802250c:	68bb      	ldr	r3, [r7, #8]
 802250e:	2b00      	cmp	r3, #0
 8022510:	d117      	bne.n	8022542 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8022512:	68f8      	ldr	r0, [r7, #12]
 8022514:	f000 f964 	bl	80227e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8022518:	4602      	mov	r2, r0
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	4293      	cmp	r3, r2
 802251e:	d010      	beq.n	8022542 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8022520:	68fc      	ldr	r4, [r7, #12]
 8022522:	6838      	ldr	r0, [r7, #0]
 8022524:	f7ff ffd8 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8022528:	4605      	mov	r5, r0
 802252a:	6878      	ldr	r0, [r7, #4]
 802252c:	f000 f8fe 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022530:	4603      	mov	r3, r0
 8022532:	461a      	mov	r2, r3
 8022534:	4629      	mov	r1, r5
 8022536:	4620      	mov	r0, r4
 8022538:	f7f9 fb1d 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 802253c:	4603      	mov	r3, r0
 802253e:	2b00      	cmp	r3, #0
 8022540:	d001      	beq.n	8022546 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8022542:	2301      	movs	r3, #1
 8022544:	e000      	b.n	8022548 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8022546:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8022548:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 802254a:	68fb      	ldr	r3, [r7, #12]
 802254c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 802254e:	7df8      	ldrb	r0, [r7, #23]
 8022550:	687a      	ldr	r2, [r7, #4]
 8022552:	6839      	ldr	r1, [r7, #0]
 8022554:	f000 fe2e 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8022558:	68fb      	ldr	r3, [r7, #12]
 802255a:	695b      	ldr	r3, [r3, #20]
 802255c:	1c5a      	adds	r2, r3, #1
 802255e:	68fb      	ldr	r3, [r7, #12]
 8022560:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8022562:	f107 0310 	add.w	r3, r7, #16
 8022566:	6839      	ldr	r1, [r7, #0]
 8022568:	4618      	mov	r0, r3
 802256a:	f000 f805 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 802256e:	693b      	ldr	r3, [r7, #16]
    }
 8022570:	4618      	mov	r0, r3
 8022572:	3718      	adds	r7, #24
 8022574:	46bd      	mov	sp, r7
 8022576:	bdb0      	pop	{r4, r5, r7, pc}

08022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022578:	b480      	push	{r7}
 802257a:	b083      	sub	sp, #12
 802257c:	af00      	add	r7, sp, #0
 802257e:	6078      	str	r0, [r7, #4]
 8022580:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	683a      	ldr	r2, [r7, #0]
 8022586:	601a      	str	r2, [r3, #0]
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	4618      	mov	r0, r3
 802258c:	370c      	adds	r7, #12
 802258e:	46bd      	mov	sp, r7
 8022590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022594:	4770      	bx	lr

08022596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 8022596:	b590      	push	{r4, r7, lr}
 8022598:	b083      	sub	sp, #12
 802259a:	af00      	add	r7, sp, #0
 802259c:	6078      	str	r0, [r7, #4]
 802259e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80225a0:	6878      	ldr	r0, [r7, #4]
 80225a2:	f7e6 ff34 	bl	800940e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80225a6:	4604      	mov	r4, r0
 80225a8:	6878      	ldr	r0, [r7, #4]
 80225aa:	f7e5 fb05 	bl	8007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80225ae:	4602      	mov	r2, r0
 80225b0:	683b      	ldr	r3, [r7, #0]
 80225b2:	4621      	mov	r1, r4
 80225b4:	6878      	ldr	r0, [r7, #4]
 80225b6:	f000 fa90 	bl	8022ada <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>
 80225ba:	4603      	mov	r3, r0
 80225bc:	4618      	mov	r0, r3
 80225be:	370c      	adds	r7, #12
 80225c0:	46bd      	mov	sp, r7
 80225c2:	bd90      	pop	{r4, r7, pc}

080225c4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 80225c4:	b480      	push	{r7}
 80225c6:	b083      	sub	sp, #12
 80225c8:	af00      	add	r7, sp, #0
 80225ca:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80225cc:	bf00      	nop
 80225ce:	4618      	mov	r0, r3
 80225d0:	370c      	adds	r7, #12
 80225d2:	46bd      	mov	sp, r7
 80225d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225d8:	4770      	bx	lr

080225da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80225da:	b5b0      	push	{r4, r5, r7, lr}
 80225dc:	b088      	sub	sp, #32
 80225de:	af02      	add	r7, sp, #8
 80225e0:	60f8      	str	r0, [r7, #12]
 80225e2:	60b9      	str	r1, [r7, #8]
 80225e4:	607a      	str	r2, [r7, #4]
 80225e6:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80225e8:	68f8      	ldr	r0, [r7, #12]
 80225ea:	f7e8 f95c 	bl	800a8a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 80225ee:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80225f0:	68b8      	ldr	r0, [r7, #8]
 80225f2:	f7f9 fe03 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80225f6:	4604      	mov	r4, r0
 80225f8:	6878      	ldr	r0, [r7, #4]
 80225fa:	f7f9 fff6 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80225fe:	4605      	mov	r5, r0
 8022600:	6838      	ldr	r0, [r7, #0]
 8022602:	f7f9 fe11 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022606:	4603      	mov	r3, r0
 8022608:	9300      	str	r3, [sp, #0]
 802260a:	462b      	mov	r3, r5
 802260c:	4622      	mov	r2, r4
 802260e:	6979      	ldr	r1, [r7, #20]
 8022610:	68f8      	ldr	r0, [r7, #12]
 8022612:	f000 fa93 	bl	8022b3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8022616:	697b      	ldr	r3, [r7, #20]
	}
 8022618:	4618      	mov	r0, r3
 802261a:	3718      	adds	r7, #24
 802261c:	46bd      	mov	sp, r7
 802261e:	bdb0      	pop	{r4, r5, r7, pc}

08022620 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022620:	b5b0      	push	{r4, r5, r7, lr}
 8022622:	b086      	sub	sp, #24
 8022624:	af00      	add	r7, sp, #0
 8022626:	60f8      	str	r0, [r7, #12]
 8022628:	60b9      	str	r1, [r7, #8]
 802262a:	607a      	str	r2, [r7, #4]
 802262c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 802262e:	68bb      	ldr	r3, [r7, #8]
 8022630:	2b00      	cmp	r3, #0
 8022632:	d117      	bne.n	8022664 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8022634:	68f8      	ldr	r0, [r7, #12]
 8022636:	f7e5 fabf 	bl	8007bb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 802263a:	4602      	mov	r2, r0
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	4293      	cmp	r3, r2
 8022640:	d010      	beq.n	8022664 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8022642:	68fc      	ldr	r4, [r7, #12]
 8022644:	6838      	ldr	r0, [r7, #0]
 8022646:	f7e6 fecf 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 802264a:	4605      	mov	r5, r0
 802264c:	6878      	ldr	r0, [r7, #4]
 802264e:	f7e5 facb 	bl	8007be8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022652:	4603      	mov	r3, r0
 8022654:	461a      	mov	r2, r3
 8022656:	4629      	mov	r1, r5
 8022658:	4620      	mov	r0, r4
 802265a:	f7e4 ff24 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 802265e:	4603      	mov	r3, r0
 8022660:	2b00      	cmp	r3, #0
 8022662:	d001      	beq.n	8022668 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 8022664:	2301      	movs	r3, #1
 8022666:	e000      	b.n	802266a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8022668:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 802266a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 802266c:	68fb      	ldr	r3, [r7, #12]
 802266e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8022670:	7df8      	ldrb	r0, [r7, #23]
 8022672:	687a      	ldr	r2, [r7, #4]
 8022674:	6839      	ldr	r1, [r7, #0]
 8022676:	f000 fd9d 	bl	80231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	695b      	ldr	r3, [r3, #20]
 802267e:	1c5a      	adds	r2, r3, #1
 8022680:	68fb      	ldr	r3, [r7, #12]
 8022682:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8022684:	f107 0310 	add.w	r3, r7, #16
 8022688:	6839      	ldr	r1, [r7, #0]
 802268a:	4618      	mov	r0, r3
 802268c:	f7e3 fc0f 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022690:	693b      	ldr	r3, [r7, #16]
    }
 8022692:	4618      	mov	r0, r3
 8022694:	3718      	adds	r7, #24
 8022696:	46bd      	mov	sp, r7
 8022698:	bdb0      	pop	{r4, r5, r7, pc}

0802269a <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 802269a:	b480      	push	{r7}
 802269c:	b083      	sub	sp, #12
 802269e:	af00      	add	r7, sp, #0
 80226a0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	689b      	ldr	r3, [r3, #8]
      }
 80226a6:	4618      	mov	r0, r3
 80226a8:	370c      	adds	r7, #12
 80226aa:	46bd      	mov	sp, r7
 80226ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b0:	4770      	bx	lr

080226b2 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80226b2:	b480      	push	{r7}
 80226b4:	b083      	sub	sp, #12
 80226b6:	af00      	add	r7, sp, #0
 80226b8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	3304      	adds	r3, #4
 80226be:	4618      	mov	r0, r3
 80226c0:	370c      	adds	r7, #12
 80226c2:	46bd      	mov	sp, r7
 80226c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226c8:	4770      	bx	lr

080226ca <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80226ca:	b590      	push	{r4, r7, lr}
 80226cc:	b087      	sub	sp, #28
 80226ce:	af00      	add	r7, sp, #0
 80226d0:	60f8      	str	r0, [r7, #12]
 80226d2:	60b9      	str	r1, [r7, #8]
 80226d4:	607a      	str	r2, [r7, #4]
 80226d6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80226d8:	68bb      	ldr	r3, [r7, #8]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d01b      	beq.n	8022716 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80226de:	68fc      	ldr	r4, [r7, #12]
 80226e0:	68b8      	ldr	r0, [r7, #8]
 80226e2:	f7ff fef9 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80226e6:	4603      	mov	r3, r0
 80226e8:	683a      	ldr	r2, [r7, #0]
 80226ea:	4619      	mov	r1, r3
 80226ec:	4620      	mov	r0, r4
 80226ee:	f7f9 fa42 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 80226f2:	4603      	mov	r3, r0
 80226f4:	f083 0301 	eor.w	r3, r3, #1
 80226f8:	b2db      	uxtb	r3, r3
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d006      	beq.n	802270c <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80226fe:	68bb      	ldr	r3, [r7, #8]
 8022700:	607b      	str	r3, [r7, #4]
 8022702:	68b8      	ldr	r0, [r7, #8]
 8022704:	f000 fa47 	bl	8022b96 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8022708:	60b8      	str	r0, [r7, #8]
 802270a:	e7e5      	b.n	80226d8 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 802270c:	68b8      	ldr	r0, [r7, #8]
 802270e:	f000 fa4e 	bl	8022bae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8022712:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8022714:	e7e0      	b.n	80226d8 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8022716:	f107 0314 	add.w	r3, r7, #20
 802271a:	6879      	ldr	r1, [r7, #4]
 802271c:	4618      	mov	r0, r3
 802271e:	f000 f811 	bl	8022744 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8022722:	697b      	ldr	r3, [r7, #20]
    }
 8022724:	4618      	mov	r0, r3
 8022726:	371c      	adds	r7, #28
 8022728:	46bd      	mov	sp, r7
 802272a:	bd90      	pop	{r4, r7, pc}

0802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 802272c:	b580      	push	{r7, lr}
 802272e:	b082      	sub	sp, #8
 8022730:	af00      	add	r7, sp, #0
 8022732:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8022734:	6878      	ldr	r0, [r7, #4]
 8022736:	f7ff fecf 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 802273a:	4603      	mov	r3, r0
 802273c:	4618      	mov	r0, r3
 802273e:	3708      	adds	r7, #8
 8022740:	46bd      	mov	sp, r7
 8022742:	bd80      	pop	{r7, pc}

08022744 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022744:	b480      	push	{r7}
 8022746:	b083      	sub	sp, #12
 8022748:	af00      	add	r7, sp, #0
 802274a:	6078      	str	r0, [r7, #4]
 802274c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	683a      	ldr	r2, [r7, #0]
 8022752:	601a      	str	r2, [r3, #0]
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	4618      	mov	r0, r3
 8022758:	370c      	adds	r7, #12
 802275a:	46bd      	mov	sp, r7
 802275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022760:	4770      	bx	lr

08022762 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022762:	b590      	push	{r4, r7, lr}
 8022764:	b083      	sub	sp, #12
 8022766:	af00      	add	r7, sp, #0
 8022768:	6078      	str	r0, [r7, #4]
 802276a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 802276c:	6878      	ldr	r0, [r7, #4]
 802276e:	f000 fa2a 	bl	8022bc6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8022772:	4604      	mov	r4, r0
 8022774:	6838      	ldr	r0, [r7, #0]
 8022776:	f7ff fd5b 	bl	8022230 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 802277a:	4603      	mov	r3, r0
 802277c:	4619      	mov	r1, r3
 802277e:	4620      	mov	r0, r4
 8022780:	f000 fa2c 	bl	8022bdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8022784:	bf00      	nop
 8022786:	370c      	adds	r7, #12
 8022788:	46bd      	mov	sp, r7
 802278a:	bd90      	pop	{r4, r7, pc}

0802278c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 802278c:	b580      	push	{r7, lr}
 802278e:	b082      	sub	sp, #8
 8022790:	af00      	add	r7, sp, #0
 8022792:	6078      	str	r0, [r7, #4]
 8022794:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8022796:	6878      	ldr	r0, [r7, #4]
 8022798:	f000 fa15 	bl	8022bc6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 802279c:	4603      	mov	r3, r0
 802279e:	2201      	movs	r2, #1
 80227a0:	6839      	ldr	r1, [r7, #0]
 80227a2:	4618      	mov	r0, r3
 80227a4:	f000 fa26 	bl	8022bf4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j>
 80227a8:	bf00      	nop
 80227aa:	3708      	adds	r7, #8
 80227ac:	46bd      	mov	sp, r7
 80227ae:	bd80      	pop	{r7, pc}

080227b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80227b0:	b480      	push	{r7}
 80227b2:	b083      	sub	sp, #12
 80227b4:	af00      	add	r7, sp, #0
 80227b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	689b      	ldr	r3, [r3, #8]
 80227bc:	4618      	mov	r0, r3
 80227be:	370c      	adds	r7, #12
 80227c0:	46bd      	mov	sp, r7
 80227c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227c6:	4770      	bx	lr

080227c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80227c8:	b480      	push	{r7}
 80227ca:	b083      	sub	sp, #12
 80227cc:	af00      	add	r7, sp, #0
 80227ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	68db      	ldr	r3, [r3, #12]
 80227d4:	4618      	mov	r0, r3
 80227d6:	370c      	adds	r7, #12
 80227d8:	46bd      	mov	sp, r7
 80227da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227de:	4770      	bx	lr

080227e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80227e0:	b480      	push	{r7}
 80227e2:	b083      	sub	sp, #12
 80227e4:	af00      	add	r7, sp, #0
 80227e6:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	3304      	adds	r3, #4
 80227ec:	4618      	mov	r0, r3
 80227ee:	370c      	adds	r7, #12
 80227f0:	46bd      	mov	sp, r7
 80227f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227f6:	4770      	bx	lr

080227f8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80227f8:	b590      	push	{r4, r7, lr}
 80227fa:	b087      	sub	sp, #28
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	60f8      	str	r0, [r7, #12]
 8022800:	60b9      	str	r1, [r7, #8]
 8022802:	607a      	str	r2, [r7, #4]
 8022804:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8022806:	68bb      	ldr	r3, [r7, #8]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d01b      	beq.n	8022844 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 802280c:	68fc      	ldr	r4, [r7, #12]
 802280e:	68b8      	ldr	r0, [r7, #8]
 8022810:	f7ff fe62 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8022814:	4603      	mov	r3, r0
 8022816:	683a      	ldr	r2, [r7, #0]
 8022818:	4619      	mov	r1, r3
 802281a:	4620      	mov	r0, r4
 802281c:	f7f9 f9ab 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022820:	4603      	mov	r3, r0
 8022822:	f083 0301 	eor.w	r3, r3, #1
 8022826:	b2db      	uxtb	r3, r3
 8022828:	2b00      	cmp	r3, #0
 802282a:	d006      	beq.n	802283a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 802282c:	68bb      	ldr	r3, [r7, #8]
 802282e:	607b      	str	r3, [r7, #4]
 8022830:	68b8      	ldr	r0, [r7, #8]
 8022832:	f7ff fc3f 	bl	80220b4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8022836:	60b8      	str	r0, [r7, #8]
 8022838:	e7e5      	b.n	8022806 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 802283a:	68b8      	ldr	r0, [r7, #8]
 802283c:	f7ff fc2e 	bl	802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022840:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8022842:	e7e0      	b.n	8022806 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8022844:	f107 0314 	add.w	r3, r7, #20
 8022848:	6879      	ldr	r1, [r7, #4]
 802284a:	4618      	mov	r0, r3
 802284c:	f7ff fe94 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022850:	697b      	ldr	r3, [r7, #20]
    }
 8022852:	4618      	mov	r0, r3
 8022854:	371c      	adds	r7, #28
 8022856:	46bd      	mov	sp, r7
 8022858:	bd90      	pop	{r4, r7, pc}

0802285a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 802285a:	b580      	push	{r7, lr}
 802285c:	b082      	sub	sp, #8
 802285e:	af00      	add	r7, sp, #0
 8022860:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8022862:	6878      	ldr	r0, [r7, #4]
 8022864:	f000 f9e5 	bl	8022c32 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>
 8022868:	4603      	mov	r3, r0
 802286a:	4618      	mov	r0, r3
 802286c:	3708      	adds	r7, #8
 802286e:	46bd      	mov	sp, r7
 8022870:	bd80      	pop	{r7, pc}

08022872 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8022872:	b580      	push	{r7, lr}
 8022874:	b082      	sub	sp, #8
 8022876:	af00      	add	r7, sp, #0
 8022878:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 802287a:	6878      	ldr	r0, [r7, #4]
 802287c:	f000 f9a3 	bl	8022bc6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8022880:	4603      	mov	r3, r0
 8022882:	2101      	movs	r1, #1
 8022884:	4618      	mov	r0, r3
 8022886:	f000 f9df 	bl	8022c48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j>
 802288a:	4603      	mov	r3, r0
 802288c:	4618      	mov	r0, r3
 802288e:	3708      	adds	r7, #8
 8022890:	46bd      	mov	sp, r7
 8022892:	bd80      	pop	{r7, pc}

08022894 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8022894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022898:	b086      	sub	sp, #24
 802289a:	af02      	add	r7, sp, #8
 802289c:	60f8      	str	r0, [r7, #12]
 802289e:	60b9      	str	r1, [r7, #8]
 80228a0:	607a      	str	r2, [r7, #4]
 80228a2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80228a4:	68bb      	ldr	r3, [r7, #8]
 80228a6:	4619      	mov	r1, r3
 80228a8:	2020      	movs	r0, #32
 80228aa:	f7dd fd67 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80228ae:	68f8      	ldr	r0, [r7, #12]
 80228b0:	f000 f989 	bl	8022bc6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80228b4:	4604      	mov	r4, r0
 80228b6:	68b8      	ldr	r0, [r7, #8]
 80228b8:	f7ff fcba 	bl	8022230 <_ZNSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>
 80228bc:	4605      	mov	r5, r0
 80228be:	6878      	ldr	r0, [r7, #4]
 80228c0:	f7f9 fc9c 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80228c4:	4606      	mov	r6, r0
 80228c6:	6838      	ldr	r0, [r7, #0]
 80228c8:	f7f9 fca3 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80228cc:	4680      	mov	r8, r0
 80228ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80228d0:	f7f9 fcaa 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80228d4:	4603      	mov	r3, r0
 80228d6:	9300      	str	r3, [sp, #0]
 80228d8:	4643      	mov	r3, r8
 80228da:	4632      	mov	r2, r6
 80228dc:	4629      	mov	r1, r5
 80228de:	4620      	mov	r0, r4
 80228e0:	f000 f9fc 	bl	8022cdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80228e4:	bf00      	nop
 80228e6:	3710      	adds	r7, #16
 80228e8:	46bd      	mov	sp, r7
 80228ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080228ee <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN10PWMservice8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80228ee:	b580      	push	{r7, lr}
 80228f0:	b084      	sub	sp, #16
 80228f2:	af00      	add	r7, sp, #0
 80228f4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	681a      	ldr	r2, [r3, #0]
 80228fa:	f107 030c 	add.w	r3, r7, #12
 80228fe:	4611      	mov	r1, r2
 8022900:	4618      	mov	r0, r3
 8022902:	f7ff fe39 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	4618      	mov	r0, r3
 802290a:	3710      	adds	r7, #16
 802290c:	46bd      	mov	sp, r7
 802290e:	bd80      	pop	{r7, pc}

08022910 <_ZNKSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022910:	b480      	push	{r7}
 8022912:	b083      	sub	sp, #12
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	695b      	ldr	r3, [r3, #20]
 802291c:	4618      	mov	r0, r3
 802291e:	370c      	adds	r7, #12
 8022920:	46bd      	mov	sp, r7
 8022922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022926:	4770      	bx	lr

08022928 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8022928:	b480      	push	{r7}
 802292a:	b083      	sub	sp, #12
 802292c:	af00      	add	r7, sp, #0
 802292e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	3310      	adds	r3, #16
 8022934:	4618      	mov	r0, r3
 8022936:	370c      	adds	r7, #12
 8022938:	46bd      	mov	sp, r7
 802293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802293e:	4770      	bx	lr

08022940 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022940:	b590      	push	{r4, r7, lr}
 8022942:	b08b      	sub	sp, #44	; 0x2c
 8022944:	af00      	add	r7, sp, #0
 8022946:	60f8      	str	r0, [r7, #12]
 8022948:	60b9      	str	r1, [r7, #8]
 802294a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 802294c:	68b8      	ldr	r0, [r7, #8]
 802294e:	f7ff f9a6 	bl	8021c9e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8022952:	4603      	mov	r3, r0
 8022954:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8022956:	68b8      	ldr	r0, [r7, #8]
 8022958:	f7ff ff42 	bl	80227e0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 802295c:	4603      	mov	r3, r0
 802295e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8022960:	2301      	movs	r3, #1
 8022962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8022966:	69bb      	ldr	r3, [r7, #24]
 8022968:	2b00      	cmp	r3, #0
 802296a:	d020      	beq.n	80229ae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 802296c:	69bb      	ldr	r3, [r7, #24]
 802296e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8022970:	68bc      	ldr	r4, [r7, #8]
 8022972:	69bb      	ldr	r3, [r7, #24]
 8022974:	4618      	mov	r0, r3
 8022976:	f7ff fdaf 	bl	80224d8 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 802297a:	4603      	mov	r3, r0
 802297c:	461a      	mov	r2, r3
 802297e:	6879      	ldr	r1, [r7, #4]
 8022980:	4620      	mov	r0, r4
 8022982:	f7f9 f8f8 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022986:	4603      	mov	r3, r0
 8022988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 802298c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022990:	2b00      	cmp	r3, #0
 8022992:	d005      	beq.n	80229a0 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8022994:	69bb      	ldr	r3, [r7, #24]
 8022996:	4618      	mov	r0, r3
 8022998:	f7ff fb8c 	bl	80220b4 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 802299c:	4603      	mov	r3, r0
 802299e:	e004      	b.n	80229aa <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80229a0:	69bb      	ldr	r3, [r7, #24]
 80229a2:	4618      	mov	r0, r3
 80229a4:	f7ff fb7a 	bl	802209c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80229a8:	4603      	mov	r3, r0
 80229aa:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80229ac:	e7db      	b.n	8022966 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80229ae:	697a      	ldr	r2, [r7, #20]
 80229b0:	f107 0310 	add.w	r3, r7, #16
 80229b4:	4611      	mov	r1, r2
 80229b6:	4618      	mov	r0, r3
 80229b8:	f7ff fdde 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80229bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d01d      	beq.n	8022a00 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80229c4:	68b8      	ldr	r0, [r7, #8]
 80229c6:	f000 f9a5 	bl	8022d14 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 80229ca:	4603      	mov	r3, r0
 80229cc:	61fb      	str	r3, [r7, #28]
 80229ce:	f107 021c 	add.w	r2, r7, #28
 80229d2:	f107 0310 	add.w	r3, r7, #16
 80229d6:	4611      	mov	r1, r2
 80229d8:	4618      	mov	r0, r3
 80229da:	f7ff fa01 	bl	8021de0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEES7_>
 80229de:	4603      	mov	r3, r0
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d008      	beq.n	80229f6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80229e4:	f107 0214 	add.w	r2, r7, #20
 80229e8:	f107 0318 	add.w	r3, r7, #24
 80229ec:	4619      	mov	r1, r3
 80229ee:	68f8      	ldr	r0, [r7, #12]
 80229f0:	f000 f9a1 	bl	8022d36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 80229f4:	e025      	b.n	8022a42 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80229f6:	f107 0310 	add.w	r3, r7, #16
 80229fa:	4618      	mov	r0, r3
 80229fc:	f000 f831 	bl	8022a62 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8022a00:	68bc      	ldr	r4, [r7, #8]
 8022a02:	693b      	ldr	r3, [r7, #16]
 8022a04:	4618      	mov	r0, r3
 8022a06:	f7ff fe91 	bl	802272c <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022a0a:	4603      	mov	r3, r0
 8022a0c:	687a      	ldr	r2, [r7, #4]
 8022a0e:	4619      	mov	r1, r3
 8022a10:	4620      	mov	r0, r4
 8022a12:	f7f9 f8b0 	bl	801bb76 <_ZNKSt4lessIhEclERKhS2_>
 8022a16:	4603      	mov	r3, r0
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	d008      	beq.n	8022a2e <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8022a1c:	f107 0214 	add.w	r2, r7, #20
 8022a20:	f107 0318 	add.w	r3, r7, #24
 8022a24:	4619      	mov	r1, r3
 8022a26:	68f8      	ldr	r0, [r7, #12]
 8022a28:	f000 f985 	bl	8022d36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>
 8022a2c:	e009      	b.n	8022a42 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8022a2e:	2300      	movs	r3, #0
 8022a30:	623b      	str	r3, [r7, #32]
 8022a32:	f107 0220 	add.w	r2, r7, #32
 8022a36:	f107 0310 	add.w	r3, r7, #16
 8022a3a:	4619      	mov	r1, r3
 8022a3c:	68f8      	ldr	r0, [r7, #12]
 8022a3e:	f7e4 fe23 	bl	8007688 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8022a42:	68f8      	ldr	r0, [r7, #12]
 8022a44:	372c      	adds	r7, #44	; 0x2c
 8022a46:	46bd      	mov	sp, r7
 8022a48:	bd90      	pop	{r4, r7, pc}

08022a4a <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8022a4a:	b480      	push	{r7}
 8022a4c:	b083      	sub	sp, #12
 8022a4e:	af00      	add	r7, sp, #0
 8022a50:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	330c      	adds	r3, #12
 8022a56:	4618      	mov	r0, r3
 8022a58:	370c      	adds	r7, #12
 8022a5a:	46bd      	mov	sp, r7
 8022a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a60:	4770      	bx	lr

08022a62 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8022a62:	b580      	push	{r7, lr}
 8022a64:	b082      	sub	sp, #8
 8022a66:	af00      	add	r7, sp, #0
 8022a68:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	4618      	mov	r0, r3
 8022a70:	f000 fb9e 	bl	80231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8022a74:	4602      	mov	r2, r0
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	601a      	str	r2, [r3, #0]
	return *this;
 8022a7a:	687b      	ldr	r3, [r7, #4]
      }
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	3708      	adds	r7, #8
 8022a80:	46bd      	mov	sp, r7
 8022a82:	bd80      	pop	{r7, pc}

08022a84 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8022a84:	b580      	push	{r7, lr}
 8022a86:	b082      	sub	sp, #8
 8022a88:	af00      	add	r7, sp, #0
 8022a8a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	4618      	mov	r0, r3
 8022a92:	f000 fb8b 	bl	80231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8022a96:	4602      	mov	r2, r0
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	601a      	str	r2, [r3, #0]
	return *this;
 8022a9c:	687b      	ldr	r3, [r7, #4]
      }
 8022a9e:	4618      	mov	r0, r3
 8022aa0:	3708      	adds	r7, #8
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	bd80      	pop	{r7, pc}

08022aa6 <_ZNKSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8022aa6:	b580      	push	{r7, lr}
 8022aa8:	b082      	sub	sp, #8
 8022aaa:	af00      	add	r7, sp, #0
 8022aac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	3310      	adds	r3, #16
 8022ab2:	4618      	mov	r0, r3
 8022ab4:	f000 f958 	bl	8022d68 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>
 8022ab8:	4603      	mov	r3, r0
 8022aba:	4618      	mov	r0, r3
 8022abc:	3708      	adds	r7, #8
 8022abe:	46bd      	mov	sp, r7
 8022ac0:	bd80      	pop	{r7, pc}

08022ac2 <_ZNKSt10_Select1stISt4pairIKhN10PWMservice8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 8022ac2:	b480      	push	{r7}
 8022ac4:	b083      	sub	sp, #12
 8022ac6:	af00      	add	r7, sp, #0
 8022ac8:	6078      	str	r0, [r7, #4]
 8022aca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8022acc:	683b      	ldr	r3, [r7, #0]
 8022ace:	4618      	mov	r0, r3
 8022ad0:	370c      	adds	r7, #12
 8022ad2:	46bd      	mov	sp, r7
 8022ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ad8:	4770      	bx	lr

08022ada <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022ada:	b590      	push	{r4, r7, lr}
 8022adc:	b087      	sub	sp, #28
 8022ade:	af00      	add	r7, sp, #0
 8022ae0:	60f8      	str	r0, [r7, #12]
 8022ae2:	60b9      	str	r1, [r7, #8]
 8022ae4:	607a      	str	r2, [r7, #4]
 8022ae6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8022ae8:	68bb      	ldr	r3, [r7, #8]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d01b      	beq.n	8022b26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8022aee:	68fc      	ldr	r4, [r7, #12]
 8022af0:	68b8      	ldr	r0, [r7, #8]
 8022af2:	f7e6 fc79 	bl	80093e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8022af6:	4603      	mov	r3, r0
 8022af8:	683a      	ldr	r2, [r7, #0]
 8022afa:	4619      	mov	r1, r3
 8022afc:	4620      	mov	r0, r4
 8022afe:	f7e4 fcd2 	bl	80074a6 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022b02:	4603      	mov	r3, r0
 8022b04:	f083 0301 	eor.w	r3, r3, #1
 8022b08:	b2db      	uxtb	r3, r3
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d006      	beq.n	8022b1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8022b0e:	68bb      	ldr	r3, [r7, #8]
 8022b10:	607b      	str	r3, [r7, #4]
 8022b12:	68b8      	ldr	r0, [r7, #8]
 8022b14:	f7e5 f822 	bl	8007b5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8022b18:	60b8      	str	r0, [r7, #8]
 8022b1a:	e7e5      	b.n	8022ae8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8022b1c:	68b8      	ldr	r0, [r7, #8]
 8022b1e:	f7e5 f811 	bl	8007b44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022b22:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8022b24:	e7e0      	b.n	8022ae8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8022b26:	f107 0314 	add.w	r3, r7, #20
 8022b2a:	6879      	ldr	r1, [r7, #4]
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	f7e3 f9be 	bl	8005eae <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022b32:	697b      	ldr	r3, [r7, #20]
    }
 8022b34:	4618      	mov	r0, r3
 8022b36:	371c      	adds	r7, #28
 8022b38:	46bd      	mov	sp, r7
 8022b3a:	bd90      	pop	{r4, r7, pc}

08022b3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8022b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b40:	b086      	sub	sp, #24
 8022b42:	af02      	add	r7, sp, #8
 8022b44:	60f8      	str	r0, [r7, #12]
 8022b46:	60b9      	str	r1, [r7, #8]
 8022b48:	607a      	str	r2, [r7, #4]
 8022b4a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8022b4c:	68bb      	ldr	r3, [r7, #8]
 8022b4e:	4619      	mov	r1, r3
 8022b50:	2024      	movs	r0, #36	; 0x24
 8022b52:	f7dd fc13 	bl	800037c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8022b56:	68f8      	ldr	r0, [r7, #12]
 8022b58:	f7e7 fe1d 	bl	800a796 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N10PWMservice8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8022b5c:	4604      	mov	r4, r0
 8022b5e:	68b8      	ldr	r0, [r7, #8]
 8022b60:	f7e7 fe24 	bl	800a7ac <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEE9_M_valptrEv>
 8022b64:	4605      	mov	r5, r0
 8022b66:	6878      	ldr	r0, [r7, #4]
 8022b68:	f7f9 fb48 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022b6c:	4606      	mov	r6, r0
 8022b6e:	6838      	ldr	r0, [r7, #0]
 8022b70:	f7f9 fd3b 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8022b74:	4680      	mov	r8, r0
 8022b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022b78:	f7f9 fb56 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022b7c:	4603      	mov	r3, r0
 8022b7e:	9300      	str	r3, [sp, #0]
 8022b80:	4643      	mov	r3, r8
 8022b82:	4632      	mov	r2, r6
 8022b84:	4629      	mov	r1, r5
 8022b86:	4620      	mov	r0, r4
 8022b88:	f000 f924 	bl	8022dd4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8022b8c:	bf00      	nop
 8022b8e:	3710      	adds	r7, #16
 8022b90:	46bd      	mov	sp, r7
 8022b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022b96 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022b96:	b480      	push	{r7}
 8022b98:	b083      	sub	sp, #12
 8022b9a:	af00      	add	r7, sp, #0
 8022b9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	689b      	ldr	r3, [r3, #8]
 8022ba2:	4618      	mov	r0, r3
 8022ba4:	370c      	adds	r7, #12
 8022ba6:	46bd      	mov	sp, r7
 8022ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bac:	4770      	bx	lr

08022bae <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022bae:	b480      	push	{r7}
 8022bb0:	b083      	sub	sp, #12
 8022bb2:	af00      	add	r7, sp, #0
 8022bb4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	68db      	ldr	r3, [r3, #12]
 8022bba:	4618      	mov	r0, r3
 8022bbc:	370c      	adds	r7, #12
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bc4:	4770      	bx	lr

08022bc6 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8022bc6:	b480      	push	{r7}
 8022bc8:	b083      	sub	sp, #12
 8022bca:	af00      	add	r7, sp, #0
 8022bcc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	4618      	mov	r0, r3
 8022bd2:	370c      	adds	r7, #12
 8022bd4:	46bd      	mov	sp, r7
 8022bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bda:	4770      	bx	lr

08022bdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8022bdc:	b580      	push	{r7, lr}
 8022bde:	b082      	sub	sp, #8
 8022be0:	af00      	add	r7, sp, #0
 8022be2:	6078      	str	r0, [r7, #4]
 8022be4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8022be6:	6838      	ldr	r0, [r7, #0]
 8022be8:	f000 f910 	bl	8022e0c <_ZSt10destroy_atISt4pairIKhN10PWMservice8InstanceEEEvPT_>
	}
 8022bec:	bf00      	nop
 8022bee:	3708      	adds	r7, #8
 8022bf0:	46bd      	mov	sp, r7
 8022bf2:	bd80      	pop	{r7, pc}

08022bf4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8022bf4:	b580      	push	{r7, lr}
 8022bf6:	b088      	sub	sp, #32
 8022bf8:	af00      	add	r7, sp, #0
 8022bfa:	60f8      	str	r0, [r7, #12]
 8022bfc:	60b9      	str	r1, [r7, #8]
 8022bfe:	607a      	str	r2, [r7, #4]
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	61fb      	str	r3, [r7, #28]
 8022c04:	68bb      	ldr	r3, [r7, #8]
 8022c06:	61bb      	str	r3, [r7, #24]
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8022c0c:	f7dd fb80 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8022c10:	4603      	mov	r3, r0
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d003      	beq.n	8022c1e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8022c16:	69b8      	ldr	r0, [r7, #24]
 8022c18:	f000 fa5f 	bl	80230da <_ZdlPv>
	    return;
 8022c1c:	e005      	b.n	8022c2a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8022c1e:	697a      	ldr	r2, [r7, #20]
 8022c20:	69b9      	ldr	r1, [r7, #24]
 8022c22:	69f8      	ldr	r0, [r7, #28]
 8022c24:	f000 f97c 	bl	8022f20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8022c28:	bf00      	nop
 8022c2a:	bf00      	nop
 8022c2c:	3720      	adds	r7, #32
 8022c2e:	46bd      	mov	sp, r7
 8022c30:	bd80      	pop	{r7, pc}

08022c32 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8022c32:	b480      	push	{r7}
 8022c34:	b083      	sub	sp, #12
 8022c36:	af00      	add	r7, sp, #0
 8022c38:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	370c      	adds	r7, #12
 8022c40:	46bd      	mov	sp, r7
 8022c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c46:	4770      	bx	lr

08022c48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8022c48:	b580      	push	{r7, lr}
 8022c4a:	b084      	sub	sp, #16
 8022c4c:	af00      	add	r7, sp, #0
 8022c4e:	6078      	str	r0, [r7, #4]
 8022c50:	6039      	str	r1, [r7, #0]
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	60fb      	str	r3, [r7, #12]
 8022c56:	683b      	ldr	r3, [r7, #0]
 8022c58:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8022c5a:	f7dd fb59 	bl	8000310 <_ZSt21is_constant_evaluatedv>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d006      	beq.n	8022c72 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8022c64:	68bb      	ldr	r3, [r7, #8]
 8022c66:	015b      	lsls	r3, r3, #5
 8022c68:	4618      	mov	r0, r3
 8022c6a:	f000 fa3a 	bl	80230e2 <_Znwj>
 8022c6e:	4603      	mov	r3, r0
 8022c70:	e006      	b.n	8022c80 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8022c72:	2200      	movs	r2, #0
 8022c74:	68b9      	ldr	r1, [r7, #8]
 8022c76:	68f8      	ldr	r0, [r7, #12]
 8022c78:	f000 f961 	bl	8022f3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv>
 8022c7c:	4603      	mov	r3, r0
 8022c7e:	bf00      	nop
      { return __a.allocate(__n); }
 8022c80:	4618      	mov	r0, r3
 8022c82:	3710      	adds	r7, #16
 8022c84:	46bd      	mov	sp, r7
 8022c86:	bd80      	pop	{r7, pc}

08022c88 <_ZSt12construct_atISt4pairIKhN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8022c88:	b5b0      	push	{r4, r5, r7, lr}
 8022c8a:	b088      	sub	sp, #32
 8022c8c:	af00      	add	r7, sp, #0
 8022c8e:	60f8      	str	r0, [r7, #12]
 8022c90:	60b9      	str	r1, [r7, #8]
 8022c92:	607a      	str	r2, [r7, #4]
 8022c94:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8022c96:	68b8      	ldr	r0, [r7, #8]
 8022c98:	f7f9 fab0 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022c9c:	6878      	ldr	r0, [r7, #4]
 8022c9e:	f7f9 fab8 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8022ca2:	4602      	mov	r2, r0
 8022ca4:	f107 0318 	add.w	r3, r7, #24
 8022ca8:	4611      	mov	r1, r2
 8022caa:	4618      	mov	r0, r3
 8022cac:	f7fa f913 	bl	801ced6 <_ZNSt5tupleIJRKhEEC1EOS2_>
 8022cb0:	f107 0418 	add.w	r4, r7, #24
 8022cb4:	6838      	ldr	r0, [r7, #0]
 8022cb6:	f7f9 fab7 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	4619      	mov	r1, r3
 8022cbe:	2010      	movs	r0, #16
 8022cc0:	f7dd fb5c 	bl	800037c <_ZnwjPv>
 8022cc4:	4605      	mov	r5, r0
 8022cc6:	7f3b      	ldrb	r3, [r7, #28]
 8022cc8:	4622      	mov	r2, r4
 8022cca:	7d39      	ldrb	r1, [r7, #20]
 8022ccc:	4628      	mov	r0, r5
 8022cce:	f000 f8c7 	bl	8022e60 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8022cd2:	462b      	mov	r3, r5
 8022cd4:	4618      	mov	r0, r3
 8022cd6:	3720      	adds	r7, #32
 8022cd8:	46bd      	mov	sp, r7
 8022cda:	bdb0      	pop	{r4, r5, r7, pc}

08022cdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8022cdc:	b5b0      	push	{r4, r5, r7, lr}
 8022cde:	b084      	sub	sp, #16
 8022ce0:	af00      	add	r7, sp, #0
 8022ce2:	60f8      	str	r0, [r7, #12]
 8022ce4:	60b9      	str	r1, [r7, #8]
 8022ce6:	607a      	str	r2, [r7, #4]
 8022ce8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8022cea:	6878      	ldr	r0, [r7, #4]
 8022cec:	f7f9 fa86 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022cf0:	4604      	mov	r4, r0
 8022cf2:	6838      	ldr	r0, [r7, #0]
 8022cf4:	f7f9 fa8d 	bl	801c212 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8022cf8:	4605      	mov	r5, r0
 8022cfa:	6a38      	ldr	r0, [r7, #32]
 8022cfc:	f7f9 fa94 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022d00:	4603      	mov	r3, r0
 8022d02:	462a      	mov	r2, r5
 8022d04:	4621      	mov	r1, r4
 8022d06:	68b8      	ldr	r0, [r7, #8]
 8022d08:	f7ff ffbe 	bl	8022c88 <_ZSt12construct_atISt4pairIKhN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8022d0c:	bf00      	nop
 8022d0e:	3710      	adds	r7, #16
 8022d10:	46bd      	mov	sp, r7
 8022d12:	bdb0      	pop	{r4, r5, r7, pc}

08022d14 <_ZNSt8_Rb_treeIhSt4pairIKhN10PWMservice8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8022d14:	b580      	push	{r7, lr}
 8022d16:	b084      	sub	sp, #16
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	68da      	ldr	r2, [r3, #12]
 8022d20:	f107 030c 	add.w	r3, r7, #12
 8022d24:	4611      	mov	r1, r2
 8022d26:	4618      	mov	r0, r3
 8022d28:	f7ff fc26 	bl	8022578 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN10PWMservice8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	4618      	mov	r0, r3
 8022d30:	3710      	adds	r7, #16
 8022d32:	46bd      	mov	sp, r7
 8022d34:	bd80      	pop	{r7, pc}

08022d36 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN10PWMservice8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8022d36:	b580      	push	{r7, lr}
 8022d38:	b084      	sub	sp, #16
 8022d3a:	af00      	add	r7, sp, #0
 8022d3c:	60f8      	str	r0, [r7, #12]
 8022d3e:	60b9      	str	r1, [r7, #8]
 8022d40:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8022d42:	68b8      	ldr	r0, [r7, #8]
 8022d44:	f000 f8a0 	bl	8022e88 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8022d48:	4603      	mov	r3, r0
 8022d4a:	681a      	ldr	r2, [r3, #0]
 8022d4c:	68fb      	ldr	r3, [r7, #12]
 8022d4e:	601a      	str	r2, [r3, #0]
 8022d50:	6878      	ldr	r0, [r7, #4]
 8022d52:	f7e6 f8c3 	bl	8008edc <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8022d56:	4603      	mov	r3, r0
 8022d58:	681a      	ldr	r2, [r3, #0]
 8022d5a:	68fb      	ldr	r3, [r7, #12]
 8022d5c:	605a      	str	r2, [r3, #4]
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	4618      	mov	r0, r3
 8022d62:	3710      	adds	r7, #16
 8022d64:	46bd      	mov	sp, r7
 8022d66:	bd80      	pop	{r7, pc}

08022d68 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8022d68:	b580      	push	{r7, lr}
 8022d6a:	b082      	sub	sp, #8
 8022d6c:	af00      	add	r7, sp, #0
 8022d6e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8022d70:	6878      	ldr	r0, [r7, #4]
 8022d72:	f000 f894 	bl	8022e9e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>
 8022d76:	4603      	mov	r3, r0
 8022d78:	4618      	mov	r0, r3
 8022d7a:	3708      	adds	r7, #8
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	bd80      	pop	{r7, pc}

08022d80 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8022d80:	b5b0      	push	{r4, r5, r7, lr}
 8022d82:	b088      	sub	sp, #32
 8022d84:	af00      	add	r7, sp, #0
 8022d86:	60f8      	str	r0, [r7, #12]
 8022d88:	60b9      	str	r1, [r7, #8]
 8022d8a:	607a      	str	r2, [r7, #4]
 8022d8c:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8022d8e:	68b8      	ldr	r0, [r7, #8]
 8022d90:	f7f9 fa34 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022d94:	6878      	ldr	r0, [r7, #4]
 8022d96:	f7f9 fc28 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8022d9a:	4602      	mov	r2, r0
 8022d9c:	f107 0318 	add.w	r3, r7, #24
 8022da0:	4611      	mov	r1, r2
 8022da2:	4618      	mov	r0, r3
 8022da4:	f7fa f923 	bl	801cfee <_ZNSt5tupleIJRK3PinEEC1EOS3_>
 8022da8:	f107 0418 	add.w	r4, r7, #24
 8022dac:	6838      	ldr	r0, [r7, #0]
 8022dae:	f7f9 fa3b 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	4619      	mov	r1, r3
 8022db6:	2014      	movs	r0, #20
 8022db8:	f7dd fae0 	bl	800037c <_ZnwjPv>
 8022dbc:	4605      	mov	r5, r0
 8022dbe:	7f3b      	ldrb	r3, [r7, #28]
 8022dc0:	4622      	mov	r2, r4
 8022dc2:	7d39      	ldrb	r1, [r7, #20]
 8022dc4:	4628      	mov	r0, r5
 8022dc6:	f000 f897 	bl	8022ef8 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 8022dca:	462b      	mov	r3, r5
 8022dcc:	4618      	mov	r0, r3
 8022dce:	3720      	adds	r7, #32
 8022dd0:	46bd      	mov	sp, r7
 8022dd2:	bdb0      	pop	{r4, r5, r7, pc}

08022dd4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN10PWMservice8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8022dd4:	b5b0      	push	{r4, r5, r7, lr}
 8022dd6:	b084      	sub	sp, #16
 8022dd8:	af00      	add	r7, sp, #0
 8022dda:	60f8      	str	r0, [r7, #12]
 8022ddc:	60b9      	str	r1, [r7, #8]
 8022dde:	607a      	str	r2, [r7, #4]
 8022de0:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8022de2:	6878      	ldr	r0, [r7, #4]
 8022de4:	f7f9 fa0a 	bl	801c1fc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8022de8:	4604      	mov	r4, r0
 8022dea:	6838      	ldr	r0, [r7, #0]
 8022dec:	f7f9 fbfd 	bl	801c5ea <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8022df0:	4605      	mov	r5, r0
 8022df2:	6a38      	ldr	r0, [r7, #32]
 8022df4:	f7f9 fa18 	bl	801c228 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8022df8:	4603      	mov	r3, r0
 8022dfa:	462a      	mov	r2, r5
 8022dfc:	4621      	mov	r1, r4
 8022dfe:	68b8      	ldr	r0, [r7, #8]
 8022e00:	f7ff ffbe 	bl	8022d80 <_ZSt12construct_atISt4pairIK3PinN10PWMservice8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 8022e04:	bf00      	nop
 8022e06:	3710      	adds	r7, #16
 8022e08:	46bd      	mov	sp, r7
 8022e0a:	bdb0      	pop	{r4, r5, r7, pc}

08022e0c <_ZSt10destroy_atISt4pairIKhN10PWMservice8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8022e0c:	b480      	push	{r7}
 8022e0e:	b083      	sub	sp, #12
 8022e10:	af00      	add	r7, sp, #0
 8022e12:	6078      	str	r0, [r7, #4]
    }
 8022e14:	bf00      	nop
 8022e16:	370c      	adds	r7, #12
 8022e18:	46bd      	mov	sp, r7
 8022e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e1e:	4770      	bx	lr

08022e20 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8022e20:	b580      	push	{r7, lr}
 8022e22:	b084      	sub	sp, #16
 8022e24:	af00      	add	r7, sp, #0
 8022e26:	60f8      	str	r0, [r7, #12]
 8022e28:	60b9      	str	r1, [r7, #8]
 8022e2a:	607a      	str	r2, [r7, #4]
 8022e2c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8022e2e:	68b8      	ldr	r0, [r7, #8]
 8022e30:	f7fa fa6c 	bl	801d30c <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8022e34:	4603      	mov	r3, r0
 8022e36:	4618      	mov	r0, r3
 8022e38:	f7fa fa5d 	bl	801d2f6 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8022e3c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8022e3e:	781a      	ldrb	r2, [r3, #0]
 8022e40:	68fb      	ldr	r3, [r7, #12]
 8022e42:	701a      	strb	r2, [r3, #0]
 8022e44:	68fb      	ldr	r3, [r7, #12]
 8022e46:	2200      	movs	r2, #0
 8022e48:	605a      	str	r2, [r3, #4]
 8022e4a:	68fb      	ldr	r3, [r7, #12]
 8022e4c:	2200      	movs	r2, #0
 8022e4e:	609a      	str	r2, [r3, #8]
 8022e50:	68fb      	ldr	r3, [r7, #12]
 8022e52:	2200      	movs	r2, #0
 8022e54:	731a      	strb	r2, [r3, #12]
      { }
 8022e56:	68fb      	ldr	r3, [r7, #12]
 8022e58:	4618      	mov	r0, r3
 8022e5a:	3710      	adds	r7, #16
 8022e5c:	46bd      	mov	sp, r7
 8022e5e:	bd80      	pop	{r7, pc}

08022e60 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8022e60:	b5b0      	push	{r4, r5, r7, lr}
 8022e62:	b086      	sub	sp, #24
 8022e64:	af02      	add	r7, sp, #8
 8022e66:	60f8      	str	r0, [r7, #12]
 8022e68:	7239      	strb	r1, [r7, #8]
 8022e6a:	607a      	str	r2, [r7, #4]
 8022e6c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8022e6e:	463a      	mov	r2, r7
 8022e70:	f88d 4000 	strb.w	r4, [sp]
 8022e74:	462b      	mov	r3, r5
 8022e76:	6879      	ldr	r1, [r7, #4]
 8022e78:	68f8      	ldr	r0, [r7, #12]
 8022e7a:	f7ff ffd1 	bl	8022e20 <_ZNSt4pairIKhN10PWMservice8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8022e7e:	68fb      	ldr	r3, [r7, #12]
 8022e80:	4618      	mov	r0, r3
 8022e82:	3710      	adds	r7, #16
 8022e84:	46bd      	mov	sp, r7
 8022e86:	bdb0      	pop	{r4, r5, r7, pc}

08022e88 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8022e88:	b480      	push	{r7}
 8022e8a:	b083      	sub	sp, #12
 8022e8c:	af00      	add	r7, sp, #0
 8022e8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	4618      	mov	r0, r3
 8022e94:	370c      	adds	r7, #12
 8022e96:	46bd      	mov	sp, r7
 8022e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e9c:	4770      	bx	lr

08022e9e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN10PWMservice8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8022e9e:	b480      	push	{r7}
 8022ea0:	b083      	sub	sp, #12
 8022ea2:	af00      	add	r7, sp, #0
 8022ea4:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	4618      	mov	r0, r3
 8022eaa:	370c      	adds	r7, #12
 8022eac:	46bd      	mov	sp, r7
 8022eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb2:	4770      	bx	lr

08022eb4 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8022eb4:	b580      	push	{r7, lr}
 8022eb6:	b084      	sub	sp, #16
 8022eb8:	af00      	add	r7, sp, #0
 8022eba:	60f8      	str	r0, [r7, #12]
 8022ebc:	60b9      	str	r1, [r7, #8]
 8022ebe:	607a      	str	r2, [r7, #4]
 8022ec0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8022ec2:	68b8      	ldr	r0, [r7, #8]
 8022ec4:	f7fa fa47 	bl	801d356 <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8022ec8:	4603      	mov	r3, r0
 8022eca:	4618      	mov	r0, r3
 8022ecc:	f7fa fa38 	bl	801d340 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 8022ed0:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8022ed2:	68fb      	ldr	r3, [r7, #12]
 8022ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8022edc:	68fb      	ldr	r3, [r7, #12]
 8022ede:	2200      	movs	r2, #0
 8022ee0:	609a      	str	r2, [r3, #8]
 8022ee2:	68fb      	ldr	r3, [r7, #12]
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	60da      	str	r2, [r3, #12]
 8022ee8:	68fb      	ldr	r3, [r7, #12]
 8022eea:	2200      	movs	r2, #0
 8022eec:	741a      	strb	r2, [r3, #16]
      { }
 8022eee:	68fb      	ldr	r3, [r7, #12]
 8022ef0:	4618      	mov	r0, r3
 8022ef2:	3710      	adds	r7, #16
 8022ef4:	46bd      	mov	sp, r7
 8022ef6:	bd80      	pop	{r7, pc}

08022ef8 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8022ef8:	b5b0      	push	{r4, r5, r7, lr}
 8022efa:	b086      	sub	sp, #24
 8022efc:	af02      	add	r7, sp, #8
 8022efe:	60f8      	str	r0, [r7, #12]
 8022f00:	7239      	strb	r1, [r7, #8]
 8022f02:	607a      	str	r2, [r7, #4]
 8022f04:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8022f06:	463a      	mov	r2, r7
 8022f08:	f88d 4000 	strb.w	r4, [sp]
 8022f0c:	462b      	mov	r3, r5
 8022f0e:	6879      	ldr	r1, [r7, #4]
 8022f10:	68f8      	ldr	r0, [r7, #12]
 8022f12:	f7ff ffcf 	bl	8022eb4 <_ZNSt4pairIK3PinN10PWMservice8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	4618      	mov	r0, r3
 8022f1a:	3710      	adds	r7, #16
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	bdb0      	pop	{r4, r5, r7, pc}

08022f20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8022f20:	b580      	push	{r7, lr}
 8022f22:	b084      	sub	sp, #16
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	60f8      	str	r0, [r7, #12]
 8022f28:	60b9      	str	r1, [r7, #8]
 8022f2a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	015b      	lsls	r3, r3, #5
 8022f30:	4619      	mov	r1, r3
 8022f32:	68b8      	ldr	r0, [r7, #8]
 8022f34:	f000 f8d3 	bl	80230de <_ZdlPvj>
      }
 8022f38:	3710      	adds	r7, #16
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	bd80      	pop	{r7, pc}

08022f3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8022f3e:	b580      	push	{r7, lr}
 8022f40:	b084      	sub	sp, #16
 8022f42:	af00      	add	r7, sp, #0
 8022f44:	60f8      	str	r0, [r7, #12]
 8022f46:	60b9      	str	r1, [r7, #8]
 8022f48:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8022f4a:	68f8      	ldr	r0, [r7, #12]
 8022f4c:	f000 f816 	bl	8022f7c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE11_M_max_sizeEv>
 8022f50:	4602      	mov	r2, r0
 8022f52:	68bb      	ldr	r3, [r7, #8]
 8022f54:	4293      	cmp	r3, r2
 8022f56:	bf8c      	ite	hi
 8022f58:	2301      	movhi	r3, #1
 8022f5a:	2300      	movls	r3, #0
 8022f5c:	b2db      	uxtb	r3, r3
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	d001      	beq.n	8022f66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8022f62:	f000 f982 	bl	802326a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8022f66:	68bb      	ldr	r3, [r7, #8]
 8022f68:	015b      	lsls	r3, r3, #5
 8022f6a:	4618      	mov	r0, r3
 8022f6c:	f000 f8b9 	bl	80230e2 <_Znwj>
 8022f70:	4603      	mov	r3, r0
 8022f72:	bf00      	nop
      }
 8022f74:	4618      	mov	r0, r3
 8022f76:	3710      	adds	r7, #16
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	bd80      	pop	{r7, pc}

08022f7c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN10PWMservice8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8022f7c:	b480      	push	{r7}
 8022f7e:	b083      	sub	sp, #12
 8022f80:	af00      	add	r7, sp, #0
 8022f82:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8022f84:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8022f88:	4618      	mov	r0, r3
 8022f8a:	370c      	adds	r7, #12
 8022f8c:	46bd      	mov	sp, r7
 8022f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f92:	4770      	bx	lr

08022f94 <_Z41__static_initialization_and_destruction_0ii>:
 8022f94:	b580      	push	{r7, lr}
 8022f96:	b082      	sub	sp, #8
 8022f98:	af00      	add	r7, sp, #0
 8022f9a:	6078      	str	r0, [r7, #4]
 8022f9c:	6039      	str	r1, [r7, #0]
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	2b01      	cmp	r3, #1
 8022fa2:	d134      	bne.n	802300e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8022fa4:	683b      	ldr	r3, [r7, #0]
 8022fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022faa:	4293      	cmp	r3, r2
 8022fac:	d12f      	bne.n	802300e <_Z41__static_initialization_and_destruction_0ii+0x7a>
map<uint8_t, PWMservice::Instance> PWMservice::active_instances = { };
 8022fae:	4b24      	ldr	r3, [pc, #144]	; (8023040 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8022fb0:	461a      	mov	r2, r3
 8022fb2:	2300      	movs	r3, #0
 8022fb4:	6013      	str	r3, [r2, #0]
 8022fb6:	6053      	str	r3, [r2, #4]
 8022fb8:	6093      	str	r3, [r2, #8]
 8022fba:	60d3      	str	r3, [r2, #12]
 8022fbc:	6113      	str	r3, [r2, #16]
 8022fbe:	6153      	str	r3, [r2, #20]
 8022fc0:	481f      	ldr	r0, [pc, #124]	; (8023040 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8022fc2:	f7fe faba 	bl	802153a <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances = { };
 8022fc6:	4b1f      	ldr	r3, [pc, #124]	; (8023044 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022fc8:	461a      	mov	r2, r3
 8022fca:	2300      	movs	r3, #0
 8022fcc:	6013      	str	r3, [r2, #0]
 8022fce:	6053      	str	r3, [r2, #4]
 8022fd0:	6093      	str	r3, [r2, #8]
 8022fd2:	60d3      	str	r3, [r2, #12]
 8022fd4:	6113      	str	r3, [r2, #16]
 8022fd6:	6153      	str	r3, [r2, #20]
 8022fd8:	481a      	ldr	r0, [pc, #104]	; (8023044 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022fda:	f7fe fae1 	bl	80215a0 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances_negated = {};
 8022fde:	4b1a      	ldr	r3, [pc, #104]	; (8023048 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8022fe0:	461a      	mov	r2, r3
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	6013      	str	r3, [r2, #0]
 8022fe6:	6053      	str	r3, [r2, #4]
 8022fe8:	6093      	str	r3, [r2, #8]
 8022fea:	60d3      	str	r3, [r2, #12]
 8022fec:	6113      	str	r3, [r2, #16]
 8022fee:	6153      	str	r3, [r2, #20]
 8022ff0:	4815      	ldr	r0, [pc, #84]	; (8023048 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8022ff2:	f7fe fad5 	bl	80215a0 <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1Ev>
map<pair<Pin, Pin>, PWMservice::Instance> PWMservice::available_instances_dual = { };
 8022ff6:	4b15      	ldr	r3, [pc, #84]	; (802304c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022ff8:	461a      	mov	r2, r3
 8022ffa:	2300      	movs	r3, #0
 8022ffc:	6013      	str	r3, [r2, #0]
 8022ffe:	6053      	str	r3, [r2, #4]
 8023000:	6093      	str	r3, [r2, #8]
 8023002:	60d3      	str	r3, [r2, #12]
 8023004:	6113      	str	r3, [r2, #16]
 8023006:	6153      	str	r3, [r2, #20]
 8023008:	4810      	ldr	r0, [pc, #64]	; (802304c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802300a:	f7fe fafc 	bl	8021606 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEEC1Ev>
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	2b00      	cmp	r3, #0
 8023012:	d110      	bne.n	8023036 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8023014:	683b      	ldr	r3, [r7, #0]
 8023016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802301a:	4293      	cmp	r3, r2
 802301c:	d10b      	bne.n	8023036 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 802301e:	480b      	ldr	r0, [pc, #44]	; (802304c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8023020:	f7fe fafe 	bl	8021620 <_ZNSt3mapISt4pairI3PinS1_EN10PWMservice8InstanceESt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances_negated = {};
 8023024:	4808      	ldr	r0, [pc, #32]	; (8023048 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8023026:	f7fe fac8 	bl	80215ba <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<Pin, PWMservice::Instance> PWMservice::available_instances = { };
 802302a:	4806      	ldr	r0, [pc, #24]	; (8023044 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 802302c:	f7fe fac5 	bl	80215ba <_ZNSt3mapI3PinN10PWMservice8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<uint8_t, PWMservice::Instance> PWMservice::active_instances = { };
 8023030:	4803      	ldr	r0, [pc, #12]	; (8023040 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8023032:	f7fe fa8f 	bl	8021554 <_ZNSt3mapIhN10PWMservice8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
}
 8023036:	bf00      	nop
 8023038:	3708      	adds	r7, #8
 802303a:	46bd      	mov	sp, r7
 802303c:	bd80      	pop	{r7, pc}
 802303e:	bf00      	nop
 8023040:	24001880 	.word	0x24001880
 8023044:	24001898 	.word	0x24001898
 8023048:	240018b0 	.word	0x240018b0
 802304c:	240018c8 	.word	0x240018c8

08023050 <_GLOBAL__sub_I__ZN10PWMservice10id_counterE>:
 8023050:	b580      	push	{r7, lr}
 8023052:	af00      	add	r7, sp, #0
 8023054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8023058:	2001      	movs	r0, #1
 802305a:	f7ff ff9b 	bl	8022f94 <_Z41__static_initialization_and_destruction_0ii>
 802305e:	bd80      	pop	{r7, pc}

08023060 <_GLOBAL__sub_D__ZN10PWMservice10id_counterE>:
 8023060:	b580      	push	{r7, lr}
 8023062:	af00      	add	r7, sp, #0
 8023064:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8023068:	2000      	movs	r0, #0
 802306a:	f7ff ff93 	bl	8022f94 <_Z41__static_initialization_and_destruction_0ii>
 802306e:	bd80      	pop	{r7, pc}

08023070 <_ZN13LowPowerTimer4initEv>:
 *      Author: aleja
 */

#include "LowPowerTimer/LowPowerTimer.hpp"

void LowPowerTimer::init() {
 8023070:	b580      	push	{r7, lr}
 8023072:	b082      	sub	sp, #8
 8023074:	af00      	add	r7, sp, #0
 8023076:	6078      	str	r0, [r7, #4]
	  handle->Instance = instance;
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	685b      	ldr	r3, [r3, #4]
 802307c:	687a      	ldr	r2, [r7, #4]
 802307e:	6812      	ldr	r2, [r2, #0]
 8023080:	601a      	str	r2, [r3, #0]
	  handle->Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	685b      	ldr	r3, [r3, #4]
 8023086:	2200      	movs	r2, #0
 8023088:	605a      	str	r2, [r3, #4]
	  handle->Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	685b      	ldr	r3, [r3, #4]
 802308e:	2200      	movs	r2, #0
 8023090:	609a      	str	r2, [r3, #8]
	  handle->Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	685b      	ldr	r3, [r3, #4]
 8023096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802309a:	615a      	str	r2, [r3, #20]
	  handle->Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	685b      	ldr	r3, [r3, #4]
 80230a0:	2200      	movs	r2, #0
 80230a2:	621a      	str	r2, [r3, #32]
	  handle->Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	685b      	ldr	r3, [r3, #4]
 80230a8:	2200      	movs	r2, #0
 80230aa:	625a      	str	r2, [r3, #36]	; 0x24
	  handle->Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80230ac:	687b      	ldr	r3, [r7, #4]
 80230ae:	685b      	ldr	r3, [r3, #4]
 80230b0:	2200      	movs	r2, #0
 80230b2:	629a      	str	r2, [r3, #40]	; 0x28
	  handle->Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80230b4:	687b      	ldr	r3, [r7, #4]
 80230b6:	685b      	ldr	r3, [r3, #4]
 80230b8:	2200      	movs	r2, #0
 80230ba:	62da      	str	r2, [r3, #44]	; 0x2c
	  handle->Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	685b      	ldr	r3, [r3, #4]
 80230c0:	2200      	movs	r2, #0
 80230c2:	631a      	str	r2, [r3, #48]	; 0x30

	  if (HAL_LPTIM_Init(handle) != HAL_OK) {
 80230c4:	687b      	ldr	r3, [r7, #4]
 80230c6:	685b      	ldr	r3, [r3, #4]
 80230c8:	4618      	mov	r0, r3
 80230ca:	f7f0 f92b 	bl	8013324 <HAL_LPTIM_Init>
 80230ce:	4603      	mov	r3, r0
 80230d0:	2b00      	cmp	r3, #0
		  //TODO: Error Handler
	  }
}
 80230d2:	bf00      	nop
 80230d4:	3708      	adds	r7, #8
 80230d6:	46bd      	mov	sp, r7
 80230d8:	bd80      	pop	{r7, pc}

080230da <_ZdlPv>:
 80230da:	f000 b9e1 	b.w	80234a0 <free>

080230de <_ZdlPvj>:
 80230de:	f7ff bffc 	b.w	80230da <_ZdlPv>

080230e2 <_Znwj>:
 80230e2:	2801      	cmp	r0, #1
 80230e4:	bf38      	it	cc
 80230e6:	2001      	movcc	r0, #1
 80230e8:	b510      	push	{r4, lr}
 80230ea:	4604      	mov	r4, r0
 80230ec:	4620      	mov	r0, r4
 80230ee:	f000 f9cf 	bl	8023490 <malloc>
 80230f2:	b930      	cbnz	r0, 8023102 <_Znwj+0x20>
 80230f4:	f000 f952 	bl	802339c <_ZSt15get_new_handlerv>
 80230f8:	b908      	cbnz	r0, 80230fe <_Znwj+0x1c>
 80230fa:	f000 f99d 	bl	8023438 <abort>
 80230fe:	4780      	blx	r0
 8023100:	e7f4      	b.n	80230ec <_Znwj+0xa>
 8023102:	bd10      	pop	{r4, pc}

08023104 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8023104:	68c3      	ldr	r3, [r0, #12]
 8023106:	689a      	ldr	r2, [r3, #8]
 8023108:	60c2      	str	r2, [r0, #12]
 802310a:	b510      	push	{r4, lr}
 802310c:	b102      	cbz	r2, 8023110 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 802310e:	6050      	str	r0, [r2, #4]
 8023110:	6842      	ldr	r2, [r0, #4]
 8023112:	605a      	str	r2, [r3, #4]
 8023114:	680c      	ldr	r4, [r1, #0]
 8023116:	4284      	cmp	r4, r0
 8023118:	d103      	bne.n	8023122 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 802311a:	600b      	str	r3, [r1, #0]
 802311c:	6098      	str	r0, [r3, #8]
 802311e:	6043      	str	r3, [r0, #4]
 8023120:	bd10      	pop	{r4, pc}
 8023122:	6891      	ldr	r1, [r2, #8]
 8023124:	4281      	cmp	r1, r0
 8023126:	bf0c      	ite	eq
 8023128:	6093      	streq	r3, [r2, #8]
 802312a:	60d3      	strne	r3, [r2, #12]
 802312c:	e7f6      	b.n	802311c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0802312e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 802312e:	6883      	ldr	r3, [r0, #8]
 8023130:	68da      	ldr	r2, [r3, #12]
 8023132:	6082      	str	r2, [r0, #8]
 8023134:	b510      	push	{r4, lr}
 8023136:	b102      	cbz	r2, 802313a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8023138:	6050      	str	r0, [r2, #4]
 802313a:	6842      	ldr	r2, [r0, #4]
 802313c:	605a      	str	r2, [r3, #4]
 802313e:	680c      	ldr	r4, [r1, #0]
 8023140:	4284      	cmp	r4, r0
 8023142:	d103      	bne.n	802314c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8023144:	600b      	str	r3, [r1, #0]
 8023146:	60d8      	str	r0, [r3, #12]
 8023148:	6043      	str	r3, [r0, #4]
 802314a:	bd10      	pop	{r4, pc}
 802314c:	68d1      	ldr	r1, [r2, #12]
 802314e:	4281      	cmp	r1, r0
 8023150:	bf0c      	ite	eq
 8023152:	60d3      	streq	r3, [r2, #12]
 8023154:	6093      	strne	r3, [r2, #8]
 8023156:	e7f6      	b.n	8023146 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08023158 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8023158:	68c3      	ldr	r3, [r0, #12]
 802315a:	b123      	cbz	r3, 8023166 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 802315c:	4618      	mov	r0, r3
 802315e:	689b      	ldr	r3, [r3, #8]
 8023160:	2b00      	cmp	r3, #0
 8023162:	d1fb      	bne.n	802315c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8023164:	4770      	bx	lr
 8023166:	6843      	ldr	r3, [r0, #4]
 8023168:	68da      	ldr	r2, [r3, #12]
 802316a:	4282      	cmp	r2, r0
 802316c:	d102      	bne.n	8023174 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 802316e:	4618      	mov	r0, r3
 8023170:	685b      	ldr	r3, [r3, #4]
 8023172:	e7f9      	b.n	8023168 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8023174:	68c2      	ldr	r2, [r0, #12]
 8023176:	4293      	cmp	r3, r2
 8023178:	bf18      	it	ne
 802317a:	4618      	movne	r0, r3
 802317c:	4770      	bx	lr

0802317e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 802317e:	7803      	ldrb	r3, [r0, #0]
 8023180:	b933      	cbnz	r3, 8023190 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8023182:	6843      	ldr	r3, [r0, #4]
 8023184:	685b      	ldr	r3, [r3, #4]
 8023186:	4283      	cmp	r3, r0
 8023188:	d102      	bne.n	8023190 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 802318a:	68db      	ldr	r3, [r3, #12]
 802318c:	4618      	mov	r0, r3
 802318e:	4770      	bx	lr
 8023190:	6882      	ldr	r2, [r0, #8]
 8023192:	b122      	cbz	r2, 802319e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8023194:	4613      	mov	r3, r2
 8023196:	68d2      	ldr	r2, [r2, #12]
 8023198:	2a00      	cmp	r2, #0
 802319a:	d1fb      	bne.n	8023194 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 802319c:	e7f6      	b.n	802318c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 802319e:	6843      	ldr	r3, [r0, #4]
 80231a0:	689a      	ldr	r2, [r3, #8]
 80231a2:	4282      	cmp	r2, r0
 80231a4:	d1f2      	bne.n	802318c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80231a6:	4618      	mov	r0, r3
 80231a8:	685b      	ldr	r3, [r3, #4]
 80231aa:	e7f9      	b.n	80231a0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080231ac <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80231ac:	f7ff bfd4 	b.w	8023158 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080231b0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80231b0:	f7ff bfe5 	b.w	802317e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080231b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80231b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231b8:	461e      	mov	r6, r3
 80231ba:	f103 0804 	add.w	r8, r3, #4
 80231be:	2300      	movs	r3, #0
 80231c0:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80231c4:	460c      	mov	r4, r1
 80231c6:	604a      	str	r2, [r1, #4]
 80231c8:	700b      	strb	r3, [r1, #0]
 80231ca:	b300      	cbz	r0, 802320e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80231cc:	4296      	cmp	r6, r2
 80231ce:	6091      	str	r1, [r2, #8]
 80231d0:	d118      	bne.n	8023204 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80231d2:	6071      	str	r1, [r6, #4]
 80231d4:	60f4      	str	r4, [r6, #12]
 80231d6:	2701      	movs	r7, #1
 80231d8:	f04f 0900 	mov.w	r9, #0
 80231dc:	6873      	ldr	r3, [r6, #4]
 80231de:	42a3      	cmp	r3, r4
 80231e0:	d03f      	beq.n	8023262 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80231e2:	6860      	ldr	r0, [r4, #4]
 80231e4:	7802      	ldrb	r2, [r0, #0]
 80231e6:	2a00      	cmp	r2, #0
 80231e8:	d13b      	bne.n	8023262 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80231ea:	6845      	ldr	r5, [r0, #4]
 80231ec:	68ab      	ldr	r3, [r5, #8]
 80231ee:	4298      	cmp	r0, r3
 80231f0:	d123      	bne.n	802323a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80231f2:	68eb      	ldr	r3, [r5, #12]
 80231f4:	b183      	cbz	r3, 8023218 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80231f6:	781a      	ldrb	r2, [r3, #0]
 80231f8:	b972      	cbnz	r2, 8023218 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80231fa:	7007      	strb	r7, [r0, #0]
 80231fc:	701f      	strb	r7, [r3, #0]
 80231fe:	702a      	strb	r2, [r5, #0]
 8023200:	462c      	mov	r4, r5
 8023202:	e7eb      	b.n	80231dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8023204:	68b3      	ldr	r3, [r6, #8]
 8023206:	4293      	cmp	r3, r2
 8023208:	d1e5      	bne.n	80231d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802320a:	60b1      	str	r1, [r6, #8]
 802320c:	e7e3      	b.n	80231d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802320e:	60d1      	str	r1, [r2, #12]
 8023210:	68f3      	ldr	r3, [r6, #12]
 8023212:	4293      	cmp	r3, r2
 8023214:	d1df      	bne.n	80231d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8023216:	e7dd      	b.n	80231d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8023218:	68c3      	ldr	r3, [r0, #12]
 802321a:	42a3      	cmp	r3, r4
 802321c:	d103      	bne.n	8023226 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 802321e:	4641      	mov	r1, r8
 8023220:	f7ff ff70 	bl	8023104 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8023224:	4604      	mov	r4, r0
 8023226:	6863      	ldr	r3, [r4, #4]
 8023228:	4641      	mov	r1, r8
 802322a:	701f      	strb	r7, [r3, #0]
 802322c:	4628      	mov	r0, r5
 802322e:	f885 9000 	strb.w	r9, [r5]
 8023232:	f7ff ff7c 	bl	802312e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8023236:	4625      	mov	r5, r4
 8023238:	e7e2      	b.n	8023200 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 802323a:	b113      	cbz	r3, 8023242 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 802323c:	781a      	ldrb	r2, [r3, #0]
 802323e:	2a00      	cmp	r2, #0
 8023240:	d0db      	beq.n	80231fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8023242:	6883      	ldr	r3, [r0, #8]
 8023244:	42a3      	cmp	r3, r4
 8023246:	d103      	bne.n	8023250 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8023248:	4641      	mov	r1, r8
 802324a:	f7ff ff70 	bl	802312e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 802324e:	4604      	mov	r4, r0
 8023250:	6863      	ldr	r3, [r4, #4]
 8023252:	4641      	mov	r1, r8
 8023254:	701f      	strb	r7, [r3, #0]
 8023256:	4628      	mov	r0, r5
 8023258:	f885 9000 	strb.w	r9, [r5]
 802325c:	f7ff ff52 	bl	8023104 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8023260:	e7e9      	b.n	8023236 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8023262:	2201      	movs	r2, #1
 8023264:	701a      	strb	r2, [r3, #0]
 8023266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802326a <_ZSt17__throw_bad_allocv>:
 802326a:	b508      	push	{r3, lr}
 802326c:	f000 f8e4 	bl	8023438 <abort>

08023270 <_ZSt20__throw_length_errorPKc>:
 8023270:	b508      	push	{r3, lr}
 8023272:	f000 f8e1 	bl	8023438 <abort>

08023276 <_ZSt25__throw_bad_function_callv>:
 8023276:	b508      	push	{r3, lr}
 8023278:	f000 f8de 	bl	8023438 <abort>

0802327c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 802327c:	290d      	cmp	r1, #13
 802327e:	b570      	push	{r4, r5, r6, lr}
 8023280:	4602      	mov	r2, r0
 8023282:	d822      	bhi.n	80232ca <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4e>
 8023284:	2900      	cmp	r1, #0
 8023286:	d03c      	beq.n	8023302 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x86>
 8023288:	4b1f      	ldr	r3, [pc, #124]	; (8023308 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x8c>)
 802328a:	ed92 6a00 	vldr	s12, [r2]
 802328e:	5c58      	ldrb	r0, [r3, r1]
 8023290:	ee07 0a90 	vmov	s15, r0
 8023294:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8023298:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802329c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80232a0:	febb 7b47 	vrintm.f64	d7, d7
 80232a4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80232a8:	ed82 7a01 	vstr	s14, [r2, #4]
 80232ac:	bd70      	pop	{r4, r5, r6, pc}
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	dd0e      	ble.n	80232d0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 80232b2:	4618      	mov	r0, r3
 80232b4:	1043      	asrs	r3, r0, #1
 80232b6:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80232ba:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 80232be:	428e      	cmp	r6, r1
 80232c0:	d2f5      	bcs.n	80232ae <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 80232c2:	1ac3      	subs	r3, r0, r3
 80232c4:	1d2c      	adds	r4, r5, #4
 80232c6:	3b01      	subs	r3, #1
 80232c8:	e7f1      	b.n	80232ae <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 80232ca:	4c10      	ldr	r4, [pc, #64]	; (802330c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x90>)
 80232cc:	20f9      	movs	r0, #249	; 0xf9
 80232ce:	e7f1      	b.n	80232b4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 80232d0:	4b0f      	ldr	r3, [pc, #60]	; (8023310 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x94>)
 80232d2:	6820      	ldr	r0, [r4, #0]
 80232d4:	429c      	cmp	r4, r3
 80232d6:	d011      	beq.n	80232fc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>
 80232d8:	ed92 7a00 	vldr	s14, [r2]
 80232dc:	ee07 0a90 	vmov	s15, r0
 80232e0:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
 80232e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80232e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80232ec:	febb 7b47 	vrintm.f64	d7, d7
 80232f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80232f4:	ee17 3a90 	vmov	r3, s15
 80232f8:	6053      	str	r3, [r2, #4]
 80232fa:	e7d7      	b.n	80232ac <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 80232fc:	f04f 33ff 	mov.w	r3, #4294967295
 8023300:	e7fa      	b.n	80232f8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>
 8023302:	2001      	movs	r0, #1
 8023304:	e7d2      	b.n	80232ac <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x30>
 8023306:	bf00      	nop
 8023308:	08023f3c 	.word	0x08023f3c
 802330c:	08023b50 	.word	0x08023b50
 8023310:	08023f34 	.word	0x08023f34

08023314 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8023314:	b510      	push	{r4, lr}
 8023316:	4604      	mov	r4, r0
 8023318:	4608      	mov	r0, r1
 802331a:	9902      	ldr	r1, [sp, #8]
 802331c:	440b      	add	r3, r1
 802331e:	6841      	ldr	r1, [r0, #4]
 8023320:	428b      	cmp	r3, r1
 8023322:	d936      	bls.n	8023392 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x7e>
 8023324:	2900      	cmp	r1, #0
 8023326:	bf14      	ite	ne
 8023328:	2100      	movne	r1, #0
 802332a:	210b      	moveq	r1, #11
 802332c:	428b      	cmp	r3, r1
 802332e:	bf38      	it	cc
 8023330:	460b      	movcc	r3, r1
 8023332:	ee06 3a90 	vmov	s13, r3
 8023336:	ed90 7a00 	vldr	s14, [r0]
 802333a:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 802333e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8023342:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8023346:	ee05 2a90 	vmov	s11, r2
 802334a:	eeb8 5b65 	vcvt.f64.u32	d5, s11
 802334e:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8023352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023356:	d814      	bhi.n	8023382 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6e>
 8023358:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802335c:	febb 6b46 	vrintm.f64	d6, d6
 8023360:	ee36 6b07 	vadd.f64	d6, d6, d7
 8023364:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 8023368:	0052      	lsls	r2, r2, #1
 802336a:	ee17 1a90 	vmov	r1, s15
 802336e:	4291      	cmp	r1, r2
 8023370:	bf38      	it	cc
 8023372:	4611      	movcc	r1, r2
 8023374:	f7ff ff82 	bl	802327c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8023378:	2301      	movs	r3, #1
 802337a:	7023      	strb	r3, [r4, #0]
 802337c:	6060      	str	r0, [r4, #4]
 802337e:	4620      	mov	r0, r4
 8023380:	bd10      	pop	{r4, pc}
 8023382:	ee27 7b05 	vmul.f64	d7, d7, d5
 8023386:	febb 7b47 	vrintm.f64	d7, d7
 802338a:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 802338e:	ed80 7a01 	vstr	s14, [r0, #4]
 8023392:	2300      	movs	r3, #0
 8023394:	e9c4 3300 	strd	r3, r3, [r4]
 8023398:	e7f1      	b.n	802337e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x6a>
	...

0802339c <_ZSt15get_new_handlerv>:
 802339c:	4b02      	ldr	r3, [pc, #8]	; (80233a8 <_ZSt15get_new_handlerv+0xc>)
 802339e:	6818      	ldr	r0, [r3, #0]
 80233a0:	f3bf 8f5b 	dmb	ish
 80233a4:	4770      	bx	lr
 80233a6:	bf00      	nop
 80233a8:	240018e0 	.word	0x240018e0

080233ac <round>:
 80233ac:	ee10 1a90 	vmov	r1, s1
 80233b0:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80233b4:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80233b8:	2a13      	cmp	r2, #19
 80233ba:	b510      	push	{r4, lr}
 80233bc:	ee10 3a10 	vmov	r3, s0
 80233c0:	dc19      	bgt.n	80233f6 <round+0x4a>
 80233c2:	2a00      	cmp	r2, #0
 80233c4:	da09      	bge.n	80233da <round+0x2e>
 80233c6:	3201      	adds	r2, #1
 80233c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80233cc:	d103      	bne.n	80233d6 <round+0x2a>
 80233ce:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80233d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80233d6:	2000      	movs	r0, #0
 80233d8:	e026      	b.n	8023428 <round+0x7c>
 80233da:	4816      	ldr	r0, [pc, #88]	; (8023434 <round+0x88>)
 80233dc:	4110      	asrs	r0, r2
 80233de:	ea01 0400 	and.w	r4, r1, r0
 80233e2:	4323      	orrs	r3, r4
 80233e4:	d00e      	beq.n	8023404 <round+0x58>
 80233e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80233ea:	fa43 f202 	asr.w	r2, r3, r2
 80233ee:	4411      	add	r1, r2
 80233f0:	ea21 0100 	bic.w	r1, r1, r0
 80233f4:	e7ef      	b.n	80233d6 <round+0x2a>
 80233f6:	2a33      	cmp	r2, #51	; 0x33
 80233f8:	dd05      	ble.n	8023406 <round+0x5a>
 80233fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80233fe:	d101      	bne.n	8023404 <round+0x58>
 8023400:	ee30 0b00 	vadd.f64	d0, d0, d0
 8023404:	bd10      	pop	{r4, pc}
 8023406:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 802340a:	f04f 30ff 	mov.w	r0, #4294967295
 802340e:	40e0      	lsrs	r0, r4
 8023410:	4203      	tst	r3, r0
 8023412:	d0f7      	beq.n	8023404 <round+0x58>
 8023414:	2401      	movs	r4, #1
 8023416:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 802341a:	fa04 f202 	lsl.w	r2, r4, r2
 802341e:	189b      	adds	r3, r3, r2
 8023420:	bf28      	it	cs
 8023422:	1909      	addcs	r1, r1, r4
 8023424:	ea23 0000 	bic.w	r0, r3, r0
 8023428:	460b      	mov	r3, r1
 802342a:	4602      	mov	r2, r0
 802342c:	ec43 2b10 	vmov	d0, r2, r3
 8023430:	e7e8      	b.n	8023404 <round+0x58>
 8023432:	bf00      	nop
 8023434:	000fffff 	.word	0x000fffff

08023438 <abort>:
 8023438:	b508      	push	{r3, lr}
 802343a:	2006      	movs	r0, #6
 802343c:	f000 f980 	bl	8023740 <raise>
 8023440:	2001      	movs	r0, #1
 8023442:	f7ea f921 	bl	800d688 <_exit>
	...

08023448 <__libc_init_array>:
 8023448:	b570      	push	{r4, r5, r6, lr}
 802344a:	4d0d      	ldr	r5, [pc, #52]	; (8023480 <__libc_init_array+0x38>)
 802344c:	4c0d      	ldr	r4, [pc, #52]	; (8023484 <__libc_init_array+0x3c>)
 802344e:	1b64      	subs	r4, r4, r5
 8023450:	10a4      	asrs	r4, r4, #2
 8023452:	2600      	movs	r6, #0
 8023454:	42a6      	cmp	r6, r4
 8023456:	d109      	bne.n	802346c <__libc_init_array+0x24>
 8023458:	4d0b      	ldr	r5, [pc, #44]	; (8023488 <__libc_init_array+0x40>)
 802345a:	4c0c      	ldr	r4, [pc, #48]	; (802348c <__libc_init_array+0x44>)
 802345c:	f000 f99a 	bl	8023794 <_init>
 8023460:	1b64      	subs	r4, r4, r5
 8023462:	10a4      	asrs	r4, r4, #2
 8023464:	2600      	movs	r6, #0
 8023466:	42a6      	cmp	r6, r4
 8023468:	d105      	bne.n	8023476 <__libc_init_array+0x2e>
 802346a:	bd70      	pop	{r4, r5, r6, pc}
 802346c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023470:	4798      	blx	r3
 8023472:	3601      	adds	r6, #1
 8023474:	e7ee      	b.n	8023454 <__libc_init_array+0xc>
 8023476:	f855 3b04 	ldr.w	r3, [r5], #4
 802347a:	4798      	blx	r3
 802347c:	3601      	adds	r6, #1
 802347e:	e7f2      	b.n	8023466 <__libc_init_array+0x1e>
 8023480:	08023fac 	.word	0x08023fac
 8023484:	08023fac 	.word	0x08023fac
 8023488:	08023fac 	.word	0x08023fac
 802348c:	08023fe0 	.word	0x08023fe0

08023490 <malloc>:
 8023490:	4b02      	ldr	r3, [pc, #8]	; (802349c <malloc+0xc>)
 8023492:	4601      	mov	r1, r0
 8023494:	6818      	ldr	r0, [r3, #0]
 8023496:	f000 b8a7 	b.w	80235e8 <_malloc_r>
 802349a:	bf00      	nop
 802349c:	24000068 	.word	0x24000068

080234a0 <free>:
 80234a0:	4b02      	ldr	r3, [pc, #8]	; (80234ac <free+0xc>)
 80234a2:	4601      	mov	r1, r0
 80234a4:	6818      	ldr	r0, [r3, #0]
 80234a6:	f000 b833 	b.w	8023510 <_free_r>
 80234aa:	bf00      	nop
 80234ac:	24000068 	.word	0x24000068

080234b0 <memcpy>:
 80234b0:	440a      	add	r2, r1
 80234b2:	4291      	cmp	r1, r2
 80234b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80234b8:	d100      	bne.n	80234bc <memcpy+0xc>
 80234ba:	4770      	bx	lr
 80234bc:	b510      	push	{r4, lr}
 80234be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80234c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80234c6:	4291      	cmp	r1, r2
 80234c8:	d1f9      	bne.n	80234be <memcpy+0xe>
 80234ca:	bd10      	pop	{r4, pc}

080234cc <memmove>:
 80234cc:	4288      	cmp	r0, r1
 80234ce:	b510      	push	{r4, lr}
 80234d0:	eb01 0402 	add.w	r4, r1, r2
 80234d4:	d902      	bls.n	80234dc <memmove+0x10>
 80234d6:	4284      	cmp	r4, r0
 80234d8:	4623      	mov	r3, r4
 80234da:	d807      	bhi.n	80234ec <memmove+0x20>
 80234dc:	1e43      	subs	r3, r0, #1
 80234de:	42a1      	cmp	r1, r4
 80234e0:	d008      	beq.n	80234f4 <memmove+0x28>
 80234e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80234ea:	e7f8      	b.n	80234de <memmove+0x12>
 80234ec:	4402      	add	r2, r0
 80234ee:	4601      	mov	r1, r0
 80234f0:	428a      	cmp	r2, r1
 80234f2:	d100      	bne.n	80234f6 <memmove+0x2a>
 80234f4:	bd10      	pop	{r4, pc}
 80234f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80234fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80234fe:	e7f7      	b.n	80234f0 <memmove+0x24>

08023500 <memset>:
 8023500:	4402      	add	r2, r0
 8023502:	4603      	mov	r3, r0
 8023504:	4293      	cmp	r3, r2
 8023506:	d100      	bne.n	802350a <memset+0xa>
 8023508:	4770      	bx	lr
 802350a:	f803 1b01 	strb.w	r1, [r3], #1
 802350e:	e7f9      	b.n	8023504 <memset+0x4>

08023510 <_free_r>:
 8023510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023512:	2900      	cmp	r1, #0
 8023514:	d044      	beq.n	80235a0 <_free_r+0x90>
 8023516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802351a:	9001      	str	r0, [sp, #4]
 802351c:	2b00      	cmp	r3, #0
 802351e:	f1a1 0404 	sub.w	r4, r1, #4
 8023522:	bfb8      	it	lt
 8023524:	18e4      	addlt	r4, r4, r3
 8023526:	f000 f929 	bl	802377c <__malloc_lock>
 802352a:	4a1e      	ldr	r2, [pc, #120]	; (80235a4 <_free_r+0x94>)
 802352c:	9801      	ldr	r0, [sp, #4]
 802352e:	6813      	ldr	r3, [r2, #0]
 8023530:	b933      	cbnz	r3, 8023540 <_free_r+0x30>
 8023532:	6063      	str	r3, [r4, #4]
 8023534:	6014      	str	r4, [r2, #0]
 8023536:	b003      	add	sp, #12
 8023538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802353c:	f000 b924 	b.w	8023788 <__malloc_unlock>
 8023540:	42a3      	cmp	r3, r4
 8023542:	d908      	bls.n	8023556 <_free_r+0x46>
 8023544:	6825      	ldr	r5, [r4, #0]
 8023546:	1961      	adds	r1, r4, r5
 8023548:	428b      	cmp	r3, r1
 802354a:	bf01      	itttt	eq
 802354c:	6819      	ldreq	r1, [r3, #0]
 802354e:	685b      	ldreq	r3, [r3, #4]
 8023550:	1949      	addeq	r1, r1, r5
 8023552:	6021      	streq	r1, [r4, #0]
 8023554:	e7ed      	b.n	8023532 <_free_r+0x22>
 8023556:	461a      	mov	r2, r3
 8023558:	685b      	ldr	r3, [r3, #4]
 802355a:	b10b      	cbz	r3, 8023560 <_free_r+0x50>
 802355c:	42a3      	cmp	r3, r4
 802355e:	d9fa      	bls.n	8023556 <_free_r+0x46>
 8023560:	6811      	ldr	r1, [r2, #0]
 8023562:	1855      	adds	r5, r2, r1
 8023564:	42a5      	cmp	r5, r4
 8023566:	d10b      	bne.n	8023580 <_free_r+0x70>
 8023568:	6824      	ldr	r4, [r4, #0]
 802356a:	4421      	add	r1, r4
 802356c:	1854      	adds	r4, r2, r1
 802356e:	42a3      	cmp	r3, r4
 8023570:	6011      	str	r1, [r2, #0]
 8023572:	d1e0      	bne.n	8023536 <_free_r+0x26>
 8023574:	681c      	ldr	r4, [r3, #0]
 8023576:	685b      	ldr	r3, [r3, #4]
 8023578:	6053      	str	r3, [r2, #4]
 802357a:	4421      	add	r1, r4
 802357c:	6011      	str	r1, [r2, #0]
 802357e:	e7da      	b.n	8023536 <_free_r+0x26>
 8023580:	d902      	bls.n	8023588 <_free_r+0x78>
 8023582:	230c      	movs	r3, #12
 8023584:	6003      	str	r3, [r0, #0]
 8023586:	e7d6      	b.n	8023536 <_free_r+0x26>
 8023588:	6825      	ldr	r5, [r4, #0]
 802358a:	1961      	adds	r1, r4, r5
 802358c:	428b      	cmp	r3, r1
 802358e:	bf04      	itt	eq
 8023590:	6819      	ldreq	r1, [r3, #0]
 8023592:	685b      	ldreq	r3, [r3, #4]
 8023594:	6063      	str	r3, [r4, #4]
 8023596:	bf04      	itt	eq
 8023598:	1949      	addeq	r1, r1, r5
 802359a:	6021      	streq	r1, [r4, #0]
 802359c:	6054      	str	r4, [r2, #4]
 802359e:	e7ca      	b.n	8023536 <_free_r+0x26>
 80235a0:	b003      	add	sp, #12
 80235a2:	bd30      	pop	{r4, r5, pc}
 80235a4:	240018e4 	.word	0x240018e4

080235a8 <sbrk_aligned>:
 80235a8:	b570      	push	{r4, r5, r6, lr}
 80235aa:	4e0e      	ldr	r6, [pc, #56]	; (80235e4 <sbrk_aligned+0x3c>)
 80235ac:	460c      	mov	r4, r1
 80235ae:	6831      	ldr	r1, [r6, #0]
 80235b0:	4605      	mov	r5, r0
 80235b2:	b911      	cbnz	r1, 80235ba <sbrk_aligned+0x12>
 80235b4:	f000 f88c 	bl	80236d0 <_sbrk_r>
 80235b8:	6030      	str	r0, [r6, #0]
 80235ba:	4621      	mov	r1, r4
 80235bc:	4628      	mov	r0, r5
 80235be:	f000 f887 	bl	80236d0 <_sbrk_r>
 80235c2:	1c43      	adds	r3, r0, #1
 80235c4:	d00a      	beq.n	80235dc <sbrk_aligned+0x34>
 80235c6:	1cc4      	adds	r4, r0, #3
 80235c8:	f024 0403 	bic.w	r4, r4, #3
 80235cc:	42a0      	cmp	r0, r4
 80235ce:	d007      	beq.n	80235e0 <sbrk_aligned+0x38>
 80235d0:	1a21      	subs	r1, r4, r0
 80235d2:	4628      	mov	r0, r5
 80235d4:	f000 f87c 	bl	80236d0 <_sbrk_r>
 80235d8:	3001      	adds	r0, #1
 80235da:	d101      	bne.n	80235e0 <sbrk_aligned+0x38>
 80235dc:	f04f 34ff 	mov.w	r4, #4294967295
 80235e0:	4620      	mov	r0, r4
 80235e2:	bd70      	pop	{r4, r5, r6, pc}
 80235e4:	240018e8 	.word	0x240018e8

080235e8 <_malloc_r>:
 80235e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235ec:	1ccd      	adds	r5, r1, #3
 80235ee:	f025 0503 	bic.w	r5, r5, #3
 80235f2:	3508      	adds	r5, #8
 80235f4:	2d0c      	cmp	r5, #12
 80235f6:	bf38      	it	cc
 80235f8:	250c      	movcc	r5, #12
 80235fa:	2d00      	cmp	r5, #0
 80235fc:	4607      	mov	r7, r0
 80235fe:	db01      	blt.n	8023604 <_malloc_r+0x1c>
 8023600:	42a9      	cmp	r1, r5
 8023602:	d905      	bls.n	8023610 <_malloc_r+0x28>
 8023604:	230c      	movs	r3, #12
 8023606:	603b      	str	r3, [r7, #0]
 8023608:	2600      	movs	r6, #0
 802360a:	4630      	mov	r0, r6
 802360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023610:	4e2e      	ldr	r6, [pc, #184]	; (80236cc <_malloc_r+0xe4>)
 8023612:	f000 f8b3 	bl	802377c <__malloc_lock>
 8023616:	6833      	ldr	r3, [r6, #0]
 8023618:	461c      	mov	r4, r3
 802361a:	bb34      	cbnz	r4, 802366a <_malloc_r+0x82>
 802361c:	4629      	mov	r1, r5
 802361e:	4638      	mov	r0, r7
 8023620:	f7ff ffc2 	bl	80235a8 <sbrk_aligned>
 8023624:	1c43      	adds	r3, r0, #1
 8023626:	4604      	mov	r4, r0
 8023628:	d14d      	bne.n	80236c6 <_malloc_r+0xde>
 802362a:	6834      	ldr	r4, [r6, #0]
 802362c:	4626      	mov	r6, r4
 802362e:	2e00      	cmp	r6, #0
 8023630:	d140      	bne.n	80236b4 <_malloc_r+0xcc>
 8023632:	6823      	ldr	r3, [r4, #0]
 8023634:	4631      	mov	r1, r6
 8023636:	4638      	mov	r0, r7
 8023638:	eb04 0803 	add.w	r8, r4, r3
 802363c:	f000 f848 	bl	80236d0 <_sbrk_r>
 8023640:	4580      	cmp	r8, r0
 8023642:	d13a      	bne.n	80236ba <_malloc_r+0xd2>
 8023644:	6821      	ldr	r1, [r4, #0]
 8023646:	3503      	adds	r5, #3
 8023648:	1a6d      	subs	r5, r5, r1
 802364a:	f025 0503 	bic.w	r5, r5, #3
 802364e:	3508      	adds	r5, #8
 8023650:	2d0c      	cmp	r5, #12
 8023652:	bf38      	it	cc
 8023654:	250c      	movcc	r5, #12
 8023656:	4629      	mov	r1, r5
 8023658:	4638      	mov	r0, r7
 802365a:	f7ff ffa5 	bl	80235a8 <sbrk_aligned>
 802365e:	3001      	adds	r0, #1
 8023660:	d02b      	beq.n	80236ba <_malloc_r+0xd2>
 8023662:	6823      	ldr	r3, [r4, #0]
 8023664:	442b      	add	r3, r5
 8023666:	6023      	str	r3, [r4, #0]
 8023668:	e00e      	b.n	8023688 <_malloc_r+0xa0>
 802366a:	6822      	ldr	r2, [r4, #0]
 802366c:	1b52      	subs	r2, r2, r5
 802366e:	d41e      	bmi.n	80236ae <_malloc_r+0xc6>
 8023670:	2a0b      	cmp	r2, #11
 8023672:	d916      	bls.n	80236a2 <_malloc_r+0xba>
 8023674:	1961      	adds	r1, r4, r5
 8023676:	42a3      	cmp	r3, r4
 8023678:	6025      	str	r5, [r4, #0]
 802367a:	bf18      	it	ne
 802367c:	6059      	strne	r1, [r3, #4]
 802367e:	6863      	ldr	r3, [r4, #4]
 8023680:	bf08      	it	eq
 8023682:	6031      	streq	r1, [r6, #0]
 8023684:	5162      	str	r2, [r4, r5]
 8023686:	604b      	str	r3, [r1, #4]
 8023688:	4638      	mov	r0, r7
 802368a:	f104 060b 	add.w	r6, r4, #11
 802368e:	f000 f87b 	bl	8023788 <__malloc_unlock>
 8023692:	f026 0607 	bic.w	r6, r6, #7
 8023696:	1d23      	adds	r3, r4, #4
 8023698:	1af2      	subs	r2, r6, r3
 802369a:	d0b6      	beq.n	802360a <_malloc_r+0x22>
 802369c:	1b9b      	subs	r3, r3, r6
 802369e:	50a3      	str	r3, [r4, r2]
 80236a0:	e7b3      	b.n	802360a <_malloc_r+0x22>
 80236a2:	6862      	ldr	r2, [r4, #4]
 80236a4:	42a3      	cmp	r3, r4
 80236a6:	bf0c      	ite	eq
 80236a8:	6032      	streq	r2, [r6, #0]
 80236aa:	605a      	strne	r2, [r3, #4]
 80236ac:	e7ec      	b.n	8023688 <_malloc_r+0xa0>
 80236ae:	4623      	mov	r3, r4
 80236b0:	6864      	ldr	r4, [r4, #4]
 80236b2:	e7b2      	b.n	802361a <_malloc_r+0x32>
 80236b4:	4634      	mov	r4, r6
 80236b6:	6876      	ldr	r6, [r6, #4]
 80236b8:	e7b9      	b.n	802362e <_malloc_r+0x46>
 80236ba:	230c      	movs	r3, #12
 80236bc:	603b      	str	r3, [r7, #0]
 80236be:	4638      	mov	r0, r7
 80236c0:	f000 f862 	bl	8023788 <__malloc_unlock>
 80236c4:	e7a1      	b.n	802360a <_malloc_r+0x22>
 80236c6:	6025      	str	r5, [r4, #0]
 80236c8:	e7de      	b.n	8023688 <_malloc_r+0xa0>
 80236ca:	bf00      	nop
 80236cc:	240018e4 	.word	0x240018e4

080236d0 <_sbrk_r>:
 80236d0:	b538      	push	{r3, r4, r5, lr}
 80236d2:	4d06      	ldr	r5, [pc, #24]	; (80236ec <_sbrk_r+0x1c>)
 80236d4:	2300      	movs	r3, #0
 80236d6:	4604      	mov	r4, r0
 80236d8:	4608      	mov	r0, r1
 80236da:	602b      	str	r3, [r5, #0]
 80236dc:	f7e9 ffde 	bl	800d69c <_sbrk>
 80236e0:	1c43      	adds	r3, r0, #1
 80236e2:	d102      	bne.n	80236ea <_sbrk_r+0x1a>
 80236e4:	682b      	ldr	r3, [r5, #0]
 80236e6:	b103      	cbz	r3, 80236ea <_sbrk_r+0x1a>
 80236e8:	6023      	str	r3, [r4, #0]
 80236ea:	bd38      	pop	{r3, r4, r5, pc}
 80236ec:	240018ec 	.word	0x240018ec

080236f0 <_raise_r>:
 80236f0:	291f      	cmp	r1, #31
 80236f2:	b538      	push	{r3, r4, r5, lr}
 80236f4:	4604      	mov	r4, r0
 80236f6:	460d      	mov	r5, r1
 80236f8:	d904      	bls.n	8023704 <_raise_r+0x14>
 80236fa:	2316      	movs	r3, #22
 80236fc:	6003      	str	r3, [r0, #0]
 80236fe:	f04f 30ff 	mov.w	r0, #4294967295
 8023702:	bd38      	pop	{r3, r4, r5, pc}
 8023704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023706:	b112      	cbz	r2, 802370e <_raise_r+0x1e>
 8023708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802370c:	b94b      	cbnz	r3, 8023722 <_raise_r+0x32>
 802370e:	4620      	mov	r0, r4
 8023710:	f000 f830 	bl	8023774 <_getpid_r>
 8023714:	462a      	mov	r2, r5
 8023716:	4601      	mov	r1, r0
 8023718:	4620      	mov	r0, r4
 802371a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802371e:	f000 b817 	b.w	8023750 <_kill_r>
 8023722:	2b01      	cmp	r3, #1
 8023724:	d00a      	beq.n	802373c <_raise_r+0x4c>
 8023726:	1c59      	adds	r1, r3, #1
 8023728:	d103      	bne.n	8023732 <_raise_r+0x42>
 802372a:	2316      	movs	r3, #22
 802372c:	6003      	str	r3, [r0, #0]
 802372e:	2001      	movs	r0, #1
 8023730:	e7e7      	b.n	8023702 <_raise_r+0x12>
 8023732:	2400      	movs	r4, #0
 8023734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023738:	4628      	mov	r0, r5
 802373a:	4798      	blx	r3
 802373c:	2000      	movs	r0, #0
 802373e:	e7e0      	b.n	8023702 <_raise_r+0x12>

08023740 <raise>:
 8023740:	4b02      	ldr	r3, [pc, #8]	; (802374c <raise+0xc>)
 8023742:	4601      	mov	r1, r0
 8023744:	6818      	ldr	r0, [r3, #0]
 8023746:	f7ff bfd3 	b.w	80236f0 <_raise_r>
 802374a:	bf00      	nop
 802374c:	24000068 	.word	0x24000068

08023750 <_kill_r>:
 8023750:	b538      	push	{r3, r4, r5, lr}
 8023752:	4d07      	ldr	r5, [pc, #28]	; (8023770 <_kill_r+0x20>)
 8023754:	2300      	movs	r3, #0
 8023756:	4604      	mov	r4, r0
 8023758:	4608      	mov	r0, r1
 802375a:	4611      	mov	r1, r2
 802375c:	602b      	str	r3, [r5, #0]
 802375e:	f7e9 ff81 	bl	800d664 <_kill>
 8023762:	1c43      	adds	r3, r0, #1
 8023764:	d102      	bne.n	802376c <_kill_r+0x1c>
 8023766:	682b      	ldr	r3, [r5, #0]
 8023768:	b103      	cbz	r3, 802376c <_kill_r+0x1c>
 802376a:	6023      	str	r3, [r4, #0]
 802376c:	bd38      	pop	{r3, r4, r5, pc}
 802376e:	bf00      	nop
 8023770:	240018ec 	.word	0x240018ec

08023774 <_getpid_r>:
 8023774:	f7e9 bf6e 	b.w	800d654 <_getpid>

08023778 <__retarget_lock_acquire_recursive>:
 8023778:	4770      	bx	lr

0802377a <__retarget_lock_release_recursive>:
 802377a:	4770      	bx	lr

0802377c <__malloc_lock>:
 802377c:	4801      	ldr	r0, [pc, #4]	; (8023784 <__malloc_lock+0x8>)
 802377e:	f7ff bffb 	b.w	8023778 <__retarget_lock_acquire_recursive>
 8023782:	bf00      	nop
 8023784:	240018f0 	.word	0x240018f0

08023788 <__malloc_unlock>:
 8023788:	4801      	ldr	r0, [pc, #4]	; (8023790 <__malloc_unlock+0x8>)
 802378a:	f7ff bff6 	b.w	802377a <__retarget_lock_release_recursive>
 802378e:	bf00      	nop
 8023790:	240018f0 	.word	0x240018f0

08023794 <_init>:
 8023794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023796:	bf00      	nop
 8023798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802379a:	bc08      	pop	{r3}
 802379c:	469e      	mov	lr, r3
 802379e:	4770      	bx	lr

080237a0 <_fini>:
 80237a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237a2:	bf00      	nop
 80237a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237a6:	bc08      	pop	{r3}
 80237a8:	469e      	mov	lr, r3
 80237aa:	4770      	bx	lr
